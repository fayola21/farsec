HttpProducer drops authentification parameters.    Hi  I run into the following problem with Camel 2.6.0:An HTML file contain an URI lists of files to be downloaded from a web server to the local file system.The HTML file is parsed via a Java Bean Splitter. The Java Bean Splitter produces a Set of URI strings.These files should be downloaded from a web server to the local file system. The files are protected with BASIC authentification.The extraction and the splitting of the download URIs works quite well with the Java Bean Splitter.The Java Bean Splitter produces URI like: http4://download.acme.com/file_1.txt?username=foo&amp;password=baaHere's the setup:&lt;route&gt; &lt;from uri='file:///tmp/files_to_retrieve/' /&gt; &lt;method bean='prepareDownLoadUri' method='parseIndexHtml' /&gt; &lt;setHeader headerName='CamelHttpMethod'&gt; &lt;constant&gt;GET&lt;/constant&gt; &lt;/setHeader&gt; &lt;setHeader headerName='CamelHttpUri'&gt; &lt;simple&gt;${body}&lt;/simple&gt; &lt;/setHeader&gt; &lt;to uri='http4://download.acme.com/' /&gt; &lt;to uri='bean:saveFileProcessor' /&gt;&lt;/route&gt;&lt;bean id='prepareDownLoadUri' class='com.acme.PrepareDownLoadUri' /&gt;&lt;bean id='saveFileProcessor' class='com.acme.SaveFileProcessor' /&gt;The injection of the URIs from the Splitter into the HttpProducer  works quite well. I debugged into the HttpProducer and it seems  that the HttpProducer does not provide the unterlying http client (in this case Apache HttpClient 4) with the authentification settings from the URI.At first  the queryString is extracted from the Exchange-Header (if provided)HttpProducer.createMethod()  line 273String url = HttpHelper.createURL(exchange  getEndpoint());The url string contains the URI produces by the splitter including the authentification parameters: http4://download.acme.com/file_1.txt?username=foo&amp;password=baaThen the HttpProducer assembles a new URI for the requests. The new URI is assembled from parts of the string url (line 273) and other parameters from the Exchange Header: HttpProducer.createMethod()  lines 285-300 // is a query string provided in the endpoint URI or in a header (header overrules endpoint) String queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY  String.class); if (queryString == null) { queryString = getEndpoint().getHttpUri().getRawQuery(); } StringBuilder builder = new StringBuilder(uri.getScheme()).append('://').append(uri.getHost()); if (uri.getPort() != -1) { builder.append(':').append(uri.getPort()); } if (uri.getPath() != null) { builder.append(uri.getRawPath()); } if (queryString != null) { builder.append('?'); builder.append(queryString); } HttpRequestBase httpRequest = methodToUse.createMethod(builder.toString());The problem is  in the assembling of the new URI  the authentification parameters are dropped. One possible solution could be:  check for authentification parameters in the url (line 273) and extract them. build the credentials  AuthScheme and provide it to the underlying http client.thanks in advance ben   