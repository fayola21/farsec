Folder closed too early when working asynchronously    When using a MailConsumer connected with IMAP to a mailserver and routing the messages to SEDA or any other asynchronous endpoint  it can cause a com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException to happen if you are trying to process the mails/messages attachments.This is because the IMAP folder gets closed at the end of each MailConsumer.poll()I propose to add a new MailConfiguration option 'closeFolder'  which can override this behaviour.Here's an example on how to reproduce the problem. (Scala code  sorry! But it should be self-explanatory)You need a couple of mails with attachments in your mailbox to test this. ~10 mails should be enough to cause the exceptions.import javax.mail.internet.MimeMultipartimport org.apache.camel.impl.DefaultCamelContextimport org.apache.camel.scala.dsl.builder.RouteBuilderimport scala.io.Sourceobject Main {  def main(args: Array&#91;String&#93;): Unit = { val camelContext = new DefaultCamelContext val host = 'imap.gmail.com' val username = '*****@gmail.com' val password = '*****' // this will cause com.sun.mail.util.FolderClosedIOException or javax.mail.FolderClosedException val endpoint = 'imaps://'host'?password='password'&amp;username='username'&amp;folderName=INBOX&amp;unseen=false&amp;disconnect=false&amp;mapMailMessage=true&amp;connectionTimeout=60000' // with fix / new feature 'closeFolder' set to false //val endpoint = 'imaps://'host'?password='password'&amp;username='username'&amp;folderName=INBOX&amp;unseen=false&amp;disconnect=false&amp;mapMailMessage=true&amp;connectionTimeout=60000&amp;closeFolder=false' camelContext.addRoutes( new RouteBuilder { endpoint .to('seda:process') from('seda:process?concurrentConsumers=5') ==&gt; { process { ex =&gt; val att = ex.getIn.getBody.asInstanceOf[MimeMultipart].getBodyPart(1) println('Attachment Name:' + att.getFileName) println('Attachment Content:' + att.getDataHandler.getContent) println('Attachment Content:' + Source.fromInputStream(att.getDataHandler.getInputStream).mkString) Thread.sleep(2500) // simulate some work being done here with the attachment  takes time.. } } } ) camelContext.start() Thread.sleep(45 * 1000) camelContext.stop() }}   