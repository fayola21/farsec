camel-jms consumer doesn't send back a reply in all cases    In a very simple route consuming from a Camel JMS endpoint receiving InOut exchanges (i.e. JMSReplyTo header present)  the endpoint will not send back replies.This happens because Camel JMS only returns a reply if the OUT message is set. But if the route looks like: consumer =&gt; processor  and Camel doesn't find the need to 'weave in' an implicit Pipeline processor  no one will implicitly take care of mapping the IN message to an OUT message (unless the user knows about these internal aspects - but we shouldn't expect them too).As a result  these routes DON'T WORK...&lt;route&gt; &lt;from uri='timer:foo?fixedRate=true&amp;amp;period=10000' /&gt; &lt;setBody&gt;&lt;constant&gt;Hello Raul&lt;/constant&gt;&lt;/setBody&gt; &lt;to uri='log:SendingRequest?showAll=true' /&gt; &lt;inOut uri='activemq:queue:test1?requestTimeout=1000' /&gt; &lt;to uri='log:ReceivedReply?showAll=true' /&gt;&lt;/route&gt; &lt;route&gt; &lt;from uri='activemq:queue:test1' /&gt; &lt;to uri='log:ReceivedRequest?showAll=true' /&gt;&lt;/route&gt;... but just by adding an additional log endpoint to the second route (or any other thing  for that matter)  it starts to work because Camel weaves in the Pipeline processor.Other workarounds that work: explicitly wrapping the log endpoint in a &lt;pipeline&gt; DSL &lt;setBody&gt;&lt;simple&gt;${in.body}&lt;/simple&gt;&lt;/setBody&gt;Or simply introducing anything that will force Camel to insert a Pipeline processor.IMHO  there are two solutions to avoid this issue: Always weave in a Pipeline processor (adds overhead in simple routes and may cause regressions) Adapt EndpointMessageListener to pick the IN message when the exchange is out capable and expectation of a reply existsI'm happy to work on a patch for Camel 2.10.1.EDIT: Just wrapping the single endpoint in &lt;pipeline /&gt; doesn't function as a workaround.   