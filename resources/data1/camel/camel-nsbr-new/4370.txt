It's hardly possible to use all expression of the Simple language to create file names in the file component    Sometimes it can be necessary to use custom headers to create a file name.For example  I declare my file endpoint in the following manner:&lt;route id='fileReader'&gt; &lt;from uri='file://rootFolder?move=.backup&amp;amp;moveFailed=.error/${header.CustomHeader}' /&gt; &lt;to uri='file://out'/&gt;&lt;/route&gt;The header 'CustomHeader' cannot be read because of the following snippets of code in the org.apache.camel.component.file.GenericFile/** * Bind this GenericFile to an Exchange */public void bindToExchange(Exchange exchange) { exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE  this); GenericFileMessage&lt;T&gt; in = new GenericFileMessage&lt;T&gt;(this); exchange.setIn(in); populateHeaders(in);}/** * Populates the {@link GenericFileMessage} relevant headers * * @param message the message to populate with headers */public void populateHeaders(GenericFileMessage&lt;T&gt; message) { if (message != null) { message.setHeader(Exchange.FILE_NAME_ONLY  getFileNameOnly()); message.setHeader(Exchange.FILE_NAME  getFileName()); message.setHeader('CamelFileAbsolute'  isAbsolute()); message.setHeader('CamelFileAbsolutePath'  getAbsoluteFilePath()); if (isAbsolute()) { message.setHeader(Exchange.FILE_PATH  getAbsoluteFilePath()); } else { // we must normalize path according to protocol if we build our own paths String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath()); message.setHeader(Exchange.FILE_PATH  path); } message.setHeader('CamelFileRelativePath'  getRelativeFilePath()); message.setHeader(Exchange.FILE_PARENT  getParent()); if (getFileLength() &gt;= 0) { message.setHeader('CamelFileLength'  getFileLength()); } if (getLastModified() &gt; 0) { message.setHeader(Exchange.FILE_LAST_MODIFIED  new Date(getLastModified())); } }}As you can see a new 'in' message is created and not all the headers from the original message are copied to it.   