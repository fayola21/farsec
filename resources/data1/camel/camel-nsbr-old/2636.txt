IOException: Bad file descriptor and FileNotFoundException    When I try to stream BINARY (pdf) file using camel-http I get the java.io.IOException: Bad file descriptorThe pdf isn't recieved succesfully by reciever (0kb)This seems to be caused by a bug in java (on linux systems)  closing inputstream twice causes problems. It seemed to me this is exactly what is happening  see also link:http://256.com/gray/docs/misc/java_bad_file_descriptor_close_bug.shtmlI fixed this by (checking out apache camel-core and camel-http 2.2.0):In FileInputStreamCache.java:In method close() wrapped getInputStream().close() in if:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}In method reset() also:if (stream != null &amp;&amp; stream instanceof FileInputStream &amp;&amp; ((FileInputStream) stream).getChannel().isOpen()) {getInputStream().close() ;}Second I needed to fix a filenotfoundexception  the tempfile created by camel was deleted to early.I changed CachedOutputStream.java Reimplemented constructor:public CachedOutputStream(Exchange exchange) { String hold = exchange.getContext().getProperties().get(THRESHOLD); String dir = exchange.getContext().getProperties().get(TEMP_DIR); if (hold != null) { this.threshold = exchange.getContext().getTypeConverter().convertTo(Long.class  hold); } if (dir != null) { this.outputDir = exchange.getContext().getTypeConverter().convertTo(File.class  dir); } // add on completion so we can cleanup after the exchange is done such // as deleting temporary files exchange.addOnCompletion(new SynchronizationAdapter() { @Override public void onDone(Exchange exchange) { try { // close the stream and FileInputStreamCache // close(); // for (FileInputStreamCache cache : fileInputStreamCaches) // { // cache.close(); // } // cleanup temporary file if (tempFile != null) { System.err.println('####################################################'); System.err.println('DISABLED tempFile.delete:89'); System.err.println('####################################################'); // boolean deleted = tempFile.delete(); // if (!deleted) { // LOG.warn('Cannot delete temporary cache file: ' + // tempFile); // } else if (LOG.isTraceEnabled()) { // LOG.trace('Deleted temporary cache file: ' + // tempFile); // } tempFile = null; } } catch (Exception e) { LOG.warn('Error deleting temporary cache file: ' + tempFile  e); } } @Override public String toString() { return 'OnCompletion[CachedOutputStream]'; } }); }Reimplemented close():public void close() throws IOException { System.err.println('####################################################'); System.err.println('outputStream.close:119 -&gt; delete tempFile'); System.err.println('####################################################'); new Exception().printStackTrace(); currentStream.close(); boolean deleted = tempFile.delete(); if (!deleted) { LOG.warn('Cannot delete temporary cache file: ' + tempFile); } else if (LOG.isTraceEnabled()) { LOG.trace('Deleted temporary cache file: ' + tempFile); } }   