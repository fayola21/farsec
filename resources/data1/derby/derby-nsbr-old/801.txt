Allow parallel access to data files.    Derby currently serializes accesses to a data file. For example  theimplementation of RAFContainer.readPage is as follows: synchronized (this) { // 'this' is a FileContainer  i.e. a file object fileData.seek(pageOffset); // fileData is a RandomAccessFile fileData.readFully(pageData  0  pageSize); }I have experiemented with a patch where I have introduced several filedescriptors (RandomAccessFile objects) per RAFContainer. These areused for reading. The principle is that when all readers are busy  areadPage request will create a new reader. (There is a maximum numberof readers.) With this patch  throughput was improved by 50% onlinux. For more discussion on this  seehttp://www.nabble.com/Derby-I-O-issues-during-checkpointing-t473523.htmlThe challenge with the suggested approach is to make a mechanism tolimit the number of open file descpriptors. Mike Matrigali hassuggested to use the existing CacheManager infrastructure for thispurpose. For a discussion on that  see:http://www.nabble.com/new-uses-for-basic-services-cache---looking-for-advice-t756863.html   