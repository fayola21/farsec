Stop producing byte code for non-existent qualifiers    For all result set nodes that have predicate lists  Derby's compiler lays out byte code for fields to hold qualifiers  and also code to reinitialize the values in those fields on every execution. It does this even if there are no qualifiers. See PredicateList.generateQualifiers(). That method does actually check whether there are qualifiers  and it skips some of the code generation if there are none. It should be changed so that it skips all the code generation if there are no qualifiers.For an example  see the decompiled generated class for a natural join attached to DERBY-5947: https://issues.apache.org/jira/secure/attachment/12549514/natural-join-after-3a.txtThat class contains three Qualifier[][] fields: private Qualifier[][] e1; private Qualifier[][] e3; private Qualifier[][] e4;Only one of them (e4) is ever set to a non-null value. Still  the reinit() method  which is called on every execution  has code for each of the fields: protected void reinit() throws StandardException { BaseActivation.reinitializeQualifiers(e1); BaseActivation.reinitializeQualifiers(e3); BaseActivation.reinitializeQualifiers(e4); }   