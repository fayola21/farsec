id,summary,security
5,Network Server Protocol error when select fails and 'order by' is specified    Reporting for Army  filed on derby-dev list.If  when using the Network Server  one tries to execute a select statement that fails because of an SQL exception (ex. divide-by-zero)  and if an 'order by' clause is specified as part of the select  the server will throw a distributed protocol exception  instead of the appropriate error.Repro (using the 'ij' utility)ij&gt; connect 'jdbc:derby:net://localhost:1527/myDB:user=u;password=p;';ij&gt; create table t1 (i int  j int);0 rows inserted/updated/deletedij&gt; insert into t1 values (2 0);1 row inserted/updated/deleted&#8211; Without an 'order by' it's fine...&#8211; (22012 ==&gt; 'Attempt to divide by zero.'  which is fine)ij&gt; select {fn mod(i j)} from t1;1-----------ERROR 22012: DB2 SQL error: SQLCODE: -1  SQLSTATE: 22012  SQLERRMC: 22012&#8211; With an order by  it dies...ij&gt; select {fn mod(i j)} from t1 order by 1;ERROR 58009: Execution failed due to a distribution protocol error that caused deallocation of the conversation. A DRDA Data Stream Syntax Error was detected. Reason: 0x13NOTES:The problem is in the DRDAConnThread.java file  'processCommands(...)' method  in the 'case CodePoint.OPNQRY' block of code. In the case of an SQL exception  there's a call to 'writer.clearBuffer()' that is used to ensure that only an OPNQFLRM is sent back to the client  not the OPNQRYRM and/or QRYDSC that may have been written to buffer before the OPNQFLRM. That call to 'clearBuffer' has to be replaced with something smarter  so that instead of doing a full clear (which causes the problem shown above)  it only backs out the buffer writes that it has made since beginning the 'case CodePoint.OPNQRY' block...   ,0
19,NPE when trying to create a database at a directory that is not allowed    Opening this bug on behalf of Daniel Debrunner--------------------------------------------------------------This bug occurs in embedded Derby and Derby Network Server. In Derby Network Server  it might be best for a security exception to be thrown when trying to create a database at a disallowed directory (SQLSTATE 38000).This bug can be reproduced in IJ like so:(if your 'D' drive is an inaccessible disk. e.g. your CD-ROM)ij&gt; connect 'jdbc:derby:d:/wombat2;create=true';ERROR XJ041: Failed to create database 'd:/wombat2'   ,0
38,Make LOCKS as non-reserved keyword in Derby since it is not a reserved keyword in the SQL standards    Since LOCKS is not a reserved keyword in SQL standards  Derby should not make LOCKS as reserved keyword.   ,0
42,When using encryption  do not store the length information about the external key in service.properties    When using derby database encryption there is a provision to provide the key to be used for encryption as an external key. In this case the key is not stored in the database for added security. There should not be any useful information about the external key that was used for encrypting the database in the service.properties.Right now  key length is stored in service.properties. This should not be stored in service.properties.   ,1
44,Support for like ? Escape ?    Request to have support forSelect * from foo where like ? escape ?This functionality works with other JDBC/RDBMS combos including DB2/DB2 universal driver.This functionality is beneficial for tools as well as appservers for generating the SQL from EJBQL   ,0
45,Request support for CAST() in Like clause    Request support for CAST() in like clause for example:select t0.ID  t0.QUANTITY  t0.NAME  t0.PRICE  t0.PNUM from PRODUCTEJB_TABLE t0 where t0.NAME like CAST (? AS VARCHAR(32672))This is supported by DB2 and will ease migration between DB2 and Derby   ,0
85,NPE when creating a trigger on a table and default schema doesn't exist.    BACKGROUND:When connecting to a Derby db with a user id and password  the default schema is USER. For example  if I connect with:ij&gt; connect 'jdbc:derby:myDB;user=someUser;password=somePwd';then the default schema is 'SOMEUSER'.PROBLEM:It turns out that if a table t1 exists in a non-default schema and the default schema (in this case  'SOMEUSER') doesn't exist yet (because no objects have been created in that schema)  then attempts to create a trigger on t1 using its qualified name will lead to a null pointer exception in the Derby engine.REPRO:In ij:&#8211; Create database with default schema 'SOMEUSER'.ij&gt; connect 'jdbc:derby:myDB;create=true;user=someUser;password=somePwd';&#8211; Create table t1 in a non-default schema; in this case  call it 'ITKO'.ij&gt; create table itko.t1 (i int);0 rows inserted/updated/deleted&#8211; Now schema ITKO exists  and T1 exists in schema ITKO  but default schema SOMEUSER does NOT exist  because we haven't created any objects in that schema yet.&#8211; So now we try to create a trigger in the ITKO (i.e. the non-default) schema...ij&gt; create trigger trig1 after update on itko.t1 for each row mode db2sql select * from sys.systables;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.A look at the derby.log file shows the stack trace given below. In a word  it looks like the 'compilation schema' field of SYS.SYSTRIGGERS isn't getting set  and so it ends up being null. That causes the NPE in subsequent processing...java.lang.NullPointerException at org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeSYSSTATEMENTSrow(SYSSTATEMENTSRowFactory.java:200) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(DataDictionaryImpl.java:2890) at org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.createSPS(CreateTriggerConstantAction.java:354) at org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(CreateTriggerConstantAction.java:258) at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:56) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:366) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1100) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:509) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:467) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:299) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:433) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:310) at org.apache.derby.impl.tools.ij.Main.go(Main.java:210) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:176) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56) at org.apache.derby.tools.ij.main(ij.java:60)   ,0
88,RunSuite summary rounds incorrectly    Example output from RunSuite in the report file203 Tests Run100% Pass (202 tests passed) 0% Fail (1 tests failed)A single failure should not lead to 0% fail and 100% pass.Should round down on pass percentage and round up on fail percentage.   ,0
90,dblook displays message keys instead of their associated text    Using Derby version 10.0.2.1 - (106978)  when I execute java org.apache.derby.tools.dblookinstead of getting the usage message  I get CSLOOK_UsageSimilarly  when using dblook to generate database schema  the output text contains keys such as the one above  instead of their associated text. e.g.&#8211; CSLOOK_Timestamp  &lt;2004-12-04 19:22:57.038&gt;&#8211; CSLOOK_DBName  &lt;sample&gt;&#8211; CSLOOK_DBUrl  &lt;jdbc:derby:sample&gt;&#8211; appendLogs: false&#8211; ----------------------------------------------&#8211; CSLOOK_SchemasHeader&#8211; ----------------------------------------------CREATE SCHEMA 'SAMP';&#8211; ----------------------------------------------&#8211; CSLOOK_TablesHeader&#8211; ----------------------------------------------CREATE TABLE 'SAMP'.'IN_TRAY' ('RECEIVED' TIMESTAMP  'SOURCE' CHAR(8)  'SUBJECT' CHAR(64)  'NOTE_TEXT' VARCHAR(3000));   ,0
94,Lock not being released properly  possibly related to occurence of lock escalation    In the following scenario: &lt;code snippet&gt; String sel = 'select * from t1 FOR UPDATE of i2'; PreparedStatement ps1 = conn.prepareStatement (sel); int val = 300; ps1.setMaxRows(val); ResultSet rs = ps1.executeQuery(); String ins = 'Update t1 set i2=? WHERE CURRENT OF '+rs.getCursorName() ; PreparedStatement ps2 = conn.prepareStatement(ins); ps2.setInt(1 iteration); while(rs.next()) { ps2.executeUpdate(); }; // print lock table information System.out.println('Lock Table before commit transaction'); printLockTable(conn); conn.commit();&lt;end code snippet&gt;Running the above transaction twice causes a lock timeout the second time.It seems like locks are not being released properly on the table even after the transaction commits and the connection is closed. Also  this condition seems to happen only when lock escalation to table lock occurs. By increasing lock escalation threshold to prevent lock escalation and with only row level locking  the locks are released properly.I printed out the locks information and see a U row level lock on the table   and also a table level lock as a result of lock escalation. After commit  and resultset being closed  the U row level lock is not released. Thus in the second iteration of the test  the unreleased U row level lock causes a lock timeout to happen. In case of the second iteration of the test  the lock table shows the previous U row lock with a null transaction id. This is not right. The transactions are running at the default isolation level ( read committed).By default  the lock escalation threshold is set to 5000http://incubator.apache.org/derby/manuals/tuning/perf80.html#IDX547I will be attaching the program for reproduction. To reproduce the problem with less number of rows in the table  please run the program with the following derby properties set derby.locks.deadlockTrace=truederby.locks.escalationThreshold=110   ,0
100,Add support for insert functionality using JDBC 2.0 updatable resultset apis    The JDBC 2.0 API introduced the ability to update/delete/insert rows from a resultset using methods in the Java programming language rather than having to send an SQL command. This Jira entry is to track the insert rows functionality using JDBC 2.0 apis.   ,0
117,[PATCH] Improvements on the NetServlet    Hi all I did some minor enhancements on the Net Servlet: changed Cloudscape to Derby in the i18n bundles added pt_BT to know languages (the bundle was already there  but the language was not set at the .java)  improved use of tracingDirectory: init-parameter is now used (it was documented but not used before) current value is shown when the user try to change it improved function that handles the request locale (for instance  mozilla uses a - instead of _ to separate the country from language) shows on the screen which port the server is running on added a new SRV_POrtNumber message key for such infoSo  I'm sending a trunk patch with such changes.&#8211; Felipe   ,0
122,Suite jdk14 is skipped incorrectly with J2SE 5.0    Since J2SE 5.0 is a super set of JDK 1.4  and JDK1.4 tests should run in J2SE5.0   ,0
123,Derby incorrectly rounds double values down during insert into NUMERIC    When inserting a double value into a field defined as NUMERIC(a b) using PreparedStatement.setDouble()  Derby may incorrectly round the number down. For example  a NUMERIC(5 2) field with a double = 4.64 ends up with a value of 4.63 in the database. This works fine in Oracle and other databases.The problem occurs because double cannot represent 4.64 exactly  so the actual value is 4.6399999... SQLDecimal.setCoreValue uses BigDecimal(double) which constructs a BigDecimal of 4.6399999... and then SQLDecimal.setWidth uses value.setScale(desiredScale  BigDecimal.ROUND_DOWN); Note that BigDecimal javadoc recommends that the double constructor be avoided for this reason.One fix appears to be to change SQLDecimal.setCoreValue(double) to avoid using the double constructor of BigDecimal. Using Double.toString() and BigDecimal(String) looks as if it would work as expected  because Double.toString() has 'special rounding abilities' and converts 4.639999... back to 4.64.   ,0
127,Aliased Columns not recognized after 'group by... order by' combination    I've been doing work to try and integrate Derby with the Mondrian ROLAP engine  which has uncovered a bug in Derby when a query involves column aliasing  a group by clause  and an order by clause.For example: Mondrian will generate the following query:select STORE.STORE_COUNTRY as c0  STORE.STORE_STATE as c1  STORE.STORE_CITY as c2  STORE.STORE_NAME as c3  STORE.STORE_TYPE as c4  STORE.STORE_MANAGER as c5  STORE.STORE_SQFT as c6  STORE.GROCERY_SQFT as c7  STORE.FROZEN_SQFT as c8  STORE.MEAT_SQFT as c9  STORE.COFFEE_BAR as c10  STORE.STORE_STREET_ADDRESS as c11 from STORE as STORE group by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAME  STORE.STORE_TYPE  STORE.STORE_MANAGER  STORE.STORE_SQFT  STORE.GROCERY_SQFT  STORE.FROZEN_SQFT  STORE.MEAT_SQFT  STORE.COFFEE_BAR  STORE.STORE_STREET_ADDRESS order by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAMEwhich should be valid SQL. I have tested this query outside of the Mondrian environment and still receive the same error which is:'Column 'STORE.STORE_COUNTRY' is not in any table in the FROM list or it appears within a join specification and is outside the scope of the join specification or it appears in a HAVING clause and is not in the GROUP BY list.SQL State: 42x04Error Code: 30000However  if I remove any one of the three elements (aliasing  group by  order by) or if the order by uses the aliased names  the query works. It is only the combination of all 3 elements that is causing a problem.&#91;ie. all of the following queries work correctly&#93;select STORE.STORE_COUNTRY   STORE.STORE_STATE   STORE.STORE_CITY   STORE.STORE_NAME   STORE.STORE_TYPE   STORE.STORE_MANAGER   STORE.STORE_SQFT   STORE.GROCERY_SQFT   STORE.FROZEN_SQFT   STORE.MEAT_SQFT   STORE.COFFEE_BAR   STORE.STORE_STREET_ADDRESS from STORE as STORE group by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAME  STORE.STORE_TYPE  STORE.STORE_MANAGER  STORE.STORE_SQFT  STORE.GROCERY_SQFT  STORE.FROZEN_SQFT  STORE.MEAT_SQFT  STORE.COFFEE_BAR  STORE.STORE_STREET_ADDRESS order by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAMEselect STORE.STORE_COUNTRY as c0  STORE.STORE_STATE as c1  STORE.STORE_CITY as c2  STORE.STORE_NAME as c3  STORE.STORE_TYPE as c4  STORE.STORE_MANAGER as c5  STORE.STORE_SQFT as c6  STORE.GROCERY_SQFT as c7  STORE.FROZEN_SQFT as c8  STORE.MEAT_SQFT as c9  STORE.COFFEE_BAR as c10  STORE.STORE_STREET_ADDRESS as c11 from STORE as STORE group by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAME  STORE.STORE_TYPE  STORE.STORE_MANAGER  STORE.STORE_SQFT  STORE.GROCERY_SQFT  STORE.FROZEN_SQFT  STORE.MEAT_SQFT  STORE.COFFEE_BAR  STORE.STORE_STREET_ADDRESSselect STORE.STORE_COUNTRY as c0  STORE.STORE_STATE as c1  STORE.STORE_CITY as c2  STORE.STORE_NAME as c3  STORE.STORE_TYPE as c4  STORE.STORE_MANAGER as c5  STORE.STORE_SQFT as c6  STORE.GROCERY_SQFT as c7  STORE.FROZEN_SQFT as c8  STORE.MEAT_SQFT as c9  STORE.COFFEE_BAR as c10  STORE.STORE_STREET_ADDRESS as c11 from STORE as STORE order by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAMEselect STORE.STORE_COUNTRY as c0  STORE.STORE_STATE as c1  STORE.STORE_CITY as c2  STORE.STORE_NAME as c3  STORE.STORE_TYPE as c4  STORE.STORE_MANAGER as c5  STORE.STORE_SQFT as c6  STORE.GROCERY_SQFT as c7  STORE.FROZEN_SQFT as c8  STORE.MEAT_SQFT as c9  STORE.COFFEE_BAR as c10  STORE.STORE_STREET_ADDRESS as c11 from STORE as STORE group by STORE.STORE_COUNTRY  STORE.STORE_STATE  STORE.STORE_CITY  STORE.STORE_NAME  STORE.STORE_TYPE  STORE.STORE_MANAGER  STORE.STORE_SQFT  STORE.GROCERY_SQFT  STORE.FROZEN_SQFT  STORE.MEAT_SQFT  STORE.COFFEE_BAR  STORE.STORE_STREET_ADDRESS order by c0 c1 c2 c3   ,0
128,Network Server Gives NPE if SQLException has null arguments   (e.g. for ERROR XBM0H)    Network server  Network Server throws an NPE because one of the arguments of the SQLException is null. It shouldn't do so.To reproduce try to create a database in the root directory on Linux. Do not run in security manager. The trace below came from an extra '/' in the url in NSinSameJVM.javaThe issues are:1) Network Server throws an NPE because one of the arguments of the SQLException is null in this code. It shouldn't do so.// arguments are variable part of a message Object[] args = ce.getArguments(); for (int i = 0; args != null &amp;&amp; i &lt; args.length; i++) sqlerrmc += args&#91;i&#93;.toString() + separator;2) This exception seems to have null arguments which doesn't seem right. ERROR XBM0H: Directory /NSinSameJVMTestDB cannot be created.ERROR XBM0H: Directory /NSinSameJVMTestDB cannot be created. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:322) at org.apache.derby.impl.services.monitor.PersistentServiceImpl$8.run(PersistentServiceImpl.java:668) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.monitor.PersistentServiceImpl.createServiceRoot(PersistentServiceImpl.java:632) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1756) at org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(BaseMonitor.java:1018) at org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Monitor.java:578) at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:1504) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:215) at org.apache.derby.impl.jdbc.EmbedConnection20.&lt;init&gt;(EmbedConnection20.java:56) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:72) at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:73) at org.apache.derby.jdbc.Driver169.connect(Driver169.java:175) at org.apache.derby.impl.drda.Database.makeConnection(Database.java:245) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(DRDAConnThread.java:1160) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(DRDAConnThread.java:1138) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(DRDAConnThread.java:2613) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(DRDAConnThread.java:1001) at org.apache.derby.impl.drda.DRDAConnThread.exchangeServerAttributes(DRDAConnThread.java:950) at org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:563) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:219)Cleanup action completed2005-01-21 01:12:12.794 GMT Thread&#91;DRDAConnThread_2 5 derby.daemons&#93; (DATABASE = /NSinSameJVMTestDB)  (DRDAID = {2})  Failed to create database '/NSinSameJVMTestDB'  see the next exception for details.2005-01-21 01:12:12.795 GMT Thread&#91;DRDAConnThread_2 5 derby.daemons&#93; (DATABASE = /NSinSameJVMTestDB)  (DRDAID = {2})  Directory /NSinSameJVMTestDB cannot be created.2005-01-21 01:12:12.816 GMT Thread&#91;DRDAConnThread_2 5 derby.daemons&#93; (DATABASE = /NSinSameJVMTestDB)  (DRDAID = NF000001.A9FB-4124733202448020360{2})  Failed to create database '/NSinSameJVMTestDB'  see the next exception for details.2005-01-21 01:12:12.816 GMT Thread&#91;DRDAConnThread_2 5 derby.daemons&#93; (DATABASE = /NSinSameJVMTestDB)  (DRDAID = NF000001.A9FB-4124733202448020360{2})  nullnulljava.lang.NullPointerException at org.apache.derby.impl.drda.DRDAConnThread.writeSQLCAGRP(DRDAConnThread.java:5076) at org.apache.derby.impl.drda.DRDAConnThread.writeSQLCARD(DRDAConnThread.java:4882) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(DRDAConnThread.java:1042) at org.apache.derby.impl.drda.DRDAConnThread.exchangeServerAttributes(DRDAConnThread.java:950) at org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:563) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:219)nulljava.lang.NullPointerException at org.apache.derby.impl.drda.DRDAConnThread.writeSQLCAGRP(DRDAConnThread.java:5076) at org.apache.derby.impl.drda.DRDAConnThread.writeSQLCARD(DRDAConnThread.java:4882) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(DRDAConnThread.java:1042) at org.apache.derby.impl.drda.DRDAConnThread.exchangeServerAttributes(DRDAConnThread.java:950) at org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:563) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:219)   ,0
129,Derby should throw a truncation error or warning when CASTing a parameter/constant to char or char for bit datatypes and the data is too large for the datatype.    Derby doesn't throw a truncation exception/warning when data is too large during casting of constants or parameters to character string or bit string data types. Following is ij example for constants which is too big for the datatype it is getting cast toij&gt; values (cast ('hello' as char(3)));1hel1 row selectedij&gt; values (cast (X'0102' as char(1) for bit data));1011 row selectedFollowing code snippet is when using parameters through a JDBC program s.executeUpdate('create table ct (c CLOB(100K))'); //the following Formatters just loads cData with 32700 'c' characters String cData = org.apache.derbyTesting.functionTests.util.Formatters.repeatChar('c' 32700); //notice that ? in the preared statement below is bound to length 32672 pSt = con.prepareStatement('insert into ct values (cast (? as varchar(32672)))'); pSt.setString(1  cData); //Derby doesn't throw an exception at ps.execute time for 32700 characters into 32672 parameter. It silently truncates it to 32672 pSt.execute();   ,0
132,in place table/index compress which returns space to OS    Each derby table or index is stored in a separate file. Space fromdeleted rows is eventually reclaimed within the file as is used forsubsequent inserts into the same file. That space is not returned tothe OS unless the user calls the SYSCS_UTIL.SYSCS_COMPRESS_TABLEsystem procedure. That procedure will return the unused space inthe tables and indexes to the OS. It gets an exclusive lock on thetable  copies all rows in the indexes and the base table into newcompressed files and delete the old files. Prior to jdk 1.4 this wasthe only way to return space from a file to the OS.In jdk 1.4 RandomAccessFile was enhanced to allow the truncation of afile  which would return the space at the 'end' of the file back tothe OS. In order to take advantage of this new feature a newcompress feature is needed in derby.The assumption is that this work will be used in future work which willautomatically schedule this job and others in background  with nointeraction needed from the dba. The 1st phase of this work willsimply build a procedure that will do the work. The 2nd phase willbe to look into scheduling the procedure automatically as part ofthe current background post commit processing. Longer term it wouldbe best if this fit into a new background task monitor  which couldschedule larger background tasks balanced against the other prioritiesof the system. These tasks might include: this new online compress automatic statistics gathering  more proactive deleted row reclamation  ....The proposed feature will reorganize base tables and indexes  movingempty pages to the 'end'. It will release space back to the operatingsystem when it has created a chunk of empty pages at the end of thefile. It will be designed to run in background  and will lock resourcesof the table for as short a time as possible so that it can iterativelyprocess the table.To reclaim space in the heap  it will scan the heap in page reverse order.It will get a short term table lock  process all the rows on a page  andthen commit that transaction releasing the lock. The commit will beoptimized like other internal transactions  and will not need to waitfor a synchonized write. Each row moved  will require all the indexentries for that row to also be updated. While doing the processing itwill also take care of processing committed deleted rows. When spaceis free at the end of the table it will be freed back to the operatingsystem  using the RandomAccessFile.setLength() interface.To reclaim space in the btree  data on pages will be moved rather thanrows. Data from pages at the end of the file will be moved to freesmaller numbered pages. Again short term table locks will be required and the operation will look similar to the current btree merge operationsalready implemented. Again when a chunk of pages is free at the end ofthe file  they will be returned to the OS using the same mechanism asthe heap.   ,0
153,Bad Eclipse plugin version specification    In the plugin.xml of the Derby Eclipse plugin  the version specification reads '10.1.0.0 (124830)'  which Eclipse complains about as being illegal. In consequence  the plugin is not loaded.The Eclipse docs have the following to say about the version specification: 'Plug-in version format is major.minor.service.qualifier'.Stripping the '(1234830)'  whatever that is anyway  solves the problem.   ,0
167,Inserting values in an identity column    It is not possible to insert a specific value in a column defined as identity. This makes it very hard to migrate from other RDBMSs or to import data dumped from other databases. For example  an autoincrement column in MySQL should be an identity column. The problem is that when the data is dumped from MySQL to a file  it generates inserts with values. These values cant be inserted in the Derby table. Posible solutions: 1. being able to 'generate by default as identity' 2. being able to disable the 'identity' feature for a column 3. being able to generate a column as non identity and after data is populated  alter table to add the 'identity' to the column.   ,0
173,For the concurrency of ResultSet  Network Server should not send the concurrency of Statement.    I am working on getting updatable resulset functionality to work under Network Server. One issue that I found is Network Server sends the concurrency of the Statement object when it really needs to send the concurrency of the Resultset. This was ok in the past because CONCUR_READ_ONLY was the only concurreny supported by Derby. But  now with the support of CONCUR_UPDATABLE  it is possible that the concurrency of ResultSet might not be same as the Statement object. Hence  Network Server should send the concurrency of the ResultSet object if that is what the protocol calls for.The fix for this is localized in java/drda/org/apache/derby/impl/drda/DRDAConnThread.java.   ,0
174,setNull does not work with java.sql.Types.TIMESTAMP    Calling setNull(x java.sql.Types.TIMESTAMP) throws an exception with the following message.( x is the column number)Message is: ' An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'null''.   ,0
183,Parameter names required in CREATE FUNCTION    A statement like create function s2.f2( char(8)  integer) returns int language java parameter style java external name 'myclass.mymethod'fails with the message ERROR 42X01: Syntax error: Encountered 'char' at line 1  column 24However create function s2.f2( p1 char(8)  p2 integer) returns int language java parameter style java external name 'myclass.mymethod'is accepted.The Derby documentation (at http://incubator.apache.org/derby/manuals/reference/sqlj27.html#CREATE+PROCEDURE+Statement)  the SQL2003 standard  and DB2 all agree that the parameter name is optional.   ,0
184,List of jar files in tools/java incorrect in BUILDING.txt    Section 2 of BUILDING.txt describes how to obtain JDK 1.4  JDK 1.3  JDBC 2.0 extensions  JCE  OSGI. But then it says you should have the following jars:${derby.source}/tools/java/javacc.jar${derby.source}/tools/java/jakarta-oro-2.0.8.jar${derby.source}/tools/java/jce1_2_2.jar${derby.source}/tools/java/jdbc2_0-stdext.jar${derby.source}/tools/java/jta-1_0_1B-classes.zip${derby.source}/tools/java/servlet.jar${derby.source}/tools/java/osgi.jarActually  what you have is the following:empty.jargeronimo-spec-jta-1.0.1B-rc4.jargeronimo-spec-servlet-2.4-rc4.jarjakarta-oro-2.0.8.jarjavacc.jarjce1_2_2.jarjdbc2_0-stdext.jarosgi.jarI am providing a patch with this correction.   ,0
186,isFirst() returns true when relative(x) goes beyond result set    Bizarre error. Not sure if this is a JDBC  Derby  or Java issue.An opened result set has 4 records. A call to relative(3) while on row 3 should result in isAfterLast=true  and isFirst  isBeforeFirst  and IsLast set to false. However  the result is isAfterLast=True and isFirst=True.ij connect 'IsAfter;create=true';create table x (a char(1)); insert into x values '1' '2' '3' '4';quit;import java.sql.*; public class ErrIsFirst { public static void main(String argv[]) throws SQLException { Connection conn = null; Statement s = null; ResultSet rs = null; String DerbyDriver = 'org.apache.derby.jdbc.EmbeddedDriver'; String returnValue; try { Class.forName(DerbyDriver).newInstance(); } catch (Exception NoDriver) { System.out.println('Derby driver not found: ' + DerbyDriver); NoDriver.printStackTrace(); System.exit(1); } try { conn = DriverManager.getConnection('jdbc:derby:IsAfter'); s = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE ResultSet.CONCUR_READ_ONLY); rs = s.executeQuery( 'SELECT A FROM X'); rs.next(); // First Record returnValue = rs.getString('A'); System.out.println('Value='+returnValue); rs.relative(2); System.out.println('isFirst=' + rs.isFirst() + ' isLast=' + rs.isLast() + ' isAfterLast=' + rs.isAfterLast()); returnValue = rs.getString('A'); System.out.println('Value='+returnValue); rs.relative(-2); returnValue = rs.getString('A'); System.out.println('Value='+returnValue); rs.relative(10); System.out.println('isFirst=' + rs.isFirst() + ' isLast=' + rs.isLast() + ' isAfterLast=' + rs.isAfterLast()); returnValue = rs.getString('A'); System.out.println('Value='+returnValue); rs.close(); s.close(); } catch (SQLException se) { String SQLState = se.getSQLState(); String SQLMessage = se.getMessage(); System.out.println('Error = '+SQLState); System.out.println(SQLMessage); } }}The results on my system are:Value=1isFirst=false isLast=false isAfterLast=falseValue=3Value=1isFirst=true isLast=false isAfterLast=trueError = 24000Invalid cursor state - no current row.If you eliminate the first println call to isFirst() you get the following (correct) results.Value=1Value=3Value=1isFirst=false isLast=false isAfterLast=trueError = 24000Invalid cursor state - no current row.Okay  so where did we go wrong?   ,0
198,Add Support for network Server USRIDONL security    Currently Network Server supports only two security mechanisms.User ID and password (usridpwd)User ID and encrypted password (eusridpwd)It would be good to add support for User ID Only security so that it could more closely match the embedded driver and not always require a password.See details of security mechanism implementations in section 4.4.2.1 of DRDA V3 Vol. 1: Distributed Relational Database Architecture http://www.opengroup.org/dbiop/   ,1
203,setNull(x JDBCType.DATE) does not work when batching is turned on    Trying to execute batch on which setNull(x DATE) was called gives the following exception:SQL Exception: An attempt was made to get a data value of type 'DATE' from a data value of type 'null'. at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.dataTypeConversion(EmbedPreparedStatement.java) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(EmbedPreparedStatement.java) at org.apache.derby.iapi.types.DataType.setInto(DataType.java) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeBatchElement(EmbedPreparedStatement.java) at org.apache.derby.impl.jdbc.EmbedStatement.executeBatch(EmbedStatement.java) at net.sf.hibernate.impl.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:54)DATE column is nullable in db schema  so it should pass there ok. I believe the problem is in org.apache.derby.iapi.types.SQLDate  which does not implement setInto method  so DataType.setInto method is executed  calling setObject(x null). setObject thinks this is JDBC spec violation and fails on exception.Problem exists in both 10.0.2.1 and 10.0.2.0   ,0
212,Optimize some specific methods in Network Server to improve performance    In reviewing the Network Server Code and profiling there were several areas that showed potential for providing performance improvement.Functions that need optimizing to prevent unneeded object creation and excessive decodingparsePKGNAMCSN()parseSQLDTA_work()buildDB2CursorName()In DDMWriter and DDMReader  use System Routines in java.util.Arrays and System.arrayCopy instead of writing code to do functions like copy arrays and pad strings.   ,0
220,Javadoc build should include a timestamp and/or the svn revision number in a visible location.    In order to easily identify when a specific set of javadoc was built  and from what source  it would be useful to include a timestamp and/or the svn revision number at the time the javadoc is built. The footer is an excellent location to place this information  as it is visible on every generated page.   ,0
229,Column names on ResultSet.updateXXX and getXXX methods are handled incorrectly    Sections 14.2.3 and &#91;14.2.3&#93; of JDBC 3.0 spec sayColumn names supplied to getter &#91;updater&#93; methods are case insensitive. If a select listcontains the same column more than once  the first instance of the column will bereturned &#91;updated&#93;.Derby returns or updates the last column in the select list  not the first. With the attached Java class I seePRE-UPDATE1 100POST-UPDATE1 500POST-UPDATE getXXX(name)AB:500 ab500   ,0
230,'Schema already exists' when creating a table    When running a multithreaded program where several threads in parallell create tables in a schema that is not explicitly created  one often get the following exception:ERROR X0Y68: Schema 'TESTSCHEMA' already exists. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:322) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(DataDictionaryImpl.java:1512) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptorNow(DataDictionaryImpl.java:1496) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(DataDictionaryImpl.java:1478) at org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(CreateSchemaConstantAction.java:147) at org.apache.derby.impl.sql.execute.DDLConstantAction.getSchemaDescriptorForCreate(Unknown Source) at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(CreateTableConstantAction.java:213) at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:56) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:366) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1108) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:517) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:475) at derbytest.Main$CreateTable.run(Main.java:42) at java.lang.Thread.run(Thread.java:595)A program that reproduces this bug will be attached.   ,0
231,'FOR UPDATE' required for updatable result set to work    To get an updatable result set  the JDBC 3.0 spec  section 14.2.4 'Modifying ResultSet Objects' states:  'ResultSet objects with concurrency CONCUR_UPDATABLE can be updated using ResultSet objects'.In addition  Derby requires the SQL SELECT statement to have a 'FORUPDATE' clause for updates to be allowed. This may be a usability issue  asmany examples  e.g. in 'JDBC API tutorial and reference and reference'book and the JDBC 3.0 Specification (14.2.4.1) do not include a 'FORUPDATE' clause in the SQL SELECT.Mamta Satoor says:'Derby implements the JDBC updatable resultset by using the existing updatable cursor implementation. And in order to do that  it requires that the SELECT statement should include the FOR UPDATE clause. One can change the Derby implementation so that it does not require FOR UPDATE clause to piggyback on updatable cursor implementation.'Dan DeBrunner says:'Technically I wonder if this is covered by the JDBC standard  I see nothing in the JDBC 3.0 that states any requirements for the SQL statement for an updateable result set. I know the JDBC tutorial book has some guidelines as to what will typically work  but isn't it up to the database engine to define what works here? Having said that I think that not requiring the FOR UPDATE would be a useful improvement.'   ,0
233,Fix copyright notices and other IBM/Cloudscape references in java/demo/*    Assigning this issue to 'Documentation' component  as there is not a Demos component.   ,0
238,Testharness: testEncryptionAlgorithm property is not being picked up correctly for some encryption suites    It looks like the encryption.properties - testEncryptionAlgorithm=DESede/CBC/NoPadding is not being picked up for the encryption run of stress.multi test. But the test uses a database with the default encryption algorithm - DES/CBC/NoPadding   ,1
239,Need a online backup feature  that does not block update operations   when online backup is in progress.    Currently Derby allows users to perfoms online backups using SYSCS_UTIL.SYSCS_BACKUP_DATABASE() procedure  but while the backup is in progress  update operations are temporarily blocked  but read operations can still proceed.Blocking update operations can be real issue specifically in client server environments  because user requests will be blocked for a long time if a backup is in the progress on the server.   ,0
243,connection toString should uniquely identify the connection    The toString() on the Derby connection doesn't print unique information.for example System.out.println(conn) prints:EmbedConnection in the case of derby embeddedIt would be great if the toString() method for connections could be used to differentiate one connection from another.   ,0
247,Network Server demo program should support Derby network client driver    Currently  the Network Server demo programs require the IBM Universal JDBC Driver (JCC) for client functionality. The demo should be enhanced to also support using the Derby client driver.   ,0
249,Builds fail during splitmessages step if path contains spaces    If the path to the Derby source files contains a space  for example /opt/My Local Drive/derbysource  then the build will fail at the splitmessages step with the following error: &#91;java&#93; Exception in thread 'main' java.lang.StringIndexOutOfBoundsException: String index out of range: -1 &#91;java&#93; at java.lang.String.substring(String.java:1444) &#91;java&#93; at org.apache.derbyBuild.splitmessages.main(splitmessages.java:44)splitmessages should be improved to handle spaces in the path to the message files.   ,0
266,test tools/dblook_test.java fails if run in a directory having '*derby/*' in its path    SYMPTOM: The test 'tools/dblook_test' will fail. The diff looks similar to this:     Start: dblook_test jdk1.4.2_02 derbyall:derbytools 2005-05-06 22:37:37 ***4861d4860&lt; java.io.FileNotFoundException: &lt;filePath&gt;Test Failed. End: dblook_test jdk1.4.2_02 derbyall:derbytools 2005-05-06 22:37:53 ***    cf mail thread:http://mail-archives.apache.org/mod_mbox/db-derby-dev/200505.mbox/%3c20050507140048.GB690@ac30.fr34.2y.net%3eANALYSIS: The problem lies with the sedfunctionality in the test harness  which delete certain lines beforecomparing with the master file.Sed.java in the harness removes lines containing derby/ in the path viz: deleteLines.addElement('^.derby/.//&lt;.//&gt;//(.).*$');  deleteLines.addElement('^.derby/.//(.).$'); so if your tests are running in a directory containing this pattern  aline too much is deleted from dblook_test.tmp  thereby giving acomparison failure like you describe.I don't know the reason for this deletion yet  so I can't say how tofix it  but the work-around is obvious: Run test in a directory whosename does not contain this pattern   ,0
269,Provide some way to update index cardinality statistics (e.g. reimplement update statistics)    Performance problems are being reported that can be resolved by updating the cardinality statistics used by the optimizer. Currently the only time the statistics are guaranteed to be an up-to-date is when the index is first created on a fully populated table. This is most easily accomplished on an existing table by using the command:  alter table &lt;table-name&gt; compress &#91;sequential&#93; Compress table is an I/O intensive task. A better way to achieve this would be to re-enable parser support for the 'update statistics' command or re-implement the update in some other fashion.   ,0
313,testing/README.htm property descriptions: testSpecialProps wrongly named; useprocess omitted    In section 4.12 in ../testing/README.htm  the property  TestSpecialFlags is described for specifying additional properties to RunTest. I could notfind any evidence of this in RunTest or elsewhere. However  the property testSpecialPropsis supported by RunTest.java. I found this to work. This propertyalso has a syntax for specifying more than one property using a '^'delimiter between properties  i.e. testSpecialProps=&lt;prop-1&gt;=&lt;value-1&gt;^ ... ^&lt;prop-n&gt;=&lt;value-n&gt;Also I noticed the property 'useprocess' (default=true) for controllingwhether RunTest runs the test in a separate vm or a thread in currentvm isn't documented in README.htm. I suggest it be included  sinceit's potentially useful for debugging tests. I could include it in thepatch for derby-313 (I don't think anybody committed it yet) or file anew JIRA issue.Looking at RunTest reveals that unit tests are not (yet) runnable with'useprocess=false'  though.   ,0
318,SYS.SYSCOLUMN problem with 'GENERATED BY DEFAULT' column w/ Network Server    When connected to the Derby Network Server  if one has a table with a column defined as 'GENERATED BY DEFAULT' and then one tries to select the 'COLUMNDEFAULT' field from SYS.SYSCOLUMNS  the result is an NPE in the server code that leads to connection deallocation.I don't know if this is a problem with the 'GENERATED BY DEFAULT' feature or if it's a problem with Network Server--more investigation is required.To reproduce  use ij to connect to a database using Network Server  and then:ij&gt; create table t1 (i int generated by default as identity);0 rows inserted/updated/deletedij&gt; select columndefault from sys.syscolumns;COLUMNDEFAULT--------------------------------------------------------------------------------------------------------------------------------nulljava.lang.NullPointerException at org.apache.derby.impl.drda.DRDAConnThread.writeFdocaVal(DRDAConnThread.java:6550) at org.apache.derby.impl.drda.DRDAConnThread.writeFDODTA(DRDAConnThread.java:5973) at org.apache.derby.impl.drda.DRDAConnThread.writeQRYDTA(DRDAConnThread.java:5796) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:595) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:226)agentThread&#91;DRDAConnThread_2 5 main&#93;ERROR 58009: Execution failed due to a distribution protocol error that caused deallocation of the conversation. A DRDA Data Stream Syntax Error was detected. Reason: 0x3   ,0
322,Remove resultSetHoldability property from ClientDataSource    ClientDataSource (through ClientBaseDataSource) implements a Java Bean property resultSetHoldability which is not documented in the functional spec at.http://incubator.apache.org/derby/papers/DerbyClientSpec.htmlJDBC provides standard ways to set the holdability of ResultSets  so a non-standard separate mechanism is not required. The property and associated code needs to be removed.   ,0
324,AES encryption test fails on Solaris 10    The store/aes.sql test on Solaris 10 produces the following diff report:     Start: aes jdk1.4.2_02 2005-05-30 12:13:17 ***206 del&lt; ERROR XJ001: Java exception: 'Wrong keysize: must be equal to 128  192 or 256: java.security.InvalidParameterException'.206a206&gt; ERROR XJ001: Java exception: 'AES key length must be 128  192  or 256 bits: java.security.InvalidParameterException'.Test Failed. End: aes jdk1.4.2_02 2005-05-30 12:14:06 ***    The cause of this problem is that on most OSs  the java.security.InvalidParameterException thrown by the JVM when an invalid encryption key length is requested contains a message with the following text: Wrong keysize: must be equal to 128  192 or 256while on Solaris 10 the message contained in the exception has been changed to: AES key length must be 128  192  or 256 bitsThe reason for this is most likely that a different encryption library is included in Solaris 10 comparedto the other OSs  either as part of the JVM or as a native library.The problem occurs on Solaris 10 running on both x86 and Sparc processors. It occurs both with jdk 1.4 and jdk 1.5.   ,1
330,Many files do not have correct svn-properties    There are two problems with svn properties in Derby:1) A number of non-binary files do not have the svn:eol-style=native property set. Some of these currently has CRLF (Windows-style) line terminators  Example:dt136804@atum10~/local/DERBY/d_rby-138$ file ./plugins/eclipse/org.apache.derby.ui/src/org/apache/derby/ui/popup/actions/RemoveDerbyNature.java./plugins/eclipse/org.apache.derby.ui/src/org/apache/derby/ui/popup/actions/RemoveDerbyNature.java: ASCII C program text  with CRLF line terminatorsdt136804@atum10~/local/DERBY/d_rby-138$ svn proplist -v ./plugins/eclipse/org.apache.derby.ui/src/org/apache/derby/ui/popup/actions/RemoveDerbyNature.javawhereas others have LF(Unix-style). Example:dt136804@atum10~/local/DERBY/d_rby-138$ file ./plugins/eclipse/org.apache.derby.ui/src/org/apache/derby/ui/actions/SysInfoAction.java./plugins/eclipse/org.apache.derby.ui/src/org/apache/derby/ui/actions/SysInfoAction.java: ASCII C program textdt136804@atum10~/local/DERBY/d_rby-138$ svn proplist -v ./plugins/eclipse/org.apache.derby.ui/src/org/apache/derby/ui/actions/SysInfoAction.javaSome of the files that don't have this property do instead have a property called 'snv:eol-style'. I'm guessing this is a typo.Example:dt136804@atum10~/local/DERBY/d_rby-138$ svn proplist -v java/testing/org/apache/derbyTesting/unitTests/crypto/T_CipherOFB.javaProperties on 'java/testing/org/apache/derbyTesting/unitTests/crypto/T_CipherOFB.java': snv:eol-style : native2) A seemingly arbitrary collection of files have the svn:executable property set. To my knowledge  the only files in the Derby respository that should have this property are the *.ksh and perhaps the *.bat scripts  (I don't know if Windows cares about this property when the file has the .bat suffix). Currently none of the *.ksh scripts have this property  but a number of java source files (not all) have it. (If there is some reason to have this property on other files  it should at least be done consistently throughout the repository).Example:dt136804@atum10~/local/DERBY/d_rby-138$ svn proplist -v java/drda/org/apache/derby/drda/NetworkServerControl.javaProperties on 'java/drda/org/apache/derby/drda/NetworkServerControl.java': svn:executable : svn:eol-style : nativedt136804@atum10~/local/DERBY/d_rby-138$ svn proplist -v java/testing/org/apache/derbyTesting/unitTests/crypto/T_CipherOFB.javaProperties on 'java/testing/org/apache/derbyTesting/unitTests/crypto/T_CipherOFB.java': snv:eol-style : nativeIf I understand correctly it is not possible to create a patchfile that contains property changes  so I guess a committer will have to do this. I'm willing to create a script file containing all the svn commands that must be run  as a 'pseudo patch'.   ,0
339,Network client XA should only keep XA state for transaction branch association  to track whether to send commit in autocommit mode.  All other state and state related decisions should be deferred to the server.    Network client XA should only keep XA state for transaction branch association  to track whether to send commit in autocommit mode. All other state and state related decisions should be defered to the server.The client tries to track XA state to make decisions based on current XA state. Most of this state handling was removed with DERBY246  but it still was not being handled properly. This is evidenced by multiple failures in xaSimplePostive that now that it gets past DERBY-246.This fix will have the client track only branch association as outlined in the XA+ specification. Table 6-2  State Table for Transaction Branch Association. The client will track onlyXA_TO_NOT_ASSOCIATEDXA_T1_ASSOCIATEDAssociation Suspended (T2) will map to XA_TO_NOT_ASSOCIATED for the client's pupurposes.The client commit in autocommit mode only for XA_TO_NOT_ASSOCIATED.   ,0
348,example.html file for the SimpleApp does not describe the arguments accepted by the program    The SimpleApp.java demo program supplied with Derby currently accepts two arguments and will soon (see JIRA entry: DERBY-247) accept a third that allows the application to run as a client to Network Server. Only 'embedded' is documented in the ${DERBY_INSTALL}/demo/simple/example.html file. The others should be added. The current undocumented argument is:'jccjdbcclient' - will use the JCC client driver to access Network ServerThe new argument might be:'derbyclient' - will use the Net client driver to access Network ServerThis brief description of the program using the derby client might help in this update:To use the SimpleApp in client mode only the directory containing the SimpleApp and the netclient.jar file are needed in the CLASSPATH. By passing in 'derbyclient' as an argument the program will load the client driver rather than start the Derby engine. The parseArguments() method (line 230) changes two key strings. The variables 'driver' and 'protocol' are set to the client driver values. With these new definitions the go() method loads the client driver at line 73 and creates the client URL at lines 93-94. With the variables expanded these lines will look like this:line 76: Class.forName('org.apache.derby.jdbc.ClientDriver')line 93-94: conn = DriverManager.getConnection('jdbc:derby://localhost:1527/' + 'derbyDB;create=true'  props); As in the embedded example the connection will create the database if it does not exist and boot derbyDB if it has not already been loaded by the Network Server. Note that the application is well behaved and does not shutdown the database when operating as a client.   ,0
349,setByte() with executeBatch causes hang with client if mapping is invalid  e.g. setByte to DATE    setByte() followed by an addBatch() and then an executeBatch causes a hang.May apply to any setXXX call that will result in any invalid conversion  possibly only those conversions handled by the client.See the test jdbcapi/parameterMapping  look for this bug number in the code  to see the cases disabled when running with the client.   ,0
353,It is desirable to have IDENTITY_VAL_LOCAL() function return last recent user specified value or system generated value for BY DEFAULT identity columns.    Derby was recently enhanced to support BY DEFAULT identity column. While the behavior of this feature is not documented yet  I think  it is desirable for IDENTITY_VAL_LOCAL() function  that is used to retrieve last single statement insert value for identity column  to return user specified value for the default column.For GENERATED ALWAYS identity columns  this issue doesn't apply  since users can't provide a value. But for GENERATED BY DEFAULT identity columns  users can optionally specify a value. IDENTITY_VAL_LOCAL() function should return this value. Derby currently doesn't support this behavior.ij&gt; create table tauto ( i int generated by default as identity  j int  k int);0 rows inserted/updated/deletedij&gt; insert into tauto (j k) values (1 1);1 row inserted/updated/deletedij&gt; values identity_val_local();1-------------------------------11 row selectedij&gt; insert into tauto (j k) values (1 1);1 row inserted/updated/deletedij&gt; values identity_val_local();1-------------------------------21 row selectedij&gt; insert into tauto values (5 1 1);1 row inserted/updated/deletedij&gt; values identity_val_local();1-------------------------------2 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;============= This needs be '5'1 row selectedij&gt; select * from tauto;I |J |K-----------------------------------1 |1 |12 |1 |15 |1 |13 rows selected   ,0
361,Unknown page format  error  while doing recovery after a  a crash while doing  in place compress.    Crash was done manually when compress was almost in the end. Log trace before the crash:DEBUG LogTrace OUTPUT: Write log record: tranId=14527 instant: (23 6270154) length: 20BeginXact null transactionStatus 0DEBUG LogTrace OUTPUT: Write log record: tranId=14527 instant: (23 6270190) length: 25Page Operation: Page(0 Container(0  768)) pageVersion 9567 : CompressSpaceOperation: newHighestPage = 0;num_pages_truncated = 956 to Page(0 Container(0  768))DEBUG LogTrace OUTPUT: Flush log to 1350071DEBUG LogTrace OUTPUT: Write log record: tranId=Null instant: (23 6251544) length: 21Checksum Operation algorithm = 1 value = 3588488 data length= 18650DEBUG LogTrace OUTPUT: Begin log sync...DEBUG LogTrace OUTPUT: end log sync.DEBUG LogTrace OUTPUT: Flush log to 6270235DEBUG LogTrace OUTPUT: Begin log sync...DEBUG LogTrace OUTPUT: end log sync.DEBUG LogTrace OUTPUT: Write log record: tranId=14527 instant: (24 61) length: 17EndXact null Committed : transactionStatus = Committed&#8212;C:/suresht/databases&gt;java -Dij.protocol=jdbc:derby: org.apache.derby.tools.ijij version 10.1ij&gt; call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP'   'T1'   1   1  1) ;IJ ERROR: Unable to establish connectionij&gt; connect 'jdbc:derby:wombat';ERROR XJ040: Failed to start database 'wombat'  see the next exception for details.ERROR XSDB1: Unknown page format at page Page(102 Container(0  768))ij&gt;What was done on the DB :$ rm -rf wombat$ ijC:/suresht/databases&gt;rem set DERBY_INSTALL=C:/suresht/databases&gt;java -Dij.protocol=jdbc:derby: org.apache.derby.tools.ijij version 10.1ij&gt; Terminate batch job (Y/N)? ^C$ ijC:/suresht/databases&gt;rem set DERBY_INSTALL=C:/suresht/databases&gt;java -Dij.protocol=jdbc:derby: org.apache.derby.tools.ijij version 10.1ij&gt; connect 'jdbc:derby:wombat;create=true';ij&gt; create table t1(a int ) ;0 rows inserted/updated/deletedij&gt; insert into t1 values(1) ;1 row inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;1 row inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;2 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;4 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;8 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;16 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;32 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;64 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;128 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;256 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;512 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;1024 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;2048 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;4096 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;8192 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;16384 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;32768 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;65536 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;131072 rows inserted/updated/deletedij&gt; insert into t1 select a + 1 from t1 ;262144 rows inserted/updated/deletedij&gt; commit ;ij&gt; delete from t1 ;524288 rows inserted/updated/deletedij&gt; select * from new org.apache.derby.diag.SpaceTable('T1') ;ERROR 42X01: Syntax error: Encountered '&lt;EOF&gt;' at line 1  column 57.ij&gt; select * from new org.apache.derby.diag.SpaceTable('T1') t ;CONGLOMERATENAMEISIND&amp;NUMALLOCATEDPAGES NUMFREEPAGES NUMUNFILLEDPAGES PAGESIZE ESTIMSPACESAVING---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------T10 1 3826 1 4096 156712961 row selectedij&gt; select NUMALLOCATEDPAGES from new org.apache.derby.diag.SpaceTable('T1') t ;NUMALLOCATEDPAGES--------------------11 row selectedij&gt; select NUMAFREEPAGES from new org.apache.derby.diag.SpaceTable('T1') t ;ERROR 42X04: Column 'NUMAFREEPAGES' is either not in any table in the FROM listor appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'NUMAFREEPAGES' is not a column in the target table.ij&gt; select NUMFREEPAGES from new org.apache.derby.diag.SpaceTable('T1') t ;NUMFREEPAGES--------------------38261 row selectedij&gt; call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP'   'T1'   1   1  1) ;0 rows inserted/updated/deletedij&gt; select NUMFREEPAGES from new org.apache.derby.diag.SpaceTable('T1') t ;NUMFREEPAGES--------------------01 row selectedij&gt; select * from new org.apache.derby.diag.SpaceTable('T1') t ;CONGLOMERATENAMEISIND&amp;NUMALLOCATEDPAGES NUMFREEPAGES NUMUNFILLEDPAGES PAGESIZE ESTIMSPACESAVING---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------T10 1 01 4096 01 row selectedij&gt; ^CTerminate batch job (Y/N)? ^C$ ij/&gt;$ ijC:/suresht/databases&gt;rem set DERBY_INSTALL=C:/suresht/databases&gt;java -Dij.protocol=jdbc:derby: org.apache.derby.tools.ijij version 10.1ij&gt; connect 'jdbc:derby:wombat';ij&gt; select * from t1 ;A-----------0 rows selectedij&gt; insert into t1 values(1) ;1 row inserted/updated/deletedij&gt; insert into t1 select * from t1 ;1 row inserted/updated/deletedij&gt; insert into t1 select * from t1 ;2 rows inserted/updated/deletedij&gt; insert into t1 select * from t1 ;4 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;8 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;16 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;32 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;64 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;128 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;256 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;512 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;1024 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;2048 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;4096 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;8192 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;16384 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;32768 rows inserted/updated/deletedij&gt; insert into t1 select a+1 from t1 ;65536 rows inserted/updated/deletedij&gt; delete from t1 ;131072 rows inserted/updated/deletedij&gt; select * from new org.apache.derby.diag.SpaceTable('T1') t ;CONGLOMERATENAMEISIND&amp;NUMALLOCATEDPAGES NUMFREEPAGES NUMUNFILLEDPAGES PAGESIZE ESTIMSPACESAVING---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------T10 1 9560 4096 39157761 row selectedij&gt; call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP'   'T1'   1   1  1) ;0 rows inserted/updated/deletedij&gt; Terminate batch job (Y/N)? ^C$ ijC:/suresht/databases&gt;rem set DERBY_INSTALL=C:/suresht/databases&gt;java -Dij.protocol=jdbc:derby: org.apache.derby.tools.ijij version 10.1ij&gt; call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP'   'T1'   1   1  1) ;IJ ERROR: Unable to establish connectionij&gt; connect 'jdbc:derby:wombat';ERROR XJ040: Failed to start database 'wombat'  see the next exception for details.ERROR XSDB1: Unknown page format at page Page(102 Container(0  768))ij&gt;Stacks: pageVersion 8611 : Change page allocation status of 102 to 1(undo 0) instant = (23 6494) logEnd = (23 6536) logIn at 22 available 4DEBUG LogTrace OUTPUT: scanned 12606 : Page Operation: Page(102 Container(0  768)) pageVersion 412 : Invalidate Page - it has been deallocated instant = (23 6536) logEnd = (23 6574) logIn at 18 available 4------------ BEGIN SHUTDOWN ERROR STACK -------------ERROR XSLA7: Cannot redo operation Page Operation: Page(102 Container(0  768)) pageVersion 412 : Invalidate Page - it has been deallocated in the log. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:315) at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1515) at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:798) at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:323) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:539) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:994) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:539) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:757) at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:178) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1832) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1698) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1577) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:996) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:533) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:1551) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:196) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:72) at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:73) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:183) at java.sql.DriverManager.getConnection(DriverManager.java:512) at java.sql.DriverManager.getConnection(DriverManager.java:140) at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:836) at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:698) at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:528) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:289) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)============= begin nested exception  level (1) ===========ERROR XSDB1: Unknown page format at page Page(102 Container(0  768)) at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:315) at org.apache.derby.impl.store.raw.data.CachedPage.changeInstanceTo(CachedPage.java:315) at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:195) at org.apache.derby.impl.services.cache.CachedItem.takeOnIdentity(CachedItem.java:235) at org.apache.derby.impl.services.cache.Clock.addEntry(Clock.java:798) at org.apache.derby.impl.services.cache.Clock.find(Clock.java:303) at org.apache.derby.impl.store.raw.data.FileContainer.getAnyPage(FileContainer.java:2430) at org.apache.derby.impl.store.raw.data.BaseContainer.getAnyPage(BaseContainer.java:473) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAnyPage(BaseContainerHandle.java:590) at org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(PageBasicOperation.java:303) at org.apache.derby.impl.store.raw.data.PageBasicOperation.needsRedo(PageBasicOperation.java:159) at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1394) at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:798) at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:323) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:539) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:994) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:539) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:757) at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:178) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1832) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1698) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1577) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:996) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:533) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:1551) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:196) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:72) at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:73) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:183) at java.sql.DriverManager.getConnection(DriverManager.java:512) at java.sql.DriverManager.getConnection(DriverManager.java:140) at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:836) at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:698) at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:528) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:289) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)============= end nested exception  level (1) ======================== begin nested exception  level (2) ===========ERROR XBM0U: No class was registered for identifier 0. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:311) at org.apache.derby.impl.services.monitor.BaseMonitor.classFromIdentifier(BaseMonitor.java:648) at org.apache.derby.impl.services.monitor.BaseMonitor.newInstanceFromIdentifier(BaseMonitor.java:661) at org.apache.derby.iapi.services.monitor.Monitor.newInstanceFromIdentifier(Monitor.java:618) at org.apache.derby.impl.store.raw.data.CachedPage.changeInstanceTo(CachedPage.java:303) at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:195) at org.apache.derby.impl.services.cache.CachedItem.takeOnIdentity(CachedItem.java:235) at org.apache.derby.impl.services.cache.Clock.addEntry(Clock.java:798) at org.apache.derby.impl.services.cache.Clock.find(Clock.java:303)-More- at org.apache.derby.impl.store.raw.data.FileContainer.getAnyPage(FileContainer.java:2430) at org.apache.derby.impl.store.raw.data.BaseContainer.getAnyPage(BaseContainer.java:473) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAnyPage(BaseContainerHandle.java:590) at org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(PageBasicOperation.java:303) at org.apache.derby.impl.store.raw.data.PageBasicOperation.needsRedo(PageBasicOperation.java:159) at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1394) at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:798) at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:323) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:539) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:994) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:539) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:757) at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:178) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1985) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1832) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1698) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1577) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:996) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:533) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:1551) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:196) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:72) at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:73) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:183) at java.sql.DriverManager.getConnection(DriverManager.java:512) at java.sql.DriverManager.getConnection(DriverManager.java:140) at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:836) at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:698) at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:528) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:289) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)============= end nested exception  level (2) ===========-More-   ,0
375,Specification of incomplete server properties on command line causes NPE with NetworkServerControl when starting the server.    When using the command line to start the Network Server  there a couple of cases where if a property is specified on the command line but no value is given (ex. '-Dderby.drda.maxThreads' instead of '-Dderby.drda.maxThreads=3')  a Null Pointer Exception will result  when the correct behavior should be to use some kind of default.For example:&gt; java -Dderby.drda.maxThreads org.apache.derby.drda.NetworkServerControl start -p 1528java.lang.NullPointerException at org.apache.derby.impl.drda.NetworkServerControlImpl.localizeMessage(NetworkServerControlImpl.java) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(NetworkServerControlImpl.java) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(NetworkServerControlImpl.java) at org.apache.derby.impl.drda.NetworkServerControlImpl.getIntPropVal(NetworkServerControlImpl.java) at org.apache.derby.impl.drda.NetworkServerControlImpl.getPropertyInfo(NetworkServerControlImpl.java) at org.apache.derby.impl.drda.NetworkServerControlImpl.&lt;init&gt;(NetworkServerControlImpl.java) at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java)Note that even though we see this NPE  it appears that the server still starts up  although the startup may not be complete (subsequent attempts to connect might lead to errors like 'Invalid reply from network server: Insufficient data.').For other properties  this will just result in the default value being used  which is the correct behavior. For example:&gt; java -Dderby.drda.host org.apache.derby.drda.NetworkServerControl start -p 1528Server is ready to accept connections on port 1528.   ,0
385,servlet Back to Main Page link points to csnet instead of derbynet    The link at the top of the servlet java/drda/org/apache/derby/drda/NetServlet.java links to csnet (because of the static String SERVLET_ADDRESS). However  the servlet address is now derbynet.   ,0
387,SimpleNetworkClientSample.java network server example has an error which causes it to fail    The file SimpleNetworkClientSample.java under the demo/nserverdemo has an error which preventsit from completing successfully.The one line that is a problem is this: private static final String DERBY_CLIENT_URL= 'jdbc:derby://localhost:'+ NETWORKSERVER_PORT+'/NSSampledb;create=true';The one line fix is this: private static final String DERBY_CLIENT_URL= 'jdbc:derby://localhost:'+ NETWORKSERVER_PORT+'/' DBNAME';create=true';   ,0
389,With Network Server Database hangs after some time with many connections executing prepareStatement()    Rajesh found this issue in running Network Server system tests for the 10.1 release candidateWhile running the Network Server system test with 210 clients  the Network Server and all the clients hangs after some time. A Ctrl+/ on the Network Server shows that upto 180 threads waiting on the PreparedStatements to compile and comes from the embedded engine. The following is the stack trace from the java dump.3XMTHREADINFO 'DRDAConnThread_181' (TID:1007C998  sys_thread_t:85C4478  state:CW  native ID:4575ABB0) prio=54XESTACKTRACE at java.lang.Object.wait(Native Method)4XESTACKTRACE at java.lang.Object.wait(Object.java(Compiled Code))4XESTACKTRACE at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java(Compiled Code))4XESTACKTRACE at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java)4XESTACKTRACE at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java)4XESTACKTRACE at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java)4XESTACKTRACE at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(EmbedPreparedStatement20.java)4XESTACKTRACE at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(EmbedPreparedStatement30.java)4XESTACKTRACE at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Driver30.java)4XESTACKTRACE at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java)4XESTACKTRACE at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java)4XESTACKTRACE at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)4XESTACKTRACE at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code))4XESTACKTRACE at java.lang.reflect.Method.invoke(Method.java(Compiled Code))4XESTACKTRACE at org.apache.derby.impl.drda.DRDAStatement.prepareStatementJDBC3(DRDAStatement.java)4XESTACKTRACE at org.apache.derby.impl.drda.DRDAStatement.prepare(DRDAStatement.java)4XESTACKTRACE at org.apache.derby.impl.drda.DRDAStatement.explicitPrepare(DRDAStatement.java(Compiled Code))4XESTACKTRACE at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT(DRDAConnThread.java(Compiled Code))4XESTACKTRACE at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java(Compiled Code))4XESTACKTRACE at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java)   ,0
392,Disable creating indexes on long varchar for bit data. Long varchar column doesn't allow creating indexes already.    I guess I did not articulate my reasons for suggesting removal of index support for 'long varchar for bit data' completely. 1) Long varchar types are not comparable... If they are not comparable  it should not be possible to use them in GROUP BY  ORDER BY or allow regular B-Tree indexes. 2) Also  long varchar types tend to be long in size and hence the regular B-Tree mechanism is not a suitable way to index them. Dan also mentioned they become ineffective for keys longer than half a page size.It should not be possible to create an index on 'long varchar for bit data' datatypes. Derby currently doesn't allow creating indexes on 'long varchar' datatypes and the same should apply for it's bit data equivalent too.ij&gt; create table longchar ( i int  c long varchar);0 rows inserted/updated/deletedij&gt; create index longIdx on longchar(c);ERROR X0X67: Columns of type 'LONG VARCHAR' may not be used in CREATE INDEX  ORDER BY  GROUP BY  UNION  INTERSECT  EXCEPT or DISTINCT statements because comparisons are not supported for that type.ij&gt; create table longcharBitData ( i int  c long varchar for bit data);0 rows inserted/updated/deletedij&gt; create index longIdx on longcharBitData(c);0 rows inserted/updated/deletedDerby also seems to allow GROUP BY and/or ORDER BY on LONG VARCHAR FOR BIT DATA types. I believe this is incorrect too.select c from longcharBitData group by c;C--------------------------------------------------------------------------------------------------------------------------------0 rows selectedij&gt; select c from longcharBitData group by c order by c;C--------------------------------------------------------------------------------------------------------------------------------0 rows selected   ,0
400,Network client message strings not internationalized    In investigating DERBY-254  I discovered that all SQLExceptions are thrown with hardcoded English error messages. This needs to be modified to use message string resource bundles similar to the embedded code.   ,0
406,Client DataSource should not require user property to be set    ClientDataSource should not require user to be set. It should default to user APP as described in:http://incubator.apache.org/derby/docs/adminguide/cadminappsclient.htmlThis all seems to work ok for for DriverManager connections but fails for ClientDataSource run the attached repro $ java DataSourceNoUserembedded no userid/passwordclient userid/password setclient no passwordclient no userid/no passwordorg.apache.derby.client.am.SqlException: null userid not supported at org.apache.derby.client.net.NetConnection.checkUser(NetConnection.java:998) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:380) at org.apache.derby.client.net.NetConnection.initialize(NetConnection.java:233) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(NetConnection.java:201) at org.apache.derby.jdbc.ClientDataSource.getConnection(ClientDataSource.java:156) at org.apache.derby.jdbc.ClientDataSource.getConnection(ClientDataSource.java:135) at DataSourceNoUser.main(DataSourceNoUser.java:42)   ,0
415,sysinfo with -cp client option should not print error saying DB2 jar file and driver class are missing    If you run java org.apache.derby.tools.sysinfo -cp client SimpleApp.classyou getFOUND IN CLASS PATH: Derby Client libraries (derbyclient.jar) user-specified class (SimpleApp)NOT FOUND IN CLASS PATH: Derby Client libraries (db2jcc.jar) (com.ibm.db2.jcc.DB2Driver not found.)The 'NOT FOUND IN CLASSPATH' output is confusing and invalid because we're testing the network client  not the DB2 JCC client.   ,0
422,Create a new sample database for use in examples in the manuals    The Derby manuals still refer to Cloudscape example databases that were unable to be contributed to Derby. A new sample database should be created which is complex enough to serve as the basis for examples in the various manuals.   ,0
424,Queryplan for a query using SESSION schema view is incorrectly put in statement cache. This could cause incorrect plan getting executed later if a temp. table is created with that name.    See DERBY-405 for some discussion related this issue. I suspect this is because of statement caching. Derby doesn't seem to recognise we have a temporary table that just overloaded an existing physical table. It would have been good to avoid permanent tables/views/synonyms in SESSION schema. Not sure what we should do now about this  though. ij&gt; create view session.st1 as select * from t; 0 rows inserted/updated/deleted ij&gt; select * from session.st1; I |J |K ----------------------------------- 1 |1 |NULL 2 |2 |NULL 3 |3 |NULL 4 |4 |NULL 4 rows selected ij&gt; select * from t; I |J |K ----------------------------------- 1 |1 |NULL 2 |2 |NULL 3 |3 |NULL 4 |4 |NULL 4 rows selected ij&gt; declare global temporary table st1(c11 int  c12 int) on commit preserve rows  not logged; 0 rows inserted/updated/deleted ij&gt; select * from session.st1; I |J |K ----------------------------------- 1 |1 |NULL 2 |2 |NULL 3 |3 |NULL 4 |4 |NULL 4 rows selected ij&gt; select * from session.st1; &lt;==== This statement has an extra space between FROM and session.st1 C11 |C12 ----------------------- 0 rows selected   ,0
479,Passing the return of  a RETURN NULL ON NULL INPUT function to another function call throws linkage error.    Error in ij (RN_RADIANS is a function declared as returns null on null input)ij&gt; VALUES CAST( CALL_COS(RN_RADIANS(90.0)) AS DECIMAL(3 2));ERROR XBCM1: Java linkage error thrown during load of generated class org.apache.derby.exe.ace5214067x0105x5e41x7a46xffff855452e375.ERROR XJ001: Java exception: '(class: org/apache/derby/exe/ace5214067x0105x5e41x7a46xffff855452e375  method: e0 signature: ()Ljava/lang/Object Expecting to find double on stack: java.lang.VerifyError'.extract from derby.log2005-07-28 16:23:43.836 GMT Thread&#91;main 5 main&#93; Wrote class org.apache.derby.exe.ace5214067x0105x5e41x7a46xffff855452e375 to file C:&#95;work/svn_pb/trunk/systest/out/functions/ace5214067x0105x5e41x7a46xffff855452e375.class. Please provide support with the file and the following exception information: java.lang.VerifyError: (class: org/apache/derby/exe/ace5214067x0105x5e41x7a46xffff855452e375  method: e0 signature: ()Ljava/lang/Object Expecting to find double on stackI will add a test case to lang/functions.sql commented with this bug number. Test casesthat fail will be commented out.   ,0
483,Error message  X0X07  has incorrect property name  db2j.database.classpath instead of derby.database.classpath    Example output is in the test lang/dcl.sql  extracted here.ERROR X0X07: Cannot drop jar file ''EMC'.'MAIL_APP'' because its on your db2j.database.classpath ''EMC'.'MAIL_APP''.Also the its should be it's (it is).Might also make sense to change drop to remove  as the procedure is called remove_jar.   ,0
485,SecurityException or LinkageException thrown during loading a class from a database jar incorrectly shuts the engine down.    In addiing test cases to lang/dcl.test for signed jar files stored in the database I found that if a jar is installed with a tampered class the resulting SecurityException shuts Derby down. Most likely the same would be true for an invalid class hacked into the jar.   ,1
488,DatabaseMetaData.getColumns() fails on iSeries JDK 1.4 with verfier error on generated class.    Analysis shows that ----------------------------------------------------------------------The problem is occurring starting at offset 2007 in method e23. There is an invokeinterface to method setWidth(int  int  boolean) of class VariableSizeDataValue. This invoke returns a value of class DataValueDescriptor. That value is in turn stored in field e142 at offset 2015 in method e23. The problem is that field e142 is a NumberDataValue  and DataValueDescriptor is not a valid subclass of NumberDataValue. Thus the store is not allowed.----------------------------------------------------------------------Looking at the generated setWidth() calls I see one in BinaryOperatorNode where the return (DataValueDescriptor) is not cast to the type of the field it is stored in.   ,0
498,Result set holdability defined inside stored procedures is ignored by server/client    Assume I have a Java stored procedure that returns one or more result sets  and the holdability of those result sets is specified as part of the createStatement() method within the procedure definition (see below for an example).If I execute this procedure against Derby embedded  the holdability of each result set matches that of the statement-specific holdability that is defined within the stored procedure. However  if I run the procedure against the Network Server using the Derby client  the holdability of all result sets is the same  and it is based on the holdability of the statement that executed the procedure--i.e. the statement-specific holdability that is defined within the procedure is ignored.Ex: If I create a stored procedure that corresponds to the following method:public static void p2(ResultSet[] rs1  ResultSet[] rs2  ResultSet[] rs3) throws Exception{ Connection conn = DriverManager.getConnection( 'jdbc:default:connection'); Statement st1 = conn.createStatement( ResultSet.TYPE_FORWARD_ONLY  ResultSet.CONCUR_READ_ONLY  ResultSet.HOLD_CURSORS_OVER_COMMIT); rs1[0] = st1.executeQuery('select * from testtable1'); Statement st2 = conn.createStatement( ResultSet.TYPE_FORWARD_ONLY  ResultSet.CONCUR_READ_ONLY  ResultSet.CLOSE_CURSORS_AT_COMMIT); rs2[0] = st2.executeQuery('select * from testtable2'); Statement st3 = conn.createStatement( ResultSet.TYPE_FORWARD_ONLY  ResultSet.CONCUR_READ_ONLY  ResultSet.HOLD_CURSORS_OVER_COMMIT); rs3[0] = st3.executeQuery('select * from testtable3'); return; }}Then with Derby embedded  if I have a JDBC Statement that executes a call to this procedure  rs1 and rs3 will behave with HOLD_CURSORS holdability and rs2 will behave with CLOSE_CURSORS holdability--and that will be the case regardless of the holdability on the Statement that executed the call. That seems correct to me.But if I do the same thing with Network Server  all of the result sets (rs1  rs2  and rs3) will have the same holdability as the JDBC Statement that executed the call. It doesn't matter what the holdabilities used within the procedure definition are: they will all be over-ridden by the holdability of the Statement that made the call.   ,0
499,Expose BOOLEAN datatype to end users    Veaceslav Chicu started an email thread on 8 August 2005 titled 'boolean type'. He was disappointed that Derby doesn't support the ansi BOOLEAN datatype. On closer inspection  Derby does internally support this type but does not expose this support to end users.Derby should let users declare table columns of type BOOLEAN. This should be an indexable datatype.   ,0
504,SELECT DISTINCT returns duplicates when selecting from subselects    When one performs a select distinct on a table generated by a subselect  there sometimes are duplicates in the result. The following example shows the problem:ij&gt; CREATE TABLE names (id INT PRIMARY KEY  name VARCHAR(10));0 rows inserted/updated/deletedij&gt; INSERT INTO names (id  name) VALUES (1  'Anna')  (2  'Ben')  (3  'Carl')  (4  'Carl')  (5  'Ben')  (6  'Anna');6 rows inserted/updated/deletedij&gt; SELECT DISTINCT(name) FROM (SELECT name  id FROM names) AS n;NAME ----------Anna Ben Carl Carl Ben Anna Six names are returned  although only three names should have been returned.When the result is explicitly sorted (using ORDER BY) or the id column is removed from the subselect  the query returns three names as expected:ij&gt; SELECT DISTINCT(name) FROM (SELECT name  id FROM names) AS n ORDER BY name;NAME ----------Anna Ben Carl 3 rows selectedij&gt; SELECT DISTINCT(name) FROM (SELECT name FROM names) AS n;NAME ----------Anna Ben Carl 3 rows selected   ,0
514,Integrate upgrade tests into test suite    Currently there are no upgrade tests in the derbyAll suite.The upgrade tests java/testing/org/apache/derbyTesting are run by script and require that the version to be tested by specified on the command line so that the classpath can be changed. runphases old_major old_minor old_engine new_engine# e.g.# runphases 10 0 c:/derby/10.0.2.1/lib c:/derby/trunk/jars/sanePerhaps this script can be rewritten in Java using class loaders and previous Derby verssions such as 10.0 and 10.1 be checked in so that this testing can be incorporated into the derbyAll test suite.   ,0
525,getAsciiStreamshould replace non-ASCII characters with 0x3f  '?'  to match embedded    When calling Clob.getAsciiStream or ResultSet.getAsciiStream if the column type is a character type or a CLOB  then any out of range character (to the ASCII set) needs to be replaced by 0x3f ('?'  question mark). ASCII is defined as 8 bit characters  thus Unicode Characters in the range 0x0000 to 0x00ff are mapped to ASCII characters 0x00 to 0xff  and Unicode characters in the range 0x0100 to 0xffff are mapped to 0x3fBy code inspection:client code in org.apache.derby.client.am.ResultSetembedded in org.apache.derby.impl.jdbc.ReaderToAscii   ,0
527,Incorrect insane build on windows platform    I've found that Derby will not build sane properly for me. I have isolated it to here: &lt;target name='evaluate.sane'&gt; &lt;condition property='generate.sane'&gt; &lt;equals arg1='${sane}' arg2='true'/&gt; &lt;/condition&gt; &lt;/target&gt;The scope of the generate.sane property is limited to this target (only tested in a Windows XP environment)  ergo it will always be an insane build. Patch to follow shortly.   ,0
530,ClientDriver ignores Properties object in connect(String url  Properties connectionProperties) method    In contrast to EmbeddedDriver  a connection attribute create=true is not recognized when presented as a property in a Properties object. As a workaround I append the attributes from the Properties object to the url string before invoking the connect() method: then a new database is created and a connection is established.Next code fragment illustrates the bug and the workaround: private static final ClientDriver clientDriver = new ClientDriver(); private Connection getClientConnection(String database  Properties connectionProperties) throws SQLException { try { System.out.println('Try to connect with properties'); String connectionURL = 'jdbc:derby://127.0.0.1:1527/' + database; System.out.println('connectionURL: ' + connectionURL); Connection rv = clientDriver.connect(connectionURL  connectionProperties); System.out.println('Connection: ' + rv); return rv; } catch (SQLException e) { System.out.println('Try to connect with URL attributes'); StringBuffer sb = new StringBuffer(); for (Enumeration enu = connectionProperties.propertyNames(); enu .hasMoreElements() { String key = (String) enu.nextElement(); sb.append(';'); sb.append(key); sb.append('='); sb.append(connectionProperties.getProperty(key  '')); } String connectionURL = 'jdbc:derby://127.0.0.1:1527/' + database + sb.toString(); System.out.println('connectionURL: ' + connectionURL); Connection rv = clientDriver.connect(connectionURL  connectionProperties); System.out.println('Connection: ' + rv); System.out .println('!!!!!!!!!!! seems a bug: Properties argument in ClientDriver.connect(String  Properties) has not been used'); return rv; } }   ,0
536,The current build.properties for the Derby Help Plug-in for Eclipse does not work for creating a deployable plug-in    While updating the information for the web site about the Derby plug-ins I revised the instructions on how to create zip files for the plug-ins. The current build.properties file for the help plug-in did not work to create a deployable plug-in  without manual intervention. The attached patch for the build.properties file for the help plug-in should replace the existing one  which allows users to select Export &gt;&gt; Deployable plug-ins and fragments and then create a zip file which is suitable for deployment.svn stat output:M plugins/eclipse/org.apache.derby.plugin.doc/build.propertiesTests:I built a new doc zip file using the new build.properties file  unzipped it to another eclipse install in the ECLIPSE_HOME directory and made sure all of the files for the help were in the correct location and accessible.I'd appreciate it if someone could commit this.Thanks Susan   ,0
540,Loading databases from jars in the classpath is broken  databases cannot be found.    In converting an old Cloudscape test to ensure changes made for DERBY-538 would not break loading from classes stored in the database when the database itself is in a jar  I discovered that a database cannot be found that is in a jar on the classpath.Discovered the reason is the StoreFactory implementation for classpath always prepends a leading foward slash to the database name  but this is incorrect (e.g. db7 to /db7). This causes the database not to be found when the classloader is URLClassLoader as the correct path for the service.properties file is db7/services.properties  not /db7/services.properties.Will add converted test (lang/dbjar.sql)   ,0
541,Read-only databases fail to boot after soft upgrade. Raises error message:  40XD1: Container was opened in read-only mode.    Attempting to boot a database that is created using Derby 10.0 fail in soft upgrade mode in Derby 10.1 or in trunk. (10.2) Boot fails with Error 40XD1: Container was opened in read-only mode.After debugging the problem a little  it seems soft upgrade code attempts do change a database property value and since the database is read-only  the error is raised. Here is what I tried:ij&gt; connect 'jdbc:derby:jar:(t10.jar)t10db';ERROR XJ040: Failed to start database 'jar:(t10.jar)t10db'  see the next exception for details.ERROR 40XD1: Container was opened in read-only mode.Here is the stack trace:ERROR 40XD1: Container was opened in read-only mode. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:301) at org.apache.derby.impl.store.raw.data.BaseContainer.use(BaseContainer.java:539) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(BaseContainerHandle.java:786) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:633) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:494) at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Xact.java:1270) at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.init(OpenConglomerate.java:865) at org.apache.derby.impl.store.access.heap.Heap.openScan(Heap.java:675) at org.apache.derby.impl.store.access.RAMTransaction.openScan(RAMTransaction.java:530) at org.apache.derby.impl.store.access.RAMTransaction.openScan(RAMTransaction.java:1582) at org.apache.derby.impl.store.access.PropertyConglomerate.openScan(PropertyConglomerate.java:230) at org.apache.derby.impl.store.access.PropertyConglomerate.saveProperty(PropertyConglomerate.java:296) at org.apache.derby.impl.store.access.PropertyConglomerate.setProperty(PropertyConglomerate.java:535) at org.apache.derby.impl.store.access.RAMTransaction.setProperty(RAMTransaction.java:1787) at org.apache.derby.impl.sql.catalog.DD_Version.applySafeChanges(DD_Version.java:281) at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:223) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(DataDictionaryImpl.java:5826) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(DataDictionaryImpl.java:629) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1996) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:542) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.bootDataDictionary(GenericLanguageConnectionFactory.java:355) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.boot(GenericLanguageConnectionFactory.java:328) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1996) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:542) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:418) at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:193) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1996) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:290) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1834) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1700) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartServiceBaseMonitor.java:1528) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:998) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:990) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:533) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:1551) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:196) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:72) at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:73) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:183) at java.sql.DriverManager.getConnection(DriverManager.java:512) at java.sql.DriverManager.getConnection(DriverManager.java:140) at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:836) at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:698) at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:528) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:289) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)ij&gt;   ,0
582,Dynamic parameter should be allowed to be the operand of unary operator '-'. Derby throws exception 42X36: The '-' operator is not allowed to take a ? parameter as an operand.'    A simple test program which uses dynamic parameter for unary operator '-' fails with an exception. Following is the snippet of the code ps = con.prepareStatement('select * from t1 where c11 = -?'); ps.setInt(1 1); rs = ps.executeQuery();The prepareStatement call fails with following exceptionSQLSTATE(42X36):ERROR 42X36: The '-' operator is not allowed to take a ? parameter as an operand.   ,0
595,Using derby.language.logStatementText=true can mask certain exceptions and lead to incorrect behavior in some cases    Using derby.language.logStatementText=true can mask certain exceptions and lead to incorrect behavior.I observed this with tests using streams  where if valid (expected) exceptions are raised when DVD.getString() is called  the exception gets eaten up when this property is set. See 1)in GenericParameter.toString()try{return value.getString();}catch (StandardException se){return 'unexpected exception from getString() - ' + se;}}2)in GenericPreparedStatement.execute()  where pvs.toString() is called for the parameters.________Reproduction: Run the test jdbcapi/resultsetStream.java   with derby.language.logStatementText=true and expected error exceptions wont be thrown for the error cases. I looked at the tests that use streams   only the store/streamingColumn.java uses derby.language.logStatementText=true. I'll file another bug to resolve this test.   ,0
606,SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE fails on (very) large tables    SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE fails with one of the following error messages when applied to a very large table (&gt;2GB):Log operation null encounters error writing itself out to the log stream  this could be caused by an errant log operation or internal log buffer full due to excessively large log operation. SQLSTATE: XJ001: Java exception: ': java.io.IOException'.orThe exception 'java.lang.ArrayIndexOutOfBoundsException' was thrown while evaluating an expression. SQLSTATE: XJ001: Java exception: ': java.lang.ArrayIndexOutOfBoundsException'.In either case  no entry is written to the console log or to derby.log.   ,0
618,Make the client driver connection URL work when spaces are in the URL.    At present  if I want to connect to a database on a Derby server which has a space in the path  there is no way to do it.This can be done with the embedded driver  and for consistency it would be good if it worked for the client driver in the same fashion.   ,0
622,sysinfo incorrectly requires permission on Derby jar files    Running the test derbynet/sysinfo.java requires this permission in derby_tests.policy  in order to read the jar files.permission java.io.FilePermission '${csinfo.codedir}${/}*'  'read'But according to the Java security specs:'Note: code can always read a file from the same directory it's in (or a subdirectory of that directory); it does not need explicit permission to do so.'Probably means a privileged block is required when accessing the contents of the jar files in sysinfo   ,1
623,Derby monitor accesses two system properties without using a privileged block when built sane=true    When built with sane=true and testing with the jars these permissions are required to be granted all the way up the stack  currently this means for the tests granting them to the network server jar. permission java.util.PropertyPermission 'derby.monitor.verbose'  'read'; permission java.util.PropertyPermission 'derby.debug.*'  'read';The engine contains code to read system properties using privileged blocks  this should be used by the monitor.   ,1
630,create trigger fails with null pointer exception    When i create a brand new database  and execute the following statements all in one transaction or each of them in their own transaction  then it fails at trigger creation with null pointer exception. if i exclude the schema names from statement  then it runs fine. (If S1 is ommited from every statement then it runs fine). Once the version without the schema names run fine  i can run the version that has schema names  fine also. create schema S1;create table S1.PRODUCT( PRODUCT_ID VARCHAR(255) unique not null  VERSION BIGINT );create table S1.CATEGORY( CAT_ID VARCHAR(255)  NAME varchar(255) not null  VERSION BIGINT );create table S1.PROD_IN_CAT( CAT_ID VARCHAR(255) not null  PRODUCT_ID VARCHAR(255) not null  VERSION BIGINT );create trigger S1.product_v after update of version on S1.productreferencing new as nfor each rowmode db2sql update S1.prod_in_cat set version = n.version where S1.prod_in_cat.product_id=n.product_id;java.lang.NullPointerException at org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeSYSSTATEMENTSrow(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(Unknown Source) at org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.createSPS(Unknown Source) at org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(Unknown Source)Stopping progress indicator for: Executing SQL at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)   ,0
634,Subquery materialization can cause stack overflow    A performance optimization in subquery processing can cause a stack overflow.The optimization materializes a subquery ResultSet in memory where it thinks the rows will fit in memory. The materialization is done as a set of nested unions of constant rows (UnionResultSets and RowResultSets). If there are a lot of rows this can cause a stack overflow when fetching a row.The obvious fix is to make it use an iterative technique rather than a recursive one for storing and returning the rows. See the method BaseActivation.materializeResultSetIfPossible() in the language execution code.There are some other issues with this performance optimization that should be looked at:1) The optimization can backfire  making the query run much slower. For example  in the query: select * from one_row_table where column1 not in (select column2 from million_row_table)reading million_row_table into memory is an expensive operation. If there is an index on million_row_table.column2  the query should return a result very quickly despite the large size of million_row_table by doing a single probe into million_row_table via the index.Since in-memory materialization can be an expensive operation  the decision about whether to do it should be made based on query optimizer cost estimates. See SubqueryNode.generateExpression().2) It may not be wise to cache partial query results in memory at all. Although this can help performance in some cases  it also chews up memory. This is different from a limited-size cache with a backing store (like what the store uses for page caching). The language has no way to limit the total amount of memory used in this type of processing. Note that hash joins originally used in-memory hash tables with no backing store  and that a backing store was added later.3) The implementation of this optimization has some problems. The decision to materialize the subquery results in memory is made during code generation - all such decisions should be made during the compilation phase. It's not clear to me why materializeResultSetIfPossible() is in BaseActivation - I would expect the of materialization to be done by a type of ResultSet  not by a method in BaseActivation. Also  this method calls getMaxMemoryPerTable() in the OptimizerFactory - nothing in the execution code should refer to anything in the compilation code (perhaps getMaxMemoryPerTable() should be moved somewhere else).   ,0
638,Network driver setTransactionIsolation() causes a commit  but does not complete it locally    When autocommit is set to false  a call to setTransactionIsolation using client driver does not end the transaction when the method exits. When a close() is called on the conection  it throws an exception.Running the code below: conn.setAutoCommit(false); conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); try{ conn.close(); }catch(SQLException se){ System.out.println('Got exception when closing the connection'); se.printStackTrace(); }with client driver gives:Got exception when closing the connectionorg.apache.derby.client.am.SqlException: java.sql.Connection.close() requested while a transaction is in progress on the connection.The transaction remains active  and the connection cannot be closed.with embedded driver  it works okay and does not throw any exception.   ,0
642,SELECT MAX doesn't use indices optimally    I tried running SELECT MAX on an indexed column in a big (8 GB)table. It took 12 minutes  which is about 12 minutes more than Iexpected.After a bit of investigation  I found out that a full index scan wasperformed because all the rows referenced from the rightmost B-treenode were actually deleted.Possible improvements: 1. Implement backwards scan in the B-trees (this is also suggested in the comments in BTreeMaxScan). 2. Go up to the parent node and down to the next leaf node on the left side  and continue until a valid max value is found. In Derby  traversing up in a B-tree is not allowed  but would it be ok to go up if the latches were kept on the higher-level nodes in the tree? Of course  this would have negative impact on concurrency. 3. Right-to-left traversal on the leaf level is possible (using ControlRow.getLeftSibling())  but will throw an exception if the page cannot be latched without waiting. It is therefore possible to try a right-to-left search for the max value  and only fall back to the left-to-right approach if a conflict arises.   ,0
655,getImportedKeys returns duplicate rows in some cases    I have a database with a large number of tables. I get duplicate rows when I call DatabaseMetaData.getImportedKeys for a particular table. However  if I create the same table with same number of foreign keys in another database (which has fewer number of tables)  then getImportedKeys returns me the correct number of rows. This error seems to happen only when the database has a large number of tables. I will attach a repro for this shortly.   ,0
656,SecurityException with accessDeclaredMembers on DatabaseMetaData.getTables.    The code to determine the size of a class is using getDeclaredMembers which requires the permission accessDeclaredMembers. Ideally should not require to grant this permission to derby.jar. Need to see whichclass's size was being calculated. The code is not in a priv block which would require granting the permission all the way up the stack.Maybe if the class's declared memebrs can not be accessed and the value can not be pre-calculkated then some estimate could be made. (using public fields?).java.security.AccessControlException: Access denied (java.lang.RuntimePermission accessDeclaredMembers) at java.security.AccessController.checkPermission(AccessController.java:107) at java.lang.SecurityManager.checkPermission(SecurityManager.java:547) at com.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:188) at java.lang.SecurityManager.checkMemberAccess(SecurityManager.java:1677) at java.lang.Class.checkMemberAccess(Class.java:104) at java.lang.Class.getDeclaredFields(Class.java:508) at org.apache.derby.iapi.services.cache.ClassSize.getSizeCoefficients(Unknown Source) at org.apache.derby.iapi.services.cache.ClassSize.estimateBase(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.&lt;clinit&gt;(Unknown Source) at java.lang.J9VMInternals.initializeImpl(Native Method) at java.lang.J9VMInternals.initialize(J9VMInternals.java:148) at org.apache.derby.impl.sql.execute.HashTableResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source) at org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTables(Unknown Source)   ,1
662,during crash recovery of a drop table  on case insensitive files systems derby may delete wrong file    Sometimes during redo the system will incorrectly remove the file associatedwith a table. The bug requires the following conditions to reproduce:1) The OS/filesystem must be case insensitive such that a request to delete a file named C2080.dat would also remove c2080.dat. This is true in windows default file systems  not true in unix/linux filesystems that I am aware of.2) The system must be shutdown not in a clean manner  such that a subsequent access of the database causes a REDO recovery action of a drop table statement. This means that a drop table statement must have happened since the last checkpoint in the log file. Examples of things that cause checkpoints are: o clean shutdown from ij using the 'exit' command o clean shutdown of database using the 'shutdown=true' url o calling the checkpoint system procedure o generating enough log activity to cause a regularly scheduled checkpoint.3) If the conglomerate number of the above described drop table is TABLE_1  then for a problem to occur there must also exist in the database a table such that it's HEX(TABLE_2) = TABLE_14) Either TABLE_2 must not be accessed during REDO prior to the REDO operation of the drop of TABLE_1 or there must be enough other table references during the REDO phase to push the caching of of the open of TABLE_2 out of cache.If all of the above conditions are met then during REDO the system willincorrectly delete TABLE_2 while trying to redo the drop of TABLE_1.&lt;p&gt;I will be adding the following test to reproduce the problem:1) create 500 tables  need enough tables to insure that conglomerate number 2080 (c820.dat) and 8320 (c2080.dat) exist.2) checkpoint the database so that create does not happen during REDO3) drop table with conglomerate number 2080  mapping to c820.dat. It looks it up in the catalog in case conglomerate number assignment changes for some reason.4) exit the database without a clean shudown  this is the default for test suites which run multiple tests in a single db - no clean shutdown is done. Since we only do a single drop since the last checkpoint  test will cause the drop during the subsequent REDO.5) run next test program dropcrash2  which will cause redo of the drop. At this point the bug will cause file c2080.dat to be incorrectly deleted and thus accesses to conglomerate 8320 will throw container does not exist errors.6) check the consistency of the database which will find the container does not exist error.   ,0
665,Remove backup(File ...) methods    The code contains backup methods both for specifying the backup directory both as a String and as a File parameter. Only the String versions are currently used. The File versions should be removed to avoid duplication of code etc.Examples of such methods are:BasicDatabase.backupBasicDatabase.backupAndEnableLogArchiveModeRAMAccessManager.backupRAMAccessManager.backupAndEnableLogArchiveModeRawStore.backupAndEnableLogArchiveModeplus corresponding interfaces.   ,0
675,Build-time processing of 'metadata.properties' file handles slashes incorrectly.    As found and described by Mamta here:http://www.nabble.com/-Derby-573-Optimizer-overrides-and-metadata.properties-files-t460642.htmlDuring the ant build process  Derby's metadata.properties file is modified by the ODBCMetadataGenerator class and that class treats backslashes that occur in the metadata.properties file incorrectly. More specifically  it treats every backslash as the end of a line and thus will translate things likeFROM --DERBY-PROPERTIES joinOrder=FIXED n /intoFROM --DERBY-PROPERTIES joinOrder=FIXED //n /(in other words  escaped characters like '/n' are handled incorrectly)..   ,0
680,In ij  executing a prepared statement with numeric/decimal parameter fails with NullPointerException in J2ME/CDC/FP    NPE is thrown in ij when executing prepared statement which  has numeric/decimal parameters does not return any result setRepro for this problem is the test lang/cast.sql. This test currently fails in CDC/FP.The following lines in the test throw NPE:execute q10 using 'values 123456.78';execute q11 using 'values 123456.78';where q10 is 'prepare q10 as 'insert into t1 (num) values cast(? as numeric(18))';'and q11 is 'prepare q11 as 'insert into t1 (dc) values cast(? as decimal(18))';'The stack trace for failure is:java.lang.NullPointerException at org.apache.derby.impl.tools.ij.util.DisplayMulti(util.java:666) at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:398) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:290) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:56)This happens in the following code. Since the above prepared statements do not return result sets  call to getMetaData() will return null. But in the code  no check is done to see if getMetaData() returns null before calling getColumnType.------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- // In J2ME there is no object that represents // a DECIMAL value. By default use String to // pass values around  but for integral types // first convert to a integral type from the DECIMAL // because strings like 3.4 are not convertible to // an integral type. switch (ps.getMetaData().getColumnType(c)) { case Types.BIGINT: ps.setLong(c  rs.getLong(c)); break; case Types.INTEGER: case Types.SMALLINT: case Types.TINYINT: ps.setInt(c  rs.getInt(c)); break; default: ps.setString(c rs.getString(c)); break; } -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   ,0
682,Add tests for error codes for severe exceptions    Add tests to test error codes for disconnect exceptions and other severe errors for client and embedded drivers.   ,0
714,NullPointerException or ClassCastException if UPDATE or DELETE is performed on a diagnostic VTI    UPDATE and DELETE statements on read-only vtis will hit NullPointerException in insane mode  and ClassCastException in sane mode.ij&gt; delete from new org.apache.derby.diag.TransactionTable();ERROR XJ001: Java exception: ': java.lang.NullPointerException'.While these statements make no sense  a more graceful error should be returned  especially as in insane mode this causes the engine to shutdown. Code already exists to detect this situation but is not being called.Found through adding negative tests for DERBY-571   ,0
718,Network client: deleteRow() makes getter methods return nulls for the following rows.    On the network driver  the ResultSet.deleteRow() method causes the getXXX() methods in the following rows to return null values. It should be possible to use the getXXX methods after positioning the cursor in the next row. It also has this side effect on other result sets if these are created with the same prepared statement.The repro case is uploaded as an attachment 'testDeleteRow.java'Output of the report case:List all rowsRow: 1: Testing 1Row: 2: Testing 2Row: 3: Testing 3Row: 4: Testing 4Row: 5: Testing 5Row: 6: Testing 6Row: 7: Testing 7Row: 8: Testing 8Row: 9: Testing 9Row: 10: Testing 10List all rows and delete first rowRow: 1: Testing 1Row deleted!Row: 0: nullRow: 0: nullRow: 0: nullRow: 0: nullRow: 0: nullRow: 0: nullRow: 0: nullRow: 0: nullRow: 0: nullList all rowsRow: 2: Testing 2Row: 3: Testing 3Row: 4: Testing 4Row: 5: Testing 5Row: 6: Testing 6Row: 7: Testing 7Row: 8: Testing 8Row: 9: Testing 9Row: 10: Testing 10   ,0
728,Unable to create databases whose name containg Chinese characters through the client driver    Trying to create a database with the following URL (note the Chinese character in the database name):jdbc:derby://localhost:1527//u4e10;create=truethrows the following exception:----%&lt;----Exception in thread 'main' org.apache.derby.client.am.SqlException: Unicode string can't convert to Ebcdic string at org.apache.derby.client.net.EbcdicCcsidManager.convertFromUCS2(Unknown Source) at org.apache.derby.client.net.Request.writeScalarPaddedString(Unknown Source) at org.apache.derby.client.net.NetConnectionRequest.buildRDBNAM(Unknown Source) at org.apache.derby.client.net.NetConnectionRequest.buildACCSEC(Unknown Source) at org.apache.derby.client.net.NetConnectionRequest.writeAccessSecurity(Unknown Source) at org.apache.derby.client.net.NetConnection.writeServerAttributesAndKeyExchange(Unknown Source) at org.apache.derby.client.net.NetConnection.flowServerAttributesAndKeyExchange(Unknown Source) at org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(Unknown Source) at org.apache.derby.client.net.NetConnection.flowConnect(Unknown Source) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.ClientDriver.connect(Unknown Source) at java.sql.DriverManager.getConnection(DriverManager.java:525) at java.sql.DriverManager.getConnection(DriverManager.java:193) at jdbctest.Main.main(Main.java:33)----%&lt;----It's possible  however  to create databases using the embedded driver  using an URL like:jdbc:derby:/u4e10;create=trueTested with both 10.1.1.0 and 10.1.2.1 with the same result.Complete code to reproduce the bug:----%&lt;----public static void main(String[] args) throws Exception { Class.forName('org.apache.derby.jdbc.ClientDriver'); Connection conn = DriverManager.getConnection('jdbc:derby://localhost:1527//u4e10;create=true');}----%&lt;----   ,0
733,Starvation in RAFContainer.readPage()    When Derby is completely disk bound  threads might be starved inRAFContainer.readPage(). This is a real problem when multiple clientsare repeatedly accessing one or a small number of large tables. Incases like this  I have observed very high maximum response times(several minutes in the worst cases) on simple transactions. Theaverage response time is not affected by this.The starvation is caused by a synchronized block inRAFContainer.readPage(): synchronized (this) { fileData.seek(pageOffset); fileData.readFully(pageData  0  pageSize); }If many threads want to read pages from the same file  there will be along queue of threads waiting for this monitor. Since the Javaspecification does not guarantee that threads waiting for monitors aretreated fairly  some threads might have to wait for a long time beforethey get the monitor. (Usually  a couple of threads get full throughputwhile the others have to wait.)   ,0
737,SYSCS_UTIL.SYSCS_COMPRESS_TABLE should create statistics if they do not exist    There must be an entry in the SYSSTATISTICS table in order for the cardinality statistics in SYSSTATISTICS to be created with SYSCS_UTIL.SYSCS_COMPRESS_TABLE SYSCS_UTIL.SYSCS_COMPRESS_TABLE should create statistics if they don't exist. The only way to create them if the index was created on an empty table  seems to be to drop and recreate the index after the table has been loaded.The documentation will also need updating if this change is made.http://db.apache.org/derby/docs/10.1/tuning/ctunstats57373.html   ,0
744,Problem setting sanity state to false by using 'ant -Dsane=false'    Problem report from Kathey Marsden:There seems to be some sort of problem with the sanity state.After ant clobber  rm -rf jars  rm -rf snapshot no apparent problematicfiles  ant -Dsane=false snapshot seemed to sometimes build the jars tothe sane jar directory and yield the following error..... &#91;delete&#93; Deleting directory D:/svn/opensource/10.1/javadoc/sourcedir &#91;mkdir&#93; Created dir: D:/svn/opensource/10.1/snapshotBUILD FAILEDD:/svn/opensource/10.1/build.xml:1287:D:/svn/opensource/10.1/jars/insane not found.A reliable workaround was to runant insanebefore ant -Dsane=false snapshot.   ,0
781,Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.    Derby's handling of union subqueries in from list can be improved by materializing invariant resultsets once  rather than creating them many times.For example:create view V1 as select i  j from T1 union select i j from T2;create view V2 as select a b from T3 union select a b from T4;insert into T1 values (1 1)  (2 2)  (3 3)  (4 4)  (5 5);For a query like select * from V1  V2 where V1.j = V2.b and V1.i in (1 2 3 4 5)  it is possible the resultset for V2 is created 5 times. (assuming V2 is choosen as the the inner table) This can be very costly if the underlying selects can take long time and also may perform union many times.Enhance materialization logic in setOperatorNode.java. It currently returns FALSE always.public boolean performMaterialization(JBitSet outerTables) throws StandardException{ // RESOLVE - just say no to materialization right now - should be a cost based decision return false; /* Actual materialization  if appropriate  will be placed by our parent PRN. This is because PRN might have a join condition to apply. (Materialization can only occur before that. */ //return true;}   ,0
783,Enhance ALTER TABLE syntax to allow users to change the next value to be generated for an identity column    Derby allows a user to change the interval between consecutive values of the identity column using ALTER TABLE. But there is no way to change the next value to be generated for an identity column. Such a support in Derby will be very handy for tables with identity column defined as GENERATED BY DEFAULT and with a unique key defined on them. Column defined with GENERATED BY DEFAULT allows system to generate values for them or allows the user to manually supply the value for them. A column defined this way is very useful when the user might want to import some data into the generated column manually. But this can create problems when the system generated values conflict with manually inserted values.egautocommit on;create table tauto(i int generated by default as identity  k int); create unique index tautoInd on tauto; insert into tauto(k) values 1 2; &#8211; let system generate values for the identity column&#8211; now do few manual inserts into identity columninsert into tauto values (3 3); insert into tauto values (4 4); insert into tauto values (5 5); insert into tauto values (6 6); insert into tauto values (7 7); insert into tauto values (8 8); &#8211; notice that identity column at this point has used 1 through 8&#8211; now if the user wants to let the system generate a value  system will generate 3 but that is already used and hence&#8211; insert will throw unique key failure exception. System has consumed 3 at this point.insert into tauto(k) values 9;&#8211; the insert above will continue to fail with the unique key failure exceptions until system has consumed all the values till 8&#8211; If we add ALTER TABLE syntax to allow changing the next value to be generated  then user can simply use that to change&#8211; next value to be generated to 9 after the manual inserts above and then insert into tauto(k) values 9 will not failSQL standard syntax for changing the next generated valueALTER TABLE &lt;tablename&gt; ALTER &lt;columnName&gt; RESTART WITH integer-constant   ,0
787,cursor closed as a sideeffect of closing another cursor with the same name on another connection    I was writing some tests for the Scrollable updatable ResultSet feature  and found some tests failing with ERROR XCL07: Cursor 'SQLCUR0' is closed. Verify that autocommit is OFF.in ResultSet.updateRow(). The test does the following:1. set up a connection  and run a query which selects one tuple2. update the tuple using updateXXX and updateRow3. rollback the transaction and close the connectionThen  repeat the process  however this time use a different string in the query. This time updateRow() may fail with the error above. The problem has been reproduced on forward only  updatable resultsets.Workaround:It does not seem to fail if Ia  set another cursorname on the statement object b  use the same query string.I will attach the program to reproduce the problem. Below is the output:~:/&lt;3&gt;db-derby-10.1.2.1-bin/lib&gt; java -cp /home/ak136785/devel/derbytesting/derbytest/build/classes/:derby.jar derbytest.CursorIsClosedIssue1 1 19 Tuple 12 2 21 Tuple 2ERROR XCL07: Cursor 'SQLCUR0' is closed. Verify that autocommit is OFF. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.execute.CurrentOfResultSet.getCursor(Unknown Source) at org.apache.derby.impl.sql.execute.CurrentOfResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.NormalizeResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.setup(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(Unknown Source) at derbytest.CursorIsClosedIssue.runTest(CursorIsClosedIssue.java:80) at derbytest.CursorIsClosedIssue.main(CursorIsClosedIssue.java:103)   ,0
801,Allow parallel access to data files.    Derby currently serializes accesses to a data file. For example  theimplementation of RAFContainer.readPage is as follows: synchronized (this) { // 'this' is a FileContainer  i.e. a file object fileData.seek(pageOffset); // fileData is a RandomAccessFile fileData.readFully(pageData  0  pageSize); }I have experiemented with a patch where I have introduced several filedescriptors (RandomAccessFile objects) per RAFContainer. These areused for reading. The principle is that when all readers are busy  areadPage request will create a new reader. (There is a maximum numberof readers.) With this patch  throughput was improved by 50% onlinux. For more discussion on this  seehttp://www.nabble.com/Derby-I-O-issues-during-checkpointing-t473523.htmlThe challenge with the suggested approach is to make a mechanism tolimit the number of open file descpriptors. Mike Matrigali hassuggested to use the existing CacheManager infrastructure for thispurpose. For a discussion on that  see:http://www.nabble.com/new-uses-for-basic-services-cache---looking-for-advice-t756863.html   ,0
806,One each deleted or updated from a heap row a new RowPosition object is created.    See the new RowPosition in GenericConglomerateController.delete and replace. The fetch methods also have new RowPosition calls but in general these calls are not made for scans.Can a single RowPosition object be re-used across the life of the query?In general Derby should try to avoid creating objects per row in any statement as the gc overhead when operating on a large number of rows can be high.   ,0
809,Incorrect documentation for 'NetworkServerControl.logConnections(boolean)'    The documentation for 'NetworkServerControl.logConnections(boolean)' states that Derby logs both connections and disconnections. As of 10.1.2.1 and (all) earlier releases  this is not true. The documentation should be corrected to avoid confusing users.The thought of adding logging of disconnections has also been posted on derby-dev.Byran Pendleton identified the following documentation with the incorrect description:http://db.apache.org/derby/javadoc/publishedapi/org/apache/derby/drda/NetworkServerControl.htmlhttp://db.apache.org/derby/docs/10.1/adminguide/radminconfigdb2jdrdalogconnections.htmlhttp://db.apache.org/derby/docs/10.0/manuals/admin/hubprnt23.htmlhttp://db.apache.org/derby/docs/10.1/adminguide/tadminlogfile.htmlShould we fix this in 10.0? If yes  please update fix versions for this issue.   ,0
822,Client driver: Pre-fetch data on executeQuery()    Currently  the client driver does not pre-fetch data whenexecuteQuery() is called  but it does on the first call toResultSet.next(). Pre-fetching data on executeQuery() would reducenetwork traffic and improve performance.The DRDA protocol supports this. From the description of OPNQRY (openquery): The qryrowset parameter specifies whether a rowset of rows is to be returned with the command. This is only honored for non-dynamic scrollable cursors (QRYATTSNS not equal to QRYSNSDYN) and for non-scrollable cursors conforming to the limited block query protocol. The target server fetches no more than the requested number of rows. It may fetch fewer rows if it is restricted by extra query block limits  or if a fetch operation results in a negative SQLSTATE or an SQLSTATE of 02000.   ,0
856,modify setCharacterStreamInternal to take a long for the length  and perform the > max int check in the method    A similar change to setBinaryStreamInternal is being handled as part of DERBY-599.   ,0
857,LDAP user authentication fails under a security manager    Running the test jdbcapi/secureUsers1.sql with a security manager results in:&gt; ERROR 08004: Connection refused : javax.naming.CommunicationException: noSuchMachine:389 &#91;Root exception is java.security.AccessControlException: access denied (java.net.SocketPermission noSuchMachine resolve)&#93;Adding this permission to the policy file has no effect. which means a priv block is required around the LDAP call.permission java.net.SocketPermission 'noSuchMachine'  'resolve';   ,1
861,Intermittent failure of store/readlocks.sql    The store/readlocks.sql test in derbyall fails intermittently with the following diff:     Start: readlocks jdk1.3.1_15 storeall:storemore 2006-01-22 03:25:51 ***19532a19533&gt; APP |UserTran|ROW |1 |S |A |(2 6) |GRANT|ACTIVE Test Failed. End: readlocks jdk1.3.1_15 storeall:storemore 2006-01-22 03:30:30 ***    i.e. it looks like there is an extra lock in the printed lock table.   ,0
892,add mechanism for specifying policy file for individual function tests    It would be nice to be able to specify a test-specific policy file.This should get handled similar to existing properties  i.e. get specified in a test_app.properties file (or  for a suite  in the suite.properties file). The file should then be copied into the correct place.Note  that the 'old' functionTests harness (as opposed to junit tests) includes a check for a property called 'serverPolicyFile' (in harness/jvm.java). The name is a left over from when the policy file was only used for/by network server  and should be renamed - derbyTestPolicyFile  for instance. It is not used anywhere at present  and not specific to network server. It would be nice if this could be expanded  or  if not used  removed.The default policy file used is the derby_tests.policy file under functionTests/util.Also  currently  the property can only be used with RunTest - for further traction  it should probably get passed on through RunSuite/RunList.Once confirmed to be working  the property should get documented in &lt;trunk&gt;/java/testing/README.htm.   ,0
903,Remove use of String(byte[]) and String(byte[]  int  int) constructors in testing leading to non-portable behaviour    These constructors use the Java default platform encoding to convert the bytes to a String  this typically leads to bugs on platforms with different encodings.Replace with code using fixed conversion  or alternative mechanisms. If the call is required its use should be commented as to why it is required.org.apache.derbyTesting.functionTests.tests.jdbcapi.blobclob4BLOBorg.apache.derbyTesting.functionTests.tests.jdbcapi.resultsetorg.apache.derbyTesting.functionTests.tests.lang.coalesceTestsorg.apache.derbyTesting.functionTests.tests.store.streamingColumnI generated this list using the Java search in eclipse for references to the constructorsString(byte[])String(byte[] int int) (no occurrences in java/testing)   ,0
904,big decimal error diff in derbyall lang/procedure test run in the DerbyNetClient - jdk1.3 specific    derby all regression test failure in the following test. Most recently it failed in the 1/27 derby build. It also failed on 1/20. It ran fine on 1/13. Havenot had time to narrow down further. Did note that there is a separate master for this test   but no jdk131 specific masters that I could see.     Start: procedure jdk1.3.1_15 DerbyNetClient derbynetmats:derbynetmats 2006-01-22 05:30:23 ***274 del&lt; EXPECTED SQL Exception: BigDecimal conversion exception &#91;converters&#93; Overflow occurred during numeric data type conversion of '10243'.. See attached Throwable.274a274&gt; EXPECTED SQL Exception: BigDecimal conversion exception &#91;converters&#93; Overflow occurred during numeric data type conversion of '10243'.. See attached Throwable. Caused by exception class org.apache.derby.client.am.ConversionException: &#91;converters&#93; Overflow occurred during numeric data type conversion of '10243'.337 del&lt; EXPECTED SQL Exception: Invalid argument: parameter index 2 is not an OUT or INOUT parameter.337a337&gt; EXPECTED SQL Exception: XN009.S : &#91;0&#93; 2355 del&lt; EXPECTED SQL Exception: BigDecimal conversion exception &#91;converters&#93; Overflow occurred during numeric data type conversion of '102.33'.. See attached Throwable.355a355&gt; EXPECTED SQL Exception: BigDecimal conversion exception &#91;converters&#93; Overflow occurred during numeric data type conversion of '102.33'.. See attached Throwable. Caused by exception class org.apache.derby.client.am.ConversionException: &#91;converters&#93; Overflow occurred during numeric data type conversion of '102.33'.Test Failed. End: procedure jdk1.3.1_15 DerbyNetClient derbynetmats:derbynetmats 2006-01-22 05:31:39 ***   ,0
918,introduce a new test type to run junit tests from the current harness    It seems to me that for including a new JUnit test into i.e derby-all we need to make a new java class with a main() method  which parses a command line and set up the testsuite and run it  just like any java program. Basically we are running the junit tests as test type 'java'.Instead of having to do this for every junit test going into a derby test suite  I would propose a different strategy.I propose to introduce a new test type called 'junit' (current test types are: sql sql2 unit java multi demo - unit is not junit)Then you can use:java org.apache.derbyTesting.functionTests.harness.RunTest &lt;TestCaseClassName&gt;.junitto run a Junit test - instead of:java org.apache.derbyTesting.functionTests.harness.RunTest &lt;AnotherClassWithMainMethod&gt;.javaWhen starting a test of type junit  the RunTest class may simply use thejunit.textui.TestRunner class  which has a main method which takes a TestCase class name as parameter. The junit.textui.TestRunner runs the tests defined by the suite() method of the TestCase class.I think this strategy will make it easier to integrate new JUnit tests into the current test suites  since it save you the trouble of creating a java class with a main method for every test.   ,1
924,new JDBC4 metadata API getFunctions() needs to be implemented    For now I am implementing this to return empty result set so at least we're compliant  but we should be able to implement this one   ,0
939,NullPointerException at ResultSet.close() time for simple query using UNION and INTERSECT    If I set 'derby.language.logQueryPlan' to true and then attempt to execute the following simple query using UNION and INTERSECT  Derby will return the correct results and then  after returning the results  will throw a NullPointerException. This error also occurs for 10.1.To reproduce:&gt; java -Dderby.language.logQueryPlan=true org.apache.derby.tools.ijand then do:create table t1 (i int);create table t2 (j int);create table t3 (a int);ij&gt; select i from t1 union (select j from t2 intersect select a from t3);1-----------0 rows selectedERROR XJ001: Java exception: ': java.lang.NullPointerException'.If I add data  the query will return the correct results  but then throw the NPE.insert into t1 values 1  2  3  4  5;insert into t2 values 2  4  6  8  10;insert into t3 values 2  3  4;ij&gt; select i from t1 union (select j from t2 intersect select a from t3);1-----------123455 rows selectedERROR XJ001: Java exception: ': java.lang.NullPointerException'.The embedded and client stack traces are shown below. Both suggest that the problem occurs during the close of the result set.&#8211; Embedded &#8211;java.lang.NullPointerException at org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getStatementExecutionPlanText(RealUnionResultSetStatistics.java:107) at org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getStatementExecutionPlanText(RealSortStatistics.java:124) at org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getStatementExecutionPlanText(RunTimeStatisticsImpl.java:293) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.finishAndRTS(BasicNoPutResultSetImpl.java:633) at org.apache.derby.impl.sql.execute.SortResultSet.finish(SortResultSet.java:479) at org.apache.derby.impl.jdbc.EmbedResultSet.close(EmbedResultSet.java:533) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:272) at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:260) at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:381) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:434) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:310) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)&#8211; Client &#8211;ERROR (no SQLState): actual code point  4692 does not match expected code point  9224java.sql.SQLException: actual code point  4692 does not match expected code point  9224 at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:280) at org.apache.derby.client.am.ResultSet.close(ResultSet.java:412) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:272) at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:260) at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:381) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:434) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:310) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)Caused by: org.apache.derby.client.am.DisconnectException: actual code point  4692 does not match expected code point  9224 at org.apache.derby.client.net.Reply.zThrowSyntaxError(Reply.java:1157) at org.apache.derby.client.net.Reply.parseLengthAndMatchCodePoint(Reply.java:1057) at org.apache.derby.client.net.NetConnectionReply.parseSQLCARD(NetConnectionReply.java:2519) at org.apache.derby.client.net.NetConnectionReply.parseRDBCMMreply(NetConnectionReply.java:200) at org.apache.derby.client.net.NetConnectionReply.readLocalCommit(NetConnectionReply.java:133) at org.apache.derby.client.net.ConnectionReply.readLocalCommit(ConnectionReply.java:42) at org.apache.derby.client.net.NetConnection.readLocalCommit_(NetConnection.java:1347) at org.apache.derby.client.am.Connection.readCommit(Connection.java:624) at org.apache.derby.client.am.Connection.readAutoCommit(Connection.java:614) at org.apache.derby.client.am.ResultSet.readAutoCommitIfNotAutoCommitted(ResultSet.java:509) at org.apache.derby.client.am.ResultSet.readCloseAndAutoCommit(ResultSet.java:474) at org.apache.derby.client.am.ResultSet.flowCloseAndAutoCommitIfNotAutoCommitted(ResultSet.java:455) at org.apache.derby.client.am.ResultSet.closeX(ResultSet.java:425) at org.apache.derby.client.am.ResultSet.close(ResultSet.java:407)ERROR XJ001: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerException&#91;XX&#93; XJ001.Ujava.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerException&#91;XX&#93;XJ001.U at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:280) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:295) at org.apache.derby.client.am.ResultSet.close(ResultSet.java:412) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:272) at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:260) at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:381) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:434) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:310) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:60)   ,0
961,Error 22001 can include 'XX-RESOLVE-XX' which should be removed    In some cases  error 22001 can come up as follows: A truncation error was encountered trying to shrink CHAR () FOR BIT DATA 'XX-RESOLVE-XX' to length 40.This message makes it appear as if there is a column called XX-RESOLVE-XX  however  this string is coming out of SQLBinary.java.It should be removed from the message.Other references for this string are in the masters for updatableResultSet.out  and in the test lang/concateTests.java (referring to DERBY-124).So  running updatableResultSet will generate the message.The stack trace I saw: at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:362) at org.apache.derby.iapi.types.SQLBinary.checkHostVariable(SQLBinary.java:977) at org.apache.derby.exe.ac05550069x0109x5d95xbdfcxffff9c80fb80163.e0 (Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:138) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:155) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore (NormalizeResultSet.java:204) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:123) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:521) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:359) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1142) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1421) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:263)   ,0
965,DatabaseMetadata method supportsResultSetConcurrency returns wrong result on network client    The DatabaseMetaData method supportsResultSetConcurrency erroneouslyreturns false on the network client for all arguments combination  cfthe attached repro program. The embedded client returns correctresults  viz the output:org.apache.derby.jdbc.ClientDriver:SupportsResultSetConcurrency: TYPE_FORWARD_ONLY CONCUR_READ_ONLY: falseSupportsResultSetConcurrency: TYPE_FORWARD_ONLY CONCUR_UPDATABLE: falseSupportsResultSetConcurrency: TYPE_SCROLL_INSENSITIVE CONCUR_READ_ONLY: falseSupportsResultSetConcurrency: TYPE_SCROLL_INSENSITIVE CONCUR_UPDATABLE: falseSupportsResultSetConcurrency: TYPE_SCROLL_SENSITIVE CONCUR_READ_ONLY: falseSupportsResultSetConcurrency: TYPE_SCROLL_SENSITIVE CONCUR_UPDATABLE: falseorg.apache.derby.jdbc.EmbeddedDriver:SupportsResultSetConcurrency: TYPE_FORWARD_ONLY CONCUR_READ_ONLY: trueSupportsResultSetConcurrency: TYPE_FORWARD_ONLY CONCUR_UPDATABLE: trueSupportsResultSetConcurrency: TYPE_SCROLL_INSENSITIVE CONCUR_READ_ONLY: trueSupportsResultSetConcurrency: TYPE_SCROLL_INSENSITIVE CONCUR_UPDATABLE: falseSupportsResultSetConcurrency: TYPE_SCROLL_SENSITIVE CONCUR_READ_ONLY: falseSupportsResultSetConcurrency: TYPE_SCROLL_SENSITIVE CONCUR_UPDATABLE: falsePresumably  this is wrong in released versions as well.   ,0
966,creating a preparedStatement outside of a Global tran using a ClientXADatasource  will result in an 'SqlException: Cannot set holdability'  if the statement  is used in a Global transaction    creating a preparedStatement outside of a Global tran using an xa datasource will result in an exception if the statement is used in a Global (i.e. xa transaction).  DERBY-346 and DERBY-8 may be relevant to this issue.User noted 1) setting the holdability on the connection to CLOSE_CURSORS_AT_COMMIT doesn't seem to be taken affect  since the problem is observed to happen even if I set the the holdability to CLOSE_CURSORS_AT_COMMIT before creating the statement. (maybe another bug)2) setting the holdability to close_cursor_at_commit on the PS when creating it  doesn't seem to be affecting the outcome  this  not sure its even honored (maybe another bug)Test case is below:import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import javax.sql.XAConnection;import javax.transaction.xa.XAException;import javax.transaction.xa.XAResource;import javax.transaction.xa.Xid;import com.ibm.db2.jcc.DB2Xid;class CursorHoldProblem{ public static PreparedStatement pstmt = null; public static void main (String args [])throws Exception { org.apache.derby.jdbc.ClientXADataSource ds = new  org.apache.derby.jdbc.ClientXADataSource(); System.out.println('getting connection'); ds.setDatabaseName('sample'); //ds.setTraceFile('trace.out'); ds.setConnectionAttributes('create=true'); conn1 = ds.getConnection();System.out.println(conn1.getMetaData().getDatabaseProductVersion()); PreparedStatement ps1 = null; try { System.out.println('creating table'); ps1 = conn1.prepareStatement('CREATE TABLE TAB1(COL1 INT NOT NULL)'); ps1.executeUpdate(); System.out.println('done creating table'); conn1.commit (); } catch (SQLException x) { System.out.println ('table already exists'); conn1.commit(); } XAConnection pc1 = ds.getXAConnection(); XAResource xar1 = pc1.getXAResource(); Xid xid1 = createXid(11); Connection conn = pc1.getConnection(); System.out.println('get Holidability returning: ' + conn.getHoldability()); conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);  //==&gt; setting this has no affect  doSelect(conn  23); xar1.start(xid1  XAResource.TMNOFLAGS); doSomeWork1(conn  66); doSelect(conn  50); xar1.end(xid1  XAResource.TMSUCCESS); int prp1 = xar1.prepare(xid1); System.out.println('prp1 is: ' + prp1); if (prp1 == XAResource.XA_OK) xar1.commit(xid1  false); } private static void doSomeWork1(Connection conn  int deptno) throws SQLException  { Statement stmt = conn.createStatement(); int cnt = stmt.executeUpdate('INSERT INTO tab1 VALUES (' + deptno + ')'); System.out.println('No of rows Affected ' + cnt); stmt.close(); stmt = null; } private static void doSelect(Connection conn  int deptno) throws SQLException  { if (pstmt == null) pstmt = conn.prepareStatement('select * from tab1'); ResultSet rset1 = pstmt.executeQuery(); while (rset1.next()) { System.out.println('==&gt;: ' + rset1.getString(1)); break; }  } static Xid createXid(int bids) throws XAException { byte[] gid = new byte[1]; gid[0] = (byte) 9; byte[] bid = new byte[1]; bid[0] = (byte) bids; byte[] gtrid = new byte[64]; byte[] bqual = new byte[64]; System.arraycopy(gid  0  gtrid  0  1); System.arraycopy(bid  0  bqual  0  1); Xid xid = new DB2Xid(0x1234  gtrid  bqual); return xid; } }   ,0
972,tests derbynet/csPrepStmt and prepStmt use mechanisms that are not portable over encodings    With zOS  with the classic 32 bit jvm  the tests derbynet/csPrepStmt and prepStmt.java fail because the insert with setAsciiStream of a byte array obtained from a new String.getBytes() (and/or the retrieval of that inserted value) is not ok. No error is returned  but the select shows no value.This is the section in the test csPrepStmt:----------------- ps.setString(10  'column11string'); byte[] c11ba = new String('column11vcstring').getBytes(); int len = c11ba.length; ps.setAsciiStream(11  new ByteArrayInputStream(c11ba)  len);and the value is retrieved using an ResultSet.getString(#)--------------------------28 del&lt; got row: 1 2 3 4 5.0 6.0 7.0 88.88 99.100 column11string  column11vcstring column12lvcstring 0123456789abcdef10111213202020 0123456789abcdef10111213 0123456789abcdef10111213 xxxxxxFILTERED-TIMESTAMPxxxxx-04-12 11:44:30.028a28&gt; got row: 1 2 3 4 5.0 6.0 7.0 88.88 99.100 column11string  column12lvcstring 0123456789abcdef10111213202020 0123456789abcdef10111213 0123456789abcdef10111213 xxxxxxFILTERED-TIMESTAMPxxxxx-04-12 11:44:30.0--------------------(i.e. the string 'column11vcstring' is not in the database)This needs to be replaced by a encoding-neutral (eg. fixed encoding) mechanism and the tests derbynet/prepStmt.java and csPrepStmt.java need to be checked for other non-portable code.   ,0
989,unit/daemonService.unit fails intermittently: 'ran out of time'    'Signature':                 Diff file unit/unit/daemonService.diff             Start: daemonService jdk1.5.0_04 unit:unit 2006-02-14 20:46:42 ***2 del&lt; &#8211; Unit Test T_DaemonService finished2 add&gt; ran out of time&gt; Shutting down due to unit test failure.&gt; Exit due to time bombTest Failed. End: daemonService jdk1.5.0_04 unit:unit 2006-02-14 21:47:13 ***    http://www.multinet.no/~solberg/public/Apache/Derby/Limited/testSummary-377800.html &#91;SunOS-5.10 i86pc-i386&#93;   ,0
990,store/access.sql fails - incorrect index?    ij&gt; &#8211; should only be 1 distinct row in this table since space used by the &#8211; index should be the same before and after select count(distinct a) from spaceused;'Signature':                 Diff file derbyall/encryptionAll/storemats/storemats/access.diff             Start: access jdk1.5.0_03 storemats:storemats 2006-02-15 05:04:54 ***2756 del&lt; 1 2756a2756&gt; 2 Test Failed. End: access jdk1.5.0_03 storemats:storemats 2006-02-15 05:06:04 ***    http://www.multinet.no/~solberg/public/Apache/Derby/Limited/testSummary-377800.html &#91;SunOS-5.10 sun4u-sparc&#93;   ,0
998,tests jdbcapi/SURTest.junit and jdbcapi/SURQueryMixTest.junit run twice in derbynetclientmats    The tests SURTest.junit and SURQueryMixTest.junit both appear in derbynetclientmats.runall as well as in jdbcapi.runall. So it unnecessarily runs twice  because jdbcapi is already included in the suites in derbynetclientmats.properties. It should be removed from derbynetclientmats.runall.   ,0
1007,Optimizer can return incorrect 'best cost' estimates with nested subqueries  which leads to generation of sub-optimal plans.    When optimizing a query that has nested subqueries in it  it's possible that the optimizer for the subqueries will return cost estimates that are lower than what they were actually calculated to be. The result is that the outer query can pick an access plan that is sub-optimal.Filing this jira issue based on the thread '&#91;OPTIMIZER&#93; OptimizerImpl 'best plans' for subqueries?' from derby-dev. Description that follows is pasted from that email:http://article.gmane.org/gmane.comp.apache.db.derby.devel/14836Following example of what I saw when tracing through the code demonstrates the problem.select x1.j  x2.b from (select distinct i j from t1) x1  (select distinct a b from t3) x2where x1.i = x2.a;During optimization of this query we will create three instancesof OptimizerImpl: OI_0: For 'select x1.j  x2.b from x1  x2 where x1.i = x2.a' OI_1: For 'select distinct i j from t1' OI_2: For 'select distinct a b from t3'Query ran against a clean codeline when T1 had 1 row and T3 had 50 000. &#8211; Top-level call is made to the optimize() method of the outermost SelectNode  which creates OI_0. &#8211; OI_0: picks join order {X1  X2} and calls X1.optimizeIt() &#8211; X1: creates OI_1 and makes calls to optimize it. &#8211; OI_1: picks join order {T1} and calls T1.optimizeIt() &#8211; T1: returns a cost of 20. &#8211; OI_1: saves 20 as new best cost and tells T1 to save it. &#8211; X1: calls OI_1.getOptimizedCost()  which returns 20. X1 then returns 20 to OI_0. &#8211; OI_0: calls X2.optimizeIt() &#8211; X2: creates OI_2 and makes calls to optimize it. &#8211; OI_2: picks join order {T3} and calls T3.optimizeIt() &#8211; T3: returns a cost of 64700. &#8211; OI_2: saves 64700 as new best cost and tells T3 to save it. &#8211; X2: calls OI_2.getOptimizedCost()  which returns 64700. X2 then returns 64700 to OI_0. &#8211; OI_0: saves 20 + 64700 = 64720 as new best cost and tells X1 to save 20 and X2 to save 64700. &#8211; OI_0: picks join order {X2  X1} and calls X2.optimizeIt() &#8211; X2: fetches OI_2 and makes calls to optimize it. &#8211; OI_2: picks join order {T3} and calls T3.optimizeIt() &#8211; T3: returns a cost of 10783. &#8211; OI_2: saves 10783 as new best cost and tells T3 to save it. &#8211; X2: calls OI_2.getOptimizedCost()  which returns 10783. X2 then returns 10783 to OI_0. &#8211; OI_0: calls X1.optimizeIt() &#8211; X1: fetches OI_1 and makes calls to optimize it. &#8211; OI_1: picks join order {T1} and calls T1.optimizeIt() &#8211; T1: returns a cost of 1 MILLION!. &#8211; OI_1: rejects new cost (1 mil &gt; 20) and does nothing. &#8211; X1: calls OI_1.getOptimizedCost()  which returns 20. X1 then returns 20 to OI_0...this seems WRONG! &#8211; OI_0: saves 10783 + 20 = 10803 as new best cost and tells X2 to save 10783 and X1 to save 20.So in the end  the outer-most OptimizerImpl chooses join order {X2  X1} because it thought the cost of this join order was only 10783  which is better than 64720. However  the actual cost of the join order was really estimated at 1 million--so the outer OptimizerImpl chose (and will generate) a plan that  according to the estimates  was (hugely) sub-optimal.   ,0
1009,Embedded ResultSet.getStatement() does not return the Statement object that created it  for a connection returned from EmbeddedXADataSource    May also be the case for connections obtained from EmbeddedConnectionPoolDataSource.ResultSet.getStatement() is returning the undetlying 'physical' java.sql.Statement object  not the brokered object.Bug as applications can then get at the underlying 'physical' connection and thus continue to use a connection that may have been assigned to someone else. Causes FAIL messages in thenew jdbcapi/XATest  real checks should be added in checkDataSource to ensure all the possibleconnection objects are checked.   ,0
1037,new test lang/ShutdownDatabase.java fails with j2ME    The new test lang/ShutdownDatabase.java fails with: java.lang.NoClassDefFoundError: java.sql.DriverThe test needs to be rewritten to take advantage of the TestUtil methods for getting a connection from a datasource or using a driver  similar to e.g. lang/closed.java.The stack trace is like so:java.lang.NoClassDefFoundError: java.sql.Driver at java.lang.ClassLoader.defineClassImpl(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:212) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:109) at java.net.URLClassLoader.findClassImpl(URLClassLoader.java:1026) at java.net.URLClassLoader$4.run(URLClassLoader.java:557) at java.security.AccessController.doPrivileged(AccessController.java:167) at java.net.URLClassLoader.findClass(URLClassLoader.java:555) at com.ibm.oti.vm.URLSystemClassLoader.findClass(URLSystemClassLoader.java:32) at java.lang.ClassLoader.loadClass(ClassLoader.java:602) at com.ibm.oti.vm.URLSystemClassLoader.loadClass(URLSystemClassLoader.java:65) at java.lang.ClassLoader.loadClass(ClassLoader.java:561) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:116) at org.apache.derby.impl.tools.ij.util.loadDriver(util.java:837) at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:492) at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:573) at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:554) at org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.openConnectionToNewDatabase(ShutdownDatabase.java:530) at org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnlyTransactionWasCommited(ShutdownDatabase.java:151) at org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testShutDownWithCommitedTransaction(ShutdownDatabase.java:116) at org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.main(ShutdownDatabase.java:86)   ,0
1045,forupdate.sql   holdCursorIJ.sql ..etc are failing when run with 10.1 client againest trunk    derbynetclientmats/derbynetmats/derbynetmats.fail:lang/forupdate.sql derbynetclientmats/derbynetmats/derbynetmats.fail:lang/holdCursorIJ.sql derbynetclientmats/derbynetmats/derbynetmats.fail:store/holdCursorJDBC30.sql derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/LOBTest.java derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/blobclob4BLOB.java derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/parameterMapping.java derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/setTransactionIsolation.java derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/metadataJdbc20.java derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/connectionJdbc20.javaSample diff :     Start: forupdate jdk1.5.0_02 DerbyNetClient derbynetmats:derbynetmats 2006-02-23 07:30:19 ***23 del&lt; ERROR 42X01: Syntax error: Encountered '&lt;EOF&gt;' at line 1  column 23.23a23&gt; ERROR 42X01: Syntax error: Encountered '&lt;EOF&gt;' at line 3  column 23.59 del&lt; ERROR (no SQLState): Invalid cursor name 'C1' in the Update/Delete statement.59a59&gt; ERROR 42X30: Cursor 'SQL_CURLH000C1' not found. Verify that autocommit is OFF.132 del&lt; ERROR (no SQLState): Invalid cursor name 'C4' in the Update/Delete statement.132a132&gt; ERROR 42X30: Cursor 'SQL_CURLH000C1' not found. Verify that autocommit is OFF.135 del&lt; ERROR (no SQLState): Invalid cursor name 'C4' in the Update/Delete statement.135a135&gt; ERROR 42X30: Cursor 'SQL_CURLH000C1' not found. Verify that autocommit is OFF.180 del&lt; ERROR 42X01: Syntax error: Encountered '.' at line 1  column 34.180a180&gt; ERROR 42X01: Syntax error: Encountered '.' at line 3  column 34.Test Failed. End: forupdate jdk1.5.0_02 DerbyNetClient derbynetmats:derbynetmats 2006   ,0
1046,JVMInfo is duplicated in derbyclient.jar    The JVMInfo class is included twice in derbyclient.jar  asorg.apache.derby.iapi.services.info.JVMInfo andorg.apache.derby.shared.common.info.JVMInfo. The only one of themactually used by the client code is the one found inorg.apache.derby.shared.common.info.org.apache.derby.iapi.services.info.JVMInfo is also included inderby.jar  so one could run into problems if the classpath containsderbyclient.jar and derby.jar with different versions.   ,0
1052,test jdbcapi/checkDataSource30 and savepointJdbc30_XA fail with remote server with security exceptions    The .tmp from the jdbcapi/checkDataSource30.java is:----------------------START XA HOLDABILITY TESTERROR (no SQLState): java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : Connection refusedCompleted checkDataSource30----------------------The .tmp from the jdbcapi/savepointJdbc30_XA.java is:-------------------------------------FAIL &#8211; unexpected exceptionSQLSTATE(null):java.sql.SQLException: java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : Connection refused at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:285) at org.apache.derby.client.ClientPooledConnection.&lt;init&gt;(ClientPooledConnection.java:104) at org.apache.derby.client.ClientXAConnection.&lt;init&gt;(ClientXAConnection.java:47) at org.apache.derby.jdbc.ClientXADataSource.getXAConnection(ClientXADataSource.java:50) at org.apache.derby.jdbc.ClientXADataSource.getXAConnection(ClientXADataSource.java:43) at org.apache.derbyTesting.functionTests.tests.jdbcapi.savepointJdbc30_XA.main(savepointJdbc30_XA.java:58)Caused by: org.apache.derby.client.am.DisconnectException: java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : Connection refused at org.apache.derby.client.net.NetAgent.&lt;init&gt;(NetAgent.java:113) at org.apache.derby.client.net.NetConnection.newAgent_(NetConnection.java:928) at org.apache.derby.client.am.Connection.initConnection(Connection.java:174) at org.apache.derby.client.am.Connection.&lt;init&gt;(Connection.java:144) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(NetConnection.java:207) at org.apache.derby.client.net.NetXAConnection.&lt;init&gt;(NetXAConnection.java:39) at org.apache.derby.client.ClientPooledConnection.&lt;init&gt;(ClientPooledConnection.java:94) ... 4 more-----------------------------   ,0
1055,Security.AccessControlException in client under SecurityManager when trying to connect using EUSRIDPWD security mechanism    When using EUSRIDPWD security mechanism  the JCE provider is added and since this is not in a privileged block  an accesscontrol exception is raised when trying to connect using EUSRIDPWD security mechanism  when client is run under security manager.Enabled test (T5) in testSecMec.java &gt; T5: jdbc:derby://xxxFILTERED_HOSTNAMExxx:xxxFILTEREDPORTxxx/wombat;user=neelima;password=lee;securityMechanism=9 - EXCEPTION Unexpected throwable caught java.security.AccessControlException: access denied (java.security.SecurityPermission insertProvider.SunJCE)   ,1
1062,Change the internal implemetation of SYSCS_INPLACE_COMPRESS_TABLE to share existing alter table    Change the internal implemetation of SYSCS_INPLACE_COMPRESS_TABLE to share existing alter tablecode. One suggested approach is to use the same mechanism as SYSCS_COMPRESS_TABLE. Suchan implementation would involve:o change the parser for alter table to accecpt some internal only syntax for SYSCS_INPLACE_COMPRESS_TABLEo change the alter table constant action to get the required information for inplace compresso move most of the inplace compress driving code to a routine in alter table execution  following the same coding pattern as existing alter table compress.I believe doing this will have multiple benefits:1) shares existing alter table code  so things like error checking  security management  ... is all done by one piece of code2) by sharing the code I believe the following outstanding JIRA issues will be addressed: DERBY-719  DERBY-720 -3) future changes addressing ddl like grant/revoke will automatically work.   ,0
1064,Delete cascade causes NULL values inserted into table when after delete Trigger fires    When an after delete trigger which inserts into a table is created on a table that has a foreign key that references a primary key and uses the on delete cascade constraint  nulls are inserted into the table by the trigger.The SQL below shows that the cascade delete works correctly:ij&gt; CREATE TABLE TABLE1 ( X INT PRIMARY KEY );0 rows inserted/updated/deletedij&gt; CREATE TABLE TABLE1_DELETIONS ( X INT );0 rows inserted/updated/deletedij&gt; CREATE TABLE TABLE2 ( Y INT  CONSTRAINT Y_AND_X FOREIGN KEY(Y) REFERENCES TABLE1(X) ON DELETE CASCADE);0 rows inserted/updated/deletedij&gt; CREATE TABLE TABLE2_DELETIONS ( Y INT );0 rows inserted/updated/deletedij&gt; INSERT INTO TABLE1 VALUES (0);1 row inserted/updated/deletedij&gt; INSERT INTO TABLE2 VALUES (0);1 row inserted/updated/deletedij&gt; INSERT INTO TABLE1 VALUES (1);1 row inserted/updated/deletedij&gt; INSERT INTO TABLE2 VALUES (1);1 row inserted/updated/deletedij&gt; select * from table1;X-----------012 rows selectedij&gt; select * from table2;Y-----------012 rows selectedij&gt; DELETE FROM TABLE1;2 rows inserted/updated/deletedij&gt; select * from table1;X-----------0 rows selectedij&gt; select * from table2;Y-----------0 rows selectedNow insert the rows again  create the triggers  delete the rows from the primary key table  verify the cascade delete worked and observe the values in the tables used by the triggers:ij&gt; INSERT INTO TABLE1 VALUES(0);1 row inserted/updated/deletedij&gt; INSERT INTO TABLE2 VALUES(0);1 row inserted/updated/deletedij&gt; INSERT INTO TABLE1 VALUES(1);1 row inserted/updated/deletedij&gt; INSERT INTO TABLE2 VALUES(1);1 row inserted/updated/deletedij&gt; CREATE TRIGGER TRIGGER1 AFTER DELETE ON TABLE1 REFERENCING OLD AS OLD_ROW FOR EACH ROW MODE DB2SQL INSERT INTO TABLE1_DELETIONS VALUES (OLD_ROW.X);0 rows inserted/updated/deletedij&gt; CREATE TRIGGER TRIGGER2 AFTER DELETE ON TABLE2 REFERENCING OLD AS OLD_ROW FOR EACH ROW MODE DB2SQL INSERT INTO TABLE2_DELETIONS VALUES (OLD_ROW.Y);0 rows inserted/updated/deletedij&gt; DELETE FROM TABLE1;2 rows inserted/updated/deletedij&gt; select * from TABLE1;X-----------0 rows selectedij&gt; select * from TABLE2;Y-----------0 rows selectedij&gt; SELECT * FROM TABLE1_DELETIONS;X-----------012 rows selectedij&gt; SELECT * FROM TABLE2_DELETIONS;Y-----------NULLNULLThe TABLE2_DELETIONS table contains NULLs instead of the correct values which should be 0 and 1.   ,0
1072,Misleading/wrong error message while dropping a view    while dropping a view which does not really exist on a database   the error message thrown by ij says ERROR X0X05: Table 'VIEW222' does not exist. It looks like we should make the error message to say that 'Table/View' does not exist  instead of 'table'.Look at other messages that are shared for both Table and View.   ,0
1089,Derby fails inserting a join into a table with a generated column    I've been having a problem inserting the result of a join into a table with a generated column. If I rephrase the join clause into a where clause  the problem goes away. And it only seems to happen if the target table has a generated column. Unfortunately  the join that I want to do in my application is pretty complex so I don't think I can rephrase it. But here's a very simplified example of what I'm talking about:ij version 10.1ij&gt; connect 'jdbc:derby:test;create=true';ij&gt; create table source (source_id int not null primary key);0 rows inserted/updated/deletedij&gt; insert into source values (0);insert into source values (1);insert into source values (2);insert into source values (3);insert into source values (4);insert into source values (5);insert into source values (6);insert into source values (7);insert into source values (8);insert into source values (9);1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; 1 row inserted/updated/deletedij&gt; create table dest (dest_id int not null primary key generated always as identity source_id_1 int not null source_id_2 int not null);0 rows inserted/updated/deletedij&gt; select s1.source_id  s2.source_idfrom source as s1join source as s2on 1 = 1;SOURCE_ID |SOURCE_ID-----------------------0 |00 |10 |20 |30 |40 |50 |60 |70 |80 |91 |01 |11 |21 |31 |41 |51 |61 |71 |81 |92 |02 |12 |22 |32 |42 |52 |62 |72 |82 |93 |03 |13 |23 |33 |43 |53 |63 |73 |83 |94 |04 |14 |24 |34 |44 |54 |64 |74 |84 |95 |05 |15 |25 |35 |45 |55 |65 |75 |85 |96 |06 |16 |26 |36 |46 |56 |66 |76 |86 |97 |07 |17 |27 |37 |47 |57 |67 |77 |87 |98 |08 |18 |28 |38 |48 |58 |68 |78 |88 |99 |09 |19 |29 |39 |49 |59 |69 |79 |89 |9100 rows selectedij&gt; insert into dest (source_id_1  source_id_2)select s1.source_id  s2.source_idfrom source as s1join source as s2on 1 = 1;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.ij&gt;derby.log:----------------------------------------------------------------2006-03-07 20:01:12.152 GMT:Booting Derby version The Apache Software Foundation - Apache Derby - 10.1.2.1 - (330608): instance c013800d-0109-d64c-5067-000000172958on database directory D:/Documents and Settings&#42;**/My Documents/testDatabase Class Loader started - derby.database.classpath=''2006-03-07 20:01:52.671 GMT Thread&#91;main 5 main&#93; (XID = 124)  (SESSIONID = 0)  (DATABASE = test)  (DRDAID = null)  Cleanup action starting2006-03-07 20:01:52.671 GMT Thread&#91;main 5 main&#93; (XID = 124)  (SESSIONID = 0)  (DATABASE = test)  (DRDAID = null)  Failed Statement is: insert into dest (source_id_1  source_id_2)select s1.source_id  s2.source_idfrom source as s1join source as s2on 1 = 1java.lang.NullPointerExceptionat org.apache.derby.impl.sql.compile.ResultColumnList.remapColumnReferencesToExpressions(Unknown Source)at org.apache.derby.impl.sql.compile.JoinNode.flatten(Unknown Source)at org.apache.derby.impl.sql.compile.FromList.flattenFromTables(Unknown Source)at org.apache.derby.impl.sql.compile.SelectNode.preprocess(Unknown Source)at org.apache.derby.impl.sql.compile.SingleChildResultSetNode.preprocess(Unknown Source)at org.apache.derby.impl.sql.compile.DMLStatementNode.optimize(Unknown Source)at org.apache.derby.impl.sql.compile.DMLModStatementNode.optimize(Unknown Source)at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source)at org.apache.derby.tools.ij.main(Unknown Source)Cleanup action completed2006-03-07 20:43:03.759 GMT:Shutting down instance c013800d-0109-d64c-5067-000000172958----------------------------------------------------------------   ,0
1091,Test harness does not pass jvm flags properly if there are more than 1 property in jvm flags    To run Derby tests with EMMA for Code coverage  there is a need to set up emma flag -Djvmflags=-Demma.verbosity.level=silent. This is basically to enable EMMA not to print out any messages to avoid having any diffs. This all works fine when running Derby tests with EMMA for jdk142  jdk15  jdk131 etc because there is no other jvm flag that is passed while calling RunSuite Command. Now  while running tests with j2me/cdc/foundation  another value needs to be passed as jvmflag which is-Djvmflags='Dij.dataSource=org.apache.derby.jdbc.EmbeddedSimpleDataSource'.I tried to combine values for both jvm flags as following  but it did not work properly:1. -Djvmflags='-Demma.verbosity.level=silent -Dij.dataSource=org.apache.derby.jdbc.EmbeddedSimpleDataSource'During this run  the value that was further passed while running one test was Djvmflags=''-Demma.verbosity.level=silent'.As you can notice it took jvm flag as '-Demma.verbosity.level=silent 2. -Djvmflags='-Demma.verbosity.level=silent -Dij.dataSource=org.apache.derby.jdbc.EmbeddedSimpleDataSource'During this run  the value that was further passed while running one test was Djvmflags=''-Demma.verbosity.level=silent'.As you can notice it took jvm flag as '-Demma.verbosity.level=silent From the above it looks like test harness needs to be changed so that it can parse multiple values for jvm flags properly.   ,0
1101,ResultSet.getHoldabilty will return incorrect value when the ResultSet is obtained from a procedure call    EmbedResultSet40.getHoldability returns the holdability of the statement returned by ResultSet.getStatement().When a ResultSet is created by a procedure call  its holdability may not match the holdability of the Statement that called the procedure  which is probably what ResultSet.getStatement() should return.This may not be exposed as a bug yet  but I think this method should be directly obtaining the holdability of the ResultSet using the Activation.getResultSetHoldability() method  rather than through a Statement. Seems a safer approach.   ,0
1107,For existing databases JDBC metadata queries do not get updated properly  between maintenance versions.    The JDBC DatabaseMetaData queries are stored as stored prepared statements in the database. If a bug is fixed for any of the metadata calls it can require that these queries be changed. Currently existing databases will not get updated properly if a bug is fixed. Ideally the metadata queries should match the derby version that is running. That way we avoid situations where the query is not compatible with the Derby version running.To confirm I :1) created a database with 10.1.1.02) Made a metadata change in my 10.1.2.4 client.3) Connected to the 10.1.1.0 database with 10.1.2.4 and saw that there was no change to the stored prepared statements in SYS.SYSSTATEMENTSI also confirmed that a database created with 10.1.2.4 does not get changed when reverting to 10.1.1.0.Below this line is some history and reference that might be helful to someone fixing this issue:------------------------------------------------------------------------------------------------------------------------------------------------In discussing DERBY-970  the subject of the metadata stored prepared statements came up.The general questions are: 1) Why do we use stored prepared statements for metadata queries?  2) What issues might there be related to upgrade/downgrade with the metadata stored prepared statements? 3) How do we address potential upgrade/downgrade issues?GENERAL HISTORY: Cloudscape 5.x had stored prepared statements  a way to store precompiledstatements in the database. This is no longer exposed externally. Metadata stored prepared statements were a performance optimization thatpredated the statement cache. In the past  this performance optimization has been of particular importanceto gui database browsers that execute all the metadata methods on connection to the database. This would still probably be an issue with embedded even with the statement cache. All stored prepared statements get recompiled on the first connection to thedatabase if the version changes.UPGRADE HISTORY In Cloudscape 5.1  the metadata stored prepared statements have traditionallybeen a source of trouble for even minor version changes as queries change or they refer to methods/stored procedures that may or may not exist in the target version and cannot recompile or execute.  The solution to the problem in Cloudscape v5.1.60 was to automaticallyalways call DD_Version.dropJDBCMetadataSPSes() whenever the version changed up or down in upgradeIfNeeded(). The workaround before this change to do this automatically was to call thismethod manually: CALL Factory.getDatabaseOfConnection(). dropAllJDBCMetaDataSPSes()HOW DERBY WORKS TODAY: In Derby we now only call dropJDBCMetadataSPSes() on fullUpgrade and it hasbeen this way since contribution. I think the problems of upgrade/downgrade for metadata stored preparedstatements may exist in Derby. I don't know a workaround to drop the metadata stored prepared statements ifwe need to deliver a bug fix or how the ugprade/downgrade is handled currently. I seem to recall some special handling in Derby for soft upgrade for optimizer directives  but don't know the details.RECENT DISCUSSIONS:In discussing DERBY-970  the subject of the metadata stored prepared statements came up.The general questions are: 1) Why do we use stored prepared statements for metadata queries?  2) What issues might there be related to upgrade/downgrade with the metadata stored prepared statements? 3) How do we address potential upgrade/downgrade issues?MY QUESTIONSAnyone know when/why the dropJDBCMetadataSPSes() on all version changes was removed between Cloudcape 5.1.60 and contribution? How do we deliver bug fixes for metadata queries or handle changes in the metadata queries in Derby?   ,0
1113,transaction logs files requried for recovery are getting deleted when backup and checkpointas are running in parallel.    ----------------------------------------------------------------2006-03-14 19:45:40.573 GMT: Booting Derby version The Apache Software Foundation - Apache Derby - 10.2.0.0 alpha - (1): instance c013800d-0109-fa4a-bf58-0000001078a0on database directory E:/,0
1127,client gives SqlException for test callable.java and parameterMapping.java on zOS    On zOS  the tests callable.java and parameterMapping.java failed with networkserver and the derby client. The failure did not occur with the db2jcc.jar. The stack trace was as follows:org.apache.derby.client.am.SqlException: ^V^V^30^30^D^F^53^F^31^38^31 : at org.apache.derby.client.am.Statement.completeExecute(Statement.java:1139) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:296) at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:97) at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:74) at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:174) at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1105) at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:1426) at org.apache.derby.client.am.CallableStatement.executeX(CallableStatement.java:124) at org.apache.derby.client.am.CallableStatement.execute(CallableStatement.java:114) at org.apache.derbyTesting.functionTests.tests.derbynet.callable.main(Unknown Source)In callable.java  it's this part of the test that caused the failure:------------------------------------------ System.out.println('return value is: ' + cs.getInt(1)); cs.close(); // stmt.execute('DROP FUNCTION method4'); // different parameter types  also method overload stmt.execute('CREATE PROCEDURE method4P(' + 'IN P1 SMALLINT  IN P2 INT  IN P3 BIGINT  IN P4 REAL  ' + 'IN P5 DOUBLE  IN P6 DECIMAL(6 3)  IN P7 DATE  IN P8 TIME  IN P9 TIMESTAMP  IN P10 VARCHAR(20) FOR BIT DATA  ' + 'OUT O1 SMALLINT  OUT O2 INT  OUT O3 BIGINT  OUT O4 REAL  ' + 'OUT O5 DOUBLE  OUT O6 DECIMAL(6 3)  OUT O7 DATE  OUT O8 TIME  OUT O9 TIMESTAMP  OUT O10 VARCHAR(20) FOR BIT DATA' + ') ' + 'EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.derbynet.callable.method4'' + ' NO SQL LANGUAGE JAVA PARAMETER STYLE JAVA'); cs = conn.prepareCall('call method4P(?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?)'); cs.setShort(1  (short) 3); cs.setInt(2  4); cs.setLong(3  5); cs.setFloat(4  (float) 6.0); cs.setDouble(5  7.0); cs.setBigDecimal(6  new BigDecimal('88.88')); cs.setDate(7  Date.valueOf('2002-05-12')); cs.setTime(8  Time.valueOf('10:05:02')); cs.setTimestamp(9  Timestamp.valueOf('2002-05-12 10:05:02.000000000')); byte[] ba = new byte&#91;2&#93;; ba&#91;0&#93; = 1; ba&#91;1&#93; = 2; cs.setBytes(10  ba); int n = 10; cs.registerOutParameter (n+1  java.sql.Types.SMALLINT); cs.registerOutParameter (n+2  java.sql.Types.INTEGER); cs.registerOutParameter (n+3  java.sql.Types.BIGINT); cs.registerOutParameter (n+4  java.sql.Types.REAL); cs.registerOutParameter (n+5  java.sql.Types.DOUBLE); cs.registerOutParameter (n+6  java.sql.Types.DECIMAL); cs.registerOutParameter (n+7  java.sql.Types.DATE); cs.registerOutParameter (n+8  java.sql.Types.TIME); cs.registerOutParameter (n+9  java.sql.Types.TIMESTAMP); cs.registerOutParameter (n+10  java.sql.Types.VARBINARY); cs.execute();------------------I found in derby.log a reference to error 22007  (.S.181) - i.e. syntax error on parameter 3 of SYSIBM.SQLCAMESSAGE (yes  this is from last year):-------------------------------2005-09-10 01:56:17.009 GMT Thread&#91;DRDAConnThread_2 5 main&#93; (XID = 110)  (SESSIONID = 0)  (DATABASE = wombat)  (DRDAID = NF000001.G7C1-4327676640608975420{2}) End compiling prepared statement: call method4P(?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?) :End prepared statement2005-09-10 01:56:17.311 GMT Thread&#91;DRDAConnThread_2 5 main&#93; (XID = 110)  (SESSIONID = 0)  (DATABASE = wombat)  (DRDAID = NF000001.G7C1-4327676640608975420{2}) Begin compiling prepared statement: call SYSIBM.SQLCAMESSAGE(? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?) :End prepared statement2005-09-10 01:56:17.429 GMT Thread&#91;DRDAConnThread_2 5 main&#93; (XID = 110)  (SESSIONID = 0)  (DATABASE = wombat)  (DRDAID = NF000001.G7C1-4327676640608975420{2}) End compiling prepared statement: call SYSIBM.SQLCAMESSAGE(? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?) :End prepared statement2005-09-10 01:56:17.831 GMT Thread&#91;DRDAConnThread_2 5 main&#93; (XID = 110)  (SESSIONID = 0)  (DATABASE = wombat)  (DRDAID = NF000001.G7C1-4327676640608975420{2}) Executing prepared statement: call SYSIBM.SQLCAMESSAGE(? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?) :End prepared statement with 16 parameters begin parameter #1: -1 :end parameter begin parameter #2: 11 :end parameter begin parameter #3: ^V^V^30^30^D^F^53^F^31^38^31 :end parameter begin parameter #4: ^43^53^53^31^30^30^31^31 :end parameter begin parameter #5: 0 :end parameter begin parameter #6: 0 :end parameter begin parameter #7: 0 :end parameter begin parameter #8: 0 :end parameter begin parameter #9: 0 :end parameter begin parameter #10: 0 :end parameter beginparameter #11: ^20^20^20^20^20^20^20^20^20^20^20 :end parameter begin parameter#12: ^V^V^30^30^D :end parameter begin parameter #13: null :end parameter beginparameter #14: en :end parameter begin parameter #15: null :end parameter begin----------------------   ,0
1128,jdbc4/TestDbMetaData.java fails because of changes in SQLException text    jdbc4/TestDbMetaData.java fails with the following diff:                 Diff file jdbc4/DerbyNetClient/jdbc4/TestDbMetaData.diff             Start: TestDbMetaData jdk1.6.0-beta2 DerbyNetClient jdbc4:jdbc4 2006-03-16 20:13:06 ***49 del&lt; SQLSTATE(0A000):java.sql.SQLException: 0A000.S : &#91;0&#93; getClientInfoProperties ()50 del&lt; Caused by: org.apache.derby.client.am.SqlException: 0A000.S : &#91;0&#93; getClientInfoProperties ()50a49 50&gt; SQLSTATE(0A000):java.sql.SQLException: Feature not implemented: getClientInfoProperties ().&gt; Caused by: org.apache.derby.client.am.SqlException: Feature not implemented: getClientInfoProperties ().58 del&lt; SQLSTATE(0A000):java.sql.SQLException: 0A000.S : &#91;0&#93; getSchemas (String  String)59 del&lt; Caused by: org.apache.derby.client.am.SqlException: 0A000.S : &#91;0&#93; getSchemas (String  String)59a58 59&gt; SQLSTATE(0A000):java.sql.SQLException: Feature not implemented: getSchemas (String  String).&gt; Caused by: org.apache.derby.client.am.SqlException: Feature not implemented: getSchemas (String  String).Test Failed. End: TestDbMetaData jdk1.6.0-beta2 DerbyNetClient jdbc4:jdbc4 2006-03-16 20:13:16 ***    (http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/testlog/JDK16Jvm1.6SunOS-5.10_i86pc-i386/386413-jdbc4_diff.txt)The failure is caused by changes in MessageUtil which have modified the exception message.   ,0
1129,compatibility tests fail with security related errors.    A * few* cases:                 Begin: serverVM-1.3_serverTrunk_clientVM-1.3_clientTrunkException in thread 'main' java.lang.NoClassDefFoundError: javax/crypto/IllegalBlockSizeException             End: serverVM-1.3_serverTrunk_clientVM-1.3_clientTrunk                     Begin: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientDB2JCCcom.ibm.db2.jcc.c.SqlException: java.net.ConnectException : Error opening socket to server localhost on port 1527 with message : Connection refused at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(CompatibilitySuite.java:129)Exception in thread 'main' java.lang.Exception: Error lookup up server info: java.net.ConnectException : Error opening socket to server localhost on port 1527 with message : Connection refused             End: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientDB2JCC                     Begin: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientDerby10.1.1.0org.apache.derby.client.am.DisconnectException: java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : nullException in thread 'main' java.lang.Exception: Error lookup up server info: java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : null             End: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientDerby10.1.1.0                     Begin: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientDerby10.1.2.0org.apache.derby.client.am.DisconnectException: java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : nullException in thread 'main' java.lang.Exception: Error lookup up server info: java.security.PrivilegedActionException : Error opening socket to server localhost on port 1527 with message : null             End: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientDerby10.1.2.0                     Begin: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientTrunkException in thread 'main' java.lang.NoClassDefFoundError: javax/crypto/IllegalBlockSizeException             End: serverVM-1.3_server10.0.2.1_clientVM-1.3_clientTrunk                     Begin: serverVM-1.3_server10.0.2.1_clientVM-1.4_clientDB2JCCcom.ibm.db2.jcc.c.SqlException: java.net.ConnectException : Error opening socket to server localhost on port 1527 with message : Connection refused at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(CompatibilitySuite.java:129)Exception in thread 'main' java.lang.Exception: Error lookup up server info: java.net.ConnectException : Error opening socket to server localhost on port 1527 with message : Connection refused             End: serverVM-1.3_server10.0.2.1_clientVM-1.4_clientDB2JCC    See e.g.http://www.multinet.no/~solberg/public/Apache/Derby/testlog/SunOS-5.10_i86pc-i386/386871-compatibility_diff.txt inhttp://www.multinet.no/~solberg/public/Apache/Derby/Limited/testSummary-386871.htmlhttp://www.multinet.no/~solberg/public/Apache/DerbyJDK16/testlog/JDK16Jvm1.6SunOS-5.10_i86pc-i386/387016-compatibility_diff.txt inhttp://www.multinet.no/~solberg/public/Apache/DerbyJDK16/Limited/testSummary-current.htmlFirst occurence in svn 386687 &#91;2006-03-17 19:45:55 CET&#93;Changes in http://www.multinet.no/~solberg/public/Apache/Derby/UpdateInfo/386687.txt   ,1
1132,Truncation Error with Concat    Consider the tableCREATE TABLE CUSTOMER_TABLE ( ID VARCHAR(255) PRIMARY KEY NOT NULL  NAMEZ VARCHAR(255)   COUNTRY VARCHAR(255) )Sql:PreparedStatement ps = conn.prepateStatement ('SELECT * FROM CUSTOMER_TABLE WHERE NAMEZ = VARCHAR ( CAST (? AS VARCHAR(32672) ) || CAST (? AS VARCHAR(32672) ) )' );ps.setString(1  'Alan E. ');ps.setString(2  'Frechette');ps.executeQuery()Error:'A truncation error was encountered trying to shrink VARCHAR 'Alan E. Frechette' to length 15.'getErrorCode()-1getSQLState()22001 Please note that-The query executes ok against DB2 database-The query executes ok if the total length of both the parameters bound is less than 15. That is as follows //Total length of parameters bound = len('Alan E. Fre') = 11 ps.setString(1  'Alan E. '); ps.setString(2  'Fre');-The error occurs both with embedded and network mode of derby-Omitting the casts as follows also gives the same error query: SELECT * FROM CUSTOMER_TABLE WHERE NAMEZ = VARCHAR( 'Frechette' || ? ) error: SQLState: 22001 'A truncation error was encountered trying to shrink VARCHAR 'FrechetteAlan E. ' to length 15'-Using parameter markers for both the variables without cast like as follows results in error query: SELECT * FROM CUSTOMER_TABLE WHERE NAMEZ = ? || ? error: SQLState: 42X35 'It is not allowed for both operands of '||' to be ? parameters.'-Using parameter markers for only one variables without cast like as follows results in error query: SELECT * FROM CUSTOMER_TABLE WHERE NAMEZ = 'Frechette' || ? error:SQLState: 42818 'Comparisons between 'VARCHAR' and 'LONG VARCHAR' are not supported.' -It works to cast to VARCHAR(2000)  but not VARCHAR(2001) or larger. Regardless of length  if it fails  the magic number is always 15.   ,0
1144,With client PooledConnection.getConnection() does not reset holdability and isolation state properly    I found this issue when working on DERBY-1044 which was filed for the isolation not getting reset for XAConnections.I found that this was a generic issue for PooledConnections and also that holdability was also wrong.The fix proposed for DERBY-1044 should also fix this issue. That bug has the repro for the isolation state issueFor holdability  this code passes for embedded but fails for client: // Test holdability  ConnectionPoolDataSource ds = TestUtil.getConnectionPoolDataSource(p); pc1 = ds.getPooledConnection(); testPooledConnHoldability('PooledConnection'  pc1); pc1.close(); ** @param string @param pc1 */ private static void testPooledConnHoldability(String string  PooledConnection pc1)  throws SQLException Unknown macro: { System.out.println(&quot;n**Test holdability state**&quot;); Connection conn = pc1.getConnection(); conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT); // reset the connection and see if the holdability gets reset conn = pc1.getConnection(); int holdability = conn.getHoldability(); if (holdability != ResultSet.HOLD_CURSORS_OVER_COMMIT) { System.out.println('FAIL: Holdability not reset on get Connection'); } else { System.out.println('PASS: Holdability reset on getConnection'); } conn.close(); }   ,0
1152,Failures in sysinfo and sysinfo_withproperties induced by classpath wiring    If you wire your classpath together out of the compiled classtree and the checked-in jars  you get the following error in the sysinfo and sysinfo_withproperties tests. You don't see this error if you run against the built Derby jar files:15d14&lt; Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read)43d41&lt; Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read)72d69&lt; Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read)Test Failed.   ,0
1154,derbynet/testSecMec.java fails with Sun JDK 1.3    derbynet/testSecMec.java fails with Sun JDK 1.3:&lt; SECMEC_EUSRIDPWD:EXCEPTION testSecurityMechanism() Security exception encountered  see next exception for details.&gt; SECMEC_EUSRIDPWD:EXCEPTION testSecurityMechanism() Security exception encountered  see next exception for details. Caused by exception class java.security.NoSuchProviderException: null... (and so forth)Does not fail with 1.4  so probably just a master update.   ,0
1155,Separate XAResource from EmbedXAConnection    jdbc4.0 introduces two new methods in javax.sql.PooledConnection. Due to this a new implementation of PooledConnection and XAConnection for jdbc4.0 is required. According to current hierarchy XAConnection extends from PooledConnection. Going by similar hierarchy for new classes PooledConnection40 will extend from PooledConnection and XAConnection40 will be extending from PooledConnection40. This structure forces to replicate all the methods of XAConnection to be present in XAConnection40 too. In the current implementation EmbedXAConnection itself is XAResource. This will cause to replicate all the XAResource methods to be present in XAConnection40. Separating these two implementation will save replication of lots of methods.See the comments on jira issue 1137 for some more discussion about this issue.   ,0
1156,allow the encrypting of an existing unencrypted db and allow the re-encrypting of an existing encrypted db    encrypted database to be re-encrypted with a new password.Here are some ideas for an initial implementation.The easiest way to do this is to make sure we have exclusive access to thedata and that no log is required in the new copy of the db. I want to avoidthe log as it also is encrypted. Here is my VERY high level plan:1) Force exclusive access by putting all the work in the low level store  offline boot method. We will do redo recovery as usual  but at the end there will be an entry point to do the copy/encrypt operation.copy/encrypt process:0) The request to encrypt/re-encrypt the db will be handled with a new set of url flags passed into store at boot time. The new flags will provide the same inputs as the current encrypt flags. So at high level the request will be 'connect db old_encrypt_url_flags; new_encrypt_url_flags'. TODO - provide exact new flag syntax.1) Open a transaction do all logged work to do the encryption. All logging will be done with existing encryption.2) Copy and encrypt every db file in the database. The target files will be in the data directory. There will be a new suffix to track the new files  similar to the current process used for handling drop table in a transaction consistent manner without logging the entire table to the log. Entire encrypted destination file is guaranteed synced to disk before transaction commits. I don't think this part needs to be logged. Files will be read from the cache using existing mechanism and written directly into new encrypted files (new encrypted data does not end up in the cache).3) Switch encrypted files for old files. Do this under a new log operation so the process can be correctly rolled back if the encrypt db operation transaction fails. Rollback will do file at a time switches  no reading of encrypted data is necessary.4) log a 'change encryption of db' log record  but do not update system.properties with the change.5) commit transaction.6) update system.properties and sync changes.7) TODO - need someway to handle crash between steps 5 and 6.6) checkpoint all data  at this point guaranteed that there is no outstanding transaction  so after checkpoint is done there is no need for the log.ISSUES:o there probably should be something that catches a request to encrypt to whatever db was already encrypted with.   ,1
1157,Helper methods in BaseJDBCTestCase for creating data sources    BaseJDBCTestCase should be extended with methods that create DataSource  ConnectionPoolDataSource and XADataSource objects.   ,0
1159,PreparedStatement.executeUpdate throws a XJ05C exception in a global transaction if the statement is HOLD_CURSORS_OVER_COMMIT    SQLSTATE(XJ05C): Cannot set holdability ResultSet.HOLD_CURSORS_OVER_COMMIT for a global transaction.Exception is thrown in client  in embedded the statement executes successfully.Since HOLD_CURSORS_OVER_COMMIT only applies to ResultSets and executeUpdate states it only succeeds if the statementdoes not generate ResultSets  then this combination should succeed.Probably related to the fact that in embedded an execute() call on the same PreparedStatement will thrown a XJ05C exceptionWorkaround is to prepare the statement explicitly with CLOSE_CURSORS_AT_COMMIT.   ,0
1174,NullPointerException in network server with LDAP authentication    While trying to fix DERBY-1000 I tried to set up Derby's network server to use LDAP authentication  but I ran into something that looks like a bug  but could just as well be my own configuration mistake. I would appreciate any help in figuring this out. =)The problem is a NullPointerException in the Network Server when it tries to initialize the LDAP authentication service. The attached derby.log shows the exception and its stacktrace. The attached derby.properties is what I put in the derby home directory.I'm seeing this problem in the trunk as well as my own build of the 10.1 branch and the 10.1.2.1 release build available from the Derby web site. ( http://db.apache.org/derby/releases/release-10.1.2.1.cgi )The problem is cause by the setInitDirContextEnv method in JNDIAuthenticationSchemeBase receiving a null dbProps argument  which it obviously doesn't expect. Adding a check for a null dbProps argument and returning immediately after creating the initDirContextEnv object fixes the NullPointerException and makes LDAP authentication work for me. This is a reasonable enough robustness fix and shouldn't have any negative impact  but if the source of the problem is that JNDIAuthenticationSchemeBase should never receive that null pointer in the first place  more patching is needed. I'm not sure about this  so I'm leaving it up to the experts to decide this. =)   ,1
1187,defragment of inplace compress pass for described dataset is not freeing up empty pages.    For the following script defragment pass is not freeing up the free pages:drop table t1;create table t1 (i integer primary key  j integer  c char(200));insert into t1 values (1  1  'a');insert into t1 (select t1.i + 1  t1.j + 1  t1.c from t1);insert into t1 (select t1.i + 2  t1.j + 2  t1.c from t1);insert into t1 (select t1.i + 4  t1.j + 4  t1.c from t1);insert into t1 (select t1.i + 8  t1.j + 8  t1.c from t1);insert into t1 (select t1.i + 16  t1.j + 16  t1.c from t1);insert into t1 (select t1.i + 32  t1.j + 32  t1.c from t1);insert into t1 (select t1.i + 64  t1.j + 64  t1.c from t1);insert into t1 (select t1.i + 128  t1.j + 128  t1.c from t1);insert into t1 (select t1.i + 256  t1.j + 256  t1.c from t1);insert into t1 (select t1.i + 512  t1.j + 512  t1.c from t1);delete from t1 where i &lt; 512;select cast(conglomeratename as char(12)) as tabname  isindex  cast(numallocatedpages as int) as alloc  numfreepages  cast(numunfilledpages as int) as unfilled  pagesize  estimspacesavingfrom new org.apache.derby.diag.SpaceTable('T1') t order by conglomeratename;CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP'  'T1'  1  1  1);select cast(conglomeratename as char(12)) as tabname  isindex  cast(numallocatedpages as int) as alloc  numfreepages  cast(numunfilledpages as int) as unfilled  pagesize  estimspacesavingfrom new org.apache.derby.diag.SpaceTable('T1') t order by conglomeratename;select cast(conglomeratename as char(12)) as tabname  isindex  cast(numallocatedpages as int) as alloc  numfreepages  cast(numunfilledpages as int) as unfilled  pagesize  estimspacesavingfrom new org.apache.derby.diag.SpaceTable('T1') t order by conglomeratename;Here is example output from a run on the trunk:ij&gt; drop table t1;0 rows inserted/updated/deletedij&gt; create table t1 (i integer primary key  j integer  c char(200));0 rows inserted/updated/deletedij&gt; insert into t1 values (1  1  'a');1 row inserted/updated/deletedij&gt; insert into t1 (select t1.i + 1  t1.j + 1  t1.c from t1);1 row inserted/updated/deletedij&gt; insert into t1 (select t1.i + 2  t1.j + 2  t1.c from t1);2 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 4  t1.j + 4  t1.c from t1);4 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 8  t1.j + 8  t1.c from t1);8 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 16  t1.j + 16  t1.c from t1);16 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 32  t1.j + 32  t1.c from t1);32 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 64  t1.j + 64  t1.c from t1);64 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 128  t1.j + 128  t1.c from t1);128 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 256  t1.j + 256  t1.c from t1);256 rows inserted/updated/deletedij&gt; insert into t1 (select t1.i + 512  t1.j + 512  t1.c from t1);512 rows inserted/updated/deletedij&gt; delete from t1 where i &lt; 512;511 rows inserted/updated/deletedij&gt; select cast(conglomeratename as char(12)) as tabname  isindex  cast(numallocatedpages as int) as alloc  numfreepages  cast(numunfilledpages as int) as unfilled  pagesize  estimspacesavingfrom new org.apache.derby.diag.SpaceTable('T1') t order by conglomeratename;TABNAME |ISIND&amp;|ALLOC |NUMFREEPAGES |UNFILLED |PAGESIZE |ESTIMSPACESAVING-------------------------------------------------------------------------------------------------SQL060406034|1 |7 |0 |0 |4096 |0T1 |0 |60 |9 |0 |4096 |368642 rows selectedij&gt; CALL SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('APP'  'T1'  1  1  1);0 rows inserted/updated/deletedij&gt; select cast(conglomeratename as char(12)) as tabname  isindex  cast(numallocatedpages as int) as alloc  numfreepages  cast(numunfilledpages as int) as unfilled  pagesize  estimspacesavingfrom new org.apache.derby.diag.SpaceTable('T1') t order by conglomeratename;TABNAME |ISIND&amp;|ALLOC |NUMFREEPAGES |UNFILLED |PAGESIZE |ESTIMSPACESAVING-------------------------------------------------------------------------------------------------SQL060406034|1 |7 |0 |1 |4096 |0T1 |0 |69 |0 |0 |4096 |02 rows selectedij&gt;   ,0
1190,Network Server reports wrong product name when logging connections to derby.log    The Derby Network Server is symptomatic of dissociative identity disorder when derby.drda.logConnections=true. At startup and shutdown the network server correctly recognizes itself as 'Apache Derby'. When logging connections  however  it thinks it is 'Cloudscape'. See the following derby.log for an example:======= derby.log START ================Apache Derby Network Server - 10.2.0.0 alpha started and ready to accept connections on port 1527 at 2006-04-07 09:09:22.766 GMTConnection number: 1.----------------------------------------------------------------2006-04-07 09:10:02.054 GMT: Booting Derby version The Apache Software Foundation - Apache Derby - 10.2.0.0 alpha - (392214): instance c013800d-010a-739c-e4bf-0000001109c8on database directory /export/home/tmp/test/testDBDatabase Class Loader started - derby.database.classpath=''2006-04-07 09:10:03.287 GMT Thread&#91;DRDAConnThread_3 5 main&#93; (DATABASE = testDB)  (DRDAID = {1})  Cloudscape Network Server connected to database testDB;create=true======= derby.log END ================To reproduce  do the following:1. Start the network server with the property derby.drda.logConnections set to true. An example follows:bash-3.00 $ java -Dderby.drda.logConnections=true -jar ${DERBY_CURRENT}/derbyrun.jar NetworkServerControl startApache Derby Network Server - 10.2.0.0 alpha started and ready to accept connections on port 1527 at 2006-04-07 09:09:22.766 GMTConnection number: 1.2. Use the client driver to connect to the server. An example follows (using IJ):bash-3.00 $ java -jar ${DERBY_CURRENT}/derbyrun.jar ijij version 10.2ij&gt; connect 'jdbc:derby://localhost:1527/testDB;create=true';ij&gt; exit;   ,0
1203,Derby Server and Administration Guide - Servlet interface - Running page    In this page is written:1) You can use the running page to stop the server and turn logging and tracing on or off  boot or shut down databases.I installed the servlet in Tomcat  and I can't see any option to boot or shut down databases in this page.2) Test the connection. (If you choose this option  the Test connection page is displayed.)I also can't see any option to test connection in this page.3) Stop the application server.The option is 'Press the button to stop the Network server'  and not the application server.I'm using:--------- Derby Information --------JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&#91;/org/apache/derby/info/DBMS.properties&#93; 10.1.2.1 - (330608)&#91;/org/apache/derby/info/net.properties&#93; 10.1.2.1 - (330608)I don't know if my servlet's version is old  but those things are written in the manual for the version I'm using.I'm sending a diff file to adjust this page to what appears in the servlet I'm using.   ,0
1216,ij should have a --help option to print command line syntax    ij should accept a --help option to print command line syntax for reference and friendliness.   ,0
1219,jdbcapi/checkDataSource.java and jdbcapi/checkDataSource30.java hang intermittently with client    The tests checkDataSource.java and checkDataSource30.java hang intermittently especially with jdk 1.5.Attached is the test run output and traces when the server is started separately.1) Enable checkDataSource30.java by taking it out of functionTests/suites/DerbyNetClient.exclude.2) Run the test with client.java -Dij.exceptionTrace=true -Dkeepfiles=true -Dframework=DerbyNetClient org.apache.derbyTesting.functionTests.harness.RunTest jdbcapi/checkDataSource30.javaAttachements: testfiles_after_hang.zip - Test directory. traces_on_hang.txt - Server side traces obtained by starting the server separately before running the test.I wish I had time to work on this right now as I would really like to see this valuable test in the suite  but hopefully someone else will pick it up.   ,0
1230,Remove the huge log files (TesterN.out) left from running 'stress/stress.multi'    See http://www.nabble.com/derbyall-test-uses-%7E11Gb-disk-space-when-run%21-t530808.html#a1433024 :'I discovered that when I now run the derbyall test it uses ~11Gb disk space!I find 4 x 10 '..../multi/Tester*.out' files which each is ~270Mb! (=&gt;10.8Gb.)'I will upload a patch which makes ij/mtTester.java able to tell if the mtTester detected errors  which then is used by harness/MultiTest.java to decide if the .out file can be deleted.mtTester is currently only used by harness/MultiTest.java.   ,0
1231,LIKE does not match empty strings when used with a prepared statement    LIKE should give true for two 0-length strings. See SQL 2003 Ch. 8.5General Rules 3)c)i)The query SELECT * FROM t WHERE v like ''appears to give me all rows where v is an emptystring  as expected.But a prepared statementSELECT * FROM t WHERE v like ?  with setString(1  '')always returns an empty result set. See attached repro for the full example.   ,0
1235,Move isPoolable() and setPoolable() from PreparedStatement to Statement    An upcoming release of jdk1.6 will move isPoolable() and setPoolable() from PreparedStatement to Statement. We should conform.   ,0
1236,Verify that applications can't manipulate the transaction state while inside a distributed transaction.    The next rev of the JDBC4 spec will clarify that applications may not call the following methods while inside distributed transactions: setAutoCommit( true )  commit()  rollback()  and setSavepoint(). We should verify that we conform.   ,0
1248,Assert failure in BasePage.shiftUp() when running store/onlineBackupTest4.sql    I saw this error when I ran derbyall.                 Diff file derbyall/storeall/storemore/onlineBackupTest4.diff             Start: onlineBackupTest4 jdk1.5.0_04 storeall:storemore 2006-04-24 11:51:50 ***68 del&lt; ij(CONNECTION1)&gt; select * from ctest;69 del&lt; ID |NAME 70 del&lt; --------------------------------------------------------------------------------------------------------------------------------------------71 del&lt; 1 |derby backup/compress test &amp;72 del&lt; 2 |derby backup/compress test &amp;73 del&lt; 300 |derby backup/compress test &amp;74 del&lt; 509 |derby backup/compress test &amp;75 del&lt; 510 |derby backup/compress test &amp;76 del&lt; 511 |derby backup/compress test &amp;77 del&lt; 512 |derby backup/compress test &amp;78 del&lt; ij(CONNECTION1)&gt; insert into ctest values(2000  'restore was successfil') ;79 del&lt; 1 row inserted/updated/deleted80 del&lt; ij(CONNECTION1)&gt; 80 add&gt; org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED shiftUp failed  low must be between 0 and recordCount. low = 140  recordCount = 2&gt; ERROR XJ040: Failed to start database 'wombat'  see the next exception for details.&gt; ERROR XJ001: Java exception: 'ASSERT FAILED shiftUp failed  low must be between 0 and recordCount. low = 140  recordCount = 2: org.apache.derby.shared.common.sanity.AssertFailure'.&gt; ij&gt; select * from ctest;&gt; IJ ERROR: Unable to establish connection&gt; ij&gt; insert into ctest values(2000  'restore was successfil') ;&gt; IJ ERROR: Unable to establish connection&gt; ij&gt; Test Failed. End: onlineBackupTest4 jdk1.5.0_04 storeall:storemore 2006-04-24 11:51:56 ***    The test usually succeeds  but I managed to reproduce the failure by running this loop in the shell:touch onlineBackupTest4.passwhile [ -f onlineBackupTest4.pass ]; do rm onlineBackupTest4.pass java org.apache.derbyTesting.functionTests.harness.RunTest store/onlineBackupTest4.sqldone   ,0
1252,Old clients with new server return wrong database metadata values for some methods    With an old client (10.1.1  10.1.2) accessing a new (10.2) server some metadata calls will return the wrong value for both the JCC andthe Derby clients: deletesAreDetected(TYPE_SCROLL_INSENSITIVE) -&gt; true updatedAreDetected(TYPE_SCROLL_INSENSITIVE) -&gt; true ownDeletesAreVisible(TYPE_SCROLL_INSENSITIVE) -&gt; true ownUpdatesAreVisible(TYPE_SCROLL_INSENSITIVE) -&gt; trueThis happens because these values were changed for the 10.2 withthe addition of updatable scrollable insensitive result sets (DERBY-775) combined with a weakness in the way the client and the server cooperates to answer these metadata calls.Presently  when the client application invokes these methods  theresults will be returned by the server without regard to the identityof the client  i.e. the 2-tuple {JCC or Derby client  client version}.The values to be returned for the methods in question are based solelyon the values found in the file metadata_net.properties  which is partof the server.In general  some database metadata is dependent on the combination ofthe capabilities in the client and the server and the returned valuesshould reflect this  which in general implies negotiating (down) tovalues which are correct for the actual combination of client andserver.   ,0
1254,XAConnection uses NetConnection as underlying physical connection for JDBC4/Java 1.6    When running under DerbyNetClient (using Derby network server) using Java 1.6  XAConnection.getConnection() returns a NetConnection instance instead of NetConnection40 instance for the underlying 'physical connection'. This causes AbstractMethod errors for calls in LogicalConnection40 (not yet committed). PooledConnection does the correct thing according to the test that revealed this problem.The XAConnection was obtained by using TestUtil.getXADataSource().getXAConnection(). The underlying connection object was then obtained with XAConnection.getConnection().A new ConnectionTest is on the way as part of DERBY-1180. It will be submitted/committed  but not enabled until this bug is fixed.   ,0
1255,Implement new JDBC4 methods for creating empty LOBs in the embedded client    Implement Connection.createClob() and Connection.createBlob(). Right now these methods are implemented in the network client but not the embedded client.   ,0
1266,Client: Attempted deleteRow or updateRow while on insert row gives wrong error message    This fragment from deleteRowX shows the problem:&gt; if (isOnInsertRow_) {&gt; throw new SqlException(agent_.logWriter_  &gt; new MessageId(SQLState.CURSOR_NOT_POSITIONED_ON_INSERT_ROW));&gt; }It should be the opposite: the problem is that the cursor is on theinsert row  not that it isn't.These is a similar error in updateRowX.The client master files for updatableResultSet show the problem  sothe masters are wrong  too.&gt; Negative Test 39.a - run updateRow on insertRow&gt; SQL State: XJ086&gt; Got expected exception: This method cannot be invoked while the cursor is not on the insert row or if the concurrency of this  ResultSet object is CONCUR_READ_ONLY.   ,0
1274,Network Server does not shutdown the databases it has booted when started and shutdown from the command line    If network server is started and shutdown from the comand line t does not shutdown the database. This can is evidenced by the fact that the db.lck file remains after the following steps.java org.apache.derby.drda.NetworkServerControl start &amp;&lt;some database access&gt;java org.apache.derby.drda.NetworkServerControl shutdown There is much discussion about the correct behavior of NetworkServer in this regard related to embedded server scenarios in DERBY-51  but it seems clear in this case the databases should be shutdown.   ,0
1276,Calling ResultSet.isLast() on a scrollable insensitive resultset  causes the entire ResultSet to be populated    The following is not a bug  however some applications do not always need to scroll to the last row  however they do want to check isLast(). Therefore it is unfortunate that isLast() is expensive. The general logic in ScrollInsensitiveResultSet is to populate rows by demand.The current logic in ScrollInsensitiveResultSet to return true or false on isLast()  is to move to the last row. If the last row is not the same row number as the current  then isLast() returns false. When moving to the last row  all rows will be populated into the BackingStoreHashtable of the ScrollInsensitiveResultSet.This logic may be rewritten to only move to the next row. If the next row exists  isLast() may return false.(note the logic is also optimized to use beforeFirst and afterLast flags)   ,0
1290,Resolve test failures with JCC2.8    The following tests fail when run with JCC 2.8 driver:derbynetmats/derbynetmats.fail:jdbcapi/resultset.javaderbynetmats/derbynetmats.fail:jdbcapi/LOBTest.javaderbynetmats/derbynetmats.fail:jdbcapi/parameterMapping.javaderbynetmats/derbynetmats.fail:derbynet/testSecMec.java (fails with Sun JDKs only)   ,0
1308,Tests jdbcapi/HoldabilityTest.junit  jdbcapi/UpdateXXXTest.junit jdbcapi/SURTest.junit fail on wctme5.7_foundation    05/05/2006 regression test run of derbyall shows the following test failure with wctme5.7_foundation  derbyall/derbyall.fail:jdbcapi/HoldabilityTest.junitderbyall/derbyall.fail:jdbcapi/UpdateXXXTest.junitderbyall/derbyall.fail:jdbcapi/SURTest.junitDiff is a CNFE with ConnectionPoolDataSource.                 Diff file derbyall/jdbcapi/HoldabilityTest.diff             Start: HoldabilityTest jdkJ2ME Foundation Specification v1.0 derbyall:jdbcapi 2006-05-07 11:31:05 ***0 add&gt; Exception in thread 'main' java.lang.NoClassDefFoundError: javax.sql.ConnectionPoolDataSourceTest Failed. End: HoldabilityTest jdkJ2ME Foundation Specification v1.0 derbyall:jdbcapi 2006-05-07 11:31:06 ***    My guess is these tests need to excluded from running in this environment. Can someone please confirm. Thanks.   ,0
1313,SUR: Use DRDA's extended diagnostic to send ROW_UPDATED and ROW_DELETED warnings.    Detectability of own changes is implemented in the client using warnings cf the write-up for DERBY-775. When a row has been deleted and/or updated  a warning will be sent to the client to indicate that fact. Presently  only one warning can be sent each time a data row is sent from to the client  that means that some warnings may be lost. Using extended diagnostic allows us to send several warnings for each data row.I propose to use extended diagnostics to send ROW_UPDATED and ROW_DELETED warnings when necessary. This may later be extended for other warnings  but I do not plan to do it as a part of the work in this issue.   ,0
1314,Differences between client and embedded when invoking stored procedures using Statement.executeUpdate()    When invoking a stored procedure using Statement.executeUpdate()  theclient driver and the embedded driver behave differently.If the stored procedure does not return any result set  the embeddeddriver returns 0  whereas the client returns -1.If the stored procedure returns one or more result sets  the embeddeddriver returns -1  whereas the client fails with an exception.   ,0
1320,Test lang/procedure.java fails with ibm1.5 jvm    lang/procedure.java fails on IBM1.5 jvm on linux machine. I spoke to Manjula who filed DERBY-1108 that this is related to that issue and is a JVM bug. The JVM team has been notified. Please note: I have marked this as a Regression Test Failure although this test has not passed with IBM 1.5 JVM atleast in our nightly regression test runs  so it is not a regression of the product. diff:                 Diff file derbyall/derbylang/procedure.diff             Start: procedure jdk1.5.0 derbyall:derbylang 2006-05-10 22:17:16 ***1018 del&lt; testImplicitClose(): PASSED1018 add&gt; testImplicitClose(): FAILED (no exception thrown)Test Failed. End: procedure jdk1.5.0 derbyall:derbylang 2006-05-10 22:17:31 ***    here is machine info.------------------ Java Information ------------------Java Version: 1.5.0Java Vendor: IBM CorporationJava home: /local1/cloudtst/dev/src/ibm15/jreJava classpath: /local1/cloudtst/dev/src/jars/insane/derby.jar:/local1/cloudtst/dev/src/jars/insane/derbytools.jar:/local1/cloudtst/dev/src/jars/insane/derbynet.jar:/local1/cloudtst/dev/src/jars/insane/derbyclient.jar:/local1/cloudtst/dev/src/jars/insane/derbyTesting.jar:/local1/cloudtst/dev/src/jcc/db2jcc.jar:/local1/cloudtst/dev/src/jcc/db2jcc_license_c.jar:/local1/cloudtst/dev/src/jars/insane/derbyTesting.jar:/local1/cloudtst/dev/src/tools/java/jakarta-oro-2.0.8.jar:/local1/cloudtst/dev/src/tools/java/junit.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_de_DE.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_es.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_fr.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_it.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_ja_JP.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_ko_KR.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_pt_BR.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_zh_CN.jar:/local1/cloudtst/dev/src/jars/insane/derbyLocale_zh_TW.jar:/local1/cloudtst/dev/src/jars/insane/derbyrun.jar:OS name: LinuxOS architecture: x86OS version: 2.6.5-7.252-bigsmpJava user name: cloudtstJava user home: /u/cloudtstJava user dir: /local1/cloudtst/dev/src/NightlyBuildResults.2006-05-10/ibm15_derbyalljava.specification.name: Java Platform API Specificationjava.specification.version: 1.5--------- Derby Information --------JRE - JDBC: J2SE 5.0 - JDBC 3.0&#91;/local1/cloudtst/dev/src/jars/insane/derby.jar&#93; 10.2.0.0 alpha - (405653)&#91;/local1/cloudtst/dev/src/jars/insane/derbytools.jar&#93; 10.2.0.0 alpha - (405653)&#91;/local1/cloudtst/dev/src/jars/insane/derbynet.jar&#93; 10.2.0.0 alpha - (405653)&#91;/local1/cloudtst/dev/src/jars/insane/derbyclient.jar&#93; 10.2.0.0 alpha - (405653)&#91;/local1/cloudtst/dev/src/jcc/db2jcc.jar&#93; 2.6 - (90)&#91;/local1/cloudtst/dev/src/jcc/db2jcc_license_c.jar&#93; 2.6 - (90)------------------------------------------------------   ,0
1322,Missing resets of isOnInsertRow state in net client when navigating away via other than ResultSet#next    Please see the enclosed repro program.When attempting the deleteRow  it will fail with SQL state 24000 'nocurrent row'  since the first() call doesn't properly reset theIsOnInsertRow_ state. By inspection of ../am/ResultSet.java I foundthe other positioning calls beside next and moveToCurrentRow to sufferthe same problem.   ,0
1324,Need to remove old copyright notice    An IBM copyright is in these files:derby/code/trunk/tools/jar/copyright.txtderby/code/branches/10.1/tools/jar/copyright.txtderby/code/branches/10.0/tools/jar/copyright.txt'svn log' shows it was part of the original code contribution &#8211; I think this was just missed in the copyright cleanup.There also exists reference to CPL injava/drda/org/apache/derby/impl/drda/EbcdicCcsidManager.java(22): http://www.ibm.com/developerworks/oss/CPLv1.0.htmMore references:java/engine/org/apache/derby/database/Database.java(47): * &lt;I&gt;IBM Corp. reserves the right to change  rename  orjava/engine/org/apache/derby/database/UserUtility.java(41): IBM Corp. reserves the right java/engine/org/apache/derby/iapi/db/ConnectionInfo.java(40): * &lt;i&gt;IBM Corp. reserves the right to change  rename or remove this class orjava/engine/org/apache/derby/iapi/db/ConsistencyChecker.java(70): * &lt;I&gt;IBM Corp. reserves the right to change  rename  orjava/engine/org/apache/derby/iapi/db/Factory.java(58): * &lt;I&gt;IBM Corp. reserves the right to change  rename  orjava/engine/org/apache/derby/iapi/db/PropertyInfo.java(54): * &lt;I&gt;IBM Corp. reserves the right to change  rename  orjava/engine/org/apache/derby/iapi/db/TriggerExecutionContext.java(32): * &lt;I&gt;IBM Corp. reserves the right to change  rename  orjava/engine/org/apache/derby/impl/sql/compile/AggregateDefinition.java(46): * &lt;I&gt; IBM Corp. reserves the right to change  rename  orjava/engine/org/apache/derby/vti/VTICosting.java(40): * &lt;I&gt;IBM Corp reserves the right to change  rename  orjava/engine/org/apache/derby/vti/VTIEnvironment.java(29): * &lt;I&gt;IBM Corp. reserves the right to change  rename  or   ,0
1325,Isolation level of local connection does not get reset after exiting a global transaction if the isolation level was changed using SQL    If we update the isolation level using SQL instead of JDBC and then join/resume a global transaction  on ending the transaction  the isolation level of the local connection is not restored. The problem seems to be in EmbedXAResource. So it happens with both embedded and client driver. Client driver internally uses SQL to set the transaction isolation. So the problem is more likely to be hit with the client. I will attach a repro and a draft patch with more details.   ,0
1327,Identity column can be  created with wrong and very large start with value with  'J2RE 1.5.0 IBM Windows 32 build pwi32dev-20060412 (SR2)' with JIT on    Using the following JRE with JIT on an identity column may be created with a wrong and very large START WITH value. When the problem occurs it affects not only the table being created  but also other tables that were created in previous transactions.For example attempting to create 1000 tables with identity columns the 126th table creation changes the start with value in sys.syscolumns to 41628850257395713 for ALL 125 tables. Attempts to insert into any of the tables cause'SQL Exception: A truncation error was encountered trying to shrink ... to length 12.' This program will create up to 1000 tables until the problem occursNote: The problem does not occur with -Xnojit (JIT OFF) The problem  when it occurs  changes not only the table beingcreated but all previous tables created. See output below. Every thing was fine up until mytable126 and then all the tables got changed to start with 41628850257395713  Problem occurs with autocommit on/off. The problem occurs after the create table but before thecommit. If the non-identity columns are removed the problem does notreproduce.import java.sql.DatabaseMetaData;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.sql.DriverManager;public class BadStartWith{ public static void main (String args [])throws Exception  { testBadStartWith(); } /** After some number of table creations with JIT turned on  the START WITH value for the table being created and all the ones already created gets mysteriously changed with pwi32dev-20060412 (SR2)  @throws Exception */ public static void testBadStartWith() throws Exception { Class.forName('org.apache.derby.jdbc.EmbeddedDriver').newInstance(); Connection conn = DriverManager.getConnection('jdbc:derby:wombat;create=true'); conn.setAutoCommit(false); Statement stmt = null; DatabaseMetaData md = conn.getMetaData() ; System.out.println(md.getDatabaseProductVersion()); System.out.println(md.getDatabaseProductName()); System.out.println(md.getDriverName()); dropAllAppTables(conn); System.out.println('Create tables until we get a wrong Start with value'); stmt = conn.createStatement(); // numBadStartWith will be changed if any columns get a bad start with value. int numBadStartWith = 0;  try { // create 1000 tables. Break out if we get a table that has a bad // start with value. for (int i = 0; (i &lt; 1000) &amp;&amp; (numBadStartWith == 0); i++) { String tableName = 'APP.MYTABLE' + i; String createTableSQL = 'CREATE TABLE ' + tableName + ' (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 2  INCREMENT BY 1)  INSTANCEID INTEGER  STATUS INTEGER  LOGICAL_STATE INTEGER  LSTATE_TSTAMP TIMESTAMP  UPDT_TSTAMP TIMESTAMP  TSTAMP TIMESTAMP  CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255)  CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))'; stmt.executeUpdate(createTableSQL); System.out.println(createTableSQL); System.out.println('Check before commit'); numBadStartWith = checkBadStartWithCols(conn 2); conn.commit(); System.out.println('Check after commit'); numBadStartWith = checkBadStartWithCols(conn 2); if (numBadStartWith &gt; 0) break; } } catch (SQLException se) { se.printStackTrace(); } if (numBadStartWith == 0) System.out.println('PASS: All 1000 tables created without problems'); stmt.close(); conn.rollback(); conn.close(); }/** Check that all tables in App do not have a an autoincrementstart value greater tan maxautoincrementstart @param conn @param maxautoincrementstart Maximum expected autoincrementstart value @return number of columns with bad autoincrementstart value */ private static int checkBadStartWithCols(Connection conn  int maxautoincrementstart) throws Exception { Statement stmt = conn.createStatement(); ResultSet rs =stmt.executeQuery('select count(autoincrementstart) from sys.syscolumns c  sys.systables t  sys.sysschemas s WHERE t.schemaid = s.schemaid and s.schemaname = 'APP' and autoincrementstart &gt; ' + maxautoincrementstart); rs.next(); int numBadStartWith = rs.getInt(1); System.out.println(numBadStartWith + ' columns have bad START WITH VALUE'); rs.close(); if (numBadStartWith &gt; 0) { rs =stmt.executeQuery('select tablename  columnname  autoincrementstart from sys.syscolumns c  sys.systables t  sys.sysschemas s WHERE t.schemaid = s.schemaid and s.schemaname = 'APP' and autoincrementstart &gt; 2 ORDER BY tablename'); while (rs.next()) { System.out.println('Unexpected start value: ' + rs.getLong(3) + ' on column ' + rs.getString(1) + '(' + rs.getString(2) + ')'); } } return numBadStartWith; } /** Drop all tables in schema APP @param conn @throws SQLException */ private static void dropAllAppTables(Connection conn) throws SQLException { Statement stmt1 = conn.createStatement(); Statement stmt2 = conn.createStatement(); System.out.println('Drop all tables in APP schema'); ResultSet rs = stmt1.executeQuery('SELECT tablename from sys.systables t  sys.sysschemas s where t.schemaid = s.schemaid and s.schemaname = 'APP''); while (rs.next()) { String tableName = rs.getString(1); try { stmt2.executeUpdate('DROP TABLE ' + tableName); } catch (SQLException se) { System.out.println('Error dropping table:' + tableName); se.printStackTrace(); continue; } } }}Relevant output:$java BadStartWith10.2.0.0 alphaApache DerbyApache Derby Embedded JDBC DriverDrop all tables in APP schemaCreate tables until we get a wrong Start with valueCREATE TABLE APP.MYTABLE0 (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 2  INCREMENT BY 1)  INSTANCEID INTEGER  STATUS INTEGER  LOGICAL_STATE INTEGER  LSTATE_TSTAMP TIMESTAMP  UPDT_TSTAMP TIMESTAMP  TSTAMP TIMESTAMP  CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255)  CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))Check before commit0 columns have bad START WITH VALUECheck after commit0 columns have bad START WITH VALUE&#91;snip MYTABLE1 ... MYTABLE124&#93;CREATE TABLE APP.MYTABLE125 (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 2  INCREMENT BY 1)  INSTANCEID INTEGER  STATUS INTEGER  LOGICAL_STATE INTEGER  LSTATE_TSTAMP TIMESTAMP UPDT_TSTAMP TIMESTAMP  TSTAMP TIMESTAMP  CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255)  CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))Check before commit0 columns have bad START WITH VALUECheck after commit0 columns have bad START WITH VALUECREATE TABLE APP.MYTABLE126 (ROLEID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 2  INCREMENT BY 1)  INSTANCEID INTEGER  STATUS INTEGER  LOGICAL_STATE INTEGER  LSTATE_TSTAMP TIMESTAMP UPDT_TSTAMP TIMESTAMP  TSTAMP TIMESTAMP  CLALEVEL1_CLALEVEL2_CLALEVEL2ID VARCHAR(255)  CLALEVEL1_CLALEVEL2_CLALEVEL3_CLALEVEL3ID VARCHAR(255))Check before commit127 columns have bad START WITH VALUEUnexpected start value: 41628850257395713 on column MYTABLE0(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE1(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE10(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE100(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE101(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE102(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE103(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE104(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE105(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE106(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE107(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE108(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE109(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE11(ROLEID)Unexpected start value: 41628850257395713 on column MYTABLE110(ROLEID)&#91;snip the rest of the tables have unexpected START WITH value too&#93;   ,0
1339,messages_pt_BR.properties file  should not translate Network Server 'start' and 'shutdown' commands    In the current file messages_pt_BR.properties the commands 'start' and 'shutdown' are translated  but once they are commands they should not be translated. Also the word host wasn't translated  and it appears in many lines. Others modifications were done for compatibility with the translated manuals.   ,0
1351,lang/forupdate.sql fails with derbyclient in the 10.1 branch    Derby 10.1 branch - 10.1.2.5 - (409283)     Start: forupdate jdk1.5.0_02 DerbyNetClient derbynetmats:derbynetmats 2006-05-24 21:24:26 ***333 del&lt; SQL_CURLH000C3333a333&gt; SQL_CURLH000C1393 del&lt; SQL_CURLH000C3393a393&gt; SQL_CURLH000C1Test Failed. End: forupdate jdk1.5.0_02 DerbyNetClient derbynetmats:derbynetmats 2006-05-24 21:24:41 ***   ,0
1355,ClientDriver ResultSetMetaData.isAutoIncrement(column) always returns false    With ClientDriver  resultSet.getMetaData().isAutoIncrement(column) always returns false. EmbeddedDriver correctly returns the true value (true or false)The following code demonstrates the problem:===================================================================================import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.SQLException;import java.sql.Statement;import org.apache.derby.jdbc.ClientDriver;import org.apache.derby.jdbc.EmbeddedDriver;public class TestAutoIncrement { private static final String URL_EMBEDDED = 'jdbc:derby:EmbeddedTestBase;'; private static final String URL_CLIENT = 'jdbc:derby://localhost:1527/ClientTestBase;'; public TestAutoIncrement() { super(); } public static void main(String[] args) throws SQLException { System.out.println(new ClientDriver().getClass().getName() + ' registered'); System.out.println(new EmbeddedDriver().getClass().getName() + ' registered'); new TestAutoIncrement().test(); } private void test() throws SQLException { if (test(URL_EMBEDDED) != test(URL_CLIENT)) { System.out.println('Embedded and client driver behave differently for isAutoIncrement().'); } else { System.out.println('Embedded and client driver behave the same for isAutoIncrement().'); } } private boolean test(String url) throws SQLException { boolean ai = false; Connection connection = DriverManager.getConnection(url + 'create=true;'); Statement statement = connection.createStatement(); statement .execute('CREATE TABLE TEST_TABEL (' + 'ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1  INCREMENT BY 1) ' + 'VALUE INTEGER NOT NULL  PRIMARY KEY (ID))'); statement.execute('INSERT INTO TEST_TABEL (VALUE) VALUES(1)'); ResultSet resultSet = statement .executeQuery('SELECT * FROM TEST_TABEL'); ResultSetMetaData meta = resultSet.getMetaData(); ai = meta.isAutoIncrement(1); System.out.println('For ' + url + ' ' + meta.getColumnName(1) + ' isAutoIncrement: ' + ai); connection.close(); try { DriverManager.getConnection(url + 'shutdown=true;'); } catch (SQLException e) { System.out.println(e.getMessage()); } return ai; }}===================================================================================The output I receive from the above program is:org.apache.derby.jdbc.ClientDriver registeredorg.apache.derby.jdbc.EmbeddedDriver registeredFor jdbc:derby:EmbeddedTestBase; ID isAutoIncrement: trueDatabase 'EmbeddedTestBase' shutdown.For jdbc:derby://localhost:1527/ClientTestBase; ID isAutoIncrement: falseDERBY SQL error: SQLCODE: -1  SQLSTATE: 08006  SQLERRMC: Database 'ClientTestBase' shutdown.Embedded and client driver behave differently for isAutoIncrement().===================================================================================Ouput from sysinfo:------------------ Java Information ------------------Java Version: 1.5.0_06Java Vendor: Sun Microsystems Inc.Java home: C:/Program Files/Java/jre1.5.0_06Java classpath: .;C:/PROGRA~1/JMF21~1.1E/lib/sound.jar;C:/PROGRA~1/JMF21~1.1E/lib/jmf.jar;C:/PROGRA~1/JMF21~1.1E/lib;C:/WINDOWS/java/classes;C:/WorkSpace/PB 3.0/bin;C:/WorkSpace/Filipe/bin;C:/Documents and Settings/Piet/My Documents/Resources/Jars/ImgrRdr130.jar;C:/Documents and Settings/Piet/My Documents/Resources/Jars/lucene-1.4.1.jar;C:/Documents and Settings/Piet/My Documents/Resources/Jars/Multivalent20040415.jar;C:/Workspace/Stick/bin;OS name: Windows XPOS architecture: x86OS version: 5.1Java user name: PietJava user home: C:/Documents and Settings/PietJava user dir: C:/StickFolderjava.specification.name: Java Platform API Specificationjava.specification.version: 1.5--------- Derby Information --------JRE - JDBC: J2SE 5.0 - JDBC 3.0&#91;/org/apache/derby/info/DBMS.properties&#93; 10.1.2.1 - (330608)&#91;/org/apache/derby/info/tools.properties&#93; 10.1.2.1 - (330608)&#91;/org/apache/derby/info/net.properties&#93; 10.1.2.1 - (330608)&#91;/org/apache/derby/info/dnc.properties&#93; 10.1.2.1 - (330608)----------------------------------------------------------------------- Locale Information -----------------Current Locale : [Nederlands/Nederland &#91;nl_NL&#93;]Found support for locale: &#91;de_DE&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;es&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;fr&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;it&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;ja_JP&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;ko_KR&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;pt_BR&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;zh_CN&#93; version: 10.1.2.1 - (330608)Found support for locale: &#91;zh_TW&#93; version: 10.1.2.1 - (330608)------------------------------------------------------   ,0
1362,Class-Path manifest entry for derby.jar is missing from the 10.2.0.2 snapshot    The class path manifest entry should include all the supported locales. It is missing from the snapshot.I see this entry when I build the jar files myself.Class-Path: derbyLocale_de_DE.jar derbyLocale_es.jar derbyLocale_fr.ja r derbyLocale_it.jar derbyLocale_ja_JP.jar derbyLocale_ko_KR.jar derb yLocale_pt_BR.jar derbyLocale_zh_CN.jar derbyLocale_zh_TW.jar   ,0
1367,add  lang/grantrevoke.java to derbynetclientmats    I noticed running lang./grantrevoke.java with client fails with :&gt; Unexpected exception&gt; 08004: Connection authentication failure occurred. Reason: userid or password invalid.&gt; java.sql.SQLException: Connection authentication failure occurred. Reason: userid or password invalid.&gt; Caused by: org.apache.derby.client.am.SqlException: Connection authentication failure occurred. Reason: userid or password invalid.&gt; ... 8 more&gt; FAILED. 1 errorTest Failed.     End: grantRevoke jdk1.4.2_07 DerbyNetClient 2006-06-01 12:17:25 ***    Perhaps just a test configuration problem of some sort  but It would be good to have client testing for grant revoke.   ,0
1376,File java/engine/org/apache/derby/loc/messages_en.properties - Message XSLAT.D    The message XSLAT.D (String LOG_SEGMENT_EXIST = 'XSLAT.D' states:XSLAT.D=Log directory {0} exists. Please make sure specified logDevice location is correct.But it seems by the source code that the problem is not that this directory exists  but the fact that it is not empty (// make sure log directory is empty  in LogToFile.java). So it seems to me that the following message would be better:XSLAT.D=Log directory {0} is not empty. Please make sure specified logDevice location is correct.   ,0
1380,Interface changes introduced in Mustang build 86    Build 86 of Mustang introduced changes to the Connection interface that were not compatible with the existing Derby implementions. createArray() was renamed createArrayOf() and setClientInfoProperties() now throws SQLClientInfoException (rather than ClientInfoException). The result of this is that it is not possible to build Derby with build 86.   ,0
1386,Wrong results with query using LIKE and ESCAPE clause that includes '%'  '/'  and '_'    After the fix for DERBY-1262 was checked in  I'm noticing that the following query now returns different results. Prior to the fix for DERBY-1262 the query returned 2 rows; now it doesn't return any rows.create table escTable (c1 char(10));insert into escTable values ('%_/a');insert into escTable values ('%_b');insert into escTable values ('%c');insert into escTable values ('d');insert into escTable values ('%_/e');select c1 from escTable where c1 like '&#37;&#95;%' ESCAPE '/';Before DERBY-1262  the SELECT returned:C1----------%_/a%_/e2 rows selectedNow it returns:C1----------0 rows selectedBrief inspection of the query and data suggest to me that these new results (i.e. no rows) are wrong  and that Derby should in fact return 2 rows/.Based on comments in DERBY-1262  I'm creating a new Jira issue for the regression since it has been checked into the 10.1 maintenance branch. I've set the priority to 'Critical' since this could potentially delay a 10.1.3 release--I.e. I don't think we'd want to release 10.1.3 knowing that we have a wrong results regression. But if anyone thinks that's not the correct priority  feel free to speak up.Other option  of course  is to back out the change for DERBY-1262 in 10.1 and then lower the priority accordingly. Input/feedback/comments would be appreciated.   ,0
1416,Message id J029 (CONN_RESTORE_FROM) does not have a matching message text    This is used by engine.org.apache.derby.jdbc.Driver20. Uncovered by the test i18n/MessageBundleTest.jav   ,0
1431,Typo in link to Simple Example from frameworks/readme.html    There is a small typo in frameworks/readme.html.The link 'see the simple example' links to  ../demo/programs/simple/example.htmlbut it should link to  ../demo/simple/example.htmlbecause there is no 'programs' folder in the 'demo' subtree.I'm attaching a patch for review.   ,0
1436,setEmbeddedCP.ksh and setNetworkCleitn.ksh does not work or gives wrong error message    setEmbeddedCP.ksh (and setNetworkClient.ksh) gives the following message if neither DERBY_HOME nor DERBY_INSTALL is set: echo '/$DERBY_HOME or /$DERBY_INSTALL not set. Please set one of these variables' echo 'to the location of your Derby installation.'but the scripts do not work if only DERBY_HOME is set   ,0
1444,Using -Djvmflags option causes NoClassDefFoundError    When starting tests with the -Djvmflags option  the harness (RunList class) places '' around the argument to -Djvmflags when executing the java launcher to start a new jvm. This is (at least by suns java launcher) interpreted as a Class and not as a command line option  because of the ''. Because of this I get a NoClassDefFoundError.I believe this is a problem that happens only when using Suns java launcher.   ,0
1458,Add MessageBundleTest to build script to verify that there are no orphaned message ids    MessageBundleTest can't be run with the regular tests because it relies on SQLState.java and MessageId.java  which are not in the jar files. But it actually makes more sense to run it as part of the build  as we are verifying the consistency of code references.   ,0
1466,Network Server should flush the PrintWriter after console output    If Network Server is started with a PrintWriter specified for console output it will not automatically flush output such as starting the server. This can be confusing as the console output shows no activity.Users currently need to specify the PrintWriter to autoflush e.g. starterWriter = new PrintWriter(new FileOutputStream(new File(SERVER_START_LOG)) true); derbyServer = new NetworkServerControl(); derbyServer.start(starterWriter); For repro see:http://www.nabble.com/Questions-about-Network-Server-API-Behavior-p5055814.htmlAnd change the following line in the program to not autoflush as follows:starterWriter = new PrintWriter(new FileOutputStream(new File(SERVER_START_LOG)) false);   ,0
1470,Correct instructions in demo html file demo/simple/example.html    In file demo/simple/example.html  under section 'Next run the SimpleApp demo in Derby client mode:'  step 5'java org.apache.derby.tools.sysinfo -cp client SimpleApp.class' gives the following error:Exception in thread 'main' java.lang.NoClassDefFoundError: org/apache/derby/tools/sysinfoThe above error is given because step 4 instructs to set path as following:export CLASSPATH=.:${DERBY_INSTALL}/lib/derbyclient.jarNow as neither derby.jar or derbytool.jar is been added to the above classpath  sysinfo file not found.Step 4 should instruct to set up path as following:export CLASSPATH=.:${DERBY_INSTALL}/lib/derbyclient.jar:${DERBY_INSTALL}/lib/derby.jar   ,0
1489,Provide ALTER TABLE DROP COLUMN functionality    Provide a way to drop a column from an existing table. Possible syntax would be: ALTER TABLE tablename DROP COLUMN columnname CASCADE / RESTRICT;Feature should properly handle columns which are used in constraints  views  triggers  indexes  etc.   ,0
1493,EmbeddedDriver does not implement PreparedStatement.setNull(int  int  String)    The embedded driver throws Util.notImplemented() when PreparedStatement.setNull(int  int  String) is called. The javadoc says that '&#91;if&#93; the parameter does not have a user-defined or REF type  the given typeName is ignored.' The client driver correctly ignores typeName and forwards the call to setNull(int  int). Embedded should be changed to match the client.   ,0
1496,testSecMec needs many masters - should convert to junit    derbynet/testSecMec.java fails with jcc2.8 with 131 vms. I have checked the diff and it is a master update with difference in the exception  message string.diff snippet:8 del&lt; T5: jdbc:derby:net://xxxFILTERED_HOSTNAMExxx:xxxFILTEREDPORTxxx/wombat:user=neelima;password=lee;securityMechanism=9; - EXCEPTION java.security.InvalidAlgorithmParameterException is caught when initializing EncryptionManager 'Prime size must be multiple of 64  and can only range from 512 to 1024 (inclusive)'8a8&gt; T5: jdbc:derby:net://xxxFILTERED_HOSTNAMExxx:xxxFILTEREDPORTxxx/wombat:user=neelima;password=lee;securityMechanism=9; - EXCEPTION java.security.NoSuchAlgorithmException is caught when initializing EncryptionManager 'DH KeyPairGenerator not available'14 del----------------There is difference in the exception message and will require lot of jvm specific master files which can become difficult to maintain. Myrna suggested that this might be a good test to convert to junit.   ,1
1499,test run exits for _foundation run because unloadEmbeddedDriver uses driverManager  which isn't available.    The wctme5.7_foundation runs have been exiting out for a while. We only run this environment weekly and were under the impression there was a time out. But I ran the suite  capturing the output in a file  and the last part of the run shows the problem is with unloadEmbeddedDriver:Now do RunListException in thread 'main' java.lang.NoClassDefFoundError: java.sql.DriverManager at org.apache.derbyTesting.functionTests.harness.RunList.unloadEmbeddedDriver(RunList.java:1636) at org.apache.derbyTesting.functionTests.harness.RunList.runSuites(RunList.java:276) at org.apache.derbyTesting.functionTests.harness.RunList.&lt;init&gt;(RunList.java:167) at org.apache.derbyTesting.functionTests.harness.RunSuite.getSuitesList(RunSuite.java:208) at org.apache.derbyTesting.functionTests.harness.RunSuite.main(RunSuite.java:147)UnloadEmbeddedDriver was put in to allow running with useprocess=false and autoload of the driver  so it's needed. But maybe we can add an appropriate if condition so it doesn't try to do this with foundation.   ,0
1510,'SQLBinary.readFromStream' can enter endless loop    Under certain circumstances  the method 'SQLBinary.readFromStream' can enter an endless loop while reading the stream. The following must be true for the bug to occur:  There must be more data in the stream than what can fit into the initial buffer (32 K). The method 'available' of the stream returns 0.Since the default return value for 'InputStream.available' is 0  and the method reading the stream can be used for data types CHAR FOR BIT DATA  VARCHAR FOR BIT DATA and LONG VARCHAR FOR BIT DATA  the bug should be fixed. The maximum length is 32700 bytes.The method will also be used by SQLBlob  but it may be better to introduce a new streaming method for it  since the current implementation has memory-problems for large data (materializes the whole stream). A separate issue should/will be created for this.The symptom for this bug is a hang when calling one of the execute methods of Prepared- or CallableStatement and maybe also certain set methods in ResultSet.The visibility of this bug is very low  but the impact is severe/critical. When the JDBC 4 length less streaming overloads are added (DERBY-1417)  visibility might increase.   ,0
1521,Upgrade test needs to be enhanced to test grant revoke    Grant Revoke is one of the features targeted for 10.2 Release. The upgrade test should be modified to test this feature with various upgrade scenarios to make sure everything works fine.   ,1
1527,Factor out type checks in EmbedResultSet and EmbedPreparedStatement    EmbedPreparedStatement and EmbedResultSet have many occurrences of switch (...) { case Types.CHAR: case Types.VARCHAR: case Types.LONGVARCHAR: case Types.CLOB: break; default: throw dataTypeConversion(...); }and switch (...) { case Types.BINARY: case Types.VARBINARY: case Types.LONGVARBINARY: case Types.BLOB: break; default: throw dataTypeConversion(...); }Instead of having many copies of this code  it would be good to factorit out into methods that can be shared. For instance  one could addthese methods to DataTypeDescriptor: public static boolean isAsciiStreamCompatible(int jdbcType) public static boolean isBinaryStreamCompatible(int jdbcType) public static boolean isCharacterStreamCompatible(int jdbcType)   ,0
1529,The Eclipse plug-in distributions (UI and Core zip files) do not contain the Apache license  copyright or notice files    The Apache Derby Core and Apache Derby UI plug-ins do not contain the appropriate Apache Software Foundation license files in their zip distributions  derby_core_plugin_10.1.3.zip  derby_ui_plugin_1.1.0.zip.I'm not sure exactly which files are required  LICENSE  COPYRIGHT and NOTICE  but the zip filesshould contain some or all of these files.   ,0
1538,Unexpected behavior on self privilege revocation    When revoking the owner's own privilege against the table he have created  Derby executes the revocation successfullybut the owner is able to select from the table later as if though the REVOKE statement has no effect. More importantly  I was expecting a SQLException with the appropriate SQLSTATE to be thrown when the owner attempts to revoke privilege from himself. i.e.:ij&gt; connect 'jdbc:derby:authtest' user 'yip' as conn1;ij&gt; create table t1 (c1 int);0 rows inserted/updated/deletedij&gt; insert into t1 values 1 2 3;3 rows inserted/updated/deletedij&gt; revoke select on t1 from yip;0 rows inserted/updated/deletedij&gt; select * from t1;C1-----------1233 rows selectedHere is the sysinfo:------------------ Java Information ------------------Java Version: 1.4.2_12Java Vendor: Sun Microsystems Inc.Java home: C:/jdk142/jreJava classpath: derby.jar;derbytools.jar;.OS name: Windows XPOS architecture: x86OS version: 5.1Java user name: yipJava user home: C:/Documents and Settings/AdministratorJava user dir: C:/derby/trunk/jars/sanejava.specification.name: Java Platform API Specificationjava.specification.version: 1.4--------- Derby Information --------JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&#91;C:/derby/trunk/jars/sane/derby.jar&#93; 10.2.0.4 alpha - (423353)&#91;C:/derby/trunk/jars/sane/derbytools.jar&#93; 10.2.0.4 alpha - (423353)----------------------------------------------------------------------- Locale Information -----------------Current Locale : [English/United States &#91;en_US&#93;]Found support for locale: &#91;de_DE&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;es&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;fr&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;it&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;ja_JP&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;ko_KR&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;pt_BR&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;zh_CN&#93; version: 10.2.0.4 alpha - (423353)Found support for locale: &#91;zh_TW&#93; version: 10.2.0.4 alpha - (423353)------------------------------------------------------   ,1
1539,A  trigger should be dropped when a privilege required by the trigger is revoked.    A trigger tracks its privileges requirements using Derby's Dependency Manager. If any one of those required privileges are revoked  the trigger should be dropped automatically. I am just creating a new jira entry here so it is easier to track sub items of DERBY-1330. Will link this Jira entry to DERBY-1330.See the functional spec attached to DERBY-1330   ,1
1541,Make test jdbc4/TestPreparedStatement run under the security manager    See trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestPreparedStatement_app.properties which says: test fails trying to read blob content filesOther tests succesfully read files so it must be possible to enable this test under the security manager.Maybe the files need to be marked as support files and copied into the extin/extout/extinout foldersto use the existing permissions in the test policy files.   ,1
1545,derbynet/testProtocol.java fails with security manager enabled    The tinderbox test started failing after revision 423676 which enabled security manager for derbynet/testProtocol.java. See http://www.multinet.no/~solberg/public/Apache/TinderBox_Derby/testlog/SunOS-5.10_i86pc-i386/423706-derbyall_diff.txtException in thread 'main' java.security.AccessControlException: access denied (java.net.SocketPermission 127.0.0.1:1527 connect resolve) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:264) at java.security.AccessController.checkPermission(AccessController.java:427) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkConnect(SecurityManager.java:1034) at java.net.Socket.connect(Socket.java:501) at java.net.Socket.connect(Socket.java:457) at java.net.Socket.&lt;init&gt;(Socket.java:365) at java.net.Socket.&lt;init&gt;(Socket.java:178) at org.apache.derby.impl.drda.TestProto.getConnection(Unknown Source) at org.apache.derby.impl.drda.TestProto.&lt;init&gt;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.derbynet.testProtocol.executeFile(Unknown Source) at org.apache.derbyTesting.functionTests.tests.derbynet.testProtocol.main(Unknown Source)   ,1
1546,Derby JDBC 4.0 driver returns 3 for JDBC driver major version    For 10.2 the DatabaseMetaData.getJDBCMajorVersion() is returning '3' for the Derby JDBC 4.0 driver. It should return 4. This is easily reproduced by running a simple test to obtain a connection and output the value Database product: Apache DerbyDatabase version: 10.2.0.4 alphaDriver name: Apache Derby Embedded JDBC DriverDriver version: 10.2.0.4 alphaJDBC driver major version: 3JDBC driver minor version: 0Test code:org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40 ds = new org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40();ds.setDatabaseName('C://drivers//derby//databasesJDBC40DB'); ds.setUser('dbuser1'); ds.setPassword('dbpwd1'); PooledConnection pooledConn = ds.getPooledConnection(); Connection conn = pooledConn.getConnection(); System.out.println('Database product: ' + conn.getMetaData().getDatabaseProductName()); System.out.println('Database version: ' + conn.getMetaData().getDatabaseProductVersion()); System.out.println('Driver name: ' + conn.getMetaData().getDriverName()); System.out.println('Driver version: ' + conn.getMetaData().getDriverVersion()); System.out.println('JDBC driver major version: ' + conn.getMetaData().getJDBCMajorVersion()); System.out.println('JDBC driver minor version: ' + conn.getMetaData().getJDBCMinorVersion());Relevant Derby Embedded code in EmbedDatabaseMetaData is: JDBC 3.0 * Retrieves the major JDBC version number for this driver. * @return JDBC version major number */ public int getJDBCMajorVersion() { return 3; }and client code in org.apache.derby.client.am.DatabaseMetaData:public int getJDBCMajorVersion() throws SQLException { checkForClosedConnection(); return 3; }I am not sure if this should be JVM dependent or if it should always return 4 regardless of the JVM version.   ,0
1558,enable more testcases in ConcurrencyTest    A number of testcases  which depend on SUR  are not enabled in the ConcurrencyTest.These testcases can be enabled. The test should also set some properties to reduce lock timeout  so that it runs faster.   ,0
1574,NullPointerException in UPDATE with COALESCE and subquery    The following statements generate a NullPointerException:CREATE TABLE t1 (i INTEGER);CREATE TABLE t2 (i INTEGER);UPDATE t1 SET i = COALESCE( (SELECT i FROM t2 WHERE t2.i=t1.i)  0);Any further SQL statements generate an internal error in RawStore  e.g.:SELECT * FROM t1;   ,0
1588,Link 'Getting Started....' and 'Apache Derby Server ....' in demo.html needs to be linked to actual documents instead of manuals page    The links 'Getting Started with Apache Derby' and 'Apache Derby Server and Administration Guide' in file https://svn.apache.org/repos/asf/db/derby/code/trunk/java/demo/demo.html needs to be linked to actual documents as following:Getting Started with Apache Derby to 'http://db.apache.org/derby/docs/dev/getstart/getstartderby.pdf'Apache Derby Server and Administration Guide to 'http://db.apache.org/derby/docs/dev/adminguide/derbyadmin.pdf' Right now the links are linked to 'http://db.apache.org/derby/manuals/index.html'Also  once the dev release is committed (for example committed to 10.2)  the links needs to be changed so that 'dev' is replaced with actual release number.   ,0
1595,Network server fails with DRDAProtocolException if a BLOB with size 2147483647 is streamed from client    When executing a program which inserts a BLOB of size 2GB-1  the Network server fails with DRDAProtocolException. This happens before it starts handling the actual LOB data:java org.apache.derby.drda.NetworkServerControl startApache Derby Network Server - 10.2.0.4 alpha started and ready to accept connections on port 1527 at 2006-07-26 14:15:21.284 GMTExecution failed because of a Distributed Protocol Error: DRDA_Proto_SYNTAXRM; CODPNT arg = 0; Error Code Value = corg.apache.derby.impl.drda.DRDAProtocolException at org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(DRDAConnThread.java:441) at org.apache.derby.impl.drda.DDMReader.readLengthAndCodePoint(DDMReader.java:554) at org.apache.derby.impl.drda.DDMReader.getCodePoint(DDMReader.java:617) at org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA_work(DRDAConnThread.java:4072) at org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA(DRDAConnThread.java:3928) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:3806) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:3640) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:928) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:254)nullorg.apache.derby.impl.drda.DRDAProtocolException at org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(DRDAConnThread.java:441) at org.apache.derby.impl.drda.DDMReader.readLengthAndCodePoint(DDMReader.java:554) at org.apache.derby.impl.drda.DDMReader.getCodePoint(DDMReader.java:617) at org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA_work(DRDAConnThread.java:4072) at org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA(DRDAConnThread.java:3928) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:3806) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:3640) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:928) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:254)   ,0
1597,Scripts in frameworks direcotry needs to be revisted to set up CLASSPATH properly    Need to revisit scripts in directory frameworks/embedded/bin and frameworks/NetworkServer/bin for setting up CLASSPATH properly. The current problem is as following:If user already has a CLASSPATH set on their system  the CLASSPATH is not set again within the script. Therefore  there are no derby classes in the CLASSPATH which results in java command failing as it can not find the derby class it is calling. Basically  to make the scripts work  user has to either issue command 'set CLASSPATH=' or have derby jar files be appended to their system CLASSPATH before running any frameworks batch script.In ksh scripts  there is same problem except that the user has to issue command 'export CLASSPATH=' or have derby jar files be appended to their system CLASSPATH only once as whatever CLASSPATH is set up by scripts is not visible once the script is done.So I am proposing the following solution so that frameworks scripts work properly without interfering with system classpath or without any setup from user.In batch scripts:-----------------------1. Before line 'call '%DERBY_INSTALL%'/frameworks/embedded/bin/setEmbeddedCP.bat'  save the current classpath as follows:set SAVED_CLASSPATH=%CLASSPATH%2. Replace the following lines:@if Unable to render embedded object: File (&quot;%CLASSPATH%&quot;==) not found. call '%DERBY_INSTALL%'/frameworks/embedded/bin/setEmbeddedCP.bat@if '%CLASSPATH%' == '' call '%DERBY_INSTALL%'/frameworks/embedded/bin/setEmbeddedCP.batwithcall '%DERBY_INSTALL%'/frameworks/embedded/bin/setEmbeddedCP.batNote: I have given the above as example only. The name of script that is getting called may be different.3. At the end of script  reset the CLASSPATH to system CLASSPATH as follows:set CLASSPATH=%SAVED_CLASSPATH%In korn scripts:-----------------------In ksh script  even though system classpath is only modified within the script and is not effective once script exits  to be consistent with batch scripts  do the following:1. Before line '. '$DERBY_HOME'/frameworks/embedded/bin/setEmbeddedCP.ksh' save the current classpath as follows:export SAVED_CLASSPATH=$CLASSPATH2. Replace the following lines:[ -z '$CLASSPATH' ] &amp;&amp; { . '$DERBY_HOME'/frameworks/embedded/bin/setEmbeddedCP.ksh}with. '$DERBY_HOME'/frameworks/embedded/bin/setEmbeddedCP.kshNote: I have given the above as example only. The name of script that is getting called may be different.3. At the end of script  reset the CLASSPATH to system CLASSPATH as follows:export CLASSPATH=$SAVED_CLASSPATH   ,0
1605,test harness evaluates j9 2.2 jvm (a.k.a wctme5.7) as isJDBC4; does enthousiastic sed-ing    The wctme5.7 run shows failures like so:     Start: iepnegativetests jdk1.3.1 subset - 2.2 derbyall:derbytools 2006-07-24 11:41:43 ***16 del&lt; ERROR 38000: The exception 'java.sql.SQLException: Table/View 'IEP.NOTABLE' does not exist.' was thrown while evaluating an expression.16a16&gt; ERROR 38000: The exception 'SQL Exception: Table/View 'IEP.NOTABLE' does not exist.' was thrown while evaluating an expression....    It seems to me this is because it evaluates the major/minor version (2.2) as isJDBC4 in functionTests/harness/RunTest.java : JavaVersionHolder jvh = getProperties(sp); boolean isJDBC4 = jvh.atLeast( 1  6 );and is gets passed on to Sed.java.The following tests fail with this jvm because of this:lang/compressTable.sqllang/nestedCommit.sqllang/releaseCompileLocks.sqltools/iepnegativetests.sqltools/importExportThruIJ.sqltools/ieptests.sqljdbcapi/statementJdbc20.javai18n/iepnegativetests_ES.sqlstore/streamingColumn.javastore/TransactionTable.sqllang/procedureInTrigger.sqlIt seems to me we need an if (!jvmName.startsWith('j9')) or some such around the isJDBC4 assignment.   ,0
1606,derbyrunjartest hangs with wctme5.7 & always uses j9_13; hangs with _foundation    derbyrunjartest hangs with wctme5.7.I am not sure what the hook up is but if I do this:j9 -jcl:max -Xbootclasspath/p:c:/wctme5.7/ive/lib/jclMax/classes.zip;c:/wctme5.7/ive/lib/charconv.zip;c:/wctme5.7/ive/lib/database_enabler.jar -jar c:/derbyt/svn2/trunk/jars/sane/derbyrun.jar ij --helpI get successfully:Usage: java org.apache.derby.tools.ij &#91;-p propertyfile&#93; [-ca connectionAttributePropertyFile] &#91;inputfile&#93;Also  when looking at the code of this test  it forces the jvm class to be used to be j9_13 whenever the jvm as set in RunTest starts with J9. However  wctme5.7 is j9_22 and this also prevents running with foundation (assuming that's supported).   ,0
1607,new j9 canons required/canons need to be removed to catch up to changes to 7/27/06.    There are some newer failures with wctme5.7 &amp; wsdd5.6 that are just due to canon maintenance. lang/aggregate.sql - needs a new j9_13 and j9_22 canon lang/ejbql.sql - j9_13 canon can be removed (there is no j9_22 canon) lang/distinct.sql - needs new j9_22 canon nist/dml099.sql - j9_13 canon can be removed lang/procedureInTrigger.sql - needs a j9_22 canon note  this last test also suffers from DERBY-1605.   ,0
1614,Test harness overrides heap size settings when starting Network Server    Test specific heap size settings can be passed to the test harness using the jvmflags system property  for example in a &lt;testname&gt;_app.properties file or at the command line when starting a test  e.g '-Djvmflags=-Xms32m^-Xmx32m'.The test harness almost always overrides such settings when starting a new Network Server using the org.apache.derbyTesting.functionTests.harness.NetServer class of the test harness. Currently  if either -ms or -Xms is missing from the jvmflags  NetServer.start() adds -ms16777216. Also  if either -mx or -Xmx is missing from the jvmflags  NetServer.start() adds -ms33554432. This has been the case since SVN revision 420048 (July 8  2006).Earlier revisions did not override the heap settings unless the newer -Xms or -Xmx flags were used instead of the -ms and -mx flags. A patch for DERBY-1091 attempted (among other things) to make the harness recognize the newer flags as well as the older flags  but the resulting behavior is (most likely) not as intended. If a test is run in either the DerbyNet framework or the DerbyNetClient framework  the test-specific JVM flags should (probably) be used for the Network Server JVM as well as the test JVM. Currently  even if non-default heap size flags are passed to the harness  the server JVM will ignore these settings since the harness adds -ms and/or -mx flags after all other heap flags. The exception is if both new and old versions of heap flags are passed to the harness  e.g:jvmflags=-ms32m^-Xms32m^-mx128m^-Xmx128mHere is the code causing this behaviour:if (setJvmFlags &amp;&amp; ((jvmflags.indexOf('-ms') == -1) || (jvmflags.indexOf('-Xms') == -1))) // only setMs if no starting memory was given jvm.setMs(16*1024*1024); // -ms16mif (setJvmFlags &amp;&amp; ((jvmflags.indexOf('-mx') == -1) || (jvmflags.indexOf('-Xmx') == -1))) // only setMx if no max memory was given jvm.setMx(32*1024*1024); // -mx32m   ,0
1616,Lots of jdk1.6 regression test failures with diffs because of  SQL Exception instead of java.sql.SQLException    jdk16 derbyall derbyall: 19 failures derbyall/derbyall.fail:lang/compressTable.sql derbyall/derbyall.fail:lang/nestedCommit.sql derbyall/derbyall.fail:lang/outparams.java derbyall/derbyall.fail:lang/procedure.java derbyall/derbyall.fail:lang/procedureInTrigger.sql derbyall/derbyall.fail:tools/importExportThruIJ.sql derbyall/derbyall.fail:tools/ieptests.sql derbyall/derbyall.fail:tools/iepnegativetests.sql derbyall/derbyall.fail:jdbcapi/statementJdbc20.java derbyall/derbyall.fail:jdbcapi/statementJdbc30.java derbyall/derbyall.fail:jdbcapi/parameterMapping.java derbyall/derbyall.fail:i18n/iepnegativetests_ES.sql derbyall/derbynetclientmats/derbynetclientmats.fail:jdbc4/ClosedObjectTest.junit derbyall/derbynetclientmats/derbynetclientmats.fail:jdbc4/UnsupportedVetter.junit derbyall/derbynetclientmats/derbynetclientmats.fail:jdbc4/VerifySignatures.junit derbyall/encryptionAll/encryption.fail:stress/stress.multi derbyall/encryptionAll/storemats.fail:store/streamingColumn.java derbyall/storeall/storeall.fail:store/TransactionTable.sql derbyall/storeall/storemats.fail:store/streamingColumn.java   ,0
1619,Sysinfo in 10.2  shows multiple entries if the derby jars reside in a directory with spaces in its name    For the Derby jars residing in C:/Documents and Settings/Administrator/TEMP DIR/lib  the sysinfo shows:--------- Derby Information --------JRE - JDBC: J2SE 5.0 - JDBC 3.0&#91;C:/Documents%20and%20Settings/Administrator/TEMP%20DIR/lib/derby.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents%20and%20Settings/Administrator/TEMP%20DIR/lib/derbytools.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents%20and%20Settings/Administrator/TEMP%20DIR/lib/derbynet.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents%20and%20Settings/Administrator/TEMP%20DIR/lib/derbyclient.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derby.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derbynet.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derbyclient.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derbytools.jar&#93; 10.2.0.5 alpha - (426734)&#91;C:/Documents%20and%20Settings/Administrator/TEMP%20DIR/lib/db2jcc.jar&#93; 2.6 - (90)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/db2jcc_license_c.jar&#93; 2.6 - (90)------------------------------------------------------This is a regression from 10.1 where the same sysinfo shows:--------- Derby Information --------JRE - JDBC: J2SE 5.0 - JDBC 3.0&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derby.jar&#93; 10.1.3.2 - (426741)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derbynet.jar&#93; 10.1.3.2 - (426741)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derbyclient.jar&#93; 10.1.3.2 - (426741)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/derbytools.jar&#93; 10.1.3.2 - (426741)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/db2jcc.jar&#93; 2.6 - (90)&#91;C:/Documents and Settings/Administrator/TEMP DIR/lib/db2jcc_license_c.jar&#93; 2.6 - (90)------------------------------------------------------   ,0
1621,Trigger action statement is not recompile when there is a change that would affect it.    A trigger action statement  such as an INSERT statement is not recompiled when there is some DDL change on the underlying table  such as a CREATE INDEX.In the example below a unique index is added to the table (t2) inserted into by the trigger's action statement. When the tirgger fires it does not raise any error (should raise a unique constraint violated error) and does not insert the value into the index. A select from t2 does not show the additional rows in t2 as it is performing an index scan  once the index is dropped the rows appear to the select.ij version 10.2ij&gt; connect 'jdbc:derby:cs;create=true';ij&gt; create table t (i int);0 rows inserted/updated/deletedij&gt; create table t2 (i int);0 rows inserted/updated/deletedij&gt; create trigger tt after insert on t for each statement mode db2sqlinsert into t2 values 1;0 rows inserted/updated/deletedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; select * from t2;I-----------11 row selectedij&gt; create unique index tu on t2;0 rows inserted/updated/deletedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; select * from t2;I-----------11 row selectedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; select * from t2;I-----------11 row selectedij&gt; drop index tu;0 rows inserted/updated/deletedij&gt; select * from t2;I-----------1113 rows selected   ,0
1630,NetConnection40 references an engine class  org.apache.derby.impl.jdbc.Util    NetConnection40.java contains this:...import org.apache.derby.impl.jdbc.Util;... public boolean isValid(int timeout) throws SQLException { // Validate that the timeout has a legal value if (timeout &lt; 0) { throw Util.generateCsSQLException(SQLState.INVALID_API_PARAMETER  new Integer(timeout)  'timeout'  'java.sql.Connection.isValid'); }...This was added as part of DERBY-1090. This should be changed to use the client's method of throwing exceptions.   ,0
1643,A  'revoke execute ... restrict' should fail if there are dependent objects on the execute privilege    As per the functional spec attached to DERBY-1330  a 'revoke execute ... restrict' should fail if there are dependent objects on the execute privilegeIn order to implement this  when revoke execute is executed  a special invalidation action should be sent and dependent objects will need to catch that invalidation and throw an exception. If there are no dependents  then no exception will be thrown and revoke execute will succeed.I am just creating a new jira entry here so it is easier to track sub items of DERBY-1330. Will link this Jira entry to DERBY-1330. See the functional spec attached to DERBY-1330   ,1
1644,NPE when inserting values to a table that has a column declared as generated by default as identity    The following scenario triggers a NullPointerException in statement compilation:ij&gt; create table t1 (c1 int  c2 int generated by default as identity);0 rows inserted/updated/deletedij&gt; insert into t1 (c2) values default  10;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.Stacktrace from derby.log:Database Class Loader started - derby.database.classpath=''2006-08-04 06:31:17.235 GMT Thread&#91;main 5 main&#93; (XID = 235)  (SESSIONID = 0)  (DATABASE = wombat)  (DRDAID = null)  Cleanup action starting2006-08-04 06:31:17.235 GMT Thread&#91;main 5 main&#93; (XID = 235)  (SESSIONID = 0)  (DATABASE = wombat)  (DRDAID = null)  Failed Statement is: insert into t1 (c2) values default  10java.lang.NullPointerException at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1033) at org.apache.derby.impl.sql.compile.ResultColumnList.generate(ResultColumnList.java:893) at org.apache.derby.impl.sql.compile.RowResultSetNode.generate(RowResultSetNode.java:690) at org.apache.derby.impl.sql.compile.UnionNode.generate(UnionNode.java:589) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1424) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1286) at org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(NormalizeResultSetNode.java:122) at org.apache.derby.impl.sql.compile.InsertNode.generate(InsertNode.java:764) at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:232) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:477) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:118) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:713) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:567) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:516) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:313) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:478) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248) at org.apache.derby.impl.tools.ij.Main.go(Main.java:203) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55) at org.apache.derby.tools.ij.main(ij.java:69)sysinfo:------------------ Java Information ------------------Java Version: 1.4.2_12Java Vendor: Sun Microsystems Inc.Java home: C:/jdk142/jreJava classpath: classes;.OS name: Windows XPOS architecture: x86OS version: 5.1Java user name: yipJava user home: C:/Documents and Settings/AdministratorJava user dir: C:/derby/trunkjava.specification.name: Java Platform API Specificationjava.specification.version: 1.4--------- Derby Information --------JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&#91;C:/derby/trunk/classes&#93; 10.2.0.5 alpha - (1)----------------------------------------------------------------------- Locale Information -----------------Current Locale : [English/United States &#91;en_US&#93;]Found support for locale: &#91;de_DE&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;es&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;fr&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;it&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;ja_JP&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;ko_KR&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;pt_BR&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;zh_CN&#93; version: 10.2.0.5 alpha - (1)Found support for locale: &#91;zh_TW&#93; version: 10.2.0.5 alpha - (1)------------------------------------------------------   ,0
1661,Create index on large tables fails with too many open files   FileNotFoundException.    Create index fails on a table with 18million rows during sort with too many open files errorThis error was first seen when running against a tpcc-like test. The test creates the tables  inserts data and then creates the indexes &amp; adds constraints.Customer table has 18 million rows in this case. The below error is thrown on create index. ij&gt; create index customer_last on customer(c_w_id  c_d_id  c_last);ERROR XSDF1: Exception during creation of file /home/cloudtst/SinglePerf/testruns/scripts/dbtpcc/tmp/T1128794811044.tmp for containerERROR XJ001: Java exception: '/home/cloudtst/SinglePerf/testruns/scripts/dbtpcc/tmp/T1128794811044.tmp (Too many open files): java.io.FileNotFoundException'.ij   ,0
1675,Network Server should not send to client that it supports EUSRIDPWD when running against Sun JVM    As part of ACCSECRD  if the server does not accept the security mechanism sent by the client  the server will send a list of security mechanism that it supports. Currently even when the server is running with sun jvm  it will still send EUSRIDPWD as a sec mec that it supports  which is incorrect. The server should test if it can support EUSRIDPWD dynamically and if it does  only then send EURRIDPWD as an option that it supports.see DRDAConnThread.writeACCSECRD(int)   ,0
1681,Regression (wrong results): Join predicate can be ignored for left-most child in a chain of nested unions.    If Derby chooses to do a join between two FromTables and the right table is a chain of UNIONs  then the optimizer may choose to push the join predicate (if provided) down into the UNION and to both children of every UNION in the chain. But if the predicate cannot be pushed to the children of any of the UNIONs (except the top-level one) the predicate can end up being ignored altogether with respect to that UNION's children. The result is that query execution can return rows that do not satisfy the predicate.This is a regression introduced in 10.1.2.4 and thus it affects 10.1.3 and 10.2. I came across this while tracing through code for DERBY-1633.   ,0
1688,ConsistencyToken.hashCode() is not thread safe    If ConsistencyToken.hashCode() is run concurrently by different threads  some of the threads may see a partial result instead of the correct hash code. This is not a problem in the current code since all calls to that method are synchronized on a higher level  but it would be good to fix in case the method will be used differently in the future.   ,0
1691,jdbcapi/blobclob4BLOB.java fails under DerbyNet framework with JCC 2.6    With JCC 2.6  the jdbcapi/blobclob4BLOB.java fails. The diff did not show anything alarming  so I am guessing itmay be a master update. The test passed fine with DerbyClient     Start: blobclob4BLOB jdk1.5.0_06 DerbyNet derbynetmats:jdbcapi 2006-08-11 23:29:48 ***466a467 474&gt; EXPECTED SQLSTATE(22018): Invalid character string format for type INTEGER.&gt; end clobTest54&gt; START: clobTest6&gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 5&gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -76&gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -1&gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 0&gt; FAIL &#8211; unexpected exception:java.lang.StringIndexOutOfBoundsException: String index out of range: -1468 475d475&lt; EXPECTED SQLSTATE(22018): Invalid character string format for type INTEGER.&lt; end clobTest54&lt; START: clobTest6&lt; EXPECTED SQLSTATE(null): Invalid position 0 or length 5&lt; EXPECTED SQLSTATE(null): Invalid position 1 or length -76&lt; EXPECTED SQLSTATE(null): Invalid position 1 or length -1&lt; EXPECTED SQLSTATE(null): Invalid position 0 or length 0&lt; FAIL &#8211; unexpected exception:java.lang.StringIndexOutOfBoundsException: String index out of range: -1775a776 782&gt; blobTest54 finished&gt; START: blobTest6&gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 5&gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -76&gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -1&gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 0&gt; FAIL &#8211; unexpected exception:java.lang.NegativeArraySizeException777 783d783&lt; blobTest54 finished&lt; START: blobTest6&lt; EXPECTED SQLSTATE(null): Invalid position 0 or length 5&lt; EXPECTED SQLSTATE(null): Invalid position 1 or length -76&lt; EXPECTED SQLSTATE(null): Invalid position 1 or length -1&lt; EXPECTED SQLSTATE(null): Invalid position 0 or length 0&lt; FAIL &#8211; unexpected exception:java.lang.NegativeArraySizeException789 del&lt; com.ibm.db2.jcc.c.SqlException: Operation 'CREATE TRIGGER' cannot be performed on object 'TESTBLOB' because there is an open ResultSet dependent on that object.789a789&gt; com.ibm.db2.jcc.a.SqlException: Operation 'CREATE TRIGGER' cannot be performed on object 'TESTBLOB' because there is an open ResultSet dependent on that object.Test Failed. End: blobclob4BLOB jdk1.5.0_06 DerbyNet derbynetmats:jdbcapi 2006-08-11 23:30:46 ***   ,0
1692,Client driver does not use the query timeout value set using Statement.setQueryTimeout() for subsequent executions using the same statement object    I will attach a repro with more details.   ,0
1694,derbynet/testProperties.java hangs    The testProperties.execCmd() is used to fork a JVM and not handle itsstreams. This will cause problems  as indicated by the javadoc for Process.'The parent process uses these streams to feed input to and get outputfrom the subprocess. Because some native platforms only provide limitedbuffer size for standard input and output streams  failure to promptlywrite the input stream or read the output stream of the subprocess maycause the subprocess to block  and even deadlock'   ,0
1695,testSecMec.java fails with JCC 2.6 and JCC 2.8    After the checkin for DERBY-528 testSecMec fails with JCC 2.6 and 2.8. My hope was to just wait until the masters were normalized with the conversion of this test to Junit  but I think that work has been deferred for a bit so I will look at the current test.I have had a problem with this test on my machine for sometime with DERBY-1114 like symptoms with all jvms and even with derbyclient. I need to investigate that or run on another machine to resolve this issue.   ,0
1698,Add more tests for Statement.setQueryTimeout method    Currently  the following checks work as expected but it would be good to add them to regression tests: Add tests to check query timeout value is used by executeUpdate method. Existing test tests calls to execute and executeQuery. The following mail mentions query timeout limit should be applied for all executeXXX methods. http://www.nabble.com/Statement.setQueryTimeout-tf94429.html#a258410 Add tests for Statement and CallableStatement class. Existing test tests this method with PreparedStatement only. I found a difference in behaviour with client driver when using Statement class (DERBY-1692). So it may be good to add some tests for each statement class.   ,0
1709,Deprecate scripts in frameworks directory    With revision 432159  new scripts to be added to the -bin distribution as a part of DERBY-1032 were added to the distributions and snapshots. The old frameworks scripts should be marked as deprecated where appropriate in the documentation  readme files  and release pages.   ,0
1714,huge single insert statements fail with JVM error due to size of generated method    ERROR XBCM1: Java linkage error thrown during load of generated class org.apache.derby.exe.ace5214067x010dx1c21xe385x00000011be005.ERROR XJ001: Java exception: 'Invalid method Code length 68686 in class file org/apache/derby/exe/ace5214067x010dx1c21xe385x00000011be005: java.lang.ClassFormatError'.The above occurred when doing an insert statement using the mutiple row syntax 'INSERT INTO foo (...) VALUES (...)  (...) ...' for huge amounts of input data. I was able to insert 500 rows at once  but it balked at 1000.Workaround: chunk one huge insert into several merely big inserts before sending them to Derby.   ,0
1729,Invoking Java stored procedure that contains GRANT or REVOKE statement with CONTAINS SQL should fail.    In Derby SQL authorization mode  invoking Java stored procedure that contains GRANT or REVOKE statement with CONTAINS SQL from a trigger should fail but in the following test  it successfully executed the trigger action. Attaching repro patch for trunk.i.e.:ij&gt; connect 'triggerProcSQLAuth;create=true' user 'APP' as app;WARNING 01J14: SQL authorization is being used without first enabling authentication.ij&gt; &#8212; setup the environment&#8212; table used in the procedurescreate table t1 (i int primary key  b char(15));0 rows inserted/updated/deletedij&gt; insert into t1 values (1  'XYZ');1 row inserted/updated/deletedij&gt; insert into t1 values (2  'XYZ');1 row inserted/updated/deletedij&gt; &#8212; table used in this testcreate table t2 (x integer  y integer);0 rows inserted/updated/deletedij&gt; create procedure grant_select_proc()  parameter style java dynamic result sets 0 language java  contains sql external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.grantSelect';0 rows inserted/updated/deletedij&gt; create procedure revoke_select_proc()  parameter style java dynamic result sets 0 language java  contains sql external name 'org.apache.derbyTesting.functionTests.util.ProcedureTest.revokeSelect';0 rows inserted/updated/deletedij&gt; &#8212; testscreate trigger grant_select_trig AFTER delete on t1  for each STATEMENT mode db2sql call grant_select_proc();0 rows inserted/updated/deletedij&gt; &#8212; should faildelete from t1 where i = 1;1 row inserted/updated/deletedij&gt; &#8212; check delete failedselect * from t1;I |B ---------------------------2 |XYZ 1 row selectedij&gt; &#8212; check if there are rows in sys.systableperms  should be 0select count from SYS.SYSTABLEPERMS;1 -----------1 1 row selectedij&gt; drop trigger grant_select_trig;0 rows inserted/updated/deletedij&gt; create trigger revoke_select_trig AFTER delete on t1  for each STATEMENT mode db2sql call revoke_select_proc();0 rows inserted/updated/deletedij&gt; &#8212; should faildelete from t1 where i = 2;1 row inserted/updated/deletedij&gt; &#8212; check delete failedselect * from t1;I |B ---------------------------0 rows selectedij&gt; &#8212; check if there are rows in sys.systableperms  should be 0select count from SYS.SYSTABLEPERMS;1 -----------0 1 row selectedij&gt; drop trigger revoke_select_trig;0 rows inserted/updated/deletedij&gt; ------------------ Java Information ------------------Java Version: 1.4.2_12Java Vendor: Sun Microsystems Inc.Java home: C:/Program Files/Java/j2re1.4.2_12Java classpath: derby.jar;derbytools.jarOS name: Windows XPOS architecture: x86OS version: 5.1Java user name: YipJava user home: C:/Documents and Settings/YipJava user dir: C:/work3/derby/trunk/jars/sanejava.specification.name: Java Platform API Specificationjava.specification.version: 1.4--------- Derby Information --------JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&#91;C:/work3/derby/trunk/jars/sane/derby.jar&#93; 10.3.0.0 alpha - (432670M)&#91;C:/work3/derby/trunk/jars/sane/derbytools.jar&#93; 10.3.0.0 alpha - (432670M)----------------------------------------------------------------------- Locale Information -----------------Current Locale : [English/United States &#91;en_US&#93;]Found support for locale: &#91;de_DE&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;es&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;fr&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;it&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;ja_JP&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;ko_KR&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;pt_BR&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;zh_CN&#93; version: 10.3.0.0 alpha - (432670M)Found support for locale: &#91;zh_TW&#93; version: 10.3.0.0 alpha - (432670M)------------------------------------------------------   ,1
1730,Manifest file doesn't contain OSGi attributes    With osgi.jar in tools/java  'ant buildjars' does not add the OSGi attributes to derby.jar's manifest. Instead  a file named ${manifest.file} is created in the root of the source tree. This file contains what should have been in the manifest  for instance:Manifest-Version: 1.0Ant-Version: Apache Ant 1.6.5Created-By: diablo-1.5.0_07-b00 (Sun Microsystems Inc.)Bundle-Activator: org.apache.derby.osgi.EmbeddedActivatorDynamicImport-Package: *Export-Package: org.apache.derby.authentication org.apache.derby.datab ase org.apache.derby.io org.apache.derby.jdbc org.apache.derby.vtiThis seems to be caused by build.xml containing a reference to '${manifest.file}' at a location where manifest.file is not bound to a value. The attached patch (manifest.diff) fixes the issue by replacing '${manifest.file}' with '${derby.jar.dir}/lists/smf.mf'.   ,0
1732,The language and store systems treat a JVM error such as OutOfMemoryError differently leading to the raw store protocol violation errors    Don't have the exact details  but remember noticing it a while ago. I think the store transaction context closes the transaction on such an error  while the language conneciton context just rollsback the transaction or the statement. I think the best and consistent approach would be to close the connection.   ,0
1743,derbynet/testSecMec.java fails with NullPointerException (intermittent failure)    http://www.multinet.no/~solberg/public/Apache/TinderBox_Derby/testlog/SunOS-5.10_i86pc-i386/433374-derbyall_diff.txt                 Diff file derbyall/derbynetclientmats/DerbyNetClient/derbynetmats/derbynetmats/testSecMec.diff             Start: testSecMec jdk1.5.0_04 DerbyNetClient derbynetmats:derbynetmats 2006-08-22 01:45:28 ***61a62 63&gt; java.sql.SQLException: No current connection.&gt; Exception in thread 'DRDAConnThread_15' java.lang.NullPointerExceptionTest Failed. End: testSecMec jdk1.5.0_04 DerbyNetClient derbynetmats:derbynetmats 2006-08-22 01:46:05 ***    Detailed log:Test USRSSBPWD_with_BUILTIN - derby.drda.securityMechanism=nullTurning ON Derby BUILTIN authenticationUSRSSBPWD (T0): jdbc:derby://localhost:20000/wombat;user=neelima;password=lee;shutdown=true;securityMechanism=8 - EXCEPTION DERBY SQL error: SQLCODE: -1  SQLSTATE: 08006  SQLERRMC: Database 'wombat' shutdown.java.sql.SQLException: No current connection. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.setupContextStack(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.rollback(Unknown Source) at org.apache.derby.impl.drda.Database.close(Unknown Source) at org.apache.derby.impl.drda.Session.close(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.closeSession(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Exception in thread 'DRDAConnThread_15' java.lang.NullPointerException at java.lang.Throwable.printStackTrace(Throwable.java:509) at org.apache.derby.impl.drda.DRDAProtocolException.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.drda.DRDAProtocolException.newAgentError(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.sendUnexpectedException(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.closeSession(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)   ,0
1749,Implement Bracketed SQL comments (/*...*/ comments)    Hibernate use multiline sql statements to show the internal building of the hql statements. You can disable this feature  but it would be nice if you can implements bracketed SQL comments in Derby.Thanks.   ,0
1751,derbynet/testSecMec.java fails with ShutdownException in DerbyNetClient framework    During 10.2.1.0 beta testing this test failed with org.apache.derby.iapi.services.context.ShutdownException on 2 of 4 platforms running Solaris zones:Platform 'sparc_zone2': derbynetclientmats/derbynetmats/DerbyNetClient/derbynetmats/testSecMec.diffPlatform 'sparc_zone3': derbynetclientmats/derbynetmats/DerbyNetClient/derbynetmats/testSecMec.diff derbyall/derbynetclientmats/DerbyNetClient/derbynetmats/derbynetmats/testSecMec.diffThe test did not fail on other platforms  which may indicate timing sensitivity (tests are run concurrently in 4 zones (1 global  3 local) on one single machine). Here is one of the diffs (from platform 'sparc_zone2'):                 Diff file derbynetclientmats/derbynetmats/DerbyNetClient/derbynetmats/testSecMec.diff             Start: testSecMec jdk1.6.0-rc DerbyNetClient derbynetmats:derbynetmats 2006-08-14 21:31:48 ***308a309 312&gt; java.sql.SQLException: Java exception: ': org.apache.derby.iapi.services.context.ShutdownException'.&gt; ... 14 more----------------------------------------------&gt; Testing with derby.drda.securityMechanism=INVALID_VALUE&gt; EXPECTED EXCEPTION DRDA_InvalidValue.U:Invalid value  INVALID_VALUE  for derby.drda.securityMechanism.310 312d313&lt; Testing with derby.drda.securityMechanism=INVALID_VALUE&lt; EXPECTED EXCEPTION DRDA_InvalidValue.U:Invalid value  INVALID_VALUE  for derby.drda.securityMechanism.&lt; -----Test Failed. End: testSecMec jdk1.6.0-rc DerbyNetClient derbynetmats:derbynetmats 2006-08-14 21:32:54 ***    The failure occurred in the DerbyNetClient framework when shutting down the database for the second (and last) time in the method testUSRSSBPWD_with_BUILTIN(). This test method was added August 9  2006 (DERBY-528).Attatching derby.log from the failure in derbynetclientmats/derbynetmats on sparc_zone2.   ,0
1759,XMLSERIALIZE operator doesn't follow SQL/XML spec in some areas when serializing a sequence.    The SQL/XML specification dictates that  when serializing a sequence of XML items  the XMLSERIALIZE operator must first 'normalize' the sequence based on the rules defined here: http://www.w3.org/TR/xslt-xquery-serialization/#serdmThe current Derby implementation doesn't perform such normalization  which leads to two ways in which the results of an XMLSERIALIZE operator may not agree with the required behavior: 1. Sequences of atomic values will not have spaces between  but the space is required as part of step 3 of the normalization rules at the above link. 2. Derby will allow serialization of a sequence even if it has a top-level Attribute node in it  but the rules of normalization dictate that an error should be thrown instead (step 7).Both of these behaviors can be seen with the following query.values xmlserialize( xmlquery('/ageinfo/@*' passing by ref xmlparse( document '&lt;ageinfo age='48' birthdate='1900-02-08'/&gt;' preserve whitespace ) empty on empty ) as char(50) )Derby will currently return the following result from this statement:1--------------------------------------------------481900-02-08This result does not abide by SQL/XML specification because a) Derby allowed serialization of a sequence having a top-level attribute node (actually  the sequence had two)  and b) the atomic values produced from the attributes were displayed without a space between them.The correct behavior for the above example is to return a serialization error caused by the presence of an Attribute node in the sequence.If the example was rewritten as  say: xmlquery('/ageinfo/@*' passing by ref+ xmlquery('fn:data(/ageinfo/@*)' passing by refthen the attribute nodes are no longer present--we only have their atomic values  which is allowed. Thus the correct result should then be:1--------------------------------------------------48 1900-02-08Note  though  that Xalan doesn't appear to support the 'fn:data' function  so this rewritten query won't actually work. I tried using Xalan's built-in string function  as follows: xmlquery('/ageinfo/@*' passing by ref+ xmlquery('string(/ageinfo/@*)' passing by refbut Xalan only returns the first attribute in that case; it doesn't return the second one. So part of this Jira issue is probably going to involve figuring out how to allow a user to retrieve a sequence of attribute values (as opposed to attribute nodes) using Xalan and still abide by the SQL/XML rules.   ,0
1760,remote server testing with 10.2 snapshot showed 8 failures    I ran derbynetclientmats between two IPV6 machines with the 10.2 snapshot and finally got to look at the results...There were 8 failures  4 of those because of other tests leaving stuff behind.2 tests complained about junit classes not being found (? one of those was checkDataSource!).2 tests seemed to have trouble connecting - those might be the more interesting ones.Will do further analysis  &amp; create test cleanup patches.The failing tests and some comments:suite derbynetclientmats with ibm142 &amp; IPV6 machines using -DhostName= (i.e. remote server test) and build: 10.2.0.4 alpha - (419130)derbynetclientmats/derbynetclientmats.fail:jdbcapi/checkDataSource.java ?? fails because of an error accessing junit. Not sure why  junit is in client classpath...and it's not even a junit test. Stack trace not helpful. (points to client.am  which makes little/no sense).derbynetclientmats/derbynetmats/derbynetmats.fail:derbynet/testconnection.java ?? no connectionderbynetclientmats/derbynetmats/derbynetmats.fail:derbynet/testij.java ?? no connectionderbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/metadata.java extra tables/views: JIRA1454  Y.derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/odbc_metadata.java dittoderbynetclientmats/derbynetmats/derbynetmats.fail:lang/syscat.sql dittoderbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/ProcedureTest.junit junit not available??derbynetclientmats/derbynetmats/derbynetmats.fail:jdbcapi/checkDataSource30.java Table/View 'Y' already exists.   ,1
1776,ERROR 42Z72: XML syntax error; missing keyword(s): 'AS'. - Misleading text    create table t (i int  x xml);select xmlserialize from t;ERROR 42Z72: XML syntax error; missing keyword(s): 'AS'.This is not an 'XML Syntax error'  it's a syntax in the SQL language. No need to have a special error messgae here  wouldn't the error be caught by regular parsing?   ,0
1787,The database owner is incorrectly referred to as dba in the code comments that were checked in Derby 10.2 for grant revoke work. We should clean this up at some point.    Grant revoke functionality was added in Derby 10.2 The comments that went into the grant revoke code  in some places refer to database owner as 'dba'. They are not the same thing. In the grant revoke world  dba is a role. We haven't added roles into Derby yet but current use of dba in comments might make it confusing when we do start working on roles including dba.   ,0
1811,Embedded ResultSet.getTimestamp on a TIME column returns a java.sql.Timestamp with a date portion that can be incorrect.    The date portion of the java.sql.Timestamp from a TIME column is intended to be the current date but instead can be any date value  based upon the last getXXX call that required a Java Calendar object.   ,0
1816,Client's ResultSet.getTime() on a SQL TIMESTAMP column loses the sub-second resolution and always has a milli-second value of zero.    In embedded the java.sql.Time object returned from ResultSet.getTime() for a SQL TIMESTAMP object has its millisecond value for the time portion equal to that for the java.sql.Timestamp value.In client the millisecond time value for such a value is always set to zero.Note a Derby SQL TIME value has by definition resolution of only a second so its millisecond value is always zero but java.sql.Time is not a direct mapping to the SQL Type  it's a JDBC type  so when converting from a SQL TIMESTAMPit should retain the precision.The new test lang.TimeHandlingTest has this assert code that shows the problem  one of its calls will be commented outwith a comment with this bug number. private void assertTimeEqual(Time tv  Timestamp tsv) { cal.clear(); cal.setTime(tv); int hour = cal.get(Calendar.HOUR_OF_DAY); int min = cal.get(Calendar.MINUTE); int sec = cal.get(Calendar.SECOND); int ms = cal.get(Calendar.MILLISECOND); // Check the time portion is set to the same as tv cal.clear(); cal.setTime(tsv); assertEquals(hour  cal.get(Calendar.HOUR_OF_DAY)); assertEquals(min  cal.get(Calendar.MINUTE)); assertEquals(sec  cal.get(Calendar.SECOND)); assertEquals(ms  cal.get(Calendar.MILLISECOND)); &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; FAILS HERE }   ,0
1828,Access rule violations should use a SQL state starting with '42' according to the SQL standard.    The SQL standard says that SQL State '42' is for 'syntax error or accessrule violation' (section 23.1).There is a question of what JDBC 4.0 exception should be thrown for a access rule violation JDBC 4.0 maps '42' to SQLSyntaxErrorException which seems wrong for an access rule.Message thread:http://mail-archives.apache.org/mod_mbox/db-derby-dev/200609.mbox/%3c45004A04.5080002@apache.org%3e   ,0
1829,lang/procedureInTrigger.sql fails with wctme5.7 foundation with CNFE  java.sql.DriverManager and other exceptions.    Test failed with 10.3 jars 10.3.0.0 alpha - (439522). I am attaching the report file from the test run wctme5.7_derbyall_report.txt . Please see this file for the diff. This test was added as part of DERBY-551 and checkin - r421281.   ,0
1832,sysinfo test fails with 'access denied (java.util.PropertyPermission java.class.path read)' when derbyclient.jar is first in classpath    Seen on Linux and Solaris  with Sun JVM 1.4  1.5  1.6 when derbyclient.jar is first in classpath:                 Diff file derbyall/derbynetmats/DerbyNet/derbynetmats/sysinfo.diff             Start: sysinfo jdk1.4.2_02 DerbyNet derbynetmats:derbynetmats 2006-09-05 08:44:54 ***14a15&gt; Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read)17 26d17&lt; Current Locale : [English/United States &#91;en_US&#93;]&lt; Found support for locale: &#91;de_DE&#93;&lt; Found support for locale: &#91;es&#93;&lt; Found support for locale: &#91;fr&#93;&lt; Found support for locale: &#91;it&#93;&lt; Found support for locale: &#91;ja_JP&#93;&lt; Found support for locale: &#91;ko_KR&#93;&lt; Found support for locale: &#91;pt_BR&#93;&lt; Found support for locale: &#91;zh_CN&#93;&lt; Found support for locale: &#91;zh_TW&#93;41a33&gt; Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read)44 53d35&lt; Current Locale : [English/United States &#91;en_US&#93;]&lt; Found support for locale: &#91;de_DE&#93;&lt; Found support for locale: &#91;es&#93;&lt; Found support for locale: &#91;fr&#93;&lt; Found support for locale: &#91;it&#93;&lt; Found support for locale: &#91;ja_JP&#93;&lt; Found support for locale: &#91;ko_KR&#93;&lt; Found support for locale: &#91;pt_BR&#93;&lt; Found support for locale: &#91;zh_CN&#93;&lt; Found support for locale: &#91;zh_TW&#93;69a52&gt; Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read)72 81d54&lt; Current Locale : [English/United States &#91;en_US&#93;]&lt; Found support for locale: &#91;de_DE&#93;&lt; Found support for locale: &#91;es&#93;&lt; Found support for locale: &#91;fr&#93;&lt; Found support for locale: &#91;it&#93;&lt; Found support for locale: &#91;ja_JP&#93;&lt; Found support for locale: &#91;ko_KR&#93;&lt; Found support for locale: &#91;pt_BR&#93;&lt; Found support for locale: &#91;zh_CN&#93;&lt; Found support for locale: &#91;zh_TW&#93;Test Failed. End: sysinfo jdk1.4.2_02 DerbyNet derbynetmats:derbynetmats 2006-09-05 08:44:59 ***   ,1
1834,Correct message SQL State 01006 to reflect that is being revoked - 'user' and update the Ref Manual    the SQL State 01006 'Privilege not revoked from {0}.' should be changed to 'Privilege notrevoked from user {0}.'Once changed in the code  the Ref Manual file rrefexcept71493. dita needs to be updated as well.   ,0
1844,jdbcapi/blobclob4BLOB.java fails with JCC drivers    Test fails with JCC versions 2.4  2.6 and 2.8. Sample diff:&lt; FAIL: Caught exception java.lang.NegativeArraySizeException592a592&gt; FAIL: Caught exception java.lang.NegativeArraySizeException:   ,0
1846,Create a script that allows users to easily update their Derby jars with the JDBC4 classes.    Since the resolution of the JDBC 4 licensing issue was to not ship a build that includes Derby's JDBC 4 code  but continue to ship the Derby source files for them  a script which automatically compiles and updates the Derby jars with the JDBC 4 classes would be useful.   ,0
1849,Tests lang/grantRevokeDDL.sql and lang/grantRevokeDDL2.sql fails on IBM WCTME 5.7 Foundation (jdkJ2ME Foundation Specification v1.0)    The diff for grantRevokeDDL.sql is big  hence attaching. For lang/grantRevokeDDL2.sql the diff is as follows:                 Diff file derbyall/derbylang/grantRevokeDDL2.diff             Start: grantRevokeDDL2 jdkJ2ME Foundation Specification v1.0 derbyall:derbylang 2006-09-10 11:42:23 ***0a1&gt; java.lang.reflect.InvocationTargetException: java.lang.NullPointerException99 del&lt; ERROR: Failed with SQLSTATE 3800199a100&gt; ERROR: Failed with SQLSTATE XJ001119 del&lt; ERROR: Failed with SQLSTATE 38002119a120&gt; ERROR: Failed with SQLSTATE XJ001139 del&lt; ERROR: Failed with SQLSTATE 38002139a140&gt; ERROR: Failed with SQLSTATE XJ001158 del&lt; 1 row inserted/updated/deleted158a159 160&gt; ERROR: Failed with SQLSTATE 38000&gt; ERROR: Failed with SQLSTATE XJ001163 del&lt; 0 rows selected163a165 166&gt; 4 |XYZ &gt; 1 row selected168a172 182&gt; ERROR: Failed with SQLSTATE 28508&gt; ij(USER2)&gt; set connection user1;&gt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &gt; for each STATEMENT mode db2sql call revoke_select_proc1();&gt; 0 rows inserted/updated/deleted&gt; ij(USER1)&gt; &#8211; should fail&gt; delete from t1 where i = 5;&gt; ERROR: Failed with SQLSTATE 38000&gt; ERROR: Failed with SQLSTATE XJ001&gt; ij(USER1)&gt; &#8211; check delete failed&gt; select * from t1 where i = 5;171 184d184&lt; 1 |XYZ &lt; 1 row selected&lt; ij(USER2)&gt; set connection user1;&lt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &lt; for each STATEMENT mode db2sql call revoke_select_proc1();&lt; 0 rows inserted/updated/deleted&lt; ij(USER1)&gt; &#8211; should fail&lt; delete from t1 where i = 5;&lt; ERROR: Failed with SQLSTATE 38000&lt; ERROR: Failed with SQLSTATE 38001&lt; ij(USER1)&gt; &#8211; check delete failed&lt; select * from t1 where i = 5;&lt; I |B &lt; ---------------------------191a192 202&gt; ERROR: Failed with SQLSTATE 28508&gt; ij(USER2)&gt; set connection user1;&gt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &gt; for each STATEMENT mode db2sql call revoke_select_proc2();&gt; 0 rows inserted/updated/deleted&gt; ij(USER1)&gt; &#8211; should fail&gt; delete from t1 where i = 6;&gt; ERROR: Failed with SQLSTATE 38000&gt; ERROR: Failed with SQLSTATE XJ001&gt; ij(USER1)&gt; &#8211; check delete failed&gt; select * from t1 where i = 6;194 207d204&lt; 1 |XYZ &lt; 1 row selected&lt; ij(USER2)&gt; set connection user1;&lt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &lt; for each STATEMENT mode db2sql call revoke_select_proc2();&lt; 0 rows inserted/updated/deleted&lt; ij(USER1)&gt; &#8211; should fail&lt; delete from t1 where i = 6;&lt; ERROR: Failed with SQLSTATE 38000&lt; ERROR: Failed with SQLSTATE 38002&lt; ij(USER1)&gt; &#8211; check delete failed&lt; select * from t1 where i = 6;&lt; I |B &lt; ---------------------------214a212 222&gt; ERROR: Failed with SQLSTATE 28508&gt; ij(USER2)&gt; set connection user1;&gt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &gt; for each STATEMENT mode db2sql call revoke_select_proc3();&gt; 0 rows inserted/updated/deleted&gt; ij(USER1)&gt; &#8211; should fail&gt; delete from t1 where i = 7;&gt; ERROR: Failed with SQLSTATE 38000&gt; ERROR: Failed with SQLSTATE XJ001&gt; ij(USER1)&gt; &#8211; check delete failed&gt; select * from t1 where i = 7;217 230d224&lt; 1 |XYZ &lt; 1 row selected&lt; ij(USER2)&gt; set connection user1;&lt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &lt; for each STATEMENT mode db2sql call revoke_select_proc3();&lt; 0 rows inserted/updated/deleted&lt; ij(USER1)&gt; &#8211; should fail&lt; delete from t1 where i = 7;&lt; ERROR: Failed with SQLSTATE 38000&lt; ERROR: Failed with SQLSTATE 38002&lt; ij(USER1)&gt; &#8211; check delete failed&lt; select * from t1 where i = 7;&lt; I |B &lt; ---------------------------237a232 242&gt; ERROR: Failed with SQLSTATE 28508&gt; ij(USER2)&gt; set connection user1;&gt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &gt; for each STATEMENT mode db2sql call revoke_select_proc4();&gt; 0 rows inserted/updated/deleted&gt; ij(USER1)&gt; &#8211; ok&gt; delete from t1 where i = 8;&gt; ERROR: Failed with SQLSTATE 38000&gt; ERROR: Failed with SQLSTATE XJ001&gt; ij(USER1)&gt; &#8211; check delete &gt; select * from t1 where i = 8;240 del&lt; 1 |XYZ 240a245&gt; 8 |XYZ 241a247 252&gt; ij(USER1)&gt; drop trigger revoke_select_trig;&gt; 0 rows inserted/updated/deleted&gt; ij(USER1)&gt; set connection user2;&gt; ij(USER2)&gt; &#8211; should fail&gt; select * from user1.t1 where i = 1;&gt; ERROR: Failed with SQLSTATE 28508243 260d253&lt; ij(USER1)&gt; create trigger revoke_select_trig AFTER delete on t1 &lt; for each STATEMENT mode db2sql call revoke_select_proc4();&lt; 0 rows inserted/updated/deleted&lt; ij(USER1)&gt; &#8211; ok&lt; delete from t1 where i = 8;&lt; 1 row inserted/updated/deleted&lt; ij(USER1)&gt; &#8211; check delete &lt; select * from t1 where i = 8;&lt; I |B &lt; ---------------------------&lt; 0 rows selected&lt; ij(USER1)&gt; drop trigger revoke_select_trig;&lt; 0 rows inserted/updated/deleted&lt; ij(USER1)&gt; set connection user2;&lt; ij(USER2)&gt; &#8211; should fail&lt; select * from user1.t1 where i = 1;&lt; ERROR: Failed with SQLSTATE 28508&lt; ij(USER2)&gt; set connection user1;Test Failed. End: grantRevokeDDL2 jdkJ2ME Foundation Specification v1.0 derbyall:derbylang 2006-09-10 11:42:33 ***   ,1
1866,Assert failure in sane mode for queries that used to work in 10.1.2.1    Derby-1777 gives a database and a small program called 'ViewerInit' that prepares a bunch of large queries involving nested subqueries  unions  and join predicates. The actual bug described in DERBY-1777 is an NPE  and that's what the patch for DERBY-1777 addresses.However  once the NPEs are fixed  some of the queries in that same program now fail with ASSERT failures when running in SANE mode; this Jira issue is for addressing those assert failures.While this does constitute a regression  I don't know yet what the root cause of the problem is  so I hesitate to make it a 10.2 blocker--hence urgency is 'Normal'. I'm still investigating the queries to try to track down where the problem is  but all I've been able to deduce so far is that a) the assertion occurs for a scoped predicate and thus the pushing of join predicates into UNIONs is somehow involved  and b) in INSANE mode the query compiles without problem and appears (based on some early and very incomplete testing) to execute without problem. But more investigation is required to determine if the execution/results are actually correct  and to understand more about why the assertion is being thrown.I'm marking the fixin as 10.2.2.0 for now since I don't enough to make this a blocker for 10.2.1. Hopefully more info will be forthcoming...   ,0
1874,largeDataTests/LobLimits master needs update for new exception names    &lt; EXPECTED SQL Exception: (XJ001) Java exception: 'Input stream did not have exact amount of data as the requested length.: java.io.IOException'.47a47&gt; EXPECTED SQL Exception: (XJ001) Java exception: 'Input stream did not have exact amount of data as the requested length.: org.apache.derby.iapi.services.io.DerbyIOException'.+ moreSee http://www.multinet.no/~solberg/public/Apache/LargeData/testlog/SunOS-5.10_i86pc-i386/448277-largeData_diff.txt   ,0
1885,The source distribution for 10.2.1.4 rc1 includes derby.log files    The db-derby-10.2.1.4-src release candidate built on 9/22/06 includes derby.log files. db-derby-10.2.1.4-src/derby.log db-derby-10.2.1.4-src/java/demo/toursdb/derby.logFile sizes: $ ls -l derby.log rw-rw-r- 1 jta jta 767545 Sep 22 16:12 derby.log $ ls -l java/demo/toursdb/derby.log rw-rr- 1 jta jta 542 Sep 22 14:28 java/demo/toursdb/derby.logIf the release candidates need to be rebuilt  it would be good to remove those derby.log files  but it doesn't harm anything to have them in there (just consumes a little space).The db-derby-10.2.1.4-lib and db-derby-10.2.1.4-bin distributions don't have these files.   ,0
1891,error 58009.C.19  refers to non-existent codepoint secktn - needs correcting    error 58009.C.19=Network protocol exception: secktn was not returned. The connection has been terminated.This is NET_SECTKN_NOT_RETURNED in org.apache.derby.drda.client.net.NetConnection.javaI searched in the drda specs but I could not find SECKTN  but I did find SECTKN.So...I think the error message should get changed to SECTKN.The same non-existent codepoint seems to be referred to in: XN002.U=secktn was not returned.This affects the following: English messages .properties file(s) Brazilian messages .properties file(s) documentation for SQLStates.I didn't find any masters with this.It should probably go into 10.2.1  although it's not important enough to hold up a release. Targeting for 10.2.2 for now.Myrna   ,0
1894,SQLSTATE 42X10 occurs when qualifying a column with a synonym in ORDER BY clause    SQLSTATE 42X10 occurs when qualifying a column with a synonym in ORDER BY clause  where the synonym was declared in a different schema:ij version 10.3ij&gt; connect 'jdbc:derby:wombat;create=true';ij&gt; create schema test1;0 rows inserted/updated/deletedij&gt; create schema test2;0 rows inserted/updated/deletedij&gt; create table test1.testtable(id bigint not null);0 rows inserted/updated/deletedij&gt; create synonym test2.testtable for test1.testtable;0 rows inserted/updated/deletedij&gt; set schema test1;0 rows inserted/updated/deletedij&gt; select testtable.id from testtable;ID --------------------0 rows selectedij&gt; set schema test2;0 rows inserted/updated/deletedij&gt; select testtable.id from testtable;ID --------------------0 rows selectedij&gt; select testtable.id from testtable order by testtable.id;ERROR 42X10: 'TESTTABLE' is not an exposed table name in the scope in which it appears.ij&gt;   ,0
1899,10.2.1.5 source distribution is missing many files and includes some files that it should not.    The source distribution is missing the top-level bin and maven directories  as well as BUILDING.txt  README  index.html  and published-api-overview.html. Also  the tools directory is missing release/build.xml.In addition  tools/testing/derby contains a complete set of the Derby 10.1 jars  these should be removed from the -src distribution.   ,0
1900,The scripts under the /bin of the distribution does not have the executable permission    The scripts under the /bin directory of the distribution does not have the execute permission. Here is the dir listing:rw-rr- 1 rajeshk RD 1153 2006-09-15 12:12 dblookrw-rr- 1 rajeshk RD 1353 2006-09-15 12:20 dblook.batrw-rr- 1 rajeshk RD 2348 2006-09-15 12:12 derby_common.batrw-rr- 1 rajeshk RD 4853 2006-09-15 12:56 derby_common.shrw-rr- 1 rajeshk RD 1241 2006-09-15 12:12 ijrw-rr- 1 rajeshk RD 1345 2006-09-15 12:20 ij.bat....The issue was raised in the list earlierhttp://www.nabble.com/Questions-on-the-scripts-in--bin--directory-of-Derby-install-p6271633.htmlbut looks it is not fully resolved.   ,1
1909,ALTER TABLE DROP COLUMN needs to update GRANTed column privileges    When ALTER TABLE DROP COLUMN is used to drop a column from a table  it needs to update the GRANTed column privileges on that table.The following behaviors need to be provided: DROP COLUMN needs to automatically revoke any privileges which have been granted on this column Privileges which have been granted on other columns in this table need to be adjusted due to changed column position numbersWhen this problem is fixed  the following additional cleanup steps should occur: The check that disables DROP COLUMN in sqlAuthorization mode needs to be removed There is a comment in AlterTableConstantAction that needs to be revised The tests in lang/altertableDropColumn.sql should be moved into altertable.sql altertableDropColumn.sql and altertableDropColumn.out should be deletedSearch for this JIRA issue number in the code to find the relevant places to change.   ,1
1921,Bring STATUS file up to date    The STATUS file is stale:1) Votes taken since February aren't mentioned.2) The development trunk is labelled as 10.23) The committer list is stale.   ,0
1922,readme.html under frameworks does not mention about Derby client and some minor typos in example.html    The readme.html file under frameworks mentions about the JCC driver but nothing about the Derbyclient.Also under the demo/programs/simple/example.html some minor issues/typos:Under the section 'Next run the SimpleApp demo in Derby client mode:' step 5 on classpath mentions:NOT FOUND IN CLASS PATH: Derby Client libraries (db2jcc.jar) (com.ibm.db2.jcc.DB2Driver not found.)The above show JCC info instead of Derby Client   ,0
1925,Add re-encrytion  of database test cases to the upgrade test..    Add a encryption of an un-encrypted database and re-encryption of encrypted database test case to the upgrade test. Please see DERBY-1156 for details about re-encryption feature. re-encrytpion test cases will be added to run only when test is executed using jar files. Upgrade test mixes the old version of derby classes in the jar files and the new classes when run under code-line using classes.; This cause boot time error when databases is encrypted ( This kind of mixing different version of classes is not supported   see DERBY-1898) .   ,0
1953,Make FOR EACH clause and MODE DB2SQL in CREATE TRIGGER statement optional    According to SQL:2003 standard  section 11.39 &lt;trigger definition&gt;  under Syntax Rules item 8:If neither FOR EACH ROW nor FOR EACH STATEMENT is specified  then FOR EACH STATEMENT is implicit.[ FOR EACH { ROW | STATEMENT } ]   ,0
1956,Remove stale code from the statement classes in the client driver    Statement and ParameterMetaData contain flags called escapedProcedureCallWithResult_. These flags might have had a function before  but now they are always false. They are used in many if-statements and make the code harder to read. Removing the flags and the code that is only executed when the flags are true  would simplify the code and make it more maintainable.   ,0
1958,improve XSDG3 error to print container  actual i/o operation  and file name.    The current error does not give enough information to know what container is the problem:ERROR XSDG3: Meta-data for Containerorg.apache.derby.impl.store.raw.data.RAFContainer@10632cd could not beaccessed   ,0
1963,Routine parameter names displayed by dblook are not escaped.    After using this SQL to create a function with a delimited parameter nameCREATE FUNCTION FRED ('paramOne' INTEGER) RETURNS INTEGERLANGUAGE JAVA PARAMETER STYLE JAVA EXTERNAL NAME 'fred.foo' dblook will output a CREATE FUNCTION statement with the parameter name without quotes:CREATE FUNCTION 'APP'.'FRED' (paramOne INTEGER) RETURNS INTEGERLANGUAGE JAVA PARAMETER STYLE JAVAREADS SQL DATA CALLED ON NULL INPUTEXTERNAL NAME 'fred.foo';Using the output from dblook to re-create the function will result in a function with a different parameter name.   ,0
1974,Junit tests that require SQL authorization mode should use a different database to the default one.    Since databases are re-used in the JUnit world having a single database for the two modes does not work.Not sure if there are any tests that need this yet. SQLAuthorizationPropTest actually tests setting the property so it really needs its own database (I think).   ,0
1987,Add Order Entry application/system/performance test/toolkit    Order Entry (OE) is an OLTP application/toolkit which is based upon the TPC-C specification but is not claiming to be a valid implementation. The TPC-C specification is used mainly forthe database schema &amp; population rules and the logic of the business transactions.http://www.tpc.org/tpcc/OE is set up so that the driving &amp; display of the business transactions is separated from the actual implementation which then allows different implementations to compare performance of Derby features. In all cases the implementationswould perform the logical functionality required by the TPC-C  but need not be strict implementations. As an examplethe new order number is obtained in a defined way in TPC-C  but Derby could use generated keys to perform thesame logical function. Testing the two ways would lead to see if there were performance problems with generated keys.Examples of the possible implementations of the business transactions are: direct - client executes SQL statements directly holding onto PreparedStatements for the lifetime of the client) procedure - client executes a procedure per business transaction EOD - implementation using JDBC 4^H5? EOD updateable ResultSets positioned updates etc.Other options include use of triggers use of generated keys etc.Possible values for the display (results of the transaction) nothing text HTML for servlets/JSPs etc.Also the loading of the data could support different options: load with/without contraints in place load using INSERT statements load using import load using import with a ResultSet class.OE allows the amount of data loaded initially to be varied very easily  just by setting the warehousescale factor  so a warehouse=1 creates a database of size N  and warehouse=100 a database of size 100N (roughly).This allows databases in the range 10-100Gb to be easily created.The general setup would that OE could be used as a function test  performance test  or stress test so it's seen as a toolkit.I hope also that the OE could be expanded beyond the TPC-C spec  for example: adding images (BLOBs) and descriptions (CLOBs) to the product ITEM table. adding triggers to send-email on various actions.These additions would be intended to test Derby functionality in a 'real-world' OLTP application.The top-level package under java/testing would be org.apache.derbyTesting.systemTests.oe   ,0
1988,Convert jdbc4/TestJDBC40Exception.java to JUnit    TestJDBC40Exception is written in a JUnit-like style and could easily be converted into JUnit.   ,0
1989,Convert jdbc4/TestDbMetaData.java to JUnit    Rewrite the test in JUnit using the utility methods added in DERBY-1976.   ,0
1991,Misleading stack traces for exceptions raised by the JDBC 4.0 embedded driver    When the embedded driver raises an SQLException  its stack trace alwayssays it is created in SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA().This is not correct.At some point  SQLExceptionFactory40.getSQLException() set the stack traceof the SQLException to the stack trace of the non-SQLException that causedit  if there were one. This was probably done to mimic the behaviour ofEmbedSQLException  which overrides printStackTrace() to achieve thesame. Later  code was added to ferry arguments over DRDA. This code createda dummy exception which the old code interpreted as a non-SQLExceptionwhose stack trace should be used for the main exception. Therefore  allexceptions now have the same stack trace as the dummy exception created inwrapArgsForTransportAcrossDRDA().I think the best solution is not to set the stack trace explicitly  noteven when the SQLException is caused by a non-SQLException.EmbedSQLException overrides printStackTrace() because throwables in Java1.3 didn't have initCause()/getCause()  so it was the only way to preservethe original stack trace. Since the SQLExceptions in JDBC 4.0 haveinitCause()/getCause()  there is no reason why the JDBC4 driver shouldmimic EmbedSQLException's workaround for not having these methods.   ,0
2003,Use a lower wait timeout in BlobClob4BlobTest    These test cases wait 60 seconds for a timeout: testLockingClob testLockingWithLongRowClob testLockingBlob testLockingWithLongRowBlobSince they run both in embedded and network client mode  BlobClob4BlobTest spends about eight minutes waiting for a timeout. Therefore  it would be good if its setUp() method lowered the timeout (and tearDown() reset it). TestJDBC40Exception shows how this could be achieved.   ,0
2008,NullPointerException with LTRIM  RTRIM and 2-argument SUBSTR() call in GROUP BY clause.    The following query  which fails with a syntax error in 10.1.3 (because functions are not allowed in a GROUP BY expression for 10.1) fails with a NullPointerException in 10.2 and in the codeline (10.3):create table dt (vc varchar(30)); insert into dt values ('1928-09-21')  ('1903-12-08'); select substr(vc  3) from dt group by substr(vc  3); Result (on trunk) is:java.lang.NullPointerException at org.apache.derby.impl.sql.compile.TernaryOperatorNode.isEquivalent(TernaryOperatorNode.java:924) at org.apache.derby.impl.sql.compile.GroupByList.findGroupingColumn(GroupByList.java:244) at org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.skipChildren(VerifyAggregateExpressionsVisitor.java:146) at org.apache.derby.impl.sql.compile.TernaryOperatorNode.accept(TernaryOperatorNode.java:497) at org.apache.derby.impl.sql.compile.ResultColumn.accept(ResultColumn.java:1515) at org.apache.derby.impl.sql.compile.QueryTreeNodeVector.accept(QueryTreeNodeVector.java:159) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(SelectNode.java:619) at org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(FromSubquery.java:262) at org.apache.derby.impl.sql.compile.FromList.bindExpressions(FromList.java:337) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(SelectNode.java:500) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(DMLStatementNode.java:249) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:162) at org.apache.derby.impl.sql.compile.CursorNode.bind(CursorNode.java:253) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:345) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:119) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:745) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:568) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:517)   ,0
2016,ArrayIndexOutOfBoundsException for COALESCE with aggregate functions    The following statements produce an ArrayIndexOutOfBoundsException:CREATE TABLE t1 ( f1 INTEGER);SELECT COALESCE(MAX(f1) 0) FROM t1;Workaround: VALUES COALESCE( (SELECT MAX(f1) FROM t1)  0);Stack trace:----------------------------------------------------------------2006-10-29 14:52:53.765 GMT: Booting Derby version The Apache Software Foundation - Apache Derby - 10.2.1.6 - (452058): instance c013800d-010e-948f-0faa-00000012f418on database directory C:/temp_sys/temp_Derby_TestErr_dbDatabase Class Loader started - derby.database.classpath=''2006-10-29 14:53:02.906 GMT Thread&#91;main 5 main&#93; (XID = 122)  (SESSIONID = 0)  (DATABASE = c:/temp_sys/temp_Derby_TestErr_db)  (DRDAID = null)  Cleanup action starting2006-10-29 14:53:02.906 GMT Thread&#91;main 5 main&#93; (XID = 122)  (SESSIONID = 0)  (DATABASE = c:/temp_sys/temp_Derby_TestErr_db)  (DRDAID = null)  Failed Statement is: SELECT COALESCE(MAX(f1) 0) FROM t1java.lang.ArrayIndexOutOfBoundsException: -1 at org.apache.derby.impl.services.bytecode.BCMethod.popStack(Unknown Source) at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)   ,0
2018,NullPointerException in CREATE VIEW ... VALUES NULL;    The following statement produces a NullPointerException: CREATE VIEW v1 (f1) AS VALUES NULL;Stack trace:----------------------------------------------------------------2006-10-30 12:39:31.750 GMT: Booting Derby version The Apache Software Foundation - Apache Derby - 10.2.1.6 - (452058): instance c013800d-010e-993b-512f-00000012f418on database directory C:/temp_sys/temp_Derby_TestErr_dbDatabase Class Loader started - derby.database.classpath=''2006-10-30 12:39:38.484 GMT Thread&#91;main 5 main&#93; (XID = 122)  (SESSIONID = 0)  (DATABASE = c:/temp_sys/temp_Derby_TestErr_db)  (DRDAID = null)  Cleanup action starting2006-10-30 12:39:38.484 GMT Thread&#91;main 5 main&#93; (XID = 122)  (SESSIONID = 0)  (DATABASE = c:/temp_sys/temp_Derby_TestErr_db)  (DRDAID = null)  Failed Statement is: CREATE VIEW v1 (f1) AS VALUES NULLjava.lang.NullPointerException at org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptorArray(Unknown Source) at org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(Unknown Source) at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)   ,0
2022,jdbcapi.LobStreamsTest runs only in client (not embedded) but its suite() method gives no reason why.    It's essential to document why such decisions were made  makes life easier for subsequent deveopers as they try to understand the code and why it is not being used to test embedded.   ,0
2026,Setting a login timeout in client driver can lead to query timeout    Setting the login timeout by using DriverManager.setLoginTimeout(intseconds) also affects the amount of time the client driver is waitingfor a query to finish. For instance  setting the login timeout to 10seconds will result in any queries taking more than 10 seconds to failwith the following exception:Exception thrown: java.sql.SQLException: A communications error has been detected: Read timed out.java.sql.SQLException: A communications error has been detected: Read timed out. at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:46) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:345) at org.apache.derby.client.am.Statement.executeQuery(Statement.java:414) at LoginTimeout.main(LoginTimeout.java:53)Caused by: org.apache.derby.client.am.DisconnectException: A communications error has been detected: Read timed out. at org.apache.derby.client.net.NetAgent.throwCommunicationsFailure(NetAgent.java:408) at org.apache.derby.client.net.Reply.fill(Reply.java:176) at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Reply.java:215) at org.apache.derby.client.net.Reply.readDssHeader(Reply.java:317) at org.apache.derby.client.net.Reply.startSameIdChainParse(Reply.java:1147) at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(NetStatementReply.java:51) at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(StatementReply.java:40) at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(NetStatement.java:139) at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Statement.java:1341) at org.apache.derby.client.am.Statement.flowExecute(Statement.java:1977) at org.apache.derby.client.am.Statement.executeQueryX(Statement.java:420) at org.apache.derby.client.am.Statement.executeQuery(Statement.java:405) ... 1 moreCaused by: java.net.SocketTimeoutException: Read timed out at java.net.SocketInputStream.socketRead0(Native Method) at java.net.SocketInputStream.read(SocketInputStream.java:129) at org.apache.derby.client.net.Reply.fill(Reply.java:174) ... 11 more   ,0
2030,'set schema sys' followed by 'show tables' does not show tables in sys schema    If you create a new database in IJ  followed by 'set schema sys' and then 'show tables'  ij shows no tables in the schema. This is because ij's show tables command only shows system tables if a schema is provided.   ,0
2037,provide checking tool to flag possible errors in message translations    It would be useful to have a tool available that flags possible translation file issues  such as: missing translations for (new) English messages mismatched parameters between English and non-English messages translation of keywords quoting problems (i.e. use of double quotes when single quotes should be used  use of single quotes when double quotes should be used. This is based on what's described in the MessageFormat api doc) mismatched characters such as &lt; (when meaning smaller than)  &gt; (when meaning larger than)  % etc. identification of invalid characters  specifically characters in the range of 0x00-0x1f (which are ASCII) and 0x7f-0xffNote that such a tool cannot be definite (except about the missing messages) because the English messages are not following very strict formatting  and because what's acceptable syntax/grammar in one language may not work in another. A discussion about a first cut at such a tool can be found at:http://comments.gmane.org/gmane.comp.apache.db.derby.devel/32187   ,0
2040,Setting derby.database.classpath to contain installed jars causes the database to be unbootable when a Securitymanager is installed.    If the jars are sucessfully installed (without a security manager see DERBY-537) and the class path set then subsequent boots with a security manager fail with a SecurityException due to trying to install a class loader.Related to DERBY-537 but not the same.   ,1
2046,Make class org.apache.derby.iapi.store.raw.PageKey final    The methods of the PageKey class are called frequently both from the lock manager and the cache manager. Since no other classes extend it  it should be declared final to help the run-time compiler optimize the method calls.   ,0
2047,TestDataSourceFactory doesn't work correctly outside the old harness    TestDataSourceFactory uses TestUtil to create DataSource  ConnectionPoolDataSource and XADataSource objects. TestUtil needs to run in the old harness in order to detect which framework it is running under  so it will create embedded data sources for all JUnit tests that are run outside the old harness.   ,0
2048,LangScripts JUnit test fails in views.sql    LangScripts JUnit test fails in views.sqlThere was 1 failure:1) views(org.apache.derbyTesting.functionTests.tests.lang.LangScripts )junit.framework.ComparisonFailure: Output at line 104 expected:&lt;...T1' because VIEW 'SV&#91;1&#93;' is dependent on th...&gt; but was:&lt;...T1' because VIEW 'SV&#91;2&#93;' is dependent on th...&gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:100) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:117) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:76) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)FAILURES!!!Tests run: 2016  Failures: 1  Errors: 0Some observations:If org.apache.derbyTesting.functionTests.tests.lang.LangScripts is used to run views.sql as a single test  then it ran smoothly without a problem..Time: 7.109OK (1 test)But if views.sql is run as part of a suite  then the ordering diff occurs.   ,0
2052,JDBC.assertRowInResultSet compares the wrong value if using trimmed strings and a SMALLINT column exists.    There is a bug in assertRowInResultSet where a path through the loop does not set the variable obj.This leads to it being compared with the previous value.Using locally scoped variables within the loop would have most likely caught this bug at development time.Then the compiler sees that obj has one uninitialzed path through the code and throws an error.   ,0
2054,Rewrite 'derbynet/SuicideOfStreaming' to a JUnit test    The test 'derbynet/SuicideOfStreaming' should be rewritten to a JUnit test more in line with our newly created test system.It is one of the last tests still being run from the deprecated 'tests/junitTests/' directory  through a wrapper class.   ,0
2074,NullPointerException when two threads load sort factory concurrently    12:34:45 323 ERROR &#91;pool-1-thread-3&#93; history.helpers.HistoryDataAccessHelper - failed to read measurements  filter = (fromTime=Mon Nov 06 12:34:00 MSK 2006  toTime=Mon Nov 13 12:34:00 MSK 2006    properties=2-6-2-value) org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL &#91;SELECT COUNT(DISTINCT sshis.measurement_time) FROM sshis_property_measurement sshis INNER JOIN sstmp_filter_3 filtertbl ON sshis.property_id = filtertbl.property_id WHERE sshis.measurement_time &gt;= ? AND sshis.measurement_time &lt; ?&#93;; SQL state &#91;XJ001&#93;; error code &#91;0&#93;; Java exception:': java.lang.NullPointerException'.; nested exception isorg.apache.derby.impl.jdbc.EmbedSQLException: Java exception: ': java.lang.NullPointerException'.java.lang.NullPointerException at java.util.Hashtable.put(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.registerAccessMethod(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByImpl(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createSort(UnknownSource) at org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter(Unknown Source) at org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source) at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:535) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:476) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:528) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:561) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:579) at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:589) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:619) at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:629) at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:656) at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.MeasurementsSaveGetHelper.getMeasurements(MeasurementsSaveGetHelper.java:81) at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.HistoryDataAccessHelper$7.doInTransaction(HistoryDataAccessHelper.java:315) at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.HistoryDataAccessHelper$7.doInTransaction(HistoryDataAccessHelper.java:314) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:117) at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.HistoryDataAccessHelper.getMeasurements(HistoryDataAccessHelper.java:313) at com.meshnetics.wsn.ctrl.dispatcher.services.history.asyncread.MeasurementsReadTask.executeTask(MeasurementsReadTask.java:127) at com.meshnetics.wsn.ctrl.dispatcher.services.history.asyncread.MeasurementsReadTask.run(MeasurementsReadTask.java:97) at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) at java.util.concurrent.FutureTask.run(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) at java.lang.Thread.run(Unknown Source)   ,0
2079,store/BootAllTest.junit fails on wctme5.7 foundation  on 10.2    Fails on 10.2. wctme5.7 foundation                 Diff file derbyall/storeall/storemore/BootAllTest.diff             Start: BootAllTest jdkJ2ME Foundation Specification v1.0 storeall:storemore 2006-11-04 03:55:56 ***0 add&gt; .E&gt; There was 1 error:&gt; 1) testSettingBootAllPropertyWithHomePropertySet(org.apache.derbyTesting.functionTests.tests.store.BootAllTest)java.lang.NoClassDefFoundError: java.sql.DriverManager&gt; FAILURES!!!&gt; Tests run: 1  Failures: 0  Errors: 1Test Failed. End: BootAllTest jdkJ2ME Foundation Specification v1.0 storeall:storemore 2006-11-04 03:56:14 ***   ,0
2103,After a Lexical Error due to syntax error      even a simple create table does not work  on the same connection.    connect 'jdbc:derby:wombat;create=true';create table t1(a int ) ;create table 't2'(a int ) ;&#8211; this should fail. create table foo (a int   /'YEAR/' int ) ;&#8211; but this should not fail. But failingcreate table t4 ( b int ) ;FYI:$ java org.apache.derby.tools.ijij version 10.3ij&gt; run 'weird1.sql';ij&gt; connect 'jdbc:derby:wombat;create=true';ij&gt; create table t1(a int ) ;0 rows inserted/updated/deletedij&gt; create table 't2'(a int ) ;0 rows inserted/updated/deletedij&gt; &#8211; this should fail.create table foo (a int   /'YEAR/' int ) ;ERROR 42X02: Lexical error at line 2  column 28. Encountered: '' (92)  after: ''.ij&gt; &#8211; but this should not fail. But failingcreate table t4 ( b int ) ;ERROR 42X01: Syntax error: Encountered '' at line 2  column 21.ij&gt;   ,0
2108,Implement SSL/TLS communication between client and server    Implement SSL/TLS communication between client and server   ,1
2114,Let Clock embed a HashMap rather than inherit from Hashtable    Clock currently inherits from Hashtable  but the use of Hashtable is really an implementation detail that would benefit from being hidden as private member. All access to the hashtable happens inside sychronized blocks so it is safe to substitute a HashMap. This change appears to trigger a small increase in throughput  as measured by the average TPS number obtained by running the select client from DERBY-1961 repeatedly.   ,0
2116,Test files missing svn:eol-style    The following files don't have the svn:eol-style property:functionTests/harness/ibm15.javafunctionTests/tests/i18n/MessageBundleTest.javafunctionTests/tests/store/LogDeviceTest.javafunctionTests/tests/storetests/st_derby1189.sqlfunctionTests/tests/tools/IJRunScriptTest.javajunit/SystemPropertyTestSetup.java   ,0
2117,Intermittent failure in lang/compressTable.sql    lang/compressTable.sql has failed a number of times in the nightly regression tests. The diffs vary slightly:http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/476241-derbylang_diff.txthttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/CYGWIN_NT-5.1_i686-unknown/476241-derbyall_diff.txt                 Diff file derbylang/derbylang/compressTable.diff             Start: compressTable jdk1.5.0_07 derbylang:derbylang 2006-11-17 20:10:12 ***1318 del&lt; T1 |1 |2 1318a1318&gt; T1 |3 |0 Test Failed. End: compressTable jdk1.5.0_07 derbylang:derbylang 2006-11-17 20:10:39 ***    http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/CYGWIN_NT-5.1_i686-unknown/476584-derbyall_diff.txt                 Diff file derbyall/derbylang/compressTable.diff             Start: compressTable jdk1.5.0_05 derbyall:derbylang 2006-11-18 23:07:44 ***1318 del&lt; T1 |1 |2 1318a1318&gt; T1 |2 |1 Test Failed. End: compressTable jdk1.5.0_05 derbyall:derbylang 2006-11-18 23:08:11 ***   ,0
2118,Change some boundary checks in ArrayInputStream to ASSERTs to improve performance    Profiling shows that a significant amount of CPU is spent doing boundary checking in ArrayInputStream.setPosition() and ArrayInputStream.setLimit(). These checks appear to be there to detect error conditions  so it seems more appropriate to make them ASSERTs. Especially since they are so expensive.DTrace analysis seems to confirm that these methods get called very frequently:Knut Anders Hatlen wrote the following in a message on derby-dev:FYI  I just ran the DERBY-1961 test clients and traced them with aDTrace script that printed how often each method was called. For thejoin client  ArrayInputStream.setPosition() was the most frequentlycalled method (43837.7 calls/tx). For the single-record select client it was third (58.4 calls/tx)  only beaten by Object.&lt;init&gt;() andDDMWriter.ensureLength(). I think this means that setPosition() is theengine method that is most frequently called  at least in read-mostlytransactions. ArrayInputStream.setLimit() also appeared near the topof the list. See http://wiki.apache.org/db-derby/Derby1961MethodCallsfor the details.   ,0
2134,Add long running System test for Derby    I will use this place to add 2 long running system tests for Derby.   ,0
2149,Replace Vectors and Hashtables with ArrayLists and HashMaps in RAMTransaction    In org.apache.derby.impl.store.access.RAMTransaction  synchronized collection objects could be replaced with unsynchronized ones. See discussion here: http://www.nabble.com/Use-of-synchronized-containers-in-engine-code-tf2754469.html   ,0
2150,Reduce use of synchronized collections in GenericLanguageConnectionContext    In org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext  it is probably safe to replace some of the synchronized collections with unsynchronized ones. This should be investigated  and the unnecessary synchronization should be removed. See discussion here: http://www.nabble.com/Use-of-synchronized-containers-in-engine-code-tf2754469.html   ,0
2153,suites.All falls over with foundation after revision 482433; java.lang.NoClassFoundError: javax.xml.parsers.DocumentBuilderFactory    When attempting to run:&lt;j9binpath&gt;/j9 -jcl:foun10 -Dderby.system.home=&lt;testhome&gt; -DderbyTesting.serverhost=localhost -DderbyTesting.clienthost=localhost -DderbyTesting.codeclasses=file:/&lt;classesdir&gt;/ -DderbyTesting.junit=file://unused -DderbyTesting.antjunit=file://unused -Djava.security.policy=file:/&lt;classesdir&gt;/org/apache/derbyTesting/functionTests/util/derby_tests.policy -Xbootclasspath/a:&lt;j9libpath&gt;/jdbc.jar -cp &lt;classesdir&gt;;junit.jar junit.textui.TestRunner org.apache.derbyTesting.functionTests.suites.All The textui.TestRunner keels over with the following error:Failed to invoke suite():java.lang.NoClassDefFoundError: javax.xml.parsers.DocumentBuilderFactoryThis happens after  but not before revision 482433.   ,0
2156,message XSDB8 and 42Y32 have references to db2j    trunk/messages.xml shows two messages that incorrectly refer to db2j:42Y32=Aggregator class ''{0}'' for aggregate ''{1}'' on type {2} does not implement com.ibm.db2j.aggregates.Aggregator. There is now no class Aggregator in Derby. This message is generated from the class: org.apache.derby.impl.sql.compile.AggregateNode.java. private void checkAggregatorClassName(String className) throws StandardException { className = verifyClassExist(className  false); if (!classInspector.assignableTo(className  'org.apache.derby.iapi.sql.execute.ExecAggregator')) { throw StandardException.newException (SQLState.LANG_BAD_AGGREGATOR_CLASS2  className  aggregateName  operand.getTypeId().getSQLTypeName()); } }The original in Cloudscape had a reference to an Aggregator class  the if looked like this: if (!classInspector.assignableTo(className  'com.ibm.db2j.aggregates.Aggregator') &amp;&amp; !classInspector.assignableTo  (className  'com.ibm.db2j.protocol.Database.Language.Execution.ExecAggregator')) { throw StandardException.newException(SQLState.LANG_BAD_AGGREGATOR_CLASS2   ....Maybe the message now needs to mention org.apache.derby.iapi.sql.execute.ExecAggregator?But  I think maybe this message cannot be obtained unless someone introduces a bug within the Derby code. I think the reference to another internal class should be removed. Or maybe the text of Cloudscape message 42Y31 can be used: 42Y31=LANG_BAD_AGGREGATOR_CLASS='Aggregator class ''{0}'' for aggregate ''{1}'' on type {2} is inaccessable or does not exist.'XSDB8.D=DATA_MULTIPLE_JBMS_FORCE_LOCK ='WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active. Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time. The db2j.database.forceDatabaseLock=true property has been set  so the database will not boot until the db.lck is no longer present. Normally this file is removed when the first instance of Derby to boot on the database exits  but it may be left behind in some shutdowns. It will be necessary to remove the file by hand in that case. It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand.'John Embretsen commented on this in DERBY-1838:https://issues.apache.org/jira/browse/DERBY-1838#action_12434090Indicating that not only should the message refer to derby.database.forceDatabaseLock  but the replacement of parameters is not happening either. But I can not find a place where this message is generated  so maybe it can just be removed.   ,0
2183,Trigger recompilation problem when trigger action has its table not qualified with a schema    Trigger recompilation problem when trigger action has its table not qualified with a schema.SPSs in SYS.SYSSTATEMENTS get invalidated for recompilation when sqlj.install_jar  sqlj.remove_jar  sqlj.replace_jar are called  or when a database upgrade is performed. The problem arises when the trigger action statement does not qualify the table with an explicit schema name. During recompilation it uses the default schema instead of using the original schema that was persisted in SYS.SYSSTATEMENTS causing an exception to occur. e.g.:C:/derby/trunk&gt;java -classpath classes;. org.apache.derby.tools.ijij version 10.3ij&gt; connect 'jdbc:derby:wombat;create=true';ij&gt; create table app.t1 (i int  j int);0 rows inserted/updated/deletedij&gt; insert into app.t1 values (1 10);1 row inserted/updated/deleted&#8211; notice trigger action's update statement did not qualify table t1 with a schema nameij&gt; create trigger app.tr1 after update of i on app.t1 update t1 set j = 1;0 rows inserted/updated/deletedij&gt; update app.t1 set i=i+1;1 row inserted/updated/deletedij&gt; select * from app.t1;I |J-----------------------2 |11 row selected&#8211; this action invalidates the SPS and mark for recompilationij&gt; call sqlj.install_jar('c:/derby/procs/Procs.jar'  'APP.Procs'  0);0 rows inserted/updated/deletedij&gt; disconnect;ij&gt; connect 'jdbc:derby:wombat' user 'user1';&#8211; recompilation occurs but uses 'USER1' as the schema to compile instead of 'APP'  resulting in errorij&gt; update app.t1 set i=i+1;ERROR 42Y07: Schema 'USER1' does not existij&gt;   ,0
2195,Nested triggers not working properly after maximum trigger count exception is thrown    After the maximum allowed nested trigger exception is thrown  subsequent statement that result in nested trigger execution may result in the same error again even though it does not exceed the limit of nested triggers(16).e.g.:C:/derby/trunk&gt;java -classpath classes;. org.apache.derby.tools.ijij version 10.3ij&gt; connect 'jdbc:derby:wombat;create=true';ij&gt; create table t1 (i int);0 rows inserted/updated/deletedij&gt; insert into t1 values 1 2 3;3 rows inserted/updated/deletedij&gt; create trigger tr1 after update on t1 for each row update t1 set i=i+1;0 rows inserted/updated/deleted&#8211; force the 'maximum depth of nested triggers' error to occurij&gt; update t1 set i=i+1;ERROR 54038: Maximum depth of nested triggers was exceeded.ij&gt; drop trigger tr1;0 rows inserted/updated/deletedij&gt; create trigger tr1 after update on t1 referencing old as oldt for each row update t1 set i=i+1 where oldt.i=2;0 rows inserted/updated/deleted&#8211; this should have executed successfully instead of throwing the same error again!ij&gt; update t1 set i=i+1;ERROR 54038: Maximum depth of nested triggers was exceeded.ij&gt; disconnect;ij&gt; connect 'jdbc:derby:wombat';ij&gt; select * from t1;I-----------1233 rows selected&#8211; ok after reconnection  it looks like the trigger execution context(TEC) may not have been cleanup properly in the previous connectionij&gt; update t1 set i=i+1;3 rows inserted/updated/deletedij&gt; select * from t1;I-----------4563 rows selectedij&gt;   ,0
2200,Add performance tests to Derby using the junit perf framework    There is a simple performance junit framework that has been added as part of derby-1970. There are a number of improvements suggested for derby-1970  please see DERBY-1970.This jira is to add new performance tests to derby so that these tests are easily available for anyone to run   report issues  fix issues etc..   ,0
2202,DROP PROCEDURE depends on SET SCHEMA    This is possibly related to Bug https://issues.apache.org/jira/browse/DERBY-1304.Use ij to execute the following statements:CREATE SCHEMA datamgmt;CREATE PROCEDURE datamgmt.exit ( IN value INTEGER ) MODIFIES SQL DATA PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME 'java.lang.System.exit';DROP PROCEDURE datamgmt.exit;DROP SCHEMA datamgmt RESTRICT;Then execute exactly the same lines once again. Then statement 'DROP PROCEDURE datamgmt.exit' yields:ERROR 42X94: PROCEDURE 'EXIT' does not exist.However  if the DROP works if a default schema (SET SCHEMA) is used instead of the prefixed schemaName. That is  the following lines can be executed more than once in a row:CREATE SCHEMA datamgmt;CREATE PROCEDURE datamgmt.exit ( IN value INTEGER ) MODIFIES SQL DATA PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME 'java.lang.System.exit';SET SCHEMA datamgmt;DROP PROCEDURE exit;DROP SCHEMA datamgmt RESTRICT;Therefore  SET SCHEMA can be used as a workaround  hence minor importance.   ,0
2211,java/testing/README.htm needs to be updated with information on JUnit tests    Currently  the testing readme at java/testing/README.htm does not contain any information on running or developing Derby junit tests. This document should at least be updated with information on how to run Derby's junit tests. A description of the top-level suites and running the Ant junitreport target would be a good start.   ,0
2220,Uncommitted transactions executed throught XAResource will held locks after the application terminates (or crashes during the transaction).    Using this piece of code derby will not release a table lock of 'dummy' table. String query = 'insert into dummy (field1) values ('' + Integer.toString(value) + '')'; XAConnection xaConnection = createXAConnection('jdbc:derby://localhost:1527/TestDB'  ''  ''); XAResource xaResource = xaConnection.getXAResource(); conn = xaConnection.getConnection(); Xid xid = createXid(value);  xaResource.setTransactionTimeout(10); xaResource.start(xid  XAResource.TMNOFLAGS); Statement statement = conn.createStatement(); statement.execute(query);  // terminate the client application // this will not release any locks System.exit(0);   ,0
2222,'show indexes in SCHEMANAME' does not work with the client driver    The ij command 'show indexes in SCHEMANAME' does not work at all with the client driver.It does work with the embedded driver.Sample output from ij:ij&gt; connect 'jdbc:derby://localhost/myDB;create=true';ij&gt; create table test (id int primary key);0 rows inserted/updated/deletedij&gt; show indexes in app;ERROR XJ103: Table name can not be nullij&gt; show indexes from test;TABLE_NAME |COLUMN_NAME |NON_U&amp;|TYPE|ASC&amp;|CARDINA&amp;|PAGES----------------------------------------------------------------------------TEST |ID |0 |3 |A |NULL |NULL1 row selectedij&gt; show indexes from app.test;TABLE_NAME |COLUMN_NAME |NON_U&amp;|TYPE|ASC&amp;|CARDINA&amp;|PAGES----------------------------------------------------------------------------TEST |ID |0 |3 |A |NULL |NULL1 row selectedij&gt;Using delimited table and/or schema names does not work  but I think this is according to documentation.I.e.:ij&gt; show indexes from 'TEST';ERROR 42X01: Syntax error: Encountered 'show' at line 1  column 1.ij&gt; show indexes from 'APP'.test;ERROR 42X01: Syntax error: Encountered 'show' at line 1  column 1.ij&gt; show indexes from 'APP'.'TEST';ERROR 42X01: Syntax error: Encountered 'show' at line 1  column 1.ij&gt;   ,0
2223,Let BasePage.fetchFieldFromSlot use the special single-col FetchDescriptor ctor    BasePage.fetchFieldFromSlot needs to construct a FetchDescriptor with single column. To do this it creates a FormatableBitSet that identifies the correct column and then passes this bitset to the FetchDescriptor constructor. But FetchDescriptor has a special constructor for the single column case  that doesn't need a bitset. Using this constructor instead makes the code simpler  and presumably more efficient as well.   ,0
2224,Test harness should support J2ME 1.1    I would like to enable the 'old' test harness to support the new version of IBM's j2ME implementation  which is based on j2ME jdk spec version 1.1. This is available with a product named Websphere Everyplace Micro Edition 6.1. from IBM.We already support j9_foundation  which matches to j2ME jdk spec 1.0. I'd like to add j9_foundation11  which then matches to j2ME jdk spec 1.1.I'm proposing to switch my automated tests over to the newer version going forward  and to minimize complexity of the change  I'd like to make the canons reflect behavior of the new version. The differences are minimal. However  I want to be able to still run with the old (except where the results differ  failures would occur with the old version).One of the reasons for moving to the new version is that there is a bug with the older version in regards to security manager  preventing a smooth run of the junit tests  and I'd like to run all short-running tests (suites.All and derbyall) with at least one of the versions. Another reason is that the j2ME spec 1.0 is really old.   ,0
2241,compatibilitytest fails after DERBY-2121 change.    Client-server compatibility testing with JVM 1.3 is not relevant on trunk/10.3 following DERBY-2121See e.g. http://dbtg.thresher.com/derby/test/tinderbox_trunk15/jvm1.5/testing/Limited/testSummary-495558.htmlhttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/Limited/testSummary-495683.html   ,0
2254,Assert during log file switch: log file position exceeded max log file size    When running simple tpc-b like transactions against a embedded Derby based on a SANE build of trunk the following assertion occurs for the background thread and all user threads: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED log file position exceeded max log file sizeThis seems to occur during a switch to a new log file.derby.log contains the following call stack for the background thread:Exception trace: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED log file position exceeded max log file size at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120) at org.apache.derby.impl.store.raw.log.LogCounter.makeLogInstantAsLong(LogCounter.java:120) at org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile(LogToFile.java:1900) at org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(LogToFile.java:3530) at org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(FileLogger.java:345) at org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Xact.java:1185) at org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(LogToFile.java:1540) at org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(LogToFile.java:1357) at org.apache.derby.impl.store.raw.RawStore.checkpoint(RawStore.java:439) at org.apache.derby.impl.store.raw.log.LogToFile.performWork(LogToFile.java:3416) at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(BasicDaemon.java:331) at org.apache.derby.impl.services.daemon.BasicDaemon.work(BasicDaemon.java:668) at org.apache.derby.impl.services.daemon.BasicDaemon.run(BasicDaemon.java:394) at java.lang.Thread.run(Thread.java:619)2007-01-17 23:09:48.638 GMT Thread&#91;derby.rawStoreDaemon 5 derby.daemons&#93; Cleanup action startingorg.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED log file position exceeded max log file size at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120) at org.apache.derby.impl.store.raw.log.LogCounter.makeLogInstantAsLong(LogCounter.java:120) at org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile(LogToFile.java:1900) at org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(LogToFile.java:3530) at org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(FileLogger.java:345) at org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Xact.java:1185) at org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(LogToFile.java:1540) at org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(LogToFile.java:1357) at org.apache.derby.impl.store.raw.RawStore.checkpoint(RawStore.java:439) at org.apache.derby.impl.store.raw.log.LogToFile.performWork(LogToFile.java:3416) at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(BasicDaemon.java:331) at org.apache.derby.impl.services.daemon.BasicDaemon.work(BasicDaemon.java:668) at org.apache.derby.impl.services.daemon.BasicDaemon.run(BasicDaemon.java:394) at java.lang.Thread.run(Thread.java:619)Cleanup action completedFor my user threads the call stack is similar:Database Class Loader started - derby.database.classpath=''2007-01-17 23:09:36.401 GMT Thread&#91;Thread-51 5 main&#93; (XID = 12632406)  (SESSIONID = 51)  (DATABASE = /export/home/tmp/derby-db)  (DRDAID = null)  Cleanup action starting2007-01-17 23:09:36.401 GMT Thread&#91;Thread-51 5 main&#93; (XID = 12632406)  (SESSIONID = 51)  (DATABASE = /export/home/tmp/derby-db)  (DRDAID = null)  Failed Statement is: UPDATE accounts SET abal = abal + ? WHERE aid = ? AND bid = ?org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED log file position exceeded max log file size at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120) at org.apache.derby.impl.store.raw.log.LogCounter.makeLogInstantAsLong(LogCounter.java:120) at org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile(LogToFile.java:1900) at org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(LogToFile.java:3530) at org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(FileLogger.java:345) at org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Xact.java:1185) at org.apache.derby.impl.store.raw.data.LoggableActions.doAction(LoggableActions.java:221) at org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:85) at org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8521) at org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(BasePage.java:1108) at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(GenericConglomerateController.java:479) at org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(RowChangerImpl.java:523) at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:566) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:260) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:358) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1182) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at com.sun.derby.perf.clients.tpcb.DBConnection.performTransaction(DBConnection.java:595) at com.sun.derby.perf.clients.tpcb.Client.run(Client.java:218)After this it seems like no user threads are able to connect to the database (not surpricing).This happend using a SANE build and I am unsure by just looking at the assertion in the code whether this situation would have been fatal also if I had been using an INSANE build.   ,1
2258,DatabaseMetaData.getTypeInfo() does not list supported Derby SQL types correctly.    These types are returned but not supported by Derby.LONG NVARCHARNATIONAL CHARNATIONAL CHAR VARYINGThe XML type is supported by Derby but not returned.   ,0
2262,DatabaseMetaData.getTypeInfo returns incorrect MAXIMUM_SCALE value for DECIMAL and NUMERIC types    Maximum scale is returned as 32767 but maximum scale for numerics is 31.   ,0
2265,bad logic in jvm:guessWSHome() in old test harness affects j9 runs    Running derbyall using either wcmte5.7_foundation or weme6.1 results in the following stack trace.Exception in thread 'main' java.lang.StringIndexOutOfBoundsException at java.lang.String.substring(String.java:1043) at org.apache.derbyTesting.functionTests.harness.jvm.guessWSHome(jvm.java:301) at org.apache.derbyTesting.functionTests.harness.jvm.getSecurityProps(jvm.java:356) at org.apache.derbyTesting.functionTests.harness.jvm.setSecurityProps(jvm.java:336) at org.apache.derbyTesting.functionTests.harness.RunTest.buildTestCommand(RunTest.java:2350) at org.apache.derbyTesting.functionTests.harness.RunTest.testRun(RunTest.java:498) at org.apache.derbyTesting.functionTests.harness.RunTest.main(RunTest.java:368)I think this code was not reached until various security related changes recently  but the code is just bad.I think this code was used at one point to attempt to kick off another jvm to run a server with  but that is now defunct.Rather than try to make the code work  or try to clean it up  I'd rather spend time converting tests to the junit framework  so I will just fix this up so we don't hit the error.The bad code is:  wshome = jhome.substring(0 jhome.indexOf(sep + 'jre')); wshome = wshome.substring(0 wshome.lastIndexOf(sep));If the jhome ( System.getProperty('java.home')) does not contain 'jre'  we will get -1 as the 2nd parameter in jhome.substring  and thus cause the ArrayIndexOutOfBounds.I propose to fix this piece of code as follows: int havejre=jhome.indexOf(sep + 'jre'); if (havejre &gt; 0) { wshome = jhome.substring(0 jhome.indexOf(sep + 'jre')); wshome = wshome.substring(0 wshome.lastIndexOf(sep)); } else wshome = jhome.substring(0 jhome.lastIndexOf(sep));   ,1
2268,AccessControlException when exiting junit.swingui.TestRunner    When the JUnit tests are run with junit.swingui.TestRunner  one gets the following exception when the test runner window is closed:Exception in thread 'AWT-EventQueue-0' java.security.AccessControlException: access denied (java.io.FilePermission /home/kh160127/.junitsession write)   ,1
2278,Add a generic utility tool to drive the Order Entry load phase.    Add a generic utility program that can take in the driver name and the database connection url to populate the order entry database. Currently the load phase for OE is completed and hence this driver program should allow one to be able to populate the database.Maybe once OE run is completed  we can add the driving of the transactions also. This driver can be in org.apache.derbyTesting.system.oe.runsee DERBY-1987 and sub-tasks for details.   ,0
2294,Missing sql script: '/org/apache/derbyTesting/functionTests/tests/lang/altertableDropColumn.sql'    Seen since svn r503550 2007-02-05 06:02:19 CET.First occurence in http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-503550.html .Also in http://dbtg.thresher.com/derby/test/Daily/jvm1.5/testing/Limited/testSummary-503767.html (all platforms except windows!?).derbyall/derbyall_fail.txt shows:------------------------------------------derbyall/derbyall:derbylang.fail:lang/altertableDropColumn.sql derbyall/derbyall_diff.txt does not show a diff.butderbyall.sum shows:---------------------------     Start: altertable jdk1.6.0 derbyall:derbylang 2007-02-05 06:38:55 *** End: altertable jdk1.6.0 derbyall:derbylang 2007-02-05 06:39:08 ***Could not locate lang/altertableDropColumn.sqlException in thread 'main' java.io.FileNotFoundException: /org/apache/derbyTesting/functionTests/tests/lang/altertableDropColumn.sql at org.apache.derbyTesting.functionTests.harness.RunTest.setDirectories(RunTest.java:701) at org.apache.derbyTesting.functionTests.harness.RunTest.main(RunTest.java:266)    On windows I found that derbyall.sum contained:-----------------------------------------------------------------     Start: altertable jdk1.5.0_07 derbyall:derbylang 2007-02-05 19:21:24 *** End: altertable jdk1.5.0_07 derbyall:derbylang 2007-02-05 19:21:55 ***Could not locate lang/altertableDropColumn.sqlException in thread 'main' java.io.IOException: The filename  directory name  or volume label syntax is incorrect at java.io.WinNTFileSystem.canonicalize0(Native Method) at java.io.Win32FileSystem.canonicalize(Win32FileSystem.java:395) at java.io.File.getCanonicalPath(File.java:531) at org.apache.derbyTesting.functionTests.harness.RunTest.addToListFile(RunTest.java:2187) at org.apache.derbyTesting.functionTests.harness.RunTest.addToFailures(RunTest.java:2159) at org.apache.derbyTesting.functionTests.harness.RunTest.setDirectories(RunTest.java:700) at org.apache.derbyTesting.functionTests.harness.RunTest.main(RunTest.java:266)   ,0
2315,compatibility/testScript.xml should include 10.2.2 in the server/client combinations    Add SERVER_10.2.2.0 and CLIENT_10.2.2.0 in the combinations to be tested.   ,0
2316,Convert compatibility/testScript.xml to JUnit    I have started converting compatibility/testScript.xml to JUnit to1) be able to more dynamically specify which combinations to test  2) get standard JUnit reports from the test  and3) more easily include the compatibility test in the regression test runs.I plan to use a property file (patterened after the current ant.property file for the compatibility test)  to specify jvm and derby library locations.With the growing number of jvm and derby versions I also think that it should be possible to specify a number of different kinds of compatibility test combinations for example:a) the current way  which is all combinations of derby and jvm on both  server and client. &#91;(derbys*jvms)*(derbys*jvms)&#93;b) Current trunk client and jvms vs. all server derbys and jvms. &#91;(1*jvms)*(derbys*jvms)&#93;c) All clients and jvms vs. current trunk server and jvms. &#91;(derbys*jvms)*(1*jvms)&#93;d) Exact specification of the combinations to be tested. &#91;(N*M)*(X*Y)&#93;Which kind of test to run should be specified in the property file.   ,0
2339,org.apache.derbyTesting.functionTests.suites.All is extremely CPU intensive since ~svn 507489    Run org.apache.derbyTesting.functionTests.suites.All.http://www.nabble.com/org.apache.derbyTesting.functionTests.suites.All-is-extremely-CPU-intensive%21-tf3230539.htmlSee e.g. http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-507489.htmlhttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/Limited/testSummary-507650.htmlThese logs also include thread dumps.   ,0
2349,Accessing a BLOB column twice in an INSERT trigger leads to errors in the value on-disk    Either the BLOB is stored with the incorrect value or the value on disk does not match the stored length on disk and an exception is raised. The BLOB was supplied as a stream value.See this with the new TriggersTest. The text fixture will have a comment with this bug number showing how to reproduce the problem.   ,0
2350,Use of XML values in the action statement of a trigger throw exceptions.    A trigger like  where V  V1 and V2 are columns of type XML will thrown an exception when fired.CREATE TRIGGER AIS AFTER INSERT ON T_MAIN  REFERENCING NEW_TABLE AS N FOR EACH STATEMENT  INSERT INTO T_ACTION_STATEMENT(A  V1  ID  V2)  SELECT 'I'  V  ID  V FROM NERROR 38000: The exception 'java.sql.SQLException: An attempt was made to get a data value of type 'java.lang.Object' from a data value of type 'XML'.' was thrown while evaluating an expression.Most likely because triggers are implementing using VTIs and hence JDBC ResultSets and XML is not supported through JDBC yet.TriggerTest shows this issue  see the comment with the bug number to reproduce.   ,0
2351,ORDER BY with expression with distinct in the select list returns incorrect result    When distinct is in the select list and the query has order by with expression  the resultset produced contains an additional column. ij&gt; create table t1 (c1 int  c2 varchar(10))0 rows inserted/updated/deletedij&gt; insert into t1 values (1 'a') (2 'b') (3 'c');3 rows inserted/updated/deletedselect distinct c1  c2 from t1 order by c1;C1 |C2----------------------1 |a2 |b3 |c3 rows selectedij&gt; select distinct c1  c2 from t1 order by c1+1;C1 |C2 |3 &lt;=====returns 3 columns  incorrect result returned----------------------------------1 |a |22 |b |33 |c |43 rows selected   ,0
2354,Unable to perform select query using DISTINCT on a read-only database    It is not possible to perform queries using DISTINCT on a read-only database packaged in a zip file. This generates the following error:ERROR 40XD1: Container was opened in read-only mode.  at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseContainer.use(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(Unknown Source) at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Unknown Source) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(Unknown Source) at org.apache.derby.impl.store.raw.xact.Xact.addContainer(Unknown Source) at org.apache.derby.impl.store.access.heap.Heap.create(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(Unknown Source) at org.apache.derby.iapi.store.access.DiskHashtable.&lt;init&gt;(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.add_row_to_hash_table(Unknown Source) at org.apache.derby.iapi.store.access.BackingStoreHashtable.put(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeScan.fetchSet(Unknown Source) at org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createBackingStoreHashtableFromScan(Unknown Source) at org.apache.derby.impl.sql.execute.HashScanResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(Unknown Source) at DerbyTest.main(DerbyTest.java:29)The problem can be reproduced using the attached java program and the following database file:http://ftp2.bigcat.unimaas.nl/~thomas.kelder/derbytest/testdb.zip.Both the 'derby.storage.tempDirectory' and 'derby.stream.error.file' properties are set to writable locations  as advised in the help file.Also see derby-user mailing list thread: http://article.gmane.org/gmane.comp.apache.db.derby.user/6123'This appears to be a bug  possibly a regression. When I converted yourDB to10.0 everything worked fine even when I did NOT set the propertiesfor tempDirectory and error.file (hmmm..). When I switched to using the10.1 or 10.2 jars and accessed the very same database the 40XD1 ERRORhappened.' (Stanley Bradbury)   ,0
2359,Code cleanups for the org.apache.derby.impl.store.access.* packages    When trying to learn more about the access layer  it was discovered that some code improvements could easily be made to increase the readability of the code.Patches attached to this issue will be cleanup patches only  and no functionality should be changed. Changes the will/may be made: remove unused imports remove unused methods fix JavaDoc errors tighter encapsulation and removal of unused variables where appropriate   ,0
2368,Modify compatibility/testScript.xml to not run embedded/jvm1.3 case any more - not valid after r509863    After svn r509863(DERBY-1983 Remove some uses of java13compile.classpath that do not require code changes.) the 'compatibility test' for embedded/jvm1.3 should be removed.ERROR XBM02: Startup failed due to missing functionality for org.apache.derby.iapi.types.DataValueFactory. Please ensure your classpath includes the correct Derby software.compatibility diff -------------------------------------------------------------                 Start: embedded_VM-1.3java.sql.SQLException: Failed to start database 'compatDB'  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source) at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)Exception in thread 'main' java.lang.Exception: Error lookup up server info: Failed to start database 'compatDB'  see the next exception for details.             End: embedded_VM-1.3    compatibility/embedded_VM-1.3:---------------------------------------------VM Version = 1.3Driver org.apache.derby.jdbc.AutoloadedDriver Version = 10.3java.sql.SQLException: Failed to start database 'compatDB'  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver20.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at java.sql.DriverManager.getConnection(DriverManager.java:512) at java.sql.DriverManager.getConnection(DriverManager.java:141) at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(DerbyJUnitTest.java:378) at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(DerbyJUnitTest.java:357) at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.findServer(CompatibilitySuite.java:283) at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(CompatibilitySuite.java:130)ERROR XBM02: Startup failed due to missing functionality for org.apache.derby.iapi.types.DataValueFactory. Please ensure your classpath includes the correct Derby software. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.missingImplementation(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver20.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at java.sql.DriverManager.getConnection(DriverManager.java:512) at java.sql.DriverManager.getConnection(DriverManager.java:141) at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(DerbyJUnitTest.java:378) at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(DerbyJUnitTest.java:357) at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.findServer(CompatibilitySuite.java:283) at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(CompatibilitySuite.java:130)Exception in thread 'main' java.lang.Exception: Error lookup up server info: Failed to start database 'compatDB'  see the next exception for details. at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.findServer(CompatibilitySuite.java:295) at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(CompatibilitySuite.java:130)   ,0
2370,EXISTS may return the wrong value for sub-queries involving set operations    It seems like EXISTS on a SELECT returning zero rows returns false (asexpected)  but EXISTS on INTERSECT of two disjunct sets returns true e.g EXISTS (values 1 intersect values 2).Yip Ng wrote on derby-dev:I believe its probably got to do with the EXISTS subquery transformingthe original RCL toa TRUE boolean value for the INTERSECT. So during row comparison atexecution timefor INTERSECT processing since true == true(thus intersects)  so itwill always return 'BAD'. Likewise select * from ( values 'OK' ) as T where exists (values 1 except values 2);This supposedly should return 'OK' but because of the booleantransformation mentionedabove for EXISTS subquery  it will return no rows for EXCEPTprocessing.   ,0
2371,Setting a default value for a VARCHAR column fails when column contains data    I'm seeing a problem updating the default value for a VARCHAR column when the column already contains data. I'm  using:alter table TABLE_NAME alter column COL_NAME DEFAULT 'new value'and with some VARCHAR columns I get an error like this:Invalid character string format for type long.; nested exception is java.sql.SQLException: Invalid character string format for type long.Caused by: ERROR 22018: Invalid character string format for type long. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.types.SQLChar.getLong(Unknown Source) at org.apache.derby.impl.sql.execute.AlterTableConstantAction.getColumnMax(Unknown Source) at org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnDefault(Unknown Source) at org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(Unknown Source) at org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(Unknown Source) at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)This only happens on VARCHAR columns containing data. Columns that are entirely NULL update fine. This was discussed on users mailing list:http://www.nabble.com/problem-with-ALTER-COLUMN-DEFAULT-on-VARCHAR-column-tf3274046.htmland the conclusion was that it is related to this statement being run internally as part of the updata process:SELECT MAX(COL_NAME) FROM TABLE_NAME As reported in that discussion:-bash-2.05b$ java org.apache.derby.tools.ijij version 10.3ij&gt; connect 'jdbc:derby:brydb';ij&gt; create table t (a varchar(10));0 rows inserted/updated/deletedij&gt; alter table t alter column a default 'my val';0 rows inserted/updated/deletedij&gt; insert into t (a) values ('hi');1 row inserted/updated/deletedij&gt; alter table t alter column a default 'another val';ERROR 22018: Invalid character string format for type long.   ,0
2381,ParameterMappingTest fails due to ArrayIndexOutOfBoundsException  executing a procedure    The test ParameterMappingTest fails due to a connection reset error during tearDown. Commenting out the teardown actions I see that the real cause of the connection reset is an ArrayIndexOutOfBoundsException executing a callable statement. I have not narrowed it down more than this. Currently the test runs only for embedded. It should be reenabled for client once this bug is fixed. Below is the stack trace:java.lang.ArrayIndexOutOfBoundsException at java.lang.System.arraycopy(Native Method) at org.apache.derby.client.net.Reply.shiftBuffer(Reply.java:107) at org.apache.derby.client.net.Reply.ensureSpaceInBufferForFill(Reply.java:153) at org.apache.derby.client.net.Reply.fill(Reply.java:165) at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Reply.java(Compiled Code)) at org.apache.derby.client.net.Reply.readDssHeader(Reply.java:317) at org.apache.derby.client.net.Reply.peekCodePoint(Reply.java:1008) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:324) at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:105) at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:75) at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:176) at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1464) at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2151) at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1571) at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1556) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testParameterMapping(ParameterMappingTest.java:487) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at java.lang.reflect.Method.invoke(Method.java:391) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:76) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)   ,0
2406,XAResource.end does not set the XA transaction state correctly when the XAException is thrown    As the comments in DERBY-2360 show when calling the XAResource.end the XAException may be thrown even when the transaction was successfully disassociated from the connection but the transaction was marked as rollback only. The code at the end of XAResource.end function does not handle this correctly. It either throws an XAException or sets the connection state to XA_T0_NOT_ASSOCIATED. The corresponding code from NetXAResource.end method is if (rc != XAResource.XA_OK) { throwXAException(rc  false); }else { conn_.setXAState(Connection.XA_T0_NOT_ASSOCIATED); }   ,0
2416,Provide collation sensitive subclasses for SQLChar  SQLVarchar  SQLLongvarchar and SQLClob which will use the passed Collator to do the collation rather than the default collation of UCS_BASIC    This jira entry is one of the tasks involved in implementing DERBY-2336.The existing SQLChar datatype has the Derby's default collation which is UCS_BASIC defined on them. With Derby 10.3  we want to support an additional collation for char datatypes which will be based on the territory. This jira issue is the placeholder for creating subclass of SQLChar which will use the passed Collator to do the collation. The current use of this class in Derby 10.3 will be for territory based collation but this class can be used in future for other kinds of collations like case-insensitive etc.   ,0
2447,ejbql and floattypes in org.apache.derbyTesting.functionTests.tests.lang.LangScripts intermittently fails with 'expected: but was:<[-0.0]  '    Seen intermittently on Linux since 2007-02-27.Seen on Solaris 2007-03-12.&lt;signature&gt;ejbql(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)junit.framework.ComparisonFailure: Output at line 454 expected:&lt;&#91;0.0 &#93; &gt; but was:&lt;&#91;-0.0&#93; &gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:100) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:124) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:80) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/signature&gt;&lt;signature&gt;floattypes(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)junit.framework.ComparisonFailure: Output at line 1823 expected:&lt;&#91;0.0 &#93; &gt; but was:&lt;&#91;-0.0&#93; &gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:100) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:124) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:80) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/signature&gt;   ,0
2450,Clob.Position returning wrong value when operating on Reader       ,0
2456,File stream is left open when an exception occurs while setting up a character stream for data export.    The JUnit test tools/ImportExportTest.java has been failing since it was first contributed with the following error:ImportExportTest:embeddedjunit.framework.AssertionFailedError: extinout/T1.datat org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:102)at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:38)at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:77)at java.security.AccessController.doPrivileged1(Native Method)at java.security.AccessController.doPrivileged(AccessController.java:287)at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:74)at org.apache.derbyTesting.junit.SupportFilesSetup.tearDown(SupportFilesSetup.java:107)at junit.extensions.TestSetup$1.protect(TestSetup.java:20)at junit.extensions.TestSetup.run(TestSetup.java:23)at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)at junit.extensions.TestSetup$1.protect(TestSetup.java:19)at junit.extensions.TestSetup.run(TestSetup.java:23)Also fails with the client  as well. Per the comment posted by Suresh to DERBY-2295  it looks like the cause of this failure is that the 'openFile()' method of java/engine/org/apache/derby/impl/load/ExportWriteData.java does not close the file stream in cases where an invalid encoding is specified.   ,0
2462,org.apache.derby.impl.store.access.BackingStoreHashTableFromScan does not honor ResultSet holdability    After an unrelated statement on the same connection commits  and after some number of successful calls to ResultSet.next()  a subsequent call to ResultSet.next() throws an SQLException with a message like: The heap container with container id Container(-1  1173965368428) is closed. This seems to be related to the hard-coded passing of false to the super in the constructor of org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.Steps to reproduce:1. Execute a statement on a connection that returns a result set.2. Execute a second statement on the same connection that modifies the database and commits.3. Call next() on the first result set until the exception is thrown.Note that the number of rows that can be successfully retrieved from the result set seems to be related to the amount of data per row. Increasing the number of columns in the result set or the length of the columns causes the exception to be taken sooner.The attached test program demonstrates the issue.   ,0
2478,'Invalid transaction state...' in jdbcapi.SetTransactionIsolationTest    See e.g. http://dbtg.thresher.com/derby/test/Daily/jvm1.5/testing/testlog/sles/520949-suitesAll_diff.txt1) testIsolation(org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest)ERROR X0X03: Invalid transaction state - held cursor requires same isolation level at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setIsolationLevel(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.checkIsolationLevelNoTimeout(SetTransactionIsolationTest.java:113) at org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.testIsolation(SetTransactionIsolationTest.java:50) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:80) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;method&gt;org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest&lt;/method&gt;&lt;signature&gt;Invalid transaction state - held cursor requires same isolation level&lt;/signature&gt;   ,0
2480,DriverManager.getConnection leaks memory when connecting to a non-existent database    Repeated calls to java.sql.DriverManager.getConnection('jdbc:derby:C:DOES_NOT_EXIST') leak memory and eventually lead to an OutOfMemoryError.This bug is similar to DERBY-1947 in that ContextManager objects are not getting removed from the HashSet. The attached test program demonstrates the issue. When run with VM options -Xms8m -Xmx8m  it throws an OutOfMemoryError after 19022 calls to DriverManager.getConnection.   ,0
2484,Convert syscat.sql to junit       ,0
2487,Enhance Derby with EXPLAIN Functionality    This enhancement extends Derby with EXPLAIN functions. Users want to have more feedback than they're getting with the current RuntimeStatistics facility. This extension is based on the RuntimeStatistics/ResultSetStatistics functions / classes.   ,0
2501,Batch scripts in bin/ report extraneous errors when DERBY_HOME is invalid    If DERBY_HOME is set to an invalid location (for example a directory that does not contain lib/derby.jar)  most .bat scripts in the bin directory (the ones that call derby_common.bat) report three distinct error messages  of which only one is of value to the user. Reproduction:C:/Derby_10/db-derby-10.2.2.0-bin&gt;set DERBY_HOME=c:/tempC:/Derby_10/db-derby-10.2.2.0-bin&gt;echo %DERBY_HOME%c:/tempC:/Derby_10/db-derby-10.2.2.0-bin&gt;bin/sysinfoDERBY_HOME is set incorrectly or derby.jar could not be located. Please set DERBY_HOME.The system cannot find the batch label specified - end'''' is not recognized as an internal or external command operable program or batch file.The distinct error messages are:1) DERBY_HOME is set incorrectly or derby.jar could not be located. Please set DERBY_HOME.2) The system cannot find the batch label specified - end3) '''' is not recognized as an internal or external command  operable program or batch file.Only 1) is relevant for the user  and should ideally be the only one displayed.   ,0
2502,Unclosed ResultSets choke JUnit lang _Suite on java 6    The lang suite fail for me from UnaryArithmeticParameterTest on. The tests can't drop table T1 because a ResultSet is open.   ,0
2516,Network Client allows execution of callable statement when one of the parameters is not set    If the second input parameter is set and the first is not. Client allows execution of the stored procedure. See the following code in LangProcedureTest.java with a reference to this bug. op.clearParameters(); op.setString(2  '2'); try { // a not set op.execute(); fail('FAIL - a not set'); } catch (SQLException sqle) { assertSQLState('07000'  sqle); }   ,0
2525,Convert lang/grantRevokeDDL and grantRevokeDDL2 to JUnit       ,0
2532,Client does not return SQLException on XAConnection.getXAResource() on a closed connection  Embedded does    In the following scenario from converted test DataSourceTest:(non-tested code based on the test code)---------------- ClientXADataSource dsx = new ClientXADataSource(); dsx.setDatabaseName('tstdb'); XAConnection xac = dsx.getXAConnection(); XAConnection xac2 = dsx.getXAConnection(); XAResource xar2 = xac2.getXAResource(); xac2.close(); // allow close on already closed XAConnection xac2.close(); try { xac2.getXAResource(); // Network Server does not think this is worth an exception. } catch (SQLException sqle) { System.out.println('expect a 08003 as with Embedded'); }------------------With DerbyNetClient  the xac2.getXAResource() does not return an SQLException.This ought to be documented if expected  or fixed.   ,0
2535,Make Locale available in DataValueFactory(DVF). This Locale object will be used to construct Collator object if the user has requested territory based collation.    Add a new api on DVF which will make Locale object available to DVF. This new api on DVF will get called by the boot method of BasicDatabase after BasicDatabase has finished booting DVF. This Locale will be either the Locale obtained from the territory attribute supplied by the user on the JDBC url at database create time or if user didn't provide the territory attribute at database create time  then it will be set to the default JVM locale. This Locale object will be used by DVF to construct the Collator object if user has requested territory based collation.The new api will look like following void setLocale(Locale localeOfTheDatabase);   ,0
2543,testVirtualMemoryHeap junit test fails with 'Virtual memory heap test failed! Got unexpected value. expected: but was:'    junit suite fails with the following error:2) testVirtualMemoryHeap(org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest)junit.framework.AssertionFailedError: Virtual memory heap test failed! Got unexpected value. expected:&lt;202&gt; but was:&lt;103&gt; at org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.testVirtualMemoryHeap(UpdateCursorTest.java:178) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)   ,0
2556,Code paths for db restore do not use doPrivileged-calls  causing SecurityException    When using 'createFrom' or 'restoreFrom' in the JDBC url to restore a database from a backup image  a SecurityException is thrown even though the policyfile for codebase derby.jar is correctly configured (giving Derby access to the backup image).A few comments on this issue can be found here (and in subsequent comments): https://issues.apache.org/jira/browse/DERBY-1001#action_12439811A workaround is wrapping the connection call in doPrivileged at the 'application-level code'  or granting the required permissions to the application codebase as well.   ,1
2560,Missing asserts in ProcedureInTriggerTest    ProcedureInTriggerTest sometimes executes queries without checking the results. The comments indicate that the results should have been checked.line 258-259 and line 263-264: //--- Check that insert successful and trigger fired.  rs = s.executeQuery('select * from t1');line 408-410: //--- check delete failed rs = s.executeQuery('select * from t1'); expectedRows = new String[][] { {'5' 'two'} {'6' 'four'} {'8' 'eight'}};line 421-422: //--- check trigger is not dropped rs = s.executeQuery('select count from SYS.SYSTRIGGERS where triggername='TEST_TRIG'');line 431-432: // &#8211; check index is not created rs = s.executeQuery('select count from SYS.SYSCONGLOMERATES where CONGLOMERATENAME='IX' and ISINDEX=1');line 438-440: // &#8211; check delete failed rs = s.executeQuery('select * from t1'); expectedRows = new String[][] { {'5' 'two'} {'6' 'four'} {'8' 'eight'}};   ,0
2564,ContextService.notifyAllActiveThreads()  and network server code need a privileged block around the calls to Thread.interrupt()    It looks to me as though the call to interrupt() can raise a SecurityException. I think this may give rise to another permission that we need to add to our template policy file and to our security documentation.   ,1
2570,Create a utility which generates Release Notes    This proposal summarizes an off-list conversation among Myrna van Lunteren  Bernt Johnsen  Andrew McIntyre  and myself.Currently  there is a template for release notes in the top level directory of the code tree. Actually filling in this template is a time-consuming  error-prone process. We would like to automate this process as much as possible. We believe it ought to be possible to generate the Release Notes given the following inputs:1) A high-level description of the release. The Release Manager would write this description  based on a template.2) An xml report produced by a JIRA filter. The filter would list all of the JIRAs addressed by the release.In order for this to work  we would need for the community to agree on conventions for the release notes which are attached to JIRAs  viz.  the JIRAs whose 'Release Note Needed' toggles are turned on. These JIRA-specific notes become items in the Issues section of the final Release Notes. Each of these items calls the reader's attention to a significant topic involving Derby's behavior  that behavior's compatibility with previous releases  and adjustments which the user may need to make to her applications.The following approach makes sense to us:A) The community will agree on an html template for these notes.B) The note-writer will fill in this template and attach it to the JIRA using a canonical file name  say 'releaseNote.html'.C) Various iterations of the note may be needed.D) The utility for generating Release Notes will grab the latest rev of 'releaseNote.html' attached to the JIRA.This effort involves at least two major steps:I) Getting the community to agree to these note-writing conventions.II) Writing the Release Note generator.   ,0
2579,AssertFailure class should use JDK's built-in chaining of exceptions    Currently  AssertFailure implements its own chaining of exceptions. It should use the chaining mechanism provided by the JDK.   ,0
2583,At code generation time  look at collation type to determine what kind of DVD should get generated for character types.    Currently  in Derby 10.2  we generate SQLChar/SQLVarchar/SQLLongvarchar/SQLClob for various SQL character types. All these DVDs have the default collation of UCS_BASIC. Starting 10.3  we should look at the collation type of the DTD before deciding what kind of DVD gets generated for SQL character types. If the collation type of the character type is terriotry based collation  then we should generate CollatorSQLChar/CollatorSQLVarchar/CollatorSQLLongvarchar/CollatorSQLClob rather than SQLChar/SQLVarchar/SQLLongvarchar/SQLClob. The CollatorSQLxxx DVDs will have the territory based collator associated with them and hence the collation order of these DVDs will be different than the DVDs with default collation of UCS_BASIC.   ,0
2592,Wrong description of IndexName field in public JavaDoc for LockTable    The public JavaDoc for LockTable says the following in the description of the INDEXNAME retrieved from SYSCS_DIAG.LOCK_TABLE: INDEXNAME varchar(128) - normally null. If non-null  a lock is held on the index  this can only happen if this is not a user transaction.I think the last part is wrong. Normal user transactions might also have a value in the INDEXNAME. For example  here is part of the lock table for three user transactions:XID |TYPE |MODE|TABLENAME |LOCKNAME |STATE|TABLETYPE|INDEXNAME---------------------------------------------------------------------186 |ROW |X |T2 |(1 9) |GRANT|T |NULL184 |ROW |S |T2 |(1 9) |WAIT |T |NULL188 |ROW |X |T1 |(1 11) |GRANT|T |NULL 186 |ROW |S |T1 |(1 11) |WAIT |T |NULL186 |ROW |S |T1 |(1 1) |GRANT|T |SQL070425023213370 188 |ROW |S |T1 |(1 1) |GRANT|T |SQL070425023213370 184 |ROW |X |T1 |(1 7) |GRANT|T |NULL 188 |ROW |S |T1 |(1 7) |WAIT |T |NULL Two of the lock entries have an index. I expect this to be the Scan lock that have been set during traversal of the B-tree.Proposed fix: remove the last part of the sentence.   ,0
2602,TIMESTAMP value is truncated  when return to client    In ParameterMappingTest I see the following differences between embedded and client. Client is truncating the TIMESTAMP value. Look for this bug number in the test for reproduction. case java.sql.Types.TIMESTAMP: if (param == 2) if (usingEmbedded()) assertEquals('2004-03-12 21:14:24.938222433'  val.toString()); else assertEquals('2004-03-12 21:14:24.938222'  val.toString()); else if (param == 3) if (usingEmbedded()) assertEquals('2004-04-12 04:25:26.462983731'  val.toString()); else assertEquals('2004-04-12 04:25:26.462983'  val.toString()); break;   ,0
2606,Derby should print the parameters to failed statements to the derby.log when it logs the error    It would be good if when derby dumped an error to derby.log it printed the parameters for the failed statement. Currently the default behaviour is that only the statement text will print. Users have to set derby.language.logStatementText=true if they want to see the parameters. It would be useful if any errors included the parameters as well as the statement text.To reproduce put derby.stream.error.logSeverityLevel=0 in your derby.properties and run this script: connect 'jdbc:derby:wombat;create=true';create table t (i int);prepare p as 'insert into t values'; execute p using 'values(1)';execute p using 'values(10000000000000000000000000000000000000000000)';   ,1
2607,DatabaseMetaData is not consistent about throwing SqlException when tablename=null    According to java.sql.DatabaseMetaData  the following DatabaseMetaData methods should not allow tablename=null:getBestRowIdentifier  getColumnPrivileges  getIndexInfo  getVersionColumns  getPrimaryKeys  getImportedKeys  getExportedKeys. In the five former methods  SqlExceptions are thrown if tablename == null  but this check is not performed in the latter two.The method calls eventually end up in EmbedDatabaseMetaData  which performs this check. Hence  an exception is thrown either way. If we want the exception to be thrown as early as possible  the two latter methods should do so as well. If not  the check should be removed from the former methods.   ,0
2610,Queries in metadata.properties allow tablepattern for JDBC methods that do not allow patterns    The DatabaseMetaData methods getBestRowIdentifier  getColumnPrivileges  getIndexInfo  getVersionColumns  getPrimaryKeys  getImportedKeys  getExportedKeys do not allow table name patterns. However  the SQL in metadata.properties implement these with 'table like ?'  thus allowing patterns. The SQL for these methods should be modified to 'table=?'.   ,0
2611,upgrade test incorrectly tries to test in place compress in 10.0 release.    When trying to run upgrade test in trunk with all releases available for upgrade to test found at:https://svn.apache.org/repos/asf/db/derby/jars/10.2.2.0/I got 4 errors (not including those that are part of DERBY-2598).:1) testNegValueSupportedLogRecord(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3)java.sql.SQLException: 'SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:305) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(StaticMethodCallNode.java:224) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(JavaToSQLValueNode.java:243) at org.apache.derby.impl.sql.compile.CallStatementNode.bindStatement(CallStatementNode.java:145) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:742) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:567) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:516) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.checkDataToCase606(Changes10_3.java:177) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testNegValueSupportedLogRecord(Changes10_3.java:118) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)2) testGetTablesModify(org.apache.derbyTesting.functionTests.tests.jdbcapi.DataaseMetaDataTest)java.sql.SQLException: Use of 'XML' requires database to be upgaded from version 10.0 to version 10.1 or later. at org.apache.derby.iapi.error.StandardException.newException(StandardExcepion.java:356) at org.apache.derby.impl.sql.catalog.DD_Version.checkVersion(DD_Version.jav:788) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.checkVersion(DataDitionaryImpl.java:8487) at org.apache.derby.impl.sql.compile.SQLParser.checkVersion(SQLParser.java:00) at org.apache.derby.impl.sql.compile.SQLParser.XMLType(SQLParser.java:4181) at org.apache.derby.impl.sql.compile.SQLParser.dataTypeCommon(SQLParser.jav:3607) at org.apache.derby.impl.sql.compile.SQLParser.dataTypeDDL(SQLParser.java:337) at org.apache.derby.impl.sql.compile.SQLParser.columnDefinition(SQLParser.jva:3400) at org.apache.derby.impl.sql.compile.SQLParser.tableElement(SQLParser.java:368) at org.apache.derby.impl.sql.compile.SQLParser.tableElementList(SQLParser.jva:3209) at org.apache.derby.impl.sql.compile.SQLParser.tableDefinition(SQLParser.jaa:10992) at org.apache.derby.impl.sql.compile.SQLParser.createStatements(SQLParser.jva:1811) at org.apache.derby.impl.sql.compile.SQLParser.StatementPart(SQLParser.java1718) at org.apache.derby.impl.sql.compile.SQLParser.Statement(SQLParser.java:163) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.jva:151) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.jva:280) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareIternalStatement(GenericLanguageConnectionContext.java:742) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:56) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:51) at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTestcreateTablesForTest(DatabaseMetaDataTest.java:1123) at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTesttestGetTablesModify(DatabaseMetaDataTest.java:912) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.jav:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessormpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)3) testNegValueSupportedLogRecord(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3)ERROR 42Y03: 'SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(StaticMethodCallNode.java) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(JavaToSQLValueNode.java) at org.apache.derby.impl.sql.compile.CallStatementNode.bind(CallStatementNode.java) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.checkDataToCase606(Changes10_3.java:177) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testNegValueSupportedLogRecord(Changes10_3.java:122) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)4) Upgrade Phase: UPGRADEjava.sql.SQLException: Failed to start database 'singleUse/oneuse0'  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2119) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:1783) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:249) at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:74) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:209) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:479) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:423) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp(PhaseChanger.java:94) at junit.extensions.TestSetup$1.protect(TestSetup.java:18) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)FAILURES!!!Tests run: 505  Failures: 0  Errors: 4   ,0
2616,intermittent network startup related errors in running junit nightly test suite    I intermitently get network startup related errors in running the nightly full test suite on my laptop  running XP  with a firewall and a VPN - I am not sure what if any of those environmental factors is causing it. I have been mostly ignoring the errors as it seemed like it usually was only one test. I my latest run it was more like 7 or 8. I'll append exact tests as a comment on this issue.To debug the problem I picked one - org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest and ran it in a loop. When I did this it failed everytime after the first one (and the first one intermittently failed). When I bumped the WAIT_TIME up to 300000 and the SLEEP_TIME to 500 injava/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java then the test passed everytime . In 30 runs theentire test took varying times from 2 minutes to 6 minutes  mostly in the 4 minute range.   ,0
2631,Expose existing auto-generated key functionality through more JDBC APIs in embedded mode.    Derby currently supports the following JDBC methods for auto-generated keys: // Indicate that we want to retrieve auto-generated key values. Connection.prepareStatement(String sql  int autoGeneratedKeys); Statement.execute(String sql  int autoGeneratedKeys); Statement.executeUpdate(String sql  int autoGeneratedKeys); // Retrieve the auto-generated values (only applies to INSERT statements). ResultSet rs = Statement.getGeneratedKeys();The current implementation of getGeneratedKeys() internally maps to the 'IDENTITY_VAL_LOCAL()' method  which means that Derby's implementation only returns generated keys for autoincrement columns (no other default columns are supported). Further: 1. The generated key result set only ever has a single column. This is because Derby only allows one autoincrement column per table. 2. The type of the single column in the result set will be DECIMAL(31 0). This is defined by IDENTITY_VAL_LOCAL(). 3. The generated key result set will only ever have a single row. This is because IDENTITY_VAL_LOCAL() only returns values that were assigned as the result of a single row INSERT statement using a VALUES clause. For a single row INSERT statement  at most one autoincrement value will be generated.All of that said  JDBC 3.0 also defines the following methods  which allow the user to explicitly indicate  via column position or column name  the columns for which the auto-generated keys should be made available: Connection.prepareStatement(String sql  String[] columnNames); Connection.prepareStatement(String sql  int[] columnIndexes); Statement.execute(String sql  String[] columNames); Statement.execute(String sql  int[] columIndexes); Statement.executeUpdate(String sql  String[] columnNames); Statement.executeUpdate(String sql  int[] columnIndexes);Derby currently throws a 'Feature not supported' error for all of these methods. However  it seems like the above methods could be 'mapped' onto the existing Derby behavior with relatively little effort (in embedded mode). Most of the required code is already in place.Doing so would make it easier for applications that rely on the columnNames and/or columnIndexes APIs to work with Derby (assuming the app just wants generated keys for identity (autoincrement) columns).Note that this Jira does not entail removing any of the restrictions nor changing any of the behavior outlined above. All of that will remain exactly as it is. This Jira simply exposes the existing functionality (restrictions and all) through additional (standard) API methods. In particular this means that any column specified by index (position) or name must be an auto-increment column for the INSERT table; otherwise Derby should throw an error. Or put differently  a user who specifies a column name/position will get-in the absence of errors-the exact same results as s/he would get from invoking the '(String sql  int autoGeneratedKeys)' method.Note also: This Jira is specifically for embedded mode. I think it would be harder to support these methods for Derby Client and so do not plan to address that.   ,0
2632,upgrade tests fail through BlobStoredProcedureTest and ClobStoredProcedureTest with JSR169    The 10.3 upgrade tests (Changes_10.3) add the ClobStoredProcedureTest and BlobStoredProcedureTest.class.However these tests should not run with JSR169  for the stored procedures use DriverManager to obtain the default connection.This should be unimportant with JSR169  because the procedures are internal procedures that are only intended to be exercised by client code  and client/server is not currently supported with JSR169.For reference  the stack trace is (for example) like so:33) testClobGetLengthSP(org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: java.sql.DriverManager' was thrown while evaluating an expression. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.error.StandardException.unexpectedUserException(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.setUp(ClobStoredProcedureTest.java:77) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)   ,0
2642,Convert lang/dynamicLikeOptimization.sql to JUnit       ,0
2645,upgrade test failures with weme 6.1.    Since activating the upgrade tests for weme6.1 (and resolving some of the failures) I can now see 1 new error and 13 new failures. Some of these may warrant their own bug; some are probably caused by the initial problem.(In the section below  I'm skipping the junit.extensions.* part of the stack.)error:2) testProcedureSignature(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1)java.sql.SQLException: PROCEDURE 'GC' already exists. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(Unknown Source) at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1.testProcedureSignature(Changes10_1.java:87) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ....------------------failures: 6) testProcedureSignature(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1)junit.framework.AssertionFailedError: Expected error 'XCL47' but no error was thrown. at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:703) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1.testProcedureSignature(Changes10_1.java:82) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ...2) and  11) testOldVersion(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.AssertionFailedError: Old minor (driver): expected:&lt;0&gt; but was:&lt;3&gt; at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testOldVersion(BasicSetup.java:61) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ...--------------------3)  7) and 12)  with a variation in originating line number in Changes10_2:(marked (#) in the stack below).and expected error numbertestGrantRevokeStatements(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2)(3  12) junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;...X01&gt; but was:&lt;...Z60&gt;(7)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;XCL47&gt; but was:&lt;42Z60&gt; at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:523) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:585) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:706)(3  12) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testGrantRevokeStatements(Changes10_2.java:241)(7) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testGrantRevokeStatements(Changes10_2.java:250) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ...Caused by: java.sql.SQLException: GRANT not allowed unless database property derby.database.sqlAuthorization has value 'TRUE'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.SQLParser.checkSqlStandardAccess(Unknown Source) at org.apache.derby.impl.sql.compile.SQLParser.grantStatement(Unknown Source) at org.apache.derby.impl.sql.compile.SQLParser.StatementPart(Unknown Source) at org.apache.derby.impl.sql.compile.SQLParser.Statement(Unknown Source) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:701)(3  12) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testGrantRevokeStatements(Changes10_2.java:241)(7) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testGrantRevokeStatements(Changes10_2.java:250) at at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) ... 64 more------------------4)  8) and 13) testDatabaseOwnerChange(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2)junit.framework.ComparisonFailure: AUTHORIZATIONID not valid for SYSIBM expected:&lt;DBA&gt; but was:&lt;APP&gt; at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.checkSystemSchemasOwner(Changes10_2.java:300) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testDatabaseOwnerChange(Changes10_2.java:282) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ...------------------5)   10) and 14)testPolicyReloadingProcedure(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3)junit.framework.AssertionFailedError: Reloading results. expected:&lt;false&gt; but was:&lt;true&gt; at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.tryReloading(Changes10_3.java:362) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.assertPolicyReloaderDoesNotExist(Changes10_3.java:340) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testPolicyReloadingProcedure(Changes10_3.java:311) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ...------------------9) testImportExportLobsProcedures(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3)junit.framework.AssertionFailedError: Expected error '42Y03' but no error was thrown. at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:703) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testImportExportLobsProcedures(Changes10_3.java:252) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) ...------------------   ,0
2658,Convert jdbcapi/parameterMetaDataJdbc30.java to JUnit    Convert jdbcapi/parameterMetaDataJdbc30.java to JUnit.   ,0
2671,Errors/messages early in starting the network server through NetworkServerControl.start() are not reported to the PrintWriter passed into start().    Cause seems to be not calling setLogWriter() in NetworkServerControlImpl.start() before calling startNetworkServer.   ,0
2699,performance of like in territory based collation databases may be improved by changing way collation elements are calculated.    WorkHorseForCollatorDatatypes.java has a method getCollationElementsForString() which currently getscalled when processing like clauses in databases that have been created with territory based collation  this isnot an issue in pre-10.3 databases or post 10.3 default databases.getCollationElementsForString gets the collation elements for the entire value of the String held bythe datatype using the class.If you take the case of pattern 'A%' and the value of datatype is 'BXXXXXXXXXXXXXXXXXXXXXXX'  then it would have been better to better to get collation elements one character of the String value at a timeto avoid the process of getting collation elements for the entire string when we don't really need it One could imagine this might have a huge performance impact on running like against a long clob wherethe like pattern has leading fixed-length pattern to match.Comments on this from Dan and Dag can be found in DERBY-2416.   ,0
2712,If large clob is updated after Reader. the reader continues to point to old data    If a Reader is fetched from a large clob (obtained from ResultSet) a reader linked to the dvd stream is returned once a set method is called on it the clob data is materialized in control class but the Reader returned previously continues to point to old data.   ,0
2713,Ensure that a temporary file is not created for a lob obtained from resultset unless user updates it.    Currently LOBStreamControl has a buffer limit of 4k if the lob is larger than this a temporary file is created. Ensure that lob data is kept in memory unless user start to update it.   ,0
2730,Implement not implemented Embedded methods Blob.getBinaryStream(long pos  long length) and Clob. getCharacterStream(long pos  long length)    The following methods were introduced in the java.sql.Clob and java.sql.Blob interface as part of JDBC 4.0 and need to be implemented.Clob------getCharacterStream(long pos  long length)Blob------getBinaryStream(long pos  long length)The implementation on the Network Client is already done as part of Derby-2444   ,0
2740,LIKE parameter marker combined with index multi-probing leads to ASSERT failure with sane jars  wrong results with insane jars.    In cases where the optimizer chooses to do index multi-probing for an IN list (DERBY-47)  the presence of a LIKE condition whose argument is a parameter marker leads to an ASSERTion failure with sane jars. With insane jars  the same query returns incorrect results (it only returns rows matching the first argument in the IN list).As an example  if we have the following DDL: create table ct (i int  c1 char(25)  c2 char(40)); insert into ct values 1  2  3  4  5  6  7  8  9; insert into ct values 0  10  11  12  13  14  15  16  17  18  19; insert into ct select 7 * i from ct; insert into ct select 13 * i from ct; update ct set c1 = cast(i as char(25)); update ct set c2 = c1 || c1; create index idx2 on ct (c1  c2);Then we see the following results:&#8211; This one works.select i c1 c2 from ct where c1 in ('1' '2') and c2 like '%' order by i;&#8211; These all work  too.prepare p1 as 'select i c1 c2 from ct where c1 in (''2'' ''1'') and c2 like ''%''';execute p1;prepare p1 as 'select i c1 c2 from ct where c1 in (? ?) and c2 like ''%''';execute p1 using 'values (''1''  ''2'')';&#8211; But these all fail. Something about having a parameter in the LIKE is triggering the assertion...prepare p1 as 'select i c1 c2 from ct where c1 in (? ?) and c2 like ? order by i';execute p1 using 'values (''1''  ''2''  ''%'')';prepare p1 as 'select i c1 c2 from ct where c1 in (? ?) and c2 like ?';execute p1 using 'values (''1''  ''2''  ''%'')';prepare p1 as 'select i c1 c2 from ct where c1 in (''2'' ''1'') and c2 like ?';execute p1 using 'values (''%'')';prepare p1 as 'select i c1 c2 from ct where c1 in (''2'' ?) and c2 like ?';execute p1 using 'values (''1''  ''%'')';The actual assertion is thrown because multiprobing expects the start and stop keys to be same value. But something about the LIKE parameter violates that expectation:ERROR XJ001: Java exception: 'ASSERT FAILED All multi-probing result sets are expected to have a single key that is both the start key AND the stop key  but that is not the case.: org.apache.derby.shared.common.sanity.AssertFailure'.This is a regression introduced by the DERBY-47 changes; everything runs fine in 10.2 and earlier.   ,0
2744,jdbcapi/metadata.java and jdbcapi/odbc_metadata.java fail because of new procedure SYSCS_UTIL SYSCS_GET_USER_ACCESS    The following failure occurs with Rev: 543499  likely due to checkin of DERBY-2735failure Details:                 Diff file derbyall/derbylang/metadata.diff             Start: metadata jdk1.6.0_01 derbyall:derbylang 2007-06-01 12:37:31 ***59a60&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx78a80&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx93a96&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx107a111&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx136a141 142&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS  4 12 VARCHAR 128 256 null null 1 null 256 0 YES xxxxGENERATED-IDxxxx 1 -1&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS USERNAME 1 12 VARCHAR 128 256 null null 1 null 256 1 YES xxxxGENERATED-IDxxxx 1 0Test Failed. End: metadata jdk1.6.0_01 derbyall:derbylang 2007-06-01 12:37:40 ***            Diff file derbyall/derbylang/odbc_metadata.diff             Start: odbc_metadata jdk1.6.0_01 derbyall:derbylang 2007-06-01 12:37:45 ***89a90&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx108a110&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx123a126&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx137a141&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS xxxxGENERATED-IDxxxx166a171 172&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS  4 12 VARCHAR 128 256 null null 1 null 256 0 YES xxxxGENERATED-IDxxxx 1 -1&gt; null SYSCS_UTIL SYSCS_GET_USER_ACCESS USERNAME 1 12 VARCHAR 128 256 null null 1 null 256 1 YES xxxxGENERATED-IDxxxx 1 0Test Failed. End: odbc_metadata jdk1.6.0_01 derbyall:derbylang 2007-06-01 12:37:55 ***   ,0
2751,testLoadJavaClassIndirectly & als fails on JVM 1.4 with 'Unexpected SQL state. expected: but was:'  'Jar file 'MY_JAVA' already exists in Schema 'EMC''    1) testLoadJavaClassDirectly(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)java.sql.SQLException: Jar file 'MY_JAVA' already exists in Schema 'EMC'.2) testLoadJavaClassDirectly2(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)java.sql.SQLException: Jar file 'MY_JAVA' already exists in Schema 'EMC'.3) testLoadJavaClassDirectly3(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)java.sql.SQLException: Jar file 'MY_JAVA' already exists in Schema 'EMC'.4) testLoadDerbyClassIndirectly(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)java.sql.SQLException: Jar file 'MY_JAVA' already exists in Schema 'EMC'.1) testLoadJavaClassIndirectly(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;&#91;38000&#93;&gt; but was:&lt;&#91;XJ001&#93;&gt;See e.g.http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/Limited/testSummary-543922.htmlhttp://dbtg.thresher.com/derby/test/trunk16/jvmAll/testing/Limited/testSummary-543945.html   ,0
2753,org.apache.derby.impl.drda.DDMWriter might swallow unexpected exceptions    Some methods in org.apache.derby.impl.drda.DDMWriter catch Exception and print a message about unsupported encoding. They should instead catch the specific exception UnsupportedEncodingException and let all other exceptions propagate up the call stack.   ,0
2754,Client connections should not fail if permission is not granted to read derby.client.traceLevel  and derby.client.traceDirectory    Running the 10.2 network server tests with the 10.3 server  most tests fail with:AccessControlException: Access denied java.util.Property derby.client.traceLevel readdue to DERBY-1275. This can break existing applications that don't have this permission and should be a non-fatal warning if permission is not granted.   ,1
2770,testBlobAfterCommit(....jdbcapi.BlobClob4BlobTest) fails with 'Unexpected SQL state. expected: but was:'    testBlobAfterCommit(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;XJ&#91;073&#93;&gt; but was:&lt;XJ&#91;215&#93;&gt;after r544777 / DERBY-2729See http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/544778-org.apache.derbyTesting.functionTests.suites.All_diff.txt   ,0
2785,ij 'describe' built in command cannot describe a table named 'run'    steps to duplicate:(attach ij to any database)ij&gt; create table run (i int);0 rows inserted/updated/deletedij&gt; desc run;ERROR 42X01: Syntax error: Encountered 'desc' at line 1  column 1.ij&gt; I think this is a parser problem within ij where the 'run' is taken as a token and that token is not included in the definition of a tablename expression in the grammer (should be an easy fix).   ,0
2787,make entry for clob in connection so that temporary file is removed when a connection is closed or transaction is commited/rolledback       ,0
2789,DatabaseMetaData .locatorsUpdateCopy() should return true    Since updates made to a BLOB or CLOB value in Derby is made on a copy  DatabaseMetaData .locatorsUpdateCopy() call should return true. For the embedded driver the functionality to update a LOB value is new in 10.3. For the client driver  updates have been possible in prior releases  and locatorsUpdateCopy() has returned false. That behavior was wrong since the client updated a main-memory copy  not the values in the database. For 10.3  the client will use a locator based implementation which will rely on the behavior of the embedded driver. Hence  locatorsUpdateCopy() should return true in both cases.   ,0
2796,Obscure error messages when using SSL in various combinations    I ran clients with various ssl configurations on their urls and startup options against servers with various ssl configurations. I will attach an html file recording my results. I feel that many of the error conditions raised diagnostics which were too obscure to be helpful. I think this will be burdensome to tech support.   ,1
2805,ASSERT failure with sane build if DISTINCT and ORDER BY are present in a query that selects from a diagnostic table function.    Attempts to execute the following query will lead to an ASSERT failure with sane jars:ij&gt; select distinct * from table(syscs_diag.space_table('T1')) X order by 3;ERROR XJ001: Java exception: 'ASSERT FAILED markOrderingDependent() not expected to be called for org.apache.derby.impl.sql.compile.FromVTI: org.apache.derby.shared.common.sanity.AssertFailure'.Stack trace is: at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at ResultSetNode.markOrderingDependent(ResultSetNode.java:1881) at SingleChildResultSetNode.markOrderingDependent(SingleChildResultSetNode.java:578) at SingleChildResultSetNode.markOrderingDependent(SingleChildResultSetNode.java:578) at SingleChildResultSetNode.markOrderingDependent(SingleChildResultSetNode.java:578) at SelectNode.genProjectRestrict(SelectNode.java:1409) at SelectNode.modifyAccessPaths(SelectNode.java:1816) at SingleChildResultSetNode.modifyAccessPaths(SingleChildResultSetNode.java:439) at DMLStatementNode.optimizeStatement(DMLStatementNode.java:307) at CursorNode.optimizeStatement(CursorNode.java:515)I was able to avoid this by adding an empty implementation of 'markOrderingDependent' to the FromVTI class  so that's probably the fix that I will post (after looking a bit more closely at the code to see if this makes sense).   ,0
2806,calling getByteLength on org.apache.derby.impl.jdbc.StoreStreamClob makes BinaryStream  fetched before this call  unusable    StoreStreamClob.getByteLength first resets the internal stream and then reads the entire stream. Due to this any read on Stream obtained by StoreStreamClob.getRawByteStream returns -1.StoreStreamClob is a read only InternalClob  so probably keeping the length in a variable will be good idea.   ,0
2812,Assessing blob (when its linked to DVD stream  ie large blob) corrupts stream fetched prior to this access.       ,0
2815,ij doesn't start with J2ME / JSR169 / weme6.1 because attempting to find java.sql.Driver if ij.protocol property is specified    When starting ij with the following command:ij -jcl:foun11 -Xbootclasspath/a:&lt;path_to_jdbc.jar&gt; org.apache.derby.tools.ij -p derby.propertiesand derby.properties contains the following:-----------------ij.database=jdbc:derby:bladb;create=trueij.protocol=jdbc:derby:ij.showNoConnectionsAtStart=trueij.showNoCountForSelect=true DataSource properties  only used if ij.dataSource is setij.dataSource.databaseName=bladbij.dataSource.createDatabase=createij.dataSource=org.apache.derby.jdbc.EmbeddedSimpleDataSource------------------ij does not start and instead gives the following stack trace:Exception in thread 'main' java.lang.NoClassDefFoundError: java.sql.Driver at java.lang.ClassLoader.defineClassImpl(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:226) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:109) at java.net.URLClassLoader.findClassImpl(URLClassLoader.java:1029) at java.net.URLClassLoader$4.run(URLClassLoader.java:549) at java.security.AccessController.doPrivileged(AccessController.java:213) at java.net.URLClassLoader.findClass(URLClassLoader.java:547) at com.ibm.oti.vm.URLSystemClassLoader.findClass(URLSystemClassLoader.java:27) at java.lang.ClassLoader.loadClass(ClassLoader.java:606) at com.ibm.oti.vm.URLSystemClassLoader.loadClass(URLSystemClassLoader.java:60) at java.lang.ClassLoader.loadClass(ClassLoader.java:563) at java.lang.Class.forNameImpl(Native Method) at java.lang.Class.forName(Class.java:114) at org.apache.derby.impl.tools.ij.util.loadDriver(util.java:849) at org.apache.derby.impl.tools.ij.util.loadDriverIfKnown(util.java:833) at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:476) at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:585) at org.apache.derby.impl.tools.ij.ConnectionEnv.init(ConnectionEnv.java:64) at org.apache.derby.impl.tools.ij.utilMain.initFromEnvironment(utilMain.java:179) at org.apache.derby.impl.tools.ij.Main.&lt;init&gt;(Main.java:230) at org.apache.derby.impl.tools.ij.Main.getMain(Main.java:193) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:178) at org.apache.derby.impl.tools.ij.Main.main(Main.java:73) at org.apache.derby.tools.ij.main(ij.java:67)The properties file is an example of the 'old test harness' properties files. The test harness would get sql scripts tested with J2ME by stripping away the ij.protocol and ij.database specifications.In another bug - DERBY-1218 - it was suggested ij.protocol be blanked out (in tools/ij/util.java?) with J2ME.Another approach would be to check for ij.protocol or ij.database setting when we have a datasource and we're using J2ME.   ,0
2817,Error messages for deadlocks contain less information than in 10.2    In 10.2  an error message for a deadlock would look like this:ERROR 40001: A lock could not be obtained due to a deadlock  cycle of locks and waiters is:Lock : ROW  T  (1 8) Waiting XID : {235  S}   APP  select * from t where id = 2 Granted XID : {238  X} Lock : ROW  T  (1 7) Waiting XID : {238  S}   APP  select * from t where id = 1 Granted XID : {235  X} . The selected victim is XID : 235.On trunk  the same deadlock would be reported asjava.sql.SQLException: A lock could not be obtained due to a deadlock  cycle of locks and waiters is:Lock : ROW  T  (1 8) Waiting XID : {org.apache.derby.impl.services.locks.LockSpace@94884d  S}  Granted XID : {org.apache.derby.impl.services.locks.LockSpace@da6bf4  X} Lock : ROW  T  (1 7) Waiting XID : {org.apache.derby.impl.services.locks.LockSpace@da6bf4  S}  Granted XID : {org.apache.derby.impl.services.locks.LockSpace@94884d  X} . The selected victim is XID : org.apache.derby.impl.services.locks.LockSpace@94884d.That is  the transaction id and the failing statement are not shown.   ,0
2818,Rewrite ClobUpdatableReader constructors    When the fix for DERBY-2806 is in place  the current implementation of ClobUpdateableReader will fail.This patch is a preparation for the mentioned issue  and I have also removed some 'internal' (package private) methods from EmbedClob and replaced it with a single one. Instead of writing methods that forwards calls to the underlying InternalClob  the method getInternalClob will return the internal clob itself. This seems more in place  since the method getByteLength does not belong in EmbedClob. It also comes with a warning that using the reference to the internal clob object requires the caller to take more care. Second  isWritable() does not belong to EmbedClob either  as a Clob is always writable (unless the database/connection itself is read/only). However  the internal clob representation may be read-only  in case EmbedClob must clone the content and create a writable representation.The fix leaves more of the handling of implementation details to the InternalClob itself.   ,0
2824,Improve error reporting  fix whitespace/formatting issues and replace tabs in UTF8Reader    I plan to do the following changes to UTF8Reader: Improve the error reporting when hitting a UTF8 decoding error (currently an UTFDataFormatException with no message). This might also lead to deleting one helper method for generating an exception (the one with no message). Improve error reporting for trying to use the reader after it has been closed (currently an IOException with no message). Remove trailing spaces  and add a few newlines here and there. Replace tabs in the file with spaces.Now  the last point can be discussed  but here are my arguments for doing it: The file now has a mix of tabs and spaces (but still more tabs). Spaces are the preferred/required method of indentation. I want to get it fixed before the branch is cut  which makes it easier to port fixes from trunk/10.3-NEXT to 10.3. If I don't make it for 10.3  I won't do it. I don't see it as very likely that we will back-port major fixes to this class on the 10.2 branch. If we have to  I will volunteer  Since so much else of the Clob 'infrastructure' has changed recently  this seems like a good time to do the clean-up.Please raise your concern as soon as possible if you want to veto these changes. I do plan to commit them tomorrow.   ,0
2827,Rename ClobStreamControl to TemporaryClob    Since the original submission  the situation has changed quite a lot and the original name no longer fits as well as it did before.The class is changed to TemporaryClob  signalling that the Clob object is living temporarily outside the database. This is true for all scenarios  except for small Clobs that are stored as non-stream objects in the database. The general contract is that as soon as a change is made to the Clob  it becomes a temporary Clob. Unless the user reinserts the Clob (i.e. updateRow  updateClob + execute)  the changes will be lost. This is also true for Clobs created with Connection.createClob. If it is not explicitly inserted into the database  it is lost.   ,0
2862,ParameterMetaDataJdbc30 fails for weme6.1  which prevents rest of suites.All from completing.    With the addtion of the ParameterMetaDataJdbc30 JUnit test (DERBY-2658)  suites.All has been failing with weme6.1. It turns out the that new ParameterMetaDataJdbc30Test fails with the following error: Failed to invoke suite():java.lang.NoClassDefFoundError: java.sql.ParameterMetaData which prevents suites.All from continuing and thus no results can be gathered.It might be good to disable the test for weme6.1 at least in the short term so that rest of suites.All can run cleanly again. Not sure if that's a complete solution or just a temporary one until the test can be fixed...   ,0
2868,BUILDING.txt doesn't mention junit.jar in list of jars installed in tools/java    BUILDING.txt contains this paragraph:Note: After following the steps in sections 2.2.4-2.2.8 of thisdocument  you should have the following:${derby.source}/tools/java/empty.jar${derby.source}/tools/java/geronimo-spec-servlet-2.4-rc4.jar${derby.source}/tools/java/jakarta-oro-2.0.8.jar${derby.source}/tools/java/javacc.jar${derby.source}/tools/java/osgi.jar----Since section 2.2.5 mentions how to install junit.jar into ${derby.source}/tools/java  the list should also include junit.jar.Also  since the paragraph refers to sections 2.2.4-2.2.8  it should be located below section 2.2.8 (currently  it's between 2.2.7 and 2.2.8).   ,0
2870,iepnegativetests_ES.sql fails: new canon needed?    See http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/Limited/testSummary-550528.html / w2003&lt;method&gt;i18n/iepnegativetests_ES.sql&lt;/method&gt;&lt;signature&gt;&lt; ERROR XJ001: Excepci EnC:&gt;243&lt; n de Java: 'extout/nodir/t1.dat (No such file or directory): java.io.FileNotFoundException'.49a49&gt; ERROR XJ001: Excepci EnC:&gt;243&lt; n de Java: 'extout/nodir/t1.dat (The system cannot find the path specified): java.io.FileNotFoundException'.&lt;/signature&gt;   ,0
2874,NetworkServer not accepting connections with default security manager on Ipv6 machines    While running tests on Ipv6 machines using the 10.3 jars with the default security manager  I had the following findings/questionsI started the server like this java org.apache.derby.drda.NetworkServerControl start -h 2002:92a:8f7a:13:9:42:74:19and the server started with the following commandSecurity manager installed using the Basic server security policy.Apache Derby Network Server - 10.3.1.0 beta - (548006) started and ready to accept connections on port 1527 at 2007-06-25 23:44: 36.835 GMTSo I think the server is using the default security manager. Then when I tried to get conenction though ijgot the following error messageAccess denied (java.net.SocketPermission &#91;2002:92a:8f7a:13:9:42:73:218&#93;:34016 accept resolve)java.security.AccessControlException: Access denied (java.net.SocketPermission &#91;2002:92a:8f7a:13:9:42:73:218&#93;:34016 accept resolve)  at java.security.AccessController.checkPermission(AccessController.java:104) at java.lang.SecurityManager.checkPermission(SecurityManager.java:547) at java.lang.SecurityManager.checkAccept (SecurityManager.java:1172) at java.net.ServerSocket.implAccept(ServerSocket.java:466) at java.net.ServerSocket.accept(ServerSocket.java:433) at org.apache.derby.impl.drda.ClientThread$1.run (Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:242) at org.apache.derby.impl.drda.ClientThread.run(Unknown Source)I had the derby.properties file like thisderby.database.sqlAuthorization=truederby.connection.requireAuthentication=truederby.infolog.append=truederby.authentication.provider=BUILTINderby.stream.error.logSeverityLevel=0#derby.language.logStatementText=true User's Definitionsderby.user.user2=pass2   ,1
2879,CREATE TABLE AS  does not maintain the collation for character types.    create table t as select tablename from sys.systables with no data;This creates a column TABLENAME with collation based upon the user schema  but the type of sys.systables.tablename has collation UCS_BASIC.The required behaviour should be verified with the SQL standard (11.3 SR6)  but since collation is an attribute of a type it seems logical that the collation is maintained by the create.Fixing this to keep the collation of the system column will cause problems though as there would be no way to recreate this table through a regular create table  say if the schema is dumped and recreated using ddlutils.I think this is critical as fixing it after a release would lead to a change in behaviour for applications.   ,0
2885,Wrong connection object used in EmbedConnection.clearLOBMapping()    I think there are two bugs in EmbedConnection.clearLOBMapping(): 1) It checks if lobHashMap is non-null  but it should have checked rootConnection.lobHashMap. 2) It calls getlobHMObj().clear() regardless of whether there is a HashMap. This creates a HashMap object even though it's not needed  and all the subsequent transactions on that connection have to perform cleanup on that object.   ,0
2892,Closing a resultset after retrieving a large > 32665 bytes value with Network Server does not release locks    This is the same issue as DERBY-255 (https://issues.apache.org/jira/browse/DERBY-255). The test attached to DERBY-255 shows the locks being not released. Everything is fine when using Derby 10.1.3.1 .I would think it's a regression bug.Output from sysinfo:------------------ Java-Informationen ------------------Java-Version: 1.6.0_01Java-Anbieter: Sun Microsystems Inc.Java-Home: C:/work/applications/development/java/jdk1.6u1-SE/jreJava-Klassenpfad: C:/work/applications/development/derby-10.2.2.0/lib/derby.jar;C:/work/applications/development/derby-0.2.2.0/lib/derbynet.jar;C:/work/applications/development/derby-10.2.2.0/lib/derbyclient.jar;C:/work/applications/develpment/derby-10.2.2.0/lib/derbytools.jarName des Betriebssystems: Windows XPArchitektur des Betriebssystems: x86Betriebssystemversion: 5.1Java-Benutzername: thomas.niessenJava-Benutzerausgangsverzeichnis: C:/Dokumente und Einstellungen/thomas.niessenJava-Benutzerverzeichnis: C:/work/applications/development/derby-10.2.2.0java.specification.name: Java Platform API Specificationjava.specification.version: 1.6--------- Derby-Informationen --------JRE - JDBC: Java SE 6 - JDBC 4.0&#91;C:/work/applications/development/derby-10.2.2.0/lib/derby.jar&#93; 10.2.2.0 - (485682)&#91;C:/work/applications/development/derby-10.2.2.0/lib/derbytools.jar&#93; 10.2.2.0 - (485682)&#91;C:/work/applications/development/derby-10.2.2.0/lib/derbynet.jar&#93; 10.2.2.0 - (485682)&#91;C:/work/applications/development/derby-10.2.2.0/lib/derbyclient.jar&#93; 10.2.2.0 - (485682)----------------------------------------------------------------------- Informationen zur L�_۴_�ndereinstellung -----------------Aktuelle L�_۴_�ndereinstellung: [Deutsch/Deutschland &#91;de_DE&#93;]Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;cs&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;de_DE&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;es&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;fr&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;hu&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;it&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;ja_JP&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;ko_KR&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;pl&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;pt_BR&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;ru&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;zh_CN&#93; Version: 10.2.2.0 - (485682)Es wurde Unterst�_�__tzung f�_�__r die folgende L�_۴_�ndereinstellung gefunden: &#91;zh_TW&#93; Version: 10.2.2.0 - (485682)   ,0
2893,INSERT and UPDATES succeed when permission has not been granted.    GrantRevokeTest had assert methods (assertInsertPrivilege etc.) of the formtry { s.execute(command)} catch (SQLException sqle){ if (!hasPrivilege)  assertSQLState('42502'  e); else fail(...);}Note that no fail() assert was in the try portion after the SQL execution. The statement should not work if hasPrivilege is false  but the test will incorrectly pass if the statement succeeds. I added fail asserts with revision 552922 like:if (!hasPrivilege) fail('expected no INSERT permission on table');but these two for INSERT and UPDATE caused the test to fail (about 6 fixtures fail) indicating that the statement succeeds even if the permission is not granted.It could be a test problem but needs some investigation.The asserts for assertInsertPrivilege and asserUpdatePrivilege are commented out to stop the test failing.   ,1
2902,AS IDENTITY (START WITH -9223372036854775808) fails    When creating a tableAS IDENTITY (START WITH -9223372036854775808)fails butAS IDENTITY (START WITH -9223372036854775807)succeeds.Guess this is a parsing SQL problem as the absolute value appears to be held in a long  which is not quite long enough at the positive end.   ,0
2910,SimpleStringOperatorNode in it's bindExpression method generates a character string CAST if required but does not set the correct collation.    Following query should run into error if run in a territory based database SELECT TABLENAME FROM SYS.SYSTABLES WHERE UPPER(CURRENT_DATE) = TABLENAME;When a CAST node is generated on top of CURRENT_DATE to create a character string type  we do not set the collation of that character string type and hence it always ends up getting the default which is collation derivation IMPLICIT and collation type UCS_BASIC. That does not sound right. There might be other places where we generate CAST node to create a character string type. We should check if the collation is set correctly for them.   ,0
2911,Implement a buffer manager using java.util.concurrent classes    There are indications that the buffer manager is a bottleneck for some types of multi-user load. For instance  Anders Morken wrote this in a comment on DERBY-1704: 'With a separate table and index for each thread (to remove latch contention and lock waits from the equation) we (...) found that org.apache.derby.impl.services.cache.Clock.find()/release() caused about 5 times more contention than the synchronization in LockSet.lockObject() and LockSet.unlock(). That might be an indicator of where to apply the next push'.It would be interesting to see the scalability and performance of a buffer manager which exploits the concurrency utilities added in Java SE 5.   ,0
2935,DDMReader.readLengthAndCodePoint() decodes long integer incorrectly    DDMReader.readLengthAndCodePoint() contains code to decode a long integer from a byte array. This code is broken since it uses int operations and not long operations in the decoding. The long might be encoded using four  six or eight bytes  and since Derby currently always uses the four bytes encoding  the bug is not exposed in the current code.   ,0
2937,ERROR 22011: The second or third argument of the SUBSTR function is out of range   with data concatenation in group by query.    CREATE TABLE A (C CHAR(10) NOT NULL  D DATE NOT NULL  DC DECIMAL(6 2));INSERT INTO A VALUES ('aaa'  DATE('2007-07-10')  500.00); SELECT A.C  SUBSTR (MAX(CAST(A.D AS CHAR(10)) || CAST(A.DC AS CHAR(8)))  11  8) AS BUG FROM A GROUP BY A.C;results in a 22011 error on the select.ij&gt; C |BUG-------------------ERROR 22011: The second or third argument of the SUBSTR function is out of rangeNote that the ResultSetMetaData seems to indicate to ij that the column width of 'BUG' is four instead of 18.   ,0
2946,In soft upgrade mode  the metadata queries do not get compiled in SYS schema. This will cause problems in future releases of Derby.    EmbedDatabaseMetaData implements metadata queries. The implementation of metadata queries in EmbedDatabaseMetaData checks if we are in soft upgrade mode (getPreparedQuery() has following code)if (notInSoftUpgradeMode()) s = getPreparedQueryUsingSystemTables(queryName  net);else { try { //Can't use stored prepared statements because we are in soft upgrade //mode and hence need to get metadata sql from metadata.properties file //or metadata_net.properties String queryText = getQueryFromDescription(queryName  net); s = getEmbedConnection().prepareMetaDataStatement(queryText); } catch (Throwable t) { throw handleException(t); } }So  when running in soft upgrade mode  we do not go through SYSSTATEMENT but this will cause the metadata query to run in whatever the current schema may be rather than in SYS schema. This is not a problem in Derby 10.3 release because during soft upgarde  the collation will always be UCS_BASIC and hence collation mismatch can't happen.But in Derby 10.3  a user can create a database with territory based collation. When such a database will be in soft upgrade mode for say Derby 10.4  the metadata queries will run into problem if they are run in a user schema. This is because in soft upgrade mode  we do not go through SYSSTATEMENTS and instead compile the metadata queries in current schema. If the current schema is user schema  then character string literals in metadata queries will get the collation type of territory based and when compared with character string colunms from SYS tables with collation type of UCS_BASIC  we will end up getting compilation error for the metadata queries. So  before the next release  we will have to fix this problem. One solution may be to somehow make the current compilation schema as SYS when running the metadata queries in soft upgrade mode.   ,0
2951,BatchUpdateTest.testAssociatedParams test fails with collation with exception: Java exception: 'ASSERT FAILED type of inserted column[0] = org.apache.derby.iapi.types.CollatorSQLChartype of template column[0] = org.apache.derby.iapi.types.SQLChar:    BatchUpdateTest.testAssociatedParams test fails with collation with exception: java.sql.SQLException: Java exception: 'ASSERT FAILED type of inserted column&#91;0&#93; = org.apache.derby.iapi.types.CollatorSQLChartype of template column&#91;0&#93; = org.apache.derby.iapi.types.SQLChar: org.apache.derby.shared.common.sanity.AssertFailure'.Full trace below:Java exception: 'ASSERT FAILED type of inserted column&#91;0&#93; = org.apache.derby.iapi.types.CollatorSQLChartype of template column&#91;0&#93; = org.apache.derby.iapi.types.SQLChar: org.apache.derby.shared.common.sanity.AssertFailure'.at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1572) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1293) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testAssociatedParams(BatchUpdateTest.java:416) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:615) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED type of inserted column&#91;0&#93; = org.apache.derby.iapi.types.CollatorSQLChartype of template column&#91;0&#93; = org.apache.derby.iapi.types.SQLChar at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.impl.store.access.btree.OpenBTree.isIndexableRowConsistent(OpenBTree.java:529) at org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:385) at org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1035) at org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:211) at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:455) at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:398) at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:605) at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:453) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1024) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) ... 54 more   ,0
2955,ERROR 42ZA2 creating table with check constraint with literal comparison    I cannot create the following table with a collated database. EMPNAME should be TERRITORY_BASED collation I think  but perhaps is not initialized in time for the check constraint processing.ij&gt; connect 'jdbc:derby:nordb;create=true;territory=no_NO;collation=TERRITORY_BASED';ij&gt; CREATE TABLE STAFF9 (EMPNUM CHAR(3) NOT NULL CONSTRAINT STAFF9_PK PRIMARY KEY  EMPNAME CHAR(20)  GRADE DECIMAL(4)  CITY CHAR(15)  CONSTRAINT STAFF9_EMPNAME CHECK (EMPNAME NOT LIKE 'T%'));ERROR 42ZA2: Operand of LIKE predicate with type CHAR(20) and collation UCS_BASIC is not compatable with LIKE pattern operand with type CHAR(2) and collation TERRITORY_BASED.   ,0
2961,TriggerTest.testTypesINActionStatement fails with 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLClob) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.CollatorSQLClob)    I have not yet been able to create a stand-alone repro but the test TriggerTest.testTypesINActionStatement fails with 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLClob) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.CollatorSQLClob)Failed statement is: sqlMain = 'SELECT ID  XMLSERIALIZE(V AS CLOB)  ' + 'XMLSERIALIZE(V AS CLOB) FROM T_MAIN ORDER BY 1';2) testTypesInActionStatement(org.apache.derbyTesting.functionTests.tests.lang.TriggerTest)java.sql.SQLException: Java exception: 'ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLClob) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.CollatorSQLClob): org.apache.derby.shared.common.sanity.AssertFailure'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1572) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1293) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:153) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesCompareMainToAction(TriggerTest.java:769) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesInsertTest(TriggerTest.java:546) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypeTest(TriggerTest.java:445) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testTypesInActionStatement(TriggerTest.java:427) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLClob) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.CollatorSQLClob) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.impl.store.access.sort.MergeSort.checkColumnTypes(MergeSort.java:467) at org.apache.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:98) at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(SortResultSet.java:317) at org.apache.derby.impl.sql.execute.SortResultSet.openCore(SortResultSet.java:268) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:258) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) ... 45 more   ,0
2966,rs.moveToInsertRow() causes loss of connection with TERRITORY_BASED collation.    In the attached test case  rs.moveToInsertRow() causes loss of the connection with a TERRITORY_BASED collation database. With UCS_BASIC it is fine.   ,0
2981,Convert jdbcapi/prepStamtNull.java to JUnit       ,0
2983,The ResultSet returned by DatabaseMetaData.getFunctions() does not contain a required column named FUNCTION_TYPE.    The FUNCTION_TYPE column  sandwiched between REMARKS and SPECIFIC_NAME  is supposed to describe the return type of the function.   ,0
2986,Query involving CASE statement significantly slower in 10.3.1.4 than in 10.2.2.0    A select of a CASE statement that performed acceptably in 10.2.2.0 is very slow in 10.3.1.4 the first time it is executed.The following example ij script:ELAPSEDTIME ON;CREATE table test1(id integer);CREATE table test2(id varchar(10));SELECT CASE WHEN t.id = 1 THEN 'a' WHEN t.id = 2 THEN 'b' WHEN t.id = 3 THEN 'c' WHEN t.id = 4 THEN 'd' WHEN t.id = 5 THEN 'e' WHEN t.id = 6 THEN 'f' WHEN t.id = 7 THEN 'g' WHEN t.id = 8 THEN 'h' WHEN t.id = 11 THEN 'i' WHEN t.id = 12 THEN 'j'  WHEN t.id = 15 THEN 'k' WHEN t.id = 16 THEN 'l' WHEN t.id = 23 THEN 'm'  WHEN t.id = 24 THEN 'n' WHEN t.id = 27 THEN 'o' WHEN t.id = 31 THEN 'p' WHEN t.id = 41 THEN 'q' WHEN t.id = 42 THEN 'r' WHEN t.id = 50 THEN 's' ELSE (SELECT t2.id FROM test2 t2 ) ENDFROM test1 t;When run on 10.2.2.0 the select results in ELAPSED TIME = 187 milliseconds.When run on 10.3.1.4 the select results in ELAPSED TIME = 62281 milliseconds.   ,0
2989,Insert into table with constraints fails if the table name is 'indicator' (or any other SQL keyword)    I've runned the testcase against both 10.2.2.0 (latest stable) and 10.4.0.0 alpha (trunk) and results are the same.Sysinfo output:------------------ �_�__��__�_��ێ�__�_�Η�_��__�_��_�_��ێ�_ٴ_��ێJava ------------------�_�__��_��_�Η�_��ێ�_ٴ_��ێJava: 1.5.0_11�_�_�ȴ__�_��ێ��_�_�_��__�_��_��_ٴ_��__ Java: Sun Microsystems Inc.�_�_��__�_��__�_��_�_��側__�_��_ٴ_��__ �_��__�_��_�_���_�_�_��_��_��__�_��__ Java: C:/java/jre-1.5.0�_�___�܆�_�ێ�_��__�_��_��_��_�_��ێ�ێ�__�_��__ Java: D:/dev/workspaces/DerbyQuery/bin;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbytools.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derby.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyclient.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_cs.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_de_DE.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_es.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_fr.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_hu.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_it.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_ja_JP.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_ko_KR.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_pl.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_pt_BR.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_zh_CN.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyLocale_zh_TW.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbynet.jar;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyrun.jar�_�__��__�_��ێ�_�___�_�: Windows XP�_���_Η�_��ێ�_ٴ_���_�_��_��__�_���_��Η�_��_� �_�___�_�: x86�_�__��_��_�Η�_��ێ�_ٴ_��ێ�_�___�_�: 5.1�_�__��__�_��ێ�_��_�_��__�_��_��_��__�_�_��__�_��__�_��_�_���_�_��_��_��_��ێJava: dmitrygusev�_�_��__�_��__�_��_�_��側__�_��_ٴ_��__ �_��__�_��_�_���_�_�_��_��_��__�_��__ �_��_�_��__�_��_��_��__�_�_��__�_��__�_��_�_���_�_��_��_��_��ێJava: C:/Documents and Settings/dmitrygusev�_�뢙�_�_���_�_�_��_��_��__�_��__ �_��_�_��__�_��_��_��__�_�_��__�_��__�_��_�_���_�_��_��_��_��ێJava: D:/dev/workspaces/DerbyQueryjava.specification.name: Java Platform API Specificationjava.specification.version: 1.5--------- �_�__��__�_��ێ�__�_�Η�_��__�_��_�_��ێ�_ٴ_��ێDerby --------JRE - JDBC: J2SE 5.0 - JDBC 3.0&#91;D:/dev/src/db-derby-trunk-20070802/jars/sane/derby.jar&#93; 10.4.0.0 alpha - (???)&#91;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbytools.jar&#93; 10.4.0.0 alpha - (???)&#91;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbynet.jar&#93; 10.4.0.0 alpha - (???)&#91;D:/dev/src/db-derby-trunk-20070802/jars/sane/derbyclient.jar&#93; 10.4.0.0 alpha - (???)----------------------------------------------------------------------- �_�__��__�_��ێ�__�_�Η�_��__�_��_�_��ێ�_ٴ_��ێ�_��__ �_��_��_��__�_��__�_��_�_��_��_��_� ------------------�_��_��_��_��_��__�_��܍_��_�_��ێ�_��_��_��__�_��__�_��_�_��_��_��ێ [�_�Η�_��܆ێ�ێ�__�_��_ٴ_��__/�_����_��__�_��ێ�ێ�_ٴ_��ێ&#91;ru_RU&#93;]�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;cs&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;de_DE&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;es&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;fr&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;hu&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;it&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;ja_JP&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;ko_KR&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;pl&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;pt_BR&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;ru&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;zh_CN&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)�_�___�_��_��__�_��_�_�Η�_��۴__�_��_��_��__�_��_� �_��_�_��__�_��_��_��_��_��_��_�Η�_��__�_��__�_��_� �_��_��_��__�_��__�_��_�_��_��_��_�: &#91;zh_TW&#93; �_��__�_��_��_�Η�_��ێ�_ٴ_��ێ 10.4.0.0 alpha - (???)------------------------------------------------------How to reproduce the bug:1. Create a table with name 'indicator' (or any other SQL keyword as the name  i.e. 'select') and one field of any type  for instance CHAR(1)  like this:CREATE TABLE /'indicator/'(c CHAR(1) DEFAULT 'N')2. Add constraint to the field:ALTER TABLE /' indicator /' ADD CONSTRAINT /'MY_CONSTRAINT/' CHECK ((c IN ('Y' 'N')))3. Try to insert any row to that table:INSERT INTO /'indicator/' VALUES ('N')The INSERT statement will throw an exception:java.sql.SQLException: Java exception: ': java.util.EmptyStackException'.Also  see the program (Main.java) attached to this issue and derby.log contained the exception's stacktace output.I've also created and attached the patch that may fix this issue. Hope this help to improve Derby.   ,0
2991,Index split deadlock    After doing dome research on the mailing list  it appears that the index split deadlock is a known behaviour  so I will start by describing the theoretical problem first and then follow with the details of my test case.If you have concurrent select and insert transactions on the same table  the observed locking behaviour is as follows: the select transaction acquires an S lock on the root block of the index and then waits for an S lock on some uncommitted row of the insert transaction the insert transaction acquires X locks on the inserted records and if it needs to do an index split creates a sub-transaction that tries to acquire an X lock on the root block of the indexIn summary: INDEX LOCK followed by ROW LOCK + ROW LOCK followed by INDEX LOCK = deadlockIn the case of my project this is an important issue (lack of concurrency after being forced to use table level locking) and I would like to contribute to the project and fix this issue (if possible). I was wondering if someone that knows the code can give me a few pointers on the implications of this issue: Is this a limitation of the top-down algorithm used? Would fixing it require to use a bottom up algorithm for better concurrency (which is certainly non trivial)? Trying to break the circular locking above  I would first question why does the select transaction need to acquire (and hold) a lock on the root block of the index. Would it be possible to ensure the consistency of the select without locking the index?The attached test (InsertSelectDeadlock.java) tries to simulate a typical data collection application  it consists of:  an insert thread that inserts records in batch a select thread that 'processes' the records inserted by the other thread: 'select * from table where id &gt; ?'The derby log provides detail about the deadlock trace and stacktraces_during_deadlock.txt shows that the inser thread is doing an index split.The test was run on 10.2.2.0 and 10.3.1.4 with identical behaviour.Thanks Bogdan Calmac.   ,0
2992,getBinaryStream returns incorrect result (truncated value) if underlying blob is deleted    If getBinaryStream is reading a value (READ_UNCOMMITTED) and the row is deleted by another connection  a truncated value will be returned without error. I believe instead either the whole value or an IOException should occur.With 10.2 and higher with the repro attahed we get:&gt; java TruncatedBlobEmbedded:Read 32669 bytes0 rows in BLOBCLOBWith 10.1Embedded:Read 40000 bytes (OK)0 rows in BLOBCLOB Note network server returns the full value for both 10.1 and 10.2 but gives a lock timeout for 10.2+. I will file a separate issue for that.   ,0
2996,iepnegativetests_ES.diff fails with J2ME Foundation    Diff file derbyall/i18nTest/iepnegativetests_ES.diff             Start: iepnegativetests_ES jdkJ2ME Foundation Specification v1.1 derbyall:i18nTest 2007-08-03 01:28:49 ***54a55 58&gt; ij&gt; --export table is null&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  null  'extinout/t1.dat'  &gt; null  null  null) ;&gt; ERROR XIE06: Nombre de entidad nulo.64a69 72&gt; ij&gt; --export query is null &gt; call SYSCS_UTIL.SYSCS_EXPORT_QUERY(null &gt; 'extinout/t1.dat'   null  null  null) ;&gt; ERROR XIE06: Nombre de entidad nulo.70 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('XXXX'  'T1'   'extinout/t1.dat'   70a78&gt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('XXXX'  'T1'   'extinout/t2.dat'   76 del&lt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   76a84&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   79 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   79a87&gt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   83 del&lt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   83a91&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   87 del&lt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   87a95&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   90 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   90a98&gt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   95 del&lt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   95a103&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   98 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   98a106&gt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   104 del&lt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   104a112&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   110 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   110a118&gt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   115 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE('IEP'  'T1'   'extinout/t1.dat'   115a123&gt; ij&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE('IEP'  'T1'   'extinout/t2.dat'   131 del&lt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE('IEP'  'T1'   'extin/nodir/t1.dat'   131a139&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE('IEP'  'T1'   'extin/nodir/t2.dat'   136 del&lt; ERROR XIE04: Archivo de datos no encontrado: extin/nodir/t1.dat136a144&gt; ERROR XIE04: Archivo de datos no encontrado: extin/nodir/t2.dat138 del&lt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'NOTABLE'   'extinout/t1.dat'   138a146&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'NOTABLE'   'extinout/t2.dat'   142 del&lt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('XXXX'  'T1'   'extinout/t1.dat'   142a150&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('XXXX'  'T1'   'extinout/t2.dat'   145 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   145a153&gt; ij&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   154 del&lt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   154a162&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   160 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   160a168&gt; ij&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   167 del&lt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t1.dat'   167a175&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('IEP'  'T1'   'extinout/t2.dat'   288 del&lt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T3'   'extinout/t3.dat'   288a296&gt; ij&gt; call SYSCS_UTIL.SYSCS_EXPORT_TABLE ('IEP'  'T3'   'extinout/t3_1.dat'   293 del&lt; 'extinout/t3.dat'   293a301&gt; 'extinout/t3_1.dat'   297 del&lt; 'extinout/t3.dat'   297a305&gt; 'extinout/t3_1.dat'   302 del&lt; 'extinout/t3.dat'   302a310&gt; 'extinout/t3_1.dat'   307 del&lt; 'extinout/t3.dat'   307a315&gt; 'extinout/t3_1.dat'   313 del&lt; 'extinout/t3.dat'   313a321&gt; 'extinout/t3_1.dat'   317 del&lt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('SYS'  'SYSTABLES'   'extinout/t3.dat'   317a325&gt; call SYSCS_UTIL.SYSCS_IMPORT_TABLE ('SYS'  'SYSTABLES'   'extinout/t3_1.dat'   Test Failed. End: iepnegativetests_ES jdkJ2ME Foundation Specification v1.1 derbyall:i18nTest 2007-08-03 01:29:03 ***   ,0
2999,convert lang/lockTable.sql to Junit       ,0
3027,CollationTest fails with 'Unexpected row count: expected: but was:' when Xalan 2.7 jars are in classpath    When I have the Xalan jars in the classpath  testEnglishCollation()  testNorwayCollation() and testPolishCollation() fail with this stack trace:1) testEnglishCollation(org.apache.derbyTesting.functionTests.tests.lang.CollationTest)junit.framework.AssertionFailedError: Unexpected row count: expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.JDBC.assertDrainResults(JDBC.java:540) at org.apache.derbyTesting.junit.JDBC.assertEmpty(JDBC.java:468) at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.checkLangBasedQuery(CollationTest.java:1129) at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.commonTestingForTerritoryBasedDB(CollationTest.java:1056) at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testEnglishCollation(CollationTest.java:512) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)If I remove the Xalan jars from the classpath  the test runs cleanly.   ,0
3032,java.lang.ClassCastException returning null from a case statement  in subquery    The following query returning NULL date from a case statement in a subquery causees a ClassCastException in 10.3.The query works fine in 10.2ij&gt; create table t (d date  vc varchar(30));0 rows inserted/updated/deletedij&gt; insert into t values(CURRENT_DATE  'hello');1 row inserted/updated/deletedij&gt; SELECT d from t where d = (SELECT CASE WHEN 1 = 1 THEN CURRENT_DATE ELSE NULL END from t);D----------2007-08-281 row selectedij&gt; SELECT d from t where d = (SELECT CASE WHEN 1 = 0 THEN CURRENT_DATE ELSE NULL END from t);D----------ERROR 38000: The exception 'java.lang.ClassCastException: org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue' was thrown while evaluating an expression.java.sql.SQLException: The exception 'java.lang.ClassCastException: org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:224) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1572) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4323) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:464) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:368) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:382) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:338) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:241) at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:229) at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:449) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:523) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:364) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:262) at org.apache.derby.impl.tools.ij.Main.go(Main.java:215) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56) at org.apache.derby.tools.ij.main(ij.java:71)Caused by: java.sql.SQLException: Java exception: 'org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue: java.lang.ClassCastException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) ... 19 moreCaused by: java.lang.ClassCastException: org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue at org.apache.derby.exe.ac12564092x0114xaec2x9627x0000002183d82.g0(Unknown Source) at org.apache.derby.exe.ac12564092x0114xaec2x9627x0000002183d82.e1(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:141) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:267) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:468) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:424) ... 13 moreERROR XJ001: Java exception: 'org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue: java.lang.ClassCastException'.java.sql.SQLException: Java exception: 'org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue: java.lang.ClassCastException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1572) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4323) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:464) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:368) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:382) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:338) at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:241) at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:229) at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:449) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:523) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:364) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:262) at org.apache.derby.impl.tools.ij.Main.go(Main.java:215) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181) at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56) at org.apache.derby.tools.ij.main(ij.java:71)Caused by: java.lang.ClassCastException: org.apache.derby.iapi.types.SQLChar incompatible with org.apache.derby.iapi.types.DateTimeDataValue at org.apache.derby.exe.ac12564092x0114xaec2x9627x0000002183d82.g0(Unknown Source) at org.apache.derby.exe.ac12564092x0114xaec2x9627x0000002183d82.e1(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:141) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:267) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:468) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:424) ... 13 more   ,0
3033,select query results in nullpointer exception in skipScan()    The following error was repeatedly thrown when we tried to run a select query via JDBC. Strangely  the exact same select query did not trigger any error when run from the command line console. After we added an index  the error went away completely. java.lang.NullPointerException at org.apache.derby.impl.sql.execute.NoPutResultSetImpl.skipScan(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.execute(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)   ,0
3043,'Schema  does not exist' when constraint used in table definition    https://issues.apache.org/jira/browse/DERBY-568#action_12524420In the response to my original comment post  which you can find via the permalink above  I was encouraged to file this as a new issue.verified this back to 10.1.2.1 with the following ij script.connect 'jdbc:derby:wombat;create=true;user=blogs';CREATE TABLE BLOGSCOM_BLOGSUSERS(PK INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY username VARCHAR(16) NOT NULL CONSTRAINT BLOGSCOMBLOGSUSERS_UNIQUE_username UNIQUE CONSTRAINT BLOGSCOMBLOGS_USERS_PASSWORD_username CHECK(LENGTH(username)&gt;7) password VARCHAR (32672) NOT NULL   PRIMARY KEY(PK));   ,0
3054,lang/synonym.sql fails with weme 6.1 with junit.framework.ComparisonFailure: Output at line 383 expected: but was:    synonym(org.apache.derbyTesting.functionTests.tests.lang.LangScripts) failed:junit.framework.ComparisonFailure: Output at line 383 expected:&lt;...1...&gt; but was:&lt;...2...&gt; at junit.framework.Assert.assertEquals(Assert.java:81) at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:100) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:124) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at TimeRunner.main(TimeRunner.java:31)   ,0
3068,testImportExportProcedureNegative(org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected: but was:    1) testImportExportProcedureNegative(org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;38000&gt; but was:&lt;XIE0S&gt; at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:668) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:717) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:898) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest.testImportExportProcedureNegative(ImportExportProcedureTest.java:1933) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: The export operation was not performed  because the specified output file (extinout/t1.dat) already exists. Export processing will not overwrite an existing file  even if the process has permissions to write to that file  due to security concerns  and to avoid accidental file damage. Please either change the output file name in the export procedure arguments to specify a file which does not exist  or delete the existing file  then retry the export operation. at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.PreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:893) ... 45 moreCaused by: org.apache.derby.client.am.SqlException: The export operation was not performed  because the specified output file (extinout/t1.dat) already exists. Export processing will not overwrite an existing file  even if the process has permissions to write to that file  due to security concerns  and to avoid accidental file damage. Please either change the output file name in the export procedure arguments to specify a file which does not exist  or delete the existing file  then retry the export operation. at org.apache.derby.client.am.Statement.completeExecute(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readExecuteCall(Unknown Source) at org.apache.derby.client.net.StatementReply.readExecuteCall(Unknown Source) at org.apache.derby.client.net.NetStatement.readExecuteCall_(Unknown Source) at org.apache.derby.client.am.Statement.readExecuteCall(Unknown Source) at org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeX(Unknown Source) ... 47 more   ,0
3069,Derby does not resolve functions bound to methods with varargs.    Varargs were added in Java 5. It would be nice if Derby let you invoke a function bound to a method with a variable length argument list. The Reference Guide states a small number of restrictions for methods which can be invoked as Derby functions: They must be public  static  and not have arguments which are long datatypes. I see no reason that Derby shouldn't be able to resolve and invoke functions which are bound to methods which don't suffer these limitations but which have variable argument lists.   ,0
3077,Trying to reconnect with derby client after bringing server down throws SQL Exception 58009 rather than 08XXX exception    This issue was discussed in DERBY-401  because the case where the server is brought down and an application tries to reconnect does not throw a SQLNonTransientException. Discussion is still underway about whether 58XXX exceptions should be SQLNonTransientExceptions  but at least for this case changing the exception to 08006 per Knut's suggestion should correct the problem for this case. See https://issues.apache.org/jira/browse/DERBY-401#action_12527400Below is current stack and test case.Apache Derbygot connection now sleepnow try to use the connection after you killed the nSException in thread 'main' java.sql.SQLException: A communications error has been detected: Software caused connection abort: recv failed.at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)at org.apache.derby.client.am.LogicalConnection.prepareStatement(Unknown Source)at DerbyClientNonXA.main(DerbyClientNonXA.java:48)Caused by: org.apache.derby.client.am.DisconnectException: A communications error has been detected: Software caused connection abort: recv failed.at org.apache.derby.client.net.NetAgent.throwCommunicationsFailure(Unknown Source)at org.apache.derby.client.net.Reply.fill(Unknown Source)at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Unknown Source)at org.apache.derby.client.net.Reply.readDssHeader(Unknown Source)at org.apache.derby.client.net.Reply.startSameIdChainParse(Unknown Source)at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)... 3 moreCaused by: java.net.SocketException: Software caused connection abort: recv failedat java.net.SocketInputStream.read(SocketInputStream.java:129)... 15 moreimport java.sql.Connection;import java.sql.DatabaseMetaData;import java.sql.PreparedStatement;import java.sql.SQLException;import java.sql.Statement;import javax.sql.PooledConnection;public class DerbyClientNonXA{public static void main(String args[]) throws Exception{org.apache.derby.jdbc.ClientConnectionPoolDataSource40 ds = new org.apache.derby.jdbc.ClientConnectionPoolDataSource40();Connection conn = null;ds.setDatabaseName('e://temp//sampl127;create=true');PooledConnection pooledCon = ds.getPooledConnection();conn = pooledCon.getConnection();DatabaseMetaData md = conn.getMetaData();System.out.println(md.getDatabaseProductVersion());System.out.println(md.getDatabaseProductName());System.out.println('got connection now sleep. Bring down network server.');Statement st = null;PreparedStatement ps1 = null;st = conn.createStatement();try{st.executeUpdate('drop table TAB1');}catch (SQLException x){System.out.println('no table exists');}Thread.sleep(15000);System.out.println('now try to use the connection after you killed the nS');ps1 = conn.prepareStatement('CREATE TABLE TAB1(COL1 INT NOT NULL)');ps1.executeUpdate();conn.commit();System.out.println('done');}}   ,0
3092,Use java.util.concurrent in TransactionTable to improve scalability    Running scalability tests with the client and buffer manager from DERBY-2911 shows that access to the TransactionTable.trans (a Hashtable) and XactFactory.tranId (a shared long) are the next major sources of contention.   ,0
3093,Intermittent transaction failure caused by internal duplicate savepoint name for triggers    While running our app overnight  performing some intensive database operations (primarily deletes)  we experienced a transaction failure  with error message 'A SAVEPOINT with the passed name already exists in the current transaction'. This failure appears to be very intermittent  as I've run the same operation successfully for hours and hours without failure. Some more information:1. I see that there are four JIRA issues which report the same message (DERBY-2773  DERBY-1457  DERBY-2808  DERBY-2804). I am not sure to what extent if any  the problem I experienced is related to these issues.��_�_� At least three of the above JIRA issues are related to triggers. Our transaction failure occurred while performing a delete in a table which has delete triggers.��_�_� We aren't using savepoints explicitly. Of course  it can be seen in the stack trace that the trigger operation is setting a savepoint.��_�_� One of the JIRA issues mentions exceeding maximum depth of nested triggers. Not sure what a nested trigger is  but the trigger we are performing should not (in theory) cause another trigger event.2. Here's the stack trace:Caused by: java.sql.SQLException: A SAVEPOINT with the passed name already exists in the current transaction. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source) at com.referentia.sdf.monitor.samplebase.derby.DerbySampleBase$3.perform(DerbySampleBase.java:682) at com.referentia.sdf.monitor.samplebase.derby.DerbySampleBase.performInTransaction(DerbySampleBase.java:2747) ... 7 moreCaused by: java.sql.SQLException: A SAVEPOINT with the passed name already exists in the current transaction. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 18 moreCaused by: ERROR 3B501: A SAVEPOINT with the passed name already exists in the current transaction. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.raw.xact.Xact.setSavePoint(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.setSavePoint(Unknown Source) at org.apache.derby.impl.sql.conn.GenericStatementContext.setSavePoint(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(Unknown Source) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(Unknown Source) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 12 more3. Here are the relevant tables and triggers. We have different tables for different 'sample' data types in our application (currently int  long  float  double  Boolean  string). I have shown the int_sample table; the other tables are identical but have a different data type for the value field. Sample records are first class; time records are second class - they only exist to support sample records. When there are no remaining sample records for a given time record  the time record can be removed. It is the job of the trigger to perform this cleanup: when a record is deleted from any of the sample tables  the time record corresponding to *_sample.fk_time_id is deleted only if there are no remaining records in any of the sample tables which have the same fk_time_id. So although there are cascading deletes (deleting a time record deletes all of its samples)  the trigger should not recurse because the trigger only deletes when there are no associated records.create table time ( id int not null generated always as identity  time timestamp not null  constraint time_pk primary key (id)  constraint time_unique unique (time));create table int_sample ( fk_band_id int not null  fk_time_id int not null  value int not null  constraint int_sample_pk primary key (fk_band_id  fk_time_id)  constraint int_sample_fk_band foreign key (fk_band_id) references band (id) on delete cascade  constraint int_sample_fk_time foreign key (fk_time_id) references time (id) on delete cascade);create trigger cascade_delete_unused_time_for_int_sample_trigger after delete on int_sample referencing old as oldrow for each row delete from time where  time.id = oldrow.fk_time_id and id not in (select fk_time_id from int_sample)  and id not in (select fk_time_id from long_sample)  and id not in (select fk_time_id from float_sample)  and id not in (select fk_time_id from double_sample)  and id not in (select fk_time_id from boolean_sample)  and id not in (select fk_time_id from string_sample);4. Invocation. This is very rough pseudocode focusing on the core logic. In reality  there's a lot more code  but I'm doing the usual stuff  such as using prepared statements  and closing all resources when done. The key thing is that I'm using two statements in a nested fashion; in the outer statement  I iterate over records in the time table  and in the inner loop I use a second statement to delete records in one of the sample tables. I can provide the actual code if desired.deleteSamples(int bandId  String sampleTable  Object someQueryCriteria) { within transaction { create stmt1 iterating over time ids in time table (restricted by someQueryCriteria) for (time_id in stmt1) { PreparedStatement stmt2 = conn.prepareStatement(String.format( 'delete from %s where fk_band_id = ? and fk_time_id = ?'  sampleTable)); set stmt2 parameters and executeUpdate() } }}   ,0
3098,LOB locks are not released after free().    When getBlob/getClob is called on the ResultSet  the current row islocked if the JDBC driver does not cache the entire LOB value inmemory. This is done to prevent the Blob/Clob object from beingchanged. Until now  this lock has been held to the end of thetransaction.JDBC4 introduced free() methods for the Blob/Clob class. The lockingshould be changed so that the locks is releases when the Blob/Clobobject is freed.   ,0
3100,java.lang.NumberFormatException in test lang.TableFunctionTest on specific machines (Win2003  Vista)    This failure is gleaned from the nightly tests posted to the list. The test started failing on September 13.The stack is:1) testTableFunctions(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.lang.NumberFormatException: For input string: '13 00' at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1224) at java.lang.Double.parseDouble(Double.java:510) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.readDoubleTag(TableFunctionTest.java:1647) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.vtiCosting(TableFunctionTest.java:1124) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.testTableFunctions(TableFunctionTest.java:797) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)   ,0
3107,On client  Clob.free() does not release locators.    On client  Clob.free() does not call the stored procedure to release the locator associated with the Clob. Hence  server-side Clob objects are not freed until the transaction terminates.   ,0
3116,totalSpace not properly initialized in AllocPage    There are some problems with the initialization of totalSpace in AllocPage. It is initialized in StoredPage.initSpace() which is again called from StoredPage.usePageBuffer()  and it is set to the value returned from AllocPage.getMaxFreeSpace(). The problems are: 1) The calculation in getMaxFreeSpace() uses borrowedSpace  but when createIdentity() is called on an AllocPage  borrowedSpace has not been initialized when getMaxFreeSpace() is called and the calculated size is wrong. 2) When a page object is reused  usePageBuffer() is only called if a new byte array must be allocated (because the new page has a different size than the old page). This means that the totalSize field gets the same value as in the old page if their sizes are equal  which is not necessarily correct.   ,0
3117,Adjust master build script to require the Java 5 compiler to build Derby    Require the Java 5 compiler in order to build Derby as approved by the community recently: http://www.nabble.com/-VOTE--Require-Java-5-%28or-later%29-compiler-to-build-Derby-tf4522491.html#a13030783   ,0
3136,Cut down on object creations in LIKE clause implementation of territory based characters.    The LIKE clause for territory based characters was implemented correctly based on SQL standards in DERBY-2967 but the object (String and CollationElementIterator) creations introduced in DERBY-2967 can be cut down by following Knut's simple solution. I am copying that solution from DERBY-2967. We should implement that solution to improve the performance of LIKE for territory based characters.*********copied from DERBY-2967*********************************************************Another simple way to cut down the string allocations... I think you could express iapi.types.Like:checkEquality() like this:  if (val&#91;vLoc&#93; == pat&#91;pLoc&#93;) { // same character  so two strings consisting of this // single character must be equal regardless of territory return true; } else if (collator == null) { // not same character  must be unequal in UCS_BASIC return false; }  String s1 = new String(val  vLoc  1);  String s1 = new String(pat  pLoc  1);  return collator.compare(s1  s2) == 0; This would only allocate new objects if the characters are not equal.   ,0
3145,ComparisonFailure in synonym(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)    Since r587553 'synonym(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)' has failed with 'junit.framework.ComparisonFailure: Output at line 18 expected:&lt;[]&gt; but was:&lt;&#91;-- When we decide to convert this test to junit test  the converted tests can &#93;&gt;'&lt;method&gt;org.apache.derbyTesting.functionTests.tests.lang.LangScripts&lt;/method&gt;&lt;signature&gt;Output at line 18 expected:&lt;[]&gt; but was:&lt;&#91;-- When we decide to convert this test to junit test  the converted tests can &#93;&gt;&lt;/signature&gt;   ,0
3148,IllegalArgumentException: Malformed /uxxxx encoding while trying to find Xalan version running tests via ant    Following stack trace after executing:ant -propertyfile ant.properties junit-all-codeline-jars &#91;junit&#93; Unexpected exception while trying to find Xalan version: &#91;junit&#93; java.lang.IllegalArgumentException: Malformed /uxxxx encoding. &#91;junit&#93; at java.util.Properties.loadConvert(Properties.java:531) &#91;junit&#93; at java.util.Properties.load(Properties.java:370) &#91;junit&#93; at org.apache.derbyTesting.junit.XML.checkXalanVersion(XML.java:329) &#91;junit&#93; at org.apache.derbyTesting.junit.XML.&lt;clinit&gt;(XML.java:116)   ,0
3151,Reduce dependency on NetworkServerControl in TestConfiguration    Code has been added in TestConfiguration to allow for starting and stopping a Derby network server.Even if you know will not need this functionality  or you simply don't want to have this functionality available  you must include derbynet.jar (or point to classes/).I think this dependency should be reduced  by not having any instance variables and by not importing the class with an explicit import statement. The existing instance variables are not used.With this planned change  you can run tests without including derbynet.jar on the classpath  as long as they don't call 'startNetworkServer' or 'stopNetworkServer'. Most often these methods will be called by a decorator.The downside of this change  is that you won't get any error messages before the mentioned methods are actually executed.A typical error message:Failed to invoke suite():java.lang.NoClassDefFoundError: org/apache/derby/drda/NetworkServerControlI'm sure there are other solutions as well  but this one is really easy.Any opinions on this change?   ,0
3153,AccessControlException when running junit tests under the ant harness in ant 1.7.0    The following AccessControlException occurs on junit tests run under the ant harness if the ant version is 1.7.0: &#91;junit&#93; Running org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest &#91;junit&#93; Tests run: 3  Failures: 0  Errors: 1  Time elapsed: 1.029 sec &#91;junit&#93; Exception in thread 'main' java.security.AccessControlException: access denied (java.io.FilePermission /Users/rh161140/derby/mainline/trunk/junitvmwatcher520156310.properties write) &#91;junit&#93; at java.security.AccessControlContext.checkPermission(AccessControlContext.java:264) &#91;junit&#93; at java.security.AccessController.checkPermission(AccessController.java:427) &#91;junit&#93; at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) &#91;junit&#93; at java.lang.SecurityManager.checkWrite(SecurityManager.java:962) &#91;junit&#93; at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:169) &#91;junit&#93; at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:70) &#91;junit&#93; at java.io.FileWriter.&lt;init&gt;(FileWriter.java:46) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.registerNonCrash(JUnitTestRunner.java:924) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:772) &#91;junit&#93; Running org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest &#91;junit&#93; Tests run: 1  Failures: 0  Errors: 1  Time elapsed: 0 secI haven't looked at the ant source  but here is my theory about what is going on:1) Ant 1.7.0 is trying to write a file to the directory where the ant script lives2) The write is not wrapped in a privileged block3) So all code domains above it on the stack need to be granted write permission on the directory where the ant script livesI will attach a modified version of derby_tests.policy which allows me to start up the tests without tripping across this security exception.   ,1
3160,SYSCS_GET_USER_ACCESS incorrectly treats the passed in user name as a SQL identifier and thus can reports the wrong user information    VALUES SYSCS_GET_USER_ACCESS(CURRENT_USER) will report the wrong user information if the user name needs to be a delimited identifier when used in a SQL statement such as GRANT. E.g. user fred@derby.com  123 etc.Passing the user name as a VARCHAR also returns the wrong user for such user names.   ,1
3165,Updating Building.txt    We (Svein Erik L�_۴_�vland and Henrik Holum) have updated the building.txt document for Derby Trunk. We built the code following every step of the document  and here are our suggested changes. A review of the changes would be appresiated.Removed the empty subsections  and updated the section and subsection numbers. We also updated the references according to the new subsection numbers.Removed 2.2.3 and 2.2.4Renamed 2.2.5 -&gt; 2.2.3  2.2.6 -&gt; 2.2.4 and 2.2.7 -&gt; 2.2.52.1Added 3 directories2.2.1 (1)Updated the text to indicate that any newer version than 1.6.3 can be used. Old text indicated that you could only use 1.6.x versions  not 1.7.2.2.2 (2) and (4) (Windows)Updated the URLs to point directly to download pages for the desired java versions2.2.3 (Previous 2.2.5)Can we use Junit 3.8.2 or does it have to be 3.8.1? if Junit 3.8.2 can be used the link can be replaced with http://kent.dl.sourceforge.net/sourceforge/junit/junit3.8.2.zip. Also update the text to indicate these changes (3.8.*)2.2.5 (Previous 2.2.7)Moved the Optional tag to be consistent with 2.2.4 (Previous 2.2.6) We updated references in the note to reflect the new subsection number.3.3 (3)Updated the number of jar files with local support to 13 instead of 9.We have used Windows XP  so we have not checked the *nix or Mac settings.Hope this is helpfull-Henrik and Svein Erik   ,0
3174,NetworkServerControlApiTest fails with java.security.AccessControlException if not run as first test    There appears to be a problem loading the test specific policy file for NetworkServerControlApiTest if it is not run as the first test in the suite.Failure in the derby.log is:Trace directory changed to C:/test/system.access denied (java.io.FilePermission C:/test/system/Server3.trace write)java.security.AccessControlException: access denied (java.io.FilePermission C:/test/system/Server3.trace write) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) at java.security.AccessController.checkPermission(AccessController.java:546) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkWrite(SecurityManager.java:962) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:169) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:70) at java.io.FileWriter.&lt;init&gt;(FileWriter.java:46) at org.apache.derby.impl.drda.DssTrace$1.run(DssTrace.java:181) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.drda.DssTrace.startComBufferTrace(DssTrace.java:178) at org.apache.derby.impl.drda.Session.initTrace(Session.java:138) at org.apache.derby.impl.drda.Session.setTraceOn(Session.java:152) at org.apache.derby.impl.drda.NetworkServerControlImpl.setTrace(NetworkServerControlImpl.java:3372) at org.apache.derby.impl.drda.NetworkServerControlImpl.processCommands(NetworkServerControlImpl.java:1422) at org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:630) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:264)   ,1
3175,NullPointerException on INSERT after ALTER TABLE ... DROP COLUMN    ij version 10.3ij&gt; connect 'jdbc:derby:bugdb;create=true';ij&gt; create table t ( x varchar(12)  y varchar(12)  id int primary key generated by default as identity);0 rows inserted/updated/deletedij&gt; alter table t drop column y;0 rows inserted/updated/deletedij&gt; insert into t values 'a';ERROR XJ001: Java exception: ': java.lang.NullPointerException'.java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source) at org.apache.derby.iapi.tools.run.main(Unknown Source)Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 18 moreCaused by: java.lang.NullPointerException at org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch(Unknown Source) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 11 more   ,0
3178,DataSourceTest uses ConnectionEventListener but never verifies that events are getting fired    Derby has a junit test called DataSourceTest in jdbcapi package. This test registers ConnectionEventListener for various Connection objects but never verifies that events from those Connection objects are getting delivered to the listeners. Prior to this test's conversion to junit  there were System.out.println in the test but since this test is not cannon based anymore  those printlns have been commented out. I will soon submit a patch where this test will have asserts to make sure that Connection events are getting fired.   ,0
3190,New simple demo suitable for supported Java ME platforms    DERBY-2216 added J2ME (Java ME) support in the simple demo (SimpleApp)  but broke the basic client functionality of the demo (at least in some VMs). Since DERBY-3187 fixes this by removing Java ME support from SimpleApp  a separate simple demo for Java ME should be included along with the other demos available in Derby distributions.Currently supported Java ME platforms are Java ME Virtual Machines with Connected Device Configuration (CDC) support and the Foundation Profile 1.1 or better  with the optional package for JDBC (JSR-169).The new demo should be easy to use and understand  and should be well commented. The demo code should demonstrate how to create and connect to a Derby database in a valid Java ME environment  and perform some basic database operations (insert  update  query). A readme file describing the demo (and instructions for building and running it) should be included.   ,0
3194,LOCALIZEDDISPLAY of CURRENT_TIMESTAMP returns only the TIME    In IJ - LOCALIZEDDISPLAY ON causes VALUES CURRENT_TIMESTAMP to display on the TIMEij&gt; values current_timestamp;1--------------------------2007-11-09 10:37:58.8281 row selectedij&gt; localizeddisplay on;ij&gt; values current_timestamp;1---------------10:38:10 AM PST1 row selected   ,0
3198,Using setQueryTimeout will leak sections    The implementation of setQueryTimeout relies on NetStatementReply.writeSetSpecialRegister() which will allocate a dynamic section when called. No reference to this Section object is kept  and so Section.free() never gets called on it. Executing the same statment repeatedly with a query timeout set results in the client driver throwing an exception because the number of Sections exceeding 32000.   ,0
3202,'AccessControlException: access denied (java.io.FilePermission C:/..../file-2.log read)' in ErrorStreamTest.    Seen on Windows only.See e.g. http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/Limited/testSummary-594211.html : vista  w2003.suitesAll fail *************************************************************1) testFile(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)java.security.AccessControlException: access denied (java.io.FilePermission C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/file-2.log read)2) testWrongFile(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)java.security.AccessControlException: access denied (java.io.FilePermission C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/foo/file-3.log read)3) testFileOverMethod(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)java.security.AccessControlException: access denied (java.io.FilePermission C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/file-8.log read)4) testFileOverField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)java.security.AccessControlException: access denied (java.io.FilePermission C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/file-9.log read)5) testFileOverMethodAndField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)java.security.AccessControlException: access denied (java.io.FilePermission C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/file-10.log read)1) testDefault(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: File C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/derby.log could not be deleted2) testMethod(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: assertNotEmpty failed:C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/method-4.logsuitesAll fail *************************************************************1) testFile(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)java.security.AccessControlException: access denied (java.io.FilePermission C:/cludev/jagtmp/autoderbyN_regression/suitesAll_30/log/system/file-2.log read) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) at java.security.AccessController.checkPermission(AccessController.java:546) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkRead(SecurityManager.java:871) at java.io.File.exists(File.java:731) at java.io.Win32FileSystem.canonicalize(Win32FileSystem.java:402) at java.io.File.getCanonicalPath(File.java:559) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFile(ErrorStreamTest.java:140) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)++   ,1
3214,Optimizer can see negative cost estimates when pulling Optimizables from the join order.    When iterating through join order permutations for a query the optimizer places 'Optimizables' (FromTables) into a join order  estimates the cost  then 'pulls' Optimizables out of the join order and re-places them in different positions. For details see: http://wiki.apache.org/db-derby/JoinOrderPermutationsAs optimizables are added to the join order the optimizer keeps track of the accumulated cost estimate for the join order. Then when an Optimizable is removed ('pulled') from the join order  the optimizer substracts that Optimizable's cost from the total accumulated cost.In certain cases (esp. with very large queries) it's possible that the cost for some Optimizable OPT_A is so large that adding it to the accumulated cost of the join order leads to loss of the previous sum. This happens due to normal Java addition of double values  see 'doubleAdd.java' attached.As an example  assume our current join order is: { OPT_0  OPT_1  -- }and that the estimated costs for OPT_0 and OPT_1 are 700 and 800  respectively. The accumulated cost for OPT_0 and OPT_1 is then 700 + 800 = 1500. Then assume we place OPT_A into the final position in the join order: { OPT_0  OPT_1  OPT_A }If the cost of OPT_A is something that is orders of magnitude larger than 1500  then by adding it to 1500 we will effectively 'lose' the 1500. Let's say the cost of OPT_A is estimated to be 3.14E50 (which is actually possible  esp. as a result of DERBY-1905). The size of OPT_A's cost makes the cost of OPT_0 + OPT_1 insignificant when using Java doubles (see attached doubleAdd.java): 1500 + 3.14E50 = 3.14E50So the total accumulated cost for the join order is now 3.14E50. Later  when we go to pull OPT_A from the join order  we'll subtract its cost from the accumulated cost  yielding: 3.14E50 - 3.14E50 = 0Notice how the accumulated cost  which is supposed to represent the cost of OPT_0 plus the cost of OPT_1  is now ZERO. And our join order goes back to: { OPT_0  OPT_1  -- }Next we pull OPT_1 from the join order  which means we have to subtract it's cost from the accumulated cost: 0 - 800 = -800So we end up with a negative accumulated cost  which is WRONG. (Actually  the ZERO accumulated cost in the previous step was wrong; this is just a side effect).As it turns out  there is code in OptimizerImpl that tries to account for negative costs when the negative value comes from normal imprecise arithmetic. In particular we see the following in the code that pulls Optimizables: double newCost = currentCost.getEstimatedCost(); if (pullCostEstimate != null) { pullCost = pullCostEstimate.getEstimatedCost(); newCost -= pullCost; /* ** It's possible for newCost to go negative here due to ** loss of precision. */ if (newCost &lt; 0.0) newCost = 0.0; ... }This code hides the error mentioned above because when it sees '-800' it assumes that the negative stems from normal loss of precision. So the cost for the plan is incorrectly set to '0'  which makes it cheaper than any other plan thus far (and probably cheaper than anything to come)  and therefore the optimizer will probably choose the wrong plan.I think the check for negative newCost is only valid if the join position that we're pulling is 0-i.e. if we just pulled the first optimizable in the join order. In that case the accumulated cost should be zero  so checking for a negative value and setting it to zero is fine-we're just accounting for the loss of precision that is mentioned in the current code comments.Note that the same issue also exists for 'sort avoidance costs'  but in that code there is (currently) no check for negative costs. So if a situation as described above occurs in the current code when the cost of OPT_A is for a sort avoidance plan  the code will throw an ASSERTION failure because the cost should be non-negative.I noticed this behavior somewhat accidentally while testing out a fix for DERBY-3023: with my attempted fix applied  the query 'new-style-sql.txt' was failing with an ASSERTION failure due to the negative cost estimate. Hence this jira.   ,0
3217,ErrorStreamTest failing on ibm j9 jvm    Getting the following junit tests failures on just on the j9 jvm platform running on windows:There were 11 failures:1) testDefault(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testDefault(ErrorStreamTest.java:128) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)2) testFile(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFile(ErrorStreamTest.java:141) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)3) testWrongFile(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongFile(ErrorStreamTest.java:160) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)4) testMethod(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testMethod(ErrorStreamTest.java:179) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)5) testWrongMethod(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongMethod(ErrorStreamTest.java:198) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)6) testField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testField(ErrorStreamTest.java:217) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)7) testWrongField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongField(ErrorStreamTest.java:236) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)8) testFileOverMethod(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFileOverMethod(ErrorStreamTest.java:257) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)9) testFileOverField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFileOverField(ErrorStreamTest.java:278) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)10) testFileOverMethodAndField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFileOverMethodAndField(ErrorStreamTest.java:302) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)11) testMethodOverField(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: shutdown engine not implemened at org.apache.derbyTesting.junit.DataSourceConnector.shutEngine(DataSourceConnector.java:130) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1091) at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testMethodOverField(ErrorStreamTest.java:326) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at &lt;unknown class&gt;.&lt;unknown method&gt;(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)   ,0
3219,Group by query with many aggregate columns and case statements fails with: ERROR XSDA7: Restore of a serializable or SQLData object of class   attempted to read more data than was originally stored    using the attached database (v10.3) - ' select * from pivotview ' fails with the stack trace below. A view (pivotview_ok) created on a subset of the columns in pivotview executes fine. Adding one column back into pivotview_ok causes failures most of the time. See attached for view definitions.2007-11-21 00:58:49.421 GMT Thread&#91;main 5 main&#93; (XID = 2734422)  (SESSIONID = 0)  (DATABASE = pivotview)  (DRDAID = null)  Failed Statement is: select * from pivotviewERROR XSDA7: Restore of a serializable or SQLData object of class   attempted to read more data than was originally stored at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(Unknown Source) at org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.fetchNext(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeScan.mergeARow(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeScan.init(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.openSortScan(Unknown Source) at org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter(Unknown Source) at org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.io.EOFException at java.io.DataInputStream.readBoolean(DataInputStream.java:248) at org.apache.derby.impl.sql.execute.MaxMinAggregator.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.iapi.types.UserType.readExternal(Unknown Source) ... 22 more============= begin nested exception  level (1) ===========java.io.EOFException at java.io.DataInputStream.readBoolean(DataInputStream.java:248) at org.apache.derby.impl.sql.execute.MaxMinAggregator.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.iapi.types.UserType.readExternal(Unknown Source) at org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(Unknown Source) at org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.fetchNext(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeScan.mergeARow(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeScan.init(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.openSortScan(Unknown Source) at org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter(Unknown Source) at org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)============= end nested exception  level (1) ===========Cleanup action completed   ,0
3221,'java.sql.SQLException: The conglomerate (-5) requested does not exist.' from Derby 10.3.1.4 embedded within Eclipse 3.3 and RAD 7.0    We are getting an SQLException when several prepared statement deletes are done upon an existing database. As far as we can tell this exception should never occur unless (evil) things like deleting the database or editing files occurs. This is using the embedded driver within a plug-in inside RAD 7.0 (and Eclipse 3.3).I'm not sure what else to submit that might be helpful.java.sql.SQLException: The conglomerate (-5) requested does not exist. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at sun.reflect.GeneratedMethodAccessor12.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at com.surelogic.sierra.jdbc.LazyPreparedStatementConnection$LazyPreparedStatement.invoke(Unknown Source) at $Proxy1.execute(Unknown Source) at com.surelogic.sierra.jdbc.finding.FindingManager.delete(Unknown Source) at com.surelogic.sierra.jdbc.finding.ClientFindingManager.updateLocalFindings(Unknown Source) at com.surelogic.sierra.jdbc.project.ClientProjectManager.synchronizeProject(Unknown Source) at com.surelogic.sierra.client.eclipse.jobs.SynchronizeJob.synchronize(Unknown Source) at com.surelogic.sierra.client.eclipse.jobs.SynchronizeJob.run(Unknown Source) at org.eclipse.core.internal.jobs.Worker.run(Unknown Source)Caused by: ERROR XSAI2: The conglomerate (-5) requested does not exist. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.openScan(Unknown Source) at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow(Unknown Source) at org.apache.derby.impl.sql.execute.IndexChanger.finish(Unknown Source) at org.apache.derby.impl.sql.execute.IndexSetChanger.finish(Unknown Source) at org.apache.derby.impl.sql.execute.RowChangerImpl.finish(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 14 more   ,0
3222,'CollationTest' fails with ' expected: but was:' in testPolishCollation(CollationTest.java:402)    See http://dbtg.thresher.com/derby/test/10.3Branch/jvm1.6/testing/Limited/testSummary-597152.html : sol.There was 1 failure:1) testPolishCollation(org.apache.derbyTesting.functionTests.tests.lang.CollationTest)junit.framework.AssertionFailedError: expected:&lt;1&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.commonTestingForTerritoryBasedDB(CollationTest.java:1141) at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testPolishCollation(CollationTest.java:402) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)   ,0
3229,testSysinfoLocale fails if derbyTools.jar is first in the classpath    ) testSysinfoLocale(org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest)junit.framework.AssertionFailedError: expected:&lt;false&gt; but was:&lt;true&gt; at org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale(SysinfoLocaleTest.java:209) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)3) testSysinfoLocale(org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest)junit.framework.AssertionFailedError: expected:&lt;false&gt; but was:&lt;true&gt; at org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale(SysinfoLocaleTest.java:209) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)4) testSysinfoLocale(org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest)junit.framework.AssertionFailedError: expected:&lt;true&gt; but was:&lt;false&gt; at org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale(SysinfoLocaleTest.java:204) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)5) testSysinfoLocale(org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest)junit.framework.AssertionFailedError: expected:&lt;true&gt; but was:&lt;false&gt; at org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale(SysinfoLocaleTest.java:204) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)6) testSysinfoLocale(org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest)junit.framework.AssertionFailedError: expected:&lt;false&gt; but was:&lt;true&gt; at org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale(SysinfoLocaleTest.java:209) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)7) testSysinfoLocale(org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest)junit.framework.AssertionFailedError: expected:&lt;true&gt; but was:&lt;false&gt; at org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale(SysinfoLocaleTest.java:204) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)   ,0
3230,Selecting data from a Table raises Error XN008: Query processing has been terminated due to an error on the server    I got a table (PCLASS) in my database where I cannot select the data via a simple select statement: If I execute 'select * from PCLASS': XN008: Query processing has been terminated due to an error on the server If I execute 'select * from PCLASS order by CLASSNAME': it works If I add or remove only one row to/from the table: it worksIf I use the embedded driver everything works fine. But as soon as I use the derby network client to access the database  this problem occurs.This is very odd. I spent a lot of time to do some research on this behavior because I could not believe that the network client produces errors depending on the data contained in a table. But after all it looks like I managed to fill the table with an exact amount of data that causes this error to arise.To reproduce the problem download the attached file and follow these instructions: extract test.rar to $derby.system.home$ start derby network server start ji utility and execute the following commands:  connect to database test using client driver: connect 'jdbc:derby://localhost/test;user=ZOL;password=zol'; select content of table PCLASS select * from PCLASS;--&gt; Error XN008: Query processing has been terminated due to an error on the server      disconnect from database disconnect; shutdown database 'test' connect 'jdbc:derby://localhost/test;user=ZOL;password=zol;shutdown=true'; connect to database 'test' using embedded driver: connect 'jdbc:derby:test;user=ZOL;password=zol'; select content of table PCLASS select * from PCLASS;--&gt; everything o.k.   ,0
3244,NullPointerException in ....B2IRowLocking3.searchLeftAndLockPreviousKey    The last week(48) we have seen a large number of this failure.It was categorized as DERBY-2589 but these instances all have the NPE.Exception while trying to insert row number: 52ERROR XJ001: Java exception: ': java.lang.NullPointerException'.java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.createAndLoadTable(OnlineCompressTest.java:140) at org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.deleteAllRows(OnlineCompressTest.java:494) at org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test1(OnlineCompressTest.java:913) at org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.testList(OnlineCompressTest.java:1500) at org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.main(OnlineCompressTest.java:1520)Caused by: java.lang.NullPointerException at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.searchLeftAndLockPreviousKey(Unknown Source) at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanPreviousRow(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeController.doIns(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeController.insert(Unknown Source) at org.apache.derby.impl.store.access.btree.index.B2IController.insert(Unknown Source) at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(Unknown Source) at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(Unknown Source) at org.apache.derby.impl.sql.execute.IndexChanger.insert(Unknown Source) at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(Unknown Source) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 8 moreThe error statistics shows the occurrences:(http://dbtg.thresher.com/derby/test/stats_today.html / http://dbtg.thresher.com/derby/test/stats_newest.html )http://dbtg.thresher.com/derby/test/statistics/2589_48.html :JIRA: 2589  Week: 48 600335-598009598009 Daily jvm1.4 vista598009 Daily jvm1.6 lin598341 Daily jvm1.6 solN+1598341 Daily jvm1.6 sparc598354 10.3Branch jvm1.5 lin598376 trunk16 jvmAll JDK16Jvm1.5SunOS-5.10_i86pc-i386598692 Daily jvm1.6 sol598729 trunk16 jvmAll JDK16Jvm1.6SunOS-5.10_i86pc-i386599062 Daily jvm1.5 lin599088 trunk15 jvm1.5 SunOS-5.10_i86pc-i386599088 trunk15 jvm1.5 SunOS-5.10_sun4u-sparc599088 trunk16 jvmAll JDK16Jvm1.5SunOS-5.10_i86pc-i386600335 Daily jvm1.4 linMon Dec 3 09:36:11 CET 2007http://dbtg.thresher.com/derby/test/statistics/2589_47.html seems to be the first occurence:JIRA: 2589  Week: 47 597885-597885597885 Daily jvm1.6 linMon Dec 3 09:36:13 CET 2007All are seen on trunk except one on the 10.3 branch (598354 10.3Branch jvm1.5 lin).   ,0
3246,Minor cleanup in the Derby JUnit classes    Several of the JUnit classes have grown/developed and need various types of cleanup; remove unused imports improve/add JavaDoc remove unused methods etc...This issue is basically a placeholder for the patches.   ,0
3253,NullPointer Exception (NPE) from query with IN predicate containing two values and joining a view with a large table.  ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.    With a single value in the IN clause the query does not fail. &gt; Run the following query in the attached database (v 10.3 db). SELECT A.TIMESTAMP  B.F_NAMEADDR  B.TOTAL_F B.TOTAL_FS  B.TOTAL_FT  B.TOTAL_FXFROM TIME A  THE_VIEW BWHERE B.T_ID = A.T_ID AND B.F_NAMEADDR IN ('one.two.three.oscar' 'one.two.three.kathy')ORDER BY A.TIMESTAMP ASC;&gt; resultERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.ERROR XJ001: Java exception: ': java.lang.NullPointerException'.Stack trace: Failed Statement is: SELECT A.TIMESTAMP  B.F_NAMEADDR  B.TOTAL_F B.TOTAL_FS  B.TOTAL_FT  B.TOTAL_FXFROM TIME A  THE_VIEW BWHERE B.T_ID = A.T_ID AND B.F_NAMEADDR IN ('one.two.three.oscar' 'one.two.three.kathy')ORDER BY A.TIMESTAMP ASCERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.error.StandardException.unexpectedUserException(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.getRowFromResultSet(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.getNextRowFromRS(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.lang.NullPointerException at org.apache.derby.exe.ac601a400fx0116xa813xc2f7x00000010a3602.e8(Unknown Source) ... 21 more============= begin nested exception  level (1) ===========java.lang.NullPointerException at org.apache.derby.exe.ac601a400fx0116xa813xc2f7x00000010a3602.e8(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.getRowFromResultSet(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.getNextRowFromRS(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)============= end nested exception  level (1) ===========Schema info:CREATE TABLE TIME ('T_ID' BIGINT NOT NULL  'TIMESTAMP' TIMESTAMP NOT NULL  'DAY' INTEGER NOT NULL  'WEEK' INTEGER NOT NULL  'MONTH' INTEGER NOT NULL  'YEAR_COL' INTEGER NOT NULL);CREATE TABLE F ('F_ID' BIGINT NOT NULL  'T_ID' BIGINT NOT NULL  'F_NAMEADDR' VARCHAR(250) NOT NULL  'TOTAL_F' BIGINT NOT NULL  'TOTAL_FS' BIGINT NOT NULL  'TOTAL_FT' BIGINT NOT NULL  'TOTAL_FX' BIGINT NOT NULL);CREATE VIEW the_view AS SELECT T.T_ID AS T_ID   T.F_NAMEADDR AS F_NAMEADDR  T.TOTAL_F AS TOTAL_F  T.TOTAL_FS AS TOTAL_FS  T.TOTAL_FT AS TOTAL_FT   T.TOTAL_FX AS TOTAL_FX  FROM F AS T  WHERE T.T_ID = (SELECT MAX(T_ID) FROM F);   ,0
3260,NullPointerException caused by race condition in GenericActivationHolder    I have a stress test using Derby 10.3.1.4 which is executing the same PreparedStatement using multiple threads concurrently and I consistently get the following NPE after several hours of running:2007-12-07 00:48:10.914 GMT Thread&#91;pool-5-thread-25 5 main&#93; (XID = 1219661)  (SESSIONID = 377)  (DATABASE = /usr/ironhide/var/db/opera/derby)  (DRDAID = null)  Failed Statement is: select rdbmsvaria0_.GUID_AND_INDEX as GUID1_3_0_  rdbmsvaria0_.VALUE2 as VALUE2_3_0_  rdbmsvaria0_.HOLDER_GUID as HOLDER3_3_0_  rdbmsvaria0_.VALUE_TYPE as VALUE4_3_0_  rdbmsvaria0_.VALUE_GUID as VALUE5_3_0_  rdbmsvaria0_.DELETED as DELETED3_0_ from VARIABLE rdbmsvaria0_ where rdbmsvaria0_.GUID_AND_INDEX=? with 1 parameters begin parameter #1: 9C202AB9E8356288A9320C9C383A4D2F-11 :end parameterjava.lang.NullPointerException at org.apache.derby.impl.sql.GenericActivationHolder.execute(GenericActivationHolder.java:271) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:368) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(EmbedPreparedStatement.java:275) at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:186) at org.hibernate.loader.Loader.getResultSet(Loader.java:1787) at org.hibernate.loader.Loader.doQuery(Loader.java:674) at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:236) at org.hibernate.loader.Loader.loadEntity(Loader.java:1860) at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:48) at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:42) at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:3044) at org.hibernate.event.def.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:395) at org.hibernate.event.def.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:375) at org.hibernate.event.def.DefaultLoadEventListener.load(DefaultLoadEventListener.java:139) at org.hibernate.event.def.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:179) at org.hibernate.event.def.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:103) at org.hibernate.impl.SessionImpl.fireLoad(SessionImpl.java:878) at org.hibernate.impl.SessionImpl.get(SessionImpl.java:815) at org.hibernate.impl.SessionImpl.get(SessionImpl.java:808) at sun.reflect.GeneratedMethodAccessor69.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:301) at $Proxy41.get(Unknown Source) at com.approuter.maestro.opera.rdbms.RdbmsContextHolder.getRdbmsVariable(RdbmsContextHolder.java:108) at com.approuter.maestro.opera.rdbms.RdbmsContextHolder.getVariable(RdbmsContextHolder.java:94) at com.approuter.maestro.vm.Frame.getParameter(Frame.java:218) at com.approuter.maestro.vm.Task.getParameter(Task.java:1267) at com.approuter.maestro.vm.CallContextImpl.setOutputParameter(CallContextImpl.java:195) at com.approuter.maestro.vm.CallContextImpl.getOutputParameterWriter(CallContextImpl.java:264) at com.approuter.maestro.sdk.mpi.DynamicExecutableActivity$3$1.getWriter(DynamicExecutableActivity.java:249) at com.approuter.module.xml.XmlSerializeTextActivity$XmlSerializeTextActivityInstance.serialize(XmlSerializeTextActivity.java:43) at sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.approuter.maestro.sdk.mpi.DynamicExecutableActivity.execute(DynamicExecutableActivity.java:332) at com.approuter.maestro.activities.Invoke.call(Invoke.java:199) at sun.reflect.GeneratedMethodAccessor157.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.approuter.maestro.activities.Instruction.call(Instruction.java:22) at com.approuter.maestro.vm.Program.call(Program.java:456) at com.approuter.maestro.vm.Task.run(Task.java:580) at com.approuter.maestro.vm.Task.run(Task.java:531) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)Cleanup action completedHere is the relevant code from GenericActivationHolder.java // synchronized (ps) { /* Has the activation class changed? */ if (gc != ps.getActivationClass()) { // ensure the statement is valid by rePreparing it. ps.rePrepare(getLanguageConnectionContext()); // &lt;-- line 260 /*   If we get here  it means the PreparedStatement has been recompiled. Get a new Activation and check whether the parameters are compatible. If so  transfer the parameters from the old Activation to the new one  and make that the current Activation. If not  throw an exception. */ GeneratedClass newGC = ps.getActivationClass();   BaseActivation newAC = (BaseActivation) newGC.newInstance(lcc); // &lt;-- line 271 DataTypeDescriptor[] newParamTypes = ps.getParameterTypes();As you can see  the activation class returned by the ExecPreparedStatement is null as of line 271  even after having called a rePrepare(...) on the prepared statement (line 260). This is most likely due to a race condition. Also note that the containing block was formerly synchronized  but has since been commented out. From browsing the source in previous versions  the synchronized statement appears to have been commented out since before 10.0.2.1. It appears the fix is to reintroduce the synchronized block  or at least make the block inside the if statement synchronized.   ,0
3266,Not possible for non-db-owner to create a temporary table. 'Get ERROR 42507: User 'USERB' can not perform the operation in schema 'SESSION'.'    It seems that only the owner of a database may create tempoary tables in that db.This is not helpful as many other users may want to run a query on that db that relies upon the creation of temporary tables.I would expect non-db-owners to be able create temporay tables.The problem is demonstrated with:derby.properties like this:derby.connection.requireAuthentication=truederby.authentication.provider=BUILTINderby.database.sqlAuthorization=TRUEderby.user.usera=pwdderby.fullAccessUsers=useraderby.drda.host=192.168.1.50Start the network server and run up 'ij'.ij&gt;connect 'jdbc:derby://192.168.1.50:1527/TEST1;user=usera;password=pwd;create=true;';ij&gt; declare global temporary table t11(a int) on commit preserve rowsnot logged;0 rows inserted/updated/deletedAll good so far.Now try this (while still connected as usera):ij&gt; call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.user.userb' 'pwd');Statement executed.ij&gt; call SYSCS_UTIL.SYSCS_SET_USER_ACCESS('userb' 'FULLACCESS');Statement executed.ij&gt; disconnect;ij&gt; connect 'jdbc:derby://192.168.1.50:1527/TEST1;user=userb;password=pwd;';ij&gt; declare global temporary table t1(a int) on commit preserve rows not logged;ERROR 42507: User 'USERB' can not perform the operation in schema 'SESSION'.SYSINFO:========------------------ Java Information ------------------Java Version: 1.6.0_02-eaJava Vendor: Sun Microsystems Inc.Java home: /usr/java/jdk1.6.0_02/jreJava classpath: /home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derby.jar:/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derbynet.jar:/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derbytools.jar:/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derbyclient.jar:/home/ajvok/derby/local/sp1.jarOS name: LinuxOS architecture: i386OS version: 2.6.17-5mdvJava user name: ajvokJava user home: /home/ajvokJava user dir: /home/ajvok/derby/localjava.specification.name: Java Platform API Specificationjava.specification.version: 1.6--------- Derby Information --------JRE - JDBC: Java SE 6 - JDBC 4.0&#91;/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derby.jar&#93; 10.3.1.4 - (561794)&#91;/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derbytools.jar&#93; 10.3.1.4 - (561794)&#91;/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derbynet.jar&#93; 10.3.1.4 - (561794)&#91;/home/ajvok/derby/db-derby-10.3.1.4-bin/lib/derbyclient.jar&#93; 10.3.1.4 - (561794)----------------------------------------------------------------------- Locale Information -----------------Current Locale : [English/United Kingdom &#91;en_GB&#93;]Found support for locale: &#91;cs&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;de_DE&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;es&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;fr&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;hu&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;it&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;ja_JP&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;ko_KR&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;pl&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;pt_BR&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;ru&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;zh_CN&#93; version: 10.3.1.4 - (561794)Found support for locale: &#91;zh_TW&#93; version: 10.3.1.4 - (561794)------------------------------------------------------   ,1
3270,Delayed (on-demand) creation of current user schema makes select from view belonging to other schema fail.    The enclosed repro fails with error 42Y07 'Schema BILL does not exist'  even thoughthe query does not reference that schema; it selects from joe.myview.   ,0
3279,Derby 10.3.X ignores ORDER BY DESC when target column has an index and is used in an OR clause or an IN list.    Running the following produces the error seen in Derby 10.3.X but not in 10.2.X nor in 10.1.X.Don't know if this related to DERBY-3231.First query is incorrectly sorted whereas the second one is okay when there is an index on the table. If the table is not indexed  the sort works correctly in DESC order.------create table CHEESE ( CHEESE_CODE VARCHAR(5)  CHEESE_NAME VARCHAR(20)  CHEESE_COST DECIMAL(7 4));create index cheese_index on CHEESE (CHEESE_CODE DESC  CHEESE_NAME DESC  CHEESE_COST DESC);INSERT INTO CHEESE ( CHEESE_CODE  CHEESE_NAME  CHEESE_COST)VALUES ('00000'  'GOUDA'  001.1234)  ('00000'  'EDAM'  002.1111)  ('54321'  'EDAM'  008.5646)  ('12345'  'GORGONZOLA'  888.2309)  ('AAAAA'  'EDAM'  999.8888)  ('54321'  'MUENSTER'  077.9545);SELECT * FROM CHEESE WHERE (CHEESE_CODE='00000' OR CHEESE_CODE='54321') AND CHEESE_NAME='EDAM'ORDER BY CHEESE_CODE DESC  CHEESE_NAME DESC  CHEESE_COST DESC;SELECT * FROM CHEESE WHERE (CHEESE_CODE='AAAAA' OR CHEESE_CODE='54321') AND CHEESE_NAME='EDAM'ORDER BY CHEESE_CODE DESC  CHEESE_NAME DESC  CHEESE_COST DESC;   ,0
3299,Uniqueness violation error (23505) occurs after dropping a PK constraint if there exists a foreign key on the same columns.    When there are multiple constraints on a single table and the constraints have the same set of columns (in the same order)  Derby tries to optimize things by re-using a single backing index for all of the relevant constraints. See the 'executeConstantAction()' method of CreateIndexConstantAction.java (search for 'duplicate').But there is a bug in Derby where  if one of the constraints is unique and is dropped  the uniqueness 'attribute' of the backing index is not updated accordingly. This means that uniqueness may be incorrectly enforced where it is not required.Take the following example ('Case 2' from DERBY-2204): ALTER TABLE NEWORDERS ADD CONSTRAINT NEWORDERS_PK PRIMARY KEY(NO_W_ID  NO_D_ID  NO_O_ID); ALTER TABLE NEWORDERS ADD CONSTRAINT NO_O_FK FOREIGN KEY (NO_W_ID  NO_D_ID  NO_O_ID) REFERENCES ORDERS;For these statements Derby will use a single backing index for both the primary constraint NEWORDERS_PK and the foreign key constraint NO_O_FK. That backing index will be unique because the primary key must itself be unique.If later we drop the primary key: ALTER TABLE NEWORDERS DROP CONSTRAINT NEWORDERS_PK;then the backing index needs to be converted from a unique index to a non-unique index (because a foreign key is not inherently unique). But in Derby the uniqueness attribute remains unchanged  so attempts to insert a duplicate (NO_W_ID  NO_D_ID  NO_O_ID) row into NEWORDERS will fail with error 23505  when it should really succeed.I tried this out on 10.1.3.1 and the same behavior occurs there  so marking 'Affects' versions for everything back to that...   ,0
3301,Incorrect result from query with nested EXIST    Derby returns unexpected results from a query with embedded EXIST clauses. The query SQL is generated by the JPOX jdo implementation and is supposed to return all of the PERSONS and PROJECTS where there is an entry in the join table. This query works as expected when using MySQL.Here's the query:SELECT UNBOUND_E.PERSONID  UNBOUND_P.PROJID FROM applicationidentity0.DEPARTMENTS THIS   applicationidentity0.PERSONS UNBOUND_E   applicationidentity0.PROJECTS UNBOUND_P WHERE EXISTS (  SELECT 1 FROM applicationidentity0.PERSONS THIS_EMPLOYEES_E  WHERE EXISTS (  SELECT 1 FROM applicationidentity0.PROJECT_MEMBER THIS_EMPLOYEES_E_PROJECTS_P  WHERE THIS_EMPLOYEES_E_PROJECTS_P.'MEMBER' = THIS_EMPLOYEES_E.PERSONID  AND THIS_EMPLOYEES_E_PROJECTS_P.'MEMBER' = THIS_EMPLOYEES_E.PERSONID  AND THIS_EMPLOYEES_E.DEPARTMENT = THIS.ID  AND THIS_EMPLOYEES_E.DEPARTMENT = THIS.ID  AND UNBOUND_P.PROJID = THIS_EMPLOYEES_E_PROJECTS_P.PROJID  AND UNBOUND_E.PERSONID = THIS_EMPLOYEES_E.PERSONID)  );PERSONID |PROJID -----------------------3 |1 5 |3 4 |3 2 |1 1 |1 5 rows selectedI'm expecting 7 rows to be returned here  one row for each row in the join table. Here's the schema:CREATE TABLE departments ( ID INTEGER NOT NULL  NAME VARCHAR(32) NOT NULL  EMP_OF_THE_MONTH INTEGER  COMPANYID INTEGER  DISCRIMINATOR VARCHAR(255)  CONSTRAINT DEPTS_COMP_FK FOREIGN KEY (COMPANYID) REFERENCES companies  CONSTRAINT DEPTS_PK PRIMARY KEY (ID));CREATE TABLE persons ( PERSONID INTEGER NOT NULL  FIRSTNAME VARCHAR(32) NOT NULL  LASTNAME VARCHAR(32) NOT NULL  MIDDLENAME VARCHAR(32)  BIRTHDATE TIMESTAMP NOT NULL  ADDRID INTEGER  STREET VARCHAR(64)  CITY VARCHAR(64)  STATE CHAR(2)  ZIPCODE CHAR(5)  COUNTRY VARCHAR(64)  HIREDATE TIMESTAMP  WEEKLYHOURS REAL  DEPARTMENT INTEGER  FUNDINGDEPT INTEGER  MANAGER INTEGER  MENTOR INTEGER  HRADVISOR INTEGER  SALARY REAL  WAGE REAL  DISCRIMINATOR varchar(255) NOT NULL  CONSTRAINT PERS_DEPT_FK FOREIGN KEY (DEPARTMENT) REFERENCES departments  CONSTRAINT PERS_FUNDDEPT_FK FOREIGN KEY (FUNDINGDEPT) REFERENCES departments  CONSTRAINT PERS_MANAGER_FK FOREIGN KEY (MANAGER) REFERENCES persons  CONSTRAINT PERS_MENTOR_FK FOREIGN KEY (MENTOR) REFERENCES persons  CONSTRAINT PERS_HRADVISOR_FK FOREIGN KEY (HRADVISOR) REFERENCES persons  CONSTRAINT EMPS_PK PRIMARY KEY (PERSONID));CREATE TABLE projects ( PROJID INTEGER NOT NULL  NAME VARCHAR(32) NOT NULL  BUDGET DECIMAL(11 2) NOT NULL  DISCRIMINATOR VARCHAR(255)  CONSTRAINT PROJS_PK PRIMARY KEY (PROJID));CREATE TABLE project_member ( PROJID INTEGER REFERENCES projects NOT NULL  MEMBER INTEGER REFERENCES persons NOT NULL);ij&gt; connect 'jdbc:derby:/Users/clr/apache/jdo/trunk/tck2/target/database/derby/jdotckdb';ij&gt; set schema applicationidentity0;0 rows inserted/updated/deletedij&gt; select * from persons;PERSONID |FIRSTNAME |LASTNAME |MIDDLENAME |BIRTHDATE |ADDRID |STREET |CITY |STA&amp;|ZIPC&amp;|COUNTRY |HIREDATE |WEEKLYHOURS |DEPARTMENT |FUNDINGDEPT|MANAGER |MENTOR |HRADVISOR |SALARY |WAGE ||emp1First |emp1Last |emp1Middle |1970-06-09 21:00:00.0 |NULL |NULL |NULL |NULL|NULL |NULL |1998-12-31 21:00:00.0 |40.0 |NULL |NULL |NULL |NULL |NULL |20000.0 |NULL |org.apache.jdo.tck.pc.company.FullTimeEmployee 2 |emp2First |emp2Last |emp2Middle |1975-12-21 21:00:00.0 |NULL |NULL |NULL |NULL|NULL |NULL |2003-06-30 21:00:00.0 |40.0 |NULL |NULL |NULL |NULL |NULL |10000.0 |NULL |org.apache.jdo.tck.pc.company.FullTimeEmployee 3 |emp3First |emp3Last |emp3Middle |1972-09-04 21:00:00.0 |NULL |NULL |NULL |NULL|NULL |NULL |2002-08-14 21:00:00.0 |19.0 |NULL |NULL |NULL |NULL |NULL |NULL |15.0 |org.apache.jdo.tck.pc.company.PartTimeEmployee 4 |emp4First |emp4Last |emp4Middle |1973-09-05 21:00:00.0 |NULL |NULL |NULL |NULL|NULL |NULL |2001-04-14 21:00:00.0 |0.0 |NULL |NULL |NULL |NULL |NULL |NULL |13.0 |org.apache.jdo.tck.pc.company.PartTimeEmployee 5 |emp5First |emp5Last |emp5Middle |1962-07-04 21:00:00.0 |NULL |NULL |NULL |NULL|NULL |NULL |1998-08-14 21:00:00.0 |0.0 |NULL |NULL |NULL |NULL |NULL |45000.0 |NULL |org.apache.jdo.tck.pc.company.FullTimeEmployee 5 rows selectedij&gt; select * from projects;PROJID |NAME |BUDGET |DISCRIMINATOR -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 |orange |2500000.99 |org.apache.jdo.tck.pc.company.Project 2 |blue |50000.00 |org.apache.jdo.tck.pc.company.Project 3 |green |2000.99 |org.apache.jdo.tck.pc.company.Project 3 rows selectedij&gt; select * from project_member;PROJID |MEMBER -----------------------2 |3 1 |3 2 |2 3 |5 3 |4 1 |2 1 |1 7 rows selected   ,0
3302,NullPointerException during recovery of database with territory-based collation    When logical undo is performed on a database with territory-based collation  you may get a NullPointerException in SQLChar.getCollationKey() because SQLChar.getLocaleFinder() returns null.This bug was reported on derby-user: http://thread.gmane.org/gmane.comp.apache.db.derby.user/8253   ,0
3303,ArrayIndexOutOfBoundsException at MergeSort.compare    Derby throws ArrayIndexOutOfBoundsException when I try to execute SQL query shown below.This is a regression  since Derby 10.2.2.0 executes this query without problems.Attached are DDL statements to create DB tables  and database itself (with data).2008-01-08 12:32:34.461 GMT Thread&#91;DRDAConnThread_5 6 derby.daemons&#93; (XID = 1497)  (SESSIONID = 0)  (DATABASE = InventorizacijaDB)  (DRDAID = NF000001.G46A-666250070078662256{1})  Failed Statement is: select MAX(preke0_.BARKODAS) as col_0_0_  MAX(preke0_.PAVADINIMAS) as col_1_0_  MAX(preke0_.KIEKIS) as col_2_0_  SUM(irasas1_.FAKTINIS_KIEKIS) as col_3_0_ from PREKE preke0_  IRASAS irasas1_  IRASU_BLOKAS irasubloka2_ where irasas1_.IRASU_BLOKAS=irasubloka2_.ID and preke0_.UNIKALUS_KODAS=irasas1_.UNIKALUS_KODAS and irasubloka2_.INVENTORIZACIJA=? group by irasas1_.UNIKALUS_KODAS order by abs(SUM(irasas1_.FAKTINIS_KIEKIS)-MAX(preke0_.KIEKIS)) DESC with 1 parameters begin parameter #1: 1 :end parameter java.lang.ArrayIndexOutOfBoundsException: 5 at org.apache.derby.impl.store.access.sort.MergeSort.compare(Unknown Source) at org.apache.derby.impl.store.access.sort.SortBuffer.insert(Unknown Source) at org.apache.derby.impl.store.access.sort.MergeInserter.insert(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source) at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.execute(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)   ,0
3304,Explicit commit inside a java procedure makes a dynamic result sets passed out unavailable    Repro (Main.java) that shows changed behavior after svn 602991(the patch committed for this issue). It seems a regression: (originally from Dag H. Wanvik attached to DERBY-1585)An explicit commit inside a stored procedure makes a dynamic result sets passed out unavailable  even if the commit is executed prior to the result set; as in the repro.   ,0
3305,Embedded ResultSet.getStatement() returns incorrect reference for dynamic result sets    ResultSets returned as dynamic results sets  ie. those created in a java procedure and returned via the java.sql.Statement that executed the call of the procedure  do not return the correct statement reference for getStatement. Need to return reference to statement that executed the CALL and returned the ResultSet instead of the statement that performed the executeQuery.   ,0
3311,Client ResultSet.getHoldabilty will return incorrect value when the ResultSet is obtained from a procedure call    Fixing DERBY-3305 (aka DERBY-1111) exposes that the holdability for a result set sent over DRDA is being obtained from the Statement that created the JDBC ResultSet  not its actual holdability. The two can be different when the result set is dynamic result set from a procedure.jdbc4.ResultSetTest.getHoldability fails in client mode.   ,0
3316,Leak in client if ResultSet not closed    If I run the attached program RepeatStatement.java with 32M of heap I will get an OutOfMemory error in the client.java -Xmx32M RepeatStatementException in thread 'main' java.lang.OutOfMemoryError: Java heap space at org.apache.derby.client.am.Cursor.allocateCharBuffer(Cursor.java:1260) at org.apache.derby.client.net.NetStatementReply.parseSQLDTARDarray(NetStatementReply.java:1356) at org.apache.derby.client.net.NetStatementReply.parseQRYDSC(NetStatementReply.java:1207) at org.apache.derby.client.net.NetStatementReply.parseOpenQuery(NetStatementReply.java:479) at org.apache.derby.client.net.NetStatementReply.parseOPNQRYreply(NetStatementReply.java:223) at org.apache.derby.client.net.NetStatementReply.readOpenQuery(NetStatementReply.java:64) at org.apache.derby.client.net.StatementReply.readOpenQuery(StatementReply.java:50) at org.apache.derby.client.net.NetStatement.readOpenQuery_(NetStatement.java:153) at org.apache.derby.client.am.Statement.readOpenQuery(Statement.java:1396) at org.apache.derby.client.am.Statement.flowExecute(Statement.java:2001) at org.apache.derby.client.am.Statement.executeQueryX(Statement.java:421) at org.apache.derby.client.am.Statement.executeQuery(Statement.java:406) at RepeatStatement.testInsertAndSelect(RepeatStatement.java:31) at RepeatStatement.main(RepeatStatement.java:10)If I close the ResultSet or Statement it does not leak. This occurs on trunk and 10.2.1.6. It does however not run out of memory on 10.1.3.1  so appears to be a regression.   ,0
3319,Logical connections do not check if a transaction is active on close    If you call close on a logical connection  for instance as obtained through a PooledConnection  it does not check if there is an active transaction.The close of the logical connection is allowed  and even the close of the parent PooledConnection is allowed in the client driver. This can/will cause resources to be left on the server  and later operations might fail (typically with lock timeouts because the 'closed' transaction is still holding locks).I do not know if gc will solve this eventually  but I would say the current behavior of the client driver is wrong in any case.There is difference in the behavior between the embedded and the client driver  and there also seems to be a bug in the embedded driver.The analysis above is a bit sketchy  so it might be required to look into the issue a bit more...I will attach a repro (JDBC usage should be verified as well  is it legal / as intended?)   ,0
3320,Database creation and boot should fail if collation=TERRITORY_BASED and the selected locale is not supported    A problem I've discovered when testing with the phoneME advanced platform is that the collationtests expect other locales than Locale.US to be available on the platform that is used for the test  and for phoneME advanced (when compiled as foundation profile) only Locale.US is available. From the jdk1.6 javadoc of Collator.getAvailableLocales() I see that only Locale.US is strictly required:public static Locale[] getAvailableLocales() Returns an array of all locales for which the getInstance methods of this class can return localized instances. The returned array represents the union of locales supported by the Java runtime and by installed CollatorProvider implementations. It must contain at least a Locale instance equal to Locale.US. Returns: An array of locales for which localized Collator instances are available.This led me to thinking about how Derby should behave if created/booted with collation=TERRITORY_BASED and territory=&lt;some unsupported locale&gt;. I'm not sure what the consequences could be if the database is first created on a platform that supports whatever locale is set and later booted with one that doesn't  or created on a platform missing support and later booted with one that has. In any case I think it may confuse a user needlessly to see the database boot successfully with his collation setting and later behave in a way he does not expect.Opinions voiced on the derby-dev list are that both database creation and boot should fail if collation=TERRITORY_BASED and the selected locale is not supported.If a change like this is implemented  the collationtests should be changed to verify correct behavior also if they are executed in an environment were some of the tested locales are not supported.   ,0
3330,provide support for unique constraint over keys that include one or more nullable columns.    Allow unique constraint over keys which include one or more nullable fields. Prior to this change Derby only supported unique constraints on keys that included no nullable columns. The new constraint will allow unlimited inserts of any key with one more null columns  but will limit insert of keys with no null columns to 1 unique value per table.There is no change to existing or newly created unique indexes on null columns (as opposed to unique constraints on null columns). Also there is no change to existing or newly created constraints on keys with no nullable columns.   ,0
3336,jdbcapi/derbyStress.java no longer runs with low memory heap so does not provide testing for leak scenarios    This was raised as an issue in DERBY-3316  but it seems to make most sense to raise it as a separate issue. When derbyStress ran in derbyall it ran with 64MB heap so that it could test fixes for various memory leaks. When moved to JDBCHarnessJavaTest it started running with the full 512MB heap used for suites.All so no longer tests for those leaks. There are two options presented so far1) Move it back to derbyall 2) add it to the junit-all target For the adding it to the junit-all target option I think a few things have to happen for it to be run as part of the nightlies. 1) Convert derbyStress.java to junit. 2) create a junit-lomem target and make it part of junit-all. 3) Fix junit-all so that it can run with the nightlies. DERBY-2045 + distribute ant to the testing machines make nightly script changes etc.Myrna expressed some misgivings to relying on junit-all because ant is not available on all the platforms where she tests. I think the best course of action is to at least temporarily move the test back to derbyall and then open separate task(s) for the junit conversion effort.   ,0
3349,Nested WHERE EXISTS queries need improved testing    DERBY-3301 reported an error in subquery flattening of nested WHERE EXISTS clauses  or WHERE EXISTS subqueries. The query returned the wrong number of rows. There is currently some tests for WHERE EXISTS  but none for nested WHERE EXISTS clauses.See DERBY-3301 for a full sql repro.   ,0
3360,Invalid method java.lang.Integer >> void (short) because java.lang.NoSuchMethodException: java.lang.Integer.(short)    Invalid method java.lang.Integer &gt;&gt; void &lt;init&gt;(short) because java.lang.NoSuchMethodException: java.lang.Integer.&lt;init&gt;(short)True  but I believe  not a helpful observation FN_MATCHES(A.f  C.d) returns short/SMALLINTrelated to DERBY-3310 ? But this is on the 10.3 branch &#91;10.3.2.2 - (616244M)&#93;DEBUG 68421 &#91;Main&#93; (Template.java:69) - SQL: SELECT A.a  D.b  B.c  C.d FROM C JOIN A ON C.e = 'I' AND A.f IS NOT NULL AND A.g = C.g AND FN_MATCHES(A.f  C.d) &lt;&gt; 1 JOIN B ON B.h = A.g JOIN D ON D.h = URID.hjava.lang.NoSuchMethodException: java.lang.Integer.&lt;init&gt;(short) at java.lang.Class.getConstructor0(Class.java:2706) at java.lang.Class.getConstructor(Class.java:1657) at org.apache.derby.impl.services.bytecode.d_BCValidate.checkMethod(d_BCValidate.java:115) at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(BCMethod.java:745) at org.apache.derby.impl.services.bytecode.BCMethod.pushNewComplete(BCMethod.java:779) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(StaticMethodCallNode.java:995) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:167) at org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(BinaryOperatorNode.java:599) at org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.generateExpression(BinaryLogicalOperatorNode.java:157) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1484) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1302) at org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1579) at org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1555) at org.apache.derby.impl.sql.compile.JoinNode.generate(JoinNode.java:1479) at org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1577) at org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1555) at org.apache.derby.impl.sql.compile.JoinNode.generate(JoinNode.java:1479) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1440) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1302) at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:109) at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:564) at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:347) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:447) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:746) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:129) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(EmbedPreparedStatement20.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(EmbedPreparedStatement30.java:63) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(EmbedPreparedStatement40.java:40) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:105) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:923) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:751) &#91;..&#93; at org.apache.derby.exe.ac12564092x0117xc525x43e4xffffbce342b018.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:74) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)Invalid method java.lang.Integer &gt;&gt; void &lt;init&gt;(short) because java.lang.NoSuchMethodException: java.lang.Integer.&lt;init&gt;(short)DEBUG 70472 &#91;Main&#93; (Template.java:120) - java.sql.SQLException: Java exception: 'ASSERT FAILED Invalid method java.lang.Integer &gt;&gt; void &lt;init&gt;(short) because java.lang.NoSuchMethodException: java.lang.Integer.&lt;init&gt;(short): org.apache.derby.shared.common.sanity.AssertFailure'.ERROR 70500 &#91;Main&#93; (TransactionTemplate.java:163) - Application exception overridden by rollback exceptionorg.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [ &lt;Statement that fires trigger removed&gt; ]; SQL state &#91;XJ001&#93;; error code &#91;0&#93;; Java exception: ': java.lang.NullPointerException'.; nested exception is java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1573) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1294) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 29 moreCaused by: java.lang.NullPointerException at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:217) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) ... 22 moreFATAL 70508 &#91;Main&#93; (Start.java:153) - Start FAILEDorg.springframework.transaction.TransactionSystemException: Could not roll back JDBC transaction; nested exception is java.sql.SQLNonTransientConnectionException: No current connection.Caused by: java.sql.SQLNonTransientConnectionException: No current connection. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:76) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:104) at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:208) at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:1548) at org.apache.derby.impl.jdbc.EmbedConnection.setupContextStack(EmbedConnection.java:1759) at org.apache.derby.impl.jdbc.EmbedConnection.rollback(EmbedConnection.java:1142) at org.apache.commons.dbcp.DelegatingConnection.rollback(DelegatingConnection.java:265) at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.rollback(PoolingDataSource.java:288) at org.springframework.jdbc.datasource.DataSourceTransactionManager.doRollback(DataSourceTransactionManager.java:259) at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:742) at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:719) at org.springframework.transaction.support.TransactionTemplate.rollbackOnException(TransactionTemplate.java:160) at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:138) Caused by: java.sql.SQLException: No current connection. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 21 morederby.logorg.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Invalid method java.lang.Integer &gt;&gt; void &lt;init&gt;(short) because java.lang.NoSuchMethodException: java.lang.Integer.&lt;init&gt;(short) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.impl.services.bytecode.d_BCValidate.checkMethod(d_BCValidate.java:190) at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(BCMethod.java:745) at org.apache.derby.impl.services.bytecode.BCMethod.pushNewComplete(BCMethod.java:779) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(StaticMethodCallNode.java:995) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:167) at org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(BinaryOperatorNode.java:599) at org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.generateExpression(BinaryLogicalOperatorNode.java:157) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1484) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1302) at org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1579) at org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1555) at org.apache.derby.impl.sql.compile.JoinNode.generate(JoinNode.java:1479) at org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1577) at org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1555) at org.apache.derby.impl.sql.compile.JoinNode.generate(JoinNode.java:1479) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1440) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1302) at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:109) at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:564) at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:347) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:447) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:746) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:129) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(EmbedPreparedStatement20.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(EmbedPreparedStatement30.java:63) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(EmbedPreparedStatement40.java:40) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:105) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:923) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:751)&#91;our trigger stored proc java code&#93; at org.apache.derby.exe.ac12564092x0117xc525x43e4xffffbce342b018.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:74) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)Cleanup action completed2008-01-29 10:44:58.980 GMT Thread&#91;Main 5 main&#93; Cleanup action startingjava.lang.NullPointerException at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:217) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1163) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:497) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)2008-01-29 10:44:58.987 GMT Thread&#91;Main 5 main&#93; Equally severe exception raised during cleanup (ignored) nulljava.lang.NullPointerException at org.apache.derby.impl.sql.compile.CompilerContextImpl.initRequiredPriv(CompilerContextImpl.java:698) at org.apache.derby.impl.sql.compile.CompilerContextImpl.resetContext(CompilerContextImpl.java:158) at org.apache.derby.impl.sql.compile.CompilerContextImpl.cleanupOnError(CompilerContextImpl.java:107) at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:327) at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:419) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:337) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1573) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1294) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:299) at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:101) at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:745) at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:538) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:739) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:797) at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:801) at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:218)Cleanup action completed   ,0
3364,Replication failover implementation must be modified to fail at the master after slave has been stopped    Jorgen says...I tried to run the failover command on the master  which seems to work fine as long as the master and slave are still connected. If the slave has been stopped for some reason  however  failover hangs on MasterController#startFailover here: ack = transmitter.readMessage();   ,0
3366,Various formatting erros in L10N property files    There are a number of formatting errors in the localization property files: DRDA_InvalidValue.U appears twice in the drda property files (english and translations) Spurious linefeed for XCL21.S in messages_zh_TW.properties Quadruple single quote rather than double single quote for contraction apostrophes in messages_it.properties   ,0
3372,Adjust demos build.xml to avoid re-compiling SimpleApp and SimpleMobileApp    I propose to adjust the java/demo/build.xml file to change the 'srcdir' and 'includes'values on the javac task that compiles SimpleApp.java and SimpleMobileApp.java.Since these two Java programs are not inside of a package  Ant is happiest ifwe specify their srcdir directories directly  see:http://ant.apache.org/faq.html#always-recompiles The change to java/demo/build.xml will beIndex: java/demo/build.xml===================================================================&#8212; java/demo/build.xml (revision 616784)+++ java/demo/build.xml (working copy)@@ -86 9 +86 8 @@ optimize='${optimize}' proceed='${proceed}' verbose='${verbose}' srcdir='${derby.demo.src.dir}'- destdir='${out.dir}'- includes='simple/* simplemobile/*'&gt;+ srcdir='${derby.demo.src.dir}/simple:${derby.demo.src.dir}/simplemobile'+ destdir='${out.dir}'&gt; &lt;classpath&gt; &lt;pathelement location='${javasrc.dir};${jcc}'/&gt; &lt;pathelement path='${java14compile.classpath};${jcc}'/&gt;   ,0
3376,Test case in GrantRevokeDDLTest looks to be accidentally commented out...    In lang/GrantRevokeDDLTest.java  beginning at line 8057 (at time of writing)  there looks to be a test case that was inadvertently commented out: // set connection user1 //ij(USER3)&gt; &#8211; test multiple FKs DERBY-1589?set // connection user1drop table user3.rt3drop table // user2.rt2drop table user1.rt1create table rt1 (c1 int // primary key not null  c2 int)insert into rt1 values // (1 1)  (2 2)grant references on rt1 to PUBLIC  user2  // user3set connection user2 XJ001 occurred at create table // rt2...create table rt2 (c1 int primary key not null  // constraint rt2fk foreign key(c1) references // user1.rt1)insert into rt2 values (1)  (2)grant // references on rt2 to PUBLIC  user3set connection // user3create table rt3 (c1 int primary key not null  // constraint rt3fk1 foreign key(c1) references // user1.rt1  constraint rt3fk2 foreign key(c1) references // user1.rt2)insert into rt3 values (1)  (2)set connection // user1 rt3fk1 should get dropped.revoke references on rt1 // from PUBLICrevoke references on rt1 from user3set // connection user2revoke references on rt2 from PUBLIC // expect errorinsert into rt2 values (3)set connection // user3 expect error  use user3 references privilege  // rt3fk2 still in effectinsert into rt3 values (3)set // connection user2revoke references on rt2 from user3set // connection user3 ok  rt3fk2 should be dropped.insert // into rt3 values (3)Based on the format of the comment  my guess is that this JUnit test was created using the conversion script attached to DERBY-2151  and that the script somehow messed up the conversion.The first line of the comment mentions DERBY-1589  but a) there is a question mark after it  and b) the commit for that issue does not appear to include the aforementioned lines.If the test case is supposed to be commented out  then some explanatory comments explaining why might be nice...   ,0
3382,Replication: Slave must inform master if DBs are out of sync.    If I copy the database to the slave before booting the master  slave will be out of sync with the master since new log records are created during booting. The slave will then stop replication  but the master will not be notified.If I then try to stop or failover the master the master will hang.   ,0
3420,The -ca option should be removed from ij and from the ij command usage line    The ij tool gives the following help output:Usage: java org.apache.derby.tools.ij &#91;-p propertyfile&#93; &#91;-ca connectionAttributePropertyFile&#93; &#91;inputfile&#93;The -ca connectionAttributePropertyFile option is no longer needed and is deprecated  so it is not documented in the Tools Guide. The option should also be removed from the usage statement.   ,0
3430,Inconsistency in JDBC autogen APIs between Connection.prepareStatement(...) and Statement.execute(...)    In EmbedStatement.java the execute(String  String[])  execute(String  int[])  executeUpdate(String  String[])  and executeUpdate(String  int[]) methods treat a 0-length array to mean NO_GENERATED_KEYS. But in EmbedConnection.java the prepareStatement(String  String[]) and prepareStatement(String  int[]) methods treat a 0-length array to mean RETURN_GENERATED_KEYS. For the sake of consistency  the two classes should treat 0-length arrays in the same way--which probably means changing EmbedConnection to match EmbedStatement.   ,0
3431,DatabaseMetaData.getConnection returns the wrong connection when using connection pooling    The connection returned from DatabaseMetaData.getConnection is not the same as the connection used to create the meta data object when the client driver is used with connection pooling enabled.For trunk  the embedded driver/ds does the right thing.   ,0
3433,Register a network port for replication    Register a network port at IANA which will be the default port for Derby Replication.   ,0
3438,Allow SQL query text to be null in StatementKey    Because the SQL isn't checked before the cache is queried  StatementKey should allow the SQL query text to be null.This simplifies handling this exceptional situations  hopefully without complications.What will happen is  the cache is queried  null is returned (no match) and then prepare will fail in the driver. Because the statement is never prepared  it will never be inserted into the cached  nor (incorrectly) fetched from the cache in the first step.Of course  one could also explicitly check for null in either the Logical(Prepared|Callable)Statement&#91;40&#93;  StatementKeyFactory or StatementCacheInteractor.However  the proposed change is small  isolated to one class and makes the exceptional case be handled by the normal code path.   ,0
3455,Move replication methods from org.apache.derby.database.Database to org.apache.derby.iapi.db.Database       ,0
3478,Simple column names specified as part of 'AS' clause in a table expression are ignored if the table expression is a view.    Simple repro as follows:create table t1 (i int  j int);insert into t1 values (1  1)  (1  -1)  (2  2)  (3  -3)  (4  4);create view v1 as select j  i from t1;create view v2 (x y z) as select j  i  i+j from t1;&#8211; OK: Returns column names specified in AS clause.select * from t1 as x(a b);&#8211; OK: Returns column names for the viewsselect * from v1;select * from v2;&#8211; WRONG: Ignores column names specified in AS clause for the views.select * from v1 x(a b);select * from v2 as x(a b c);I observed this as far back as 10.0.2.1  so this is not a regression.   ,0
3479,Changed/unexpected query plan when running test 'lang/predicatePushdown.sql'    Seen in tinderbox since r631930.See e.g. http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/631932-derbyall_diff.txt :     Start: predicatePushdown jdk1.6.0_04 derbyall:derbylang 2008-02-28 14:02:49 ***9285 del&lt; Rows seen from the left = 209285a9285&gt; Rows seen from the left = 109297 del&lt; Rows seen from the right = 209297a9297&gt; Rows seen from the right = 109299 del&lt; Rows returned = 209299a9299&gt; Rows returned = 10...   ,0
3489,Error message XRE04 does not include the right port number.    If the master is not able to connect to the slave  the error messages does not include the right port number:ij&gt; connect 'jdbc:derby:masterDB;user=oystein;password=pass;startMaster=true;slaveHost=localhost;slavePort=9901';ERROR XRE04: Could not establish a connection to the peer of the replicated database 'masterDB' on address 'localhost:-1'.   ,0
3492,When the replication log buffer becomes full  the chunk of log that should be appended is to the buffer is discarded    In MasterController#appendLog  log is force-sent to the slave if the replication log buffer becomes full. However  the log chunk that should have been appended is discarded:try { logBuffer.appendLog(greatestInstant  log  logOffset  logLength);} catch (LogBufferFullException lbfe) { try { logShipper.forceFlush(); } catch (IOException ioe) {...}The log chunk must be added after freeing a log buffer by calling forceFlush   ,0
3494,Move the setup of NormalizeResultSetNode into the NormalizeResultSetNode    In DERBY-3310 Dan suggested ...Setting up a NormalizeResultSetNode is spread over three locations  the class itself (very little  it's almost acting like a C struct) the genNormalizeResultSetNode method and then copyLengthsAndTypesToSource. A good O-O implementation would havethe logic to create a NormalizeResultSetNode self-contained in NormalizeResultSetNode.Since the ResultColumnList of the original ResultSetNode correctly describes the desired outcome  it's not clear tome why NormalizeResultSetNode can't just refer to the same list and use it for its processing. They may be some chancethat this would cause recursion at some point  where a NormalizeResultSetNode would think it needed to be wrappedin a NormalizeResultSetNode since the types of its columns and expression don't match (i.e. when it is handled as a regular ResultSetNode).I think moving the setup of a NormalizeResultSetNode into the class itself  so that its inputs are just the ResultSetNode to wrapwould help clear up the code  especially if comments were added indicating why certain actions were being taken.I am separating this task out into a separate issue  so that it can be worked on independently of DERBY-3310.   ,0
3496,CallableStatement with output parameter leaves cursor open after execution    When executing a CallableStatement which has an output parameter  the language result set is left open and makes subsequent calls to Connection.setTransactionIsolation() fail with 'ERROR X0X03: Invalid transaction state - held cursor requires same isolation level'.   ,0
3497,OOME at slave during replication    After deleting and inserting more than 1 million records during replication  I got java.lang.OutOfMemoryError: Java heap space.The heap dump shows that almost the entire heap is byte arrays  and it seems most of them are referred to by ReplicationMessage objects. An inspection of the heap dump in VisualVM it seems that it is references rooted in SocketConnection#objInputStream that keeps them from being garbage collected.   ,0
3507,startNetworkServer and stopNetworkServer don't pass arguments    The help scripts $DERBY_HOME/bin/startNetworkServer and $DERBY_HOME/bin/stopNetworkServer don't pass arguments (as '-h' or '-p') to class org.apache.derby.drda.NetworkServerControl.Solution: append command line with '$@'before:derby_exec_command='exec /'$JAVACMD/' $DERBY_OPTS -classpath /'$LOCALCLASSPATH/' org.apache.derby.drda.NetworkServerControl start'after:derby_exec_command='exec /'$JAVACMD/' $DERBY_OPTS -classpath /'$LOCALCLASSPATH/' org.apache.derby.drda.NetworkServerControl start $@'   ,0
3509,The replication log shipper is not notified when a new replication transmitter is instantiated in MC#handleException.    In MasterController#handleException  a new ReplicationMessageTransmit object is created if the exception is IOException. However  the logShipper is not notified that the new transmitter should be used. A possible solution would be to add a setTransmitter method to AsynchronousLogShipper. Note that the logShipper may contain state information that cannot be discarded  so it cannot be reinstantiated.   ,0
3536,specialCollation() and noSpecialCollation() in TableFunctionTest fail with weme6.1.    The 'specialCollation()' and 'noSpecialCollation()' fixtures in TableFunctionTest fail when run with weme6.1. I have not explicitly confirmed but it looks like this may be related to svn # 636004. The stack trace is:noSpecialCollation(o.a.dTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: An attempt was made to get a data value of type 'java.lang.Object' from a data value of type 'DECIMAL'. at o.a.d.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at o.a.d.impl.jdbc.Util.generateCsSQLException(Unknown Source) at o.a.d.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at o.a.d.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at o.a.d.impl.jdbc.EmbedConnection.handleException(Unknown Source) at o.a.d.impl.jdbc.ConnectionChild.handleException(Unknown Source) at o.a.d.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source) at o.a.d.impl.jdbc.EmbedResultSet.movePosition(Unknown Source) at o.a.d.impl.jdbc.EmbedResultSet.next(Unknown Source) at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1935) at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1776) at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1762) at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.allLegalDatatypesVTIResults(TableFunctionTest.java:1178) at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:921) at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.noSpecialCollation(TableFunctionTest.java:897) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205) at o.a.dTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101)Caused by: ERROR 22005: An attempt was made to get a data value of type 'java.lang.Object' from a data value of type 'DECIMAL'. at o.a.d.iapi.error.StandardException.newException(Unknown Source) at o.a.d.iapi.types.DataType.dataTypeConversion(Unknown Source) at o.a.d.iapi.types.DataType.getObject(Unknown Source) at o.a.d.impl.sql.execute.VTIResultSet.cast(Unknown Source) at o.a.d.impl.sql.execute.VTIResultSet.populateFromResultSet(Unknown Source) at o.a.d.impl.sql.execute.VTIResultSet.getNextRowCore(Unknown Source) at o.a.d.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)Comments from RIck on derby-dev (in response to DERBY-3341 inquiry): 'The handling of DECIMAL on the small device platform is different. The test may need some special logic so that it calls the correct method for the small device environment.'   ,0
3538,NullPointerException during execution for query with LEFT OUTER JOIN whose inner table selects all constants.    For a query having a LEFT OUTER JOIN such that the right  or 'inner'  table is a SELECT subquery whose result column list consists entirely of constants  Derby may throw an execution-time NPE while trying to apply the join predicate. I say 'may' because it depends on which join strategy the optimizer chooses.Using optimizer overrides I was able to reproduce this problem against trunk with the following (admittedly nonsense) query: create table t1 (i int  j int); insert into t1 values (-1  -2)  (-2  -4)  (-3  -9); select * from t1 left outer join (select -1 a  1 b from t1) x0 --DERBY-PROPERTIES joinStrategy=NESTEDLOOP on x0.a = t1.i;I |J |A |B------------------------------------------------1 |-2 |-1 |1-1 |-2 |-1 |1-1 |-2 |-1 |1ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.ERROR XJ001: Java exception: ': java.lang.NullPointerException'.Running the same query also failed with the same NPE on 10.0.2.1  even though optimizer overrides don't exist there. So I'm marking all known releases to be affected by this issue.Note: while this particular query may not make much sense  I have seen a user with a very large  auto-generated query that  when executed  fails due to this problem. So it is worth investigating...   ,0
3544,If NetworkServer fails to shutdown when run as a separate process by NetworkServerTestSetup  test run will hang    If the NetworkServer fails to shutdown for some reason  we do not clean up the process but will just hang the tests. We should kill off the process if the server fails to shutdown and continue. To reproduce try runnning the test derbynet.SecureServerTest with 10.3 derbyTesting.jar and 10.4 jars. See DERBY-3534 for details.   ,0
3549,Unable to start slave mode after authentication failure on a previous startSlave attempt    Trying a startSlave after an initial startSlave fails due to an authentication failure throws an errorsaying that the database has already been bootedvn@vn-laptop:~/work/workspaces/freshworkspace/slave$ java org.apache.derby.tools.ijij version 10.5ij&gt; connect 'jdbc:derby:mydb;startSlave=true;slaveHost=localhost;slavePort=8001';ERROR 08004: Connection authentication failure occurred. Reason: Invalid authentication..ij&gt; connect 'jdbc:derby:mydb;startSlave=true;user=oystein;password=pass;slaveHost=localhost;slavePort=8001';ERROR XRE09: Cannot start replication slave mode for database 'mydb'. The database has already been booted. ij&gt;   ,1
3554,Change Collation test to run DatabaseMetaDataTest  BatchUpdateTest GroupByExpressionTest  and UpdateableResultSetTest for only one locale    Currently CollationTest runs DatabaseMetaDataTest  BatchUpdateTest GroupByExpressionTest  and UpdateableResultSetTest for multiple locales and territory based collation. It would be sufficient for these to run with a single locale and would save some time running tests.   ,0
3558,regression test failure in testDerbyJarAttributeAlpha - Security Exception    I am getting 41 errors in this test of the following form  all security exceptions from the management test suite. I can post othersif necessary.2) testDerbyJarAttributeAlpha(org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest)javax.management.RuntimeMBeanException: java.lang.SecurityException: Access denied (org.apache.derby.security.SystemPermission engine monitor) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.rethrow(DefaultMBeanServerInterceptor.java:856) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.rethrowMaybeMBeanException(DefaultMBeanServerInterceptor.java:869) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:670) at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:638) at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382) at java.security.AccessController.doPrivileged(AccessController.java:251) at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379) at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.checkBooleanAttributeValue(MBeanTest.java:431) at org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeAlpha(VersionMBeanTest.java:120) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:45) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.lang.SecurityException: Access denied (org.apache.derby.security.SystemPermission engine monitor) at org.apache.derby.iapi.services.info.Version.checkMonitor(Version.java:70) at org.apache.derby.iapi.services.info.Version.isAlpha(Version.java:121) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:45) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:93) at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:27) at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:208) at com.sun.jmx.mbeanserver.PerInterface.getAttribute(PerInterface.java:65) at com.sun.jmx.mbeanserver.MBeanSupport.getAttribute(MBeanSupport.java:216) at javax.management.StandardMBean.getAttribute(StandardMBean.java:358) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:666) ... 40 more   ,1
3566,Alter column set data type not allowed in soft upgrade with unique constraint    In 10.3 I can do this:ij&gt; create table t0 (i int not null  v varchar(1) not null  constraint uq unique(v i));0 rows inserted/updated/deletedij&gt; alter table t0 alter v set data type varchar(2);0 rows inserted/updated/deletedij&gt;In 10.4 soft upgrade mode I cannot:ij&gt; create table t0 (i int not null  v varchar(1) not null  constraint uq unique(v i));0 rows inserted/updated/deletedij&gt; alter table t0 alter v set data type varchar(2);ERROR 42Z20: Column 'V' cannot be made nullable. It is part of a primary key or unique constraint  which cannot have anynullable columns.ij&gt;   ,0
3571,LOB locators are not released if the LOB columns are not accessed by the client    If the client creates a result set containing LOB locator columns and iterates through it without actually accessing the LOB columns  the locators are not released.The amount of locators and their associated LOB objects causes the server to consume large amounts of memory and it eventually gets an OOME.There are a few workarounds for this bug: a) Access and/or properly close the LOBs (i.e. Blob.free). This is partly dependent on DERBY-2892. b) Invoke Connection.commit (or rollback) periodically  which causes all locators on the connection to be released.   ,0
3580,Remove unused method Connection.resetConnection(LogWriter  String  Properties)    The method Connection.resetConnection(LogWriter  String  Properties) in package org.apache.derby.client.am isn't used and can be removed.There is another resetConnection-method that is being used.   ,0
3581,Changing certain properties on client DataSource objects causes existing connections to reflect the new values    The client driver has code propagating changes made to the DataSource to existing connections created by that DataSource.There is some discussion of this in the thread http://www.nabble.com/ConnectionPoolDataSource-properties-td15740457.html  and there is also an example of what can happen due to this 'feature'.Besides from being a bug with the potential to cause strange errors in deployment  the issue also makes the client driver code harder to read and understand.As far as I can see  there is also some related code in other parts of the client driver  for instance for 'fully' resetting statements. There is mention of dynamic versus static sections in the comments (this one from am.Statement): // If a dataSource is passed into resetClientConnection()  then we will assume // properties on the dataSource may have changed  and we will need to go through // the open-statement list on the connection and do a full reset on all statements  // including preparedStatement's and callableStatement's. This is because property // change may influence the section we allocate for the preparedStatement  and // also the cursor attributes  i.e. setCursorSensitivity(). // If no dataSource is passed into resetClientConnection()  then we will do the // minimum reset required for preparedStatement's and callableStatement's.Note that the reset code for statements is also invoked when ClientPooledConnection.getConnection() is invoked. I do not understand why we should reset statements when we get a new logical connection.Further  I also suspect the concept of a deferred reset has been introduced because of the feature/bug described by this Jira issue. A deferred reset seems to be a mechanism to avoid a round-trip to validate the newly changed DataSource properties (typically user  password and security mechanism).I will look into removing code related to deferred resets as well. If you have historic information about these parts of the driver  I would appreciate if you share it with the community if possible.Just to be clear  it is my opinion that changed DataSource properties should take effect when one of the following methods is invoked: DataSource.getConnection() ConnectionPoolDataSource.getPooledConnection() XADataSource.getXAConnection()All of the methods above returns a physical connection. Properties like user name and password are associated with the physical connection  and thus requests to obtain a logical connection should not cause any of these properties to change.   ,0
3586,Remove am.Connection.reset(LogWriter ClientBaseDataSource boolean) and called methods am.Connection.reset(LogWriter ClientBaseDataSource boolean) isn't called and can be removed.,0
3588,suites.All fails to run on Jvm 1.5 when built with JDK 1.5 (Failed to invoke suite(): .jdbc4._Suite)    Further  the following methods are only called from the reset(3):,0
3595,TableFunctionTest.SpecialCollation and NoSpecialCollation fail with IBM iseries in checkGetXXXCalls    abstract Connection.reset_(3) and impl NetConnection.reset_(3),0
3596,Creation of logical connections from a pooled connection causes resource leak on the server    NetConnection.resetNetConnection(3),0
3603,'IN' clause ignores valid results  incorrect qualifier handling suspected    All these methods have cousins taking 4 arguments  which are being used by on one occasion: ClientPooledConnection.getConnection().,0
3613,SELECT DISTINCT field FROM TABLE_NAME GROUP BY field   field2    ??????�ێ___?_�_??????_�_?????�_�?,0
3616,TableFunctionTest fails under Ubuntu 7.10    When running the test org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest  it fails with the output shown below. This test blocks the proper execution of suites.All and it was tested under Ubuntu 7.10 (also tested on Windows Vista and it doesn't throw an error there).There were 2 errors:1) noSpecialCollation(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: The exception 'java.lang.ClassNotFoundException: ERROR XBM0U: No class was registered for identifier 495.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:223) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2125) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4320) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:463) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:367) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1935) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1776) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1762) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.simpleVTIResults(TableFunctionTest.java:1079) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:920) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.noSpecialCollation(TableFunctionTest.java:897) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:103)Caused by: java.sql.SQLException: Java exception: 'ERROR XBM0U: No class was registered for identifier 495.: java.lang.ClassNotFoundException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) ... 29 moreCaused by: java.lang.ClassNotFoundException: ERROR XBM0U: No class was registered for identifier 495. at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:129) at org.apache.derby.catalog.types.TypeDescriptorImpl.readExternal(TypeDescriptorImpl.java:491) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:126) at org.apache.derby.impl.sql.execute.VTIResultSet.thawReturnType(VTIResultSet.java:696) at org.apache.derby.impl.sql.execute.VTIResultSet.getReturnColumnTypes(VTIResultSet.java:670) at org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(VTIResultSet.java:559) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:347) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:423) ... 23 more2) specialCollation(org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: The exception 'java.lang.ClassNotFoundException: ERROR XBM0U: No class was registered for identifier 495.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:223) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2125) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4320) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:463) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:367) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1935) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1776) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1762) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.simpleVTIResults(TableFunctionTest.java:1079) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:920) at org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.specialCollation(TableFunctionTest.java:907) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:103) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'ERROR XBM0U: No class was registered for identifier 495.: java.lang.ClassNotFoundException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) ... 45 moreCaused by: java.lang.ClassNotFoundException: ERROR XBM0U: No class was registered for identifier 495. at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:129) at org.apache.derby.catalog.types.TypeDescriptorImpl.readExternal(TypeDescriptorImpl.java:491) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:126) at org.apache.derby.impl.sql.execute.VTIResultSet.thawReturnType(VTIResultSet.java:696) at org.apache.derby.impl.sql.execute.VTIResultSet.getReturnColumnTypes(VTIResultSet.java:670) at org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(VTIResultSet.java:559) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:347) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:423) ... 39 moreFAILURES!!!Tests run: 2  Failures: 0  Errors: 2   ,0
3624,testfailure in storetests/st_derby715 with ibm 1.5 on iseries machine; one deadlock message missing    I saw this fail once; a couple of reruns didn't duplicate the problem.The only difference appears to be that one of the deadlock messages is missing from the output.4 del&lt; Got a Deadlock.   ,0
3634,Cannot use row_number() in ORDER BY clause    The following query works correctly:select abs(a)  row_number() over ()from twhere a &gt; 100 and a &lt; 111order by abs(a)I expected the following query to also work  but it raised an exception:select abs(a)  row_number() over ()from twhere a &gt; 100 and a &lt; 111order by row_number() over ()This is the error I saw: 'ERROR 42X01: Syntax error: Encountered 'over' at line 5  column 23'.Here are the reasons why I think that this syntax is supposed to be supported:According to my reading of the 2003 SQL spec  the ORDER BY clause should be able to sort on any expression in the SELECT list. That includes OLAP expressions. I believe this is so because  according to part 2  section 10.10 (&lt;sort specification&gt;)  a &lt;sort key&gt; can be any &lt;value expression&gt; and if you follow the grammar for &lt;value expression&gt;  it can resolve to be a &lt;value expression primary&gt; (see section 6.3)  which can in turn resolve to be a &lt;window function&gt;. This reasoning is supported by tracing the hotlinks on the following page which lays out the SQL 2003 BNF: http://savage.net.au/SQL/sql-2003-2.bnf.html This interpretation is further supported by the example of an ORDER BY clause referencing an OLAP expression which is provided on page 23 of the introduction to OLAP written by Fred Zemke  Krishna Kulkarni  Andy Witkowski  and Bob Lyle: www.cse.iitb.ac.in/dbms/Data/Papers-Other/SQL1999/OLAP-99-154r2.pdf   ,0
3652,Derby does not follow the SQL Standard when trying to map SQL routines to Java methods.    I have only tested this in the 10.5 trunk. However  I suspect that this affects all previous releases of Derby as well.In resolving method signatures for function/procedure invocations  the SQL standard makes the following definitions in part 13  section 4.5 (parameter mapping). These definitions  in turn  refer to tables B-1 and B-3 in JDBC 3.0 Specification  Final Release  October 2001 (&#91;JDBC&#93;). Simply mappable - This refers to the correspondence of SQL and Java types described in &#91;JDBC&#93; table B-1. This is the table which defines the mapping of SQL types to Java primitives. Object mappable - This refers to the correspondence of SQL and Java types described in &#91;JDBC&#93; table B-3. This is the table which defines the mapping of SQL types to Java wrapper objects. Output mappable - For OUT and INOUT parameters  this refers to a single element array whose cell is simply mappable or object mappable. E.g. Integer[] or float[]. Mappable - This means simply  object  or output mappable. Result set mappable - This means a single element array whose cell is a type which implements either java.sql.ResultSet or sqlj.runtime.ResultSetIterator.Putting all of this together  section 4.5 continues: 'A Java method with M parameters is mappable (to SQL) if and only if  for some N  0 (zero) &lt;= N &lt;= M  the data types of the first N parameters are mappable  the last M - N parameters are result set mappable  and the result type is either simply mappable  object mappable  or void.'Section 8.6 gives more detailed rules  but they are hard to follow. According to section 8.6  when resolving a routine invocation  Derby should expect to find one and only one static mappable method with the expected external name (Java class + method name).I believe that this is a fair description of the rules. This  at least  is what some other databases appear to do. See  for instance  http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.help.ase_15.0.java/html/java/java126.htm and http://www.service-architecture.com/database/articles/mapping_sql_and_java_data_types.htmlWe do not have a regression test which verifies that Derby applies the SQL standard resolution rules. There may be several divergences from the standard. This JIRA is a place to track those discrepancies. Here is one that I have noticed:The following SQL signature( a int ) returns intshould be mappable to any of the following Java signaturespublic static int f( int a )public static int f( Integer a )public static Integer f( int a )public static Integer f( Integer a )However  I observe that Derby is only able to resolve the first and third signatures (the ones with primitive arguments). I will attach a test case showing this problem.I will also attach an html table summarizing the simply and object mappable rules.   ,0
3655,errror in nightly regression test: LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:/jartest/JarResults.2008-04-29/ibm16_suites.All/system/singleUse/oneuse1e/tmp/lob6165.tmp    There was 1 failure:1) LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:/jartest/JarResults.2008-04-29/ibm16_suites.All/system/singleUse/oneuse1e/tmp/lob6165.tmp at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:130) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:128) at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35) at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:105) at java.security.AccessController.doPrivileged(AccessController.java:202) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:102) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:98) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:91) at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:77) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)   ,0
3657,Comment in template security policy incorrectly says that JMX is not enabled by default    The template policy located at $DERBY_HOME/demo/templates/server.policy (release distributions) and $trunk/java/drda/org/apache/derby/drda/template.policy (source tree) contains a comment relating to JMX permissions which says:// JMX management of Derby is NOT enabled by default; see also DERBY-1387.This was no longer true after DERBY-3429 was fixed  which includes the 10.4.1.3 release. JMX monitoring and management is enabled by default given that the JVM includes the required APIs  and that the security policy allows JMX features to come up. The comment should have been removed  but this has not happened. The same applies to the default server policy  server.policy  which also should be corrected (this policy's comments are however not exposed to users in the same way as the template).Note that no code or actual permissions need to change as a result of this; it is merely an outdated comment that needs to be removed in order not to give users a false impression.   ,1
3658,LOBStateTracker should not use SYSIBM.CLOBRELEASELOCATOR when the database is soft-upgraded from 10.2    Reported by Daniel Noll on derby-user: http://thread.gmane.org/gmane.comp.apache.db.derby.user/9107To reproduce: 1. Create a database with Derby 10.2.2.0 2. Create a table with a clob column and insert some data 3. Access that database with client+server at version 10.4.1.3 and iterate through the rows in the tableYou'll see an error message like this:ERROR 42Y03: 'SYSIBM.CLOBRELEASELOCATOR' is not recognized as a function or procedure.   ,0
3674,'ALTER TABLE' is not allowed on the System table ''SYSCS_DIAG'.'TRANSACTION_TABLE'' in derbyall - store/TransactionTable.sql    See e.g. http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/655989-derbyall_diff.txt&lt;method&gt;store/TransactionTable.sql&lt;/method&gt;&lt;signature&gt;268 del&lt; 0 rows inserted/updated/deleted268a268 269&gt; ERROR 38000: The exception 'java.sql.SQLException: 'ALTER TABLE' is not allowed on the System table ''SY/SCS_DIAG'.'TRANSACTION_TABLE''.' was thrown while evaluating an expression.&gt; ERROR X0Y56: 'ALTER TABLE' is not allowed on the System table ''SYSCS_DIAG'.'TRANSACTION_TABLE''.&lt;/signature&gt;   ,0
3682,SYSCS_BULK_INSERT doesn't quote identifiers or strings properly    Discovered by Mamta A. Satoor in DERBY-1062.SYSCS_BULK_INSERT builds an insert statement in which it doesn't quote the schema name or the table name. It also takes string parameters that are inserted into the statement text with single quotes around them  but that won't work if those strings contain single quote characters.   ,0
3695,NullPointerException when invoking statement event listeners if one of the listeners is null    If PooledConnection.addStatementEventListener() is called with a null argument  the client driver throws a NullPointerException when the listeners are invoked. Embedded does not throw an exception.   ,0
3704,If an IOException is encountered during establishment of the connection  Network Server should print the root exception to the console instead of a generic message    In working on DERBY-3701  I noticed that when the FileNotFound exception caused the connection to fail it just printed out a generic exception  not the IOException that caused the error.That is because of this code in ClientThread. catch (IOException ioe) { // IOException causes this thread to stop. No // console error message if this was caused by a // shutdown synchronized (parent.getShutdownSync()) { if (!parent.getShutdown()) { parent.consolePropertyMessage('DRDA_UnableToAccept.S'); } }In the event of an unexpected IOException the actual exception should print and the client socket should be closed if it has been established.   ,0
3705,In Net Client mode  negative values for stream length are accepted without an exception for PreparedStatement.setAsciiStream()    This is related to Cloudscape bug 4250.Pass negative length as the stream length for various setXXXStream methods should throw an exception. But in Net Client mode  passing a negative value as stream length to PreparedStatement.setAsciiStream() doesn't throw an exception.e.g. //from store/StreamingColumnPreparedStatement ps = prepareStatement('insert into ' + 'testLongVarCharInvalidStreamLength11 values(?  ?  ?)'); ps.setInt(1  100); try { println('===&gt; testing using setAsciiStream with -2 as length'); ps.setAsciiStream(2  fileIn  -2); // should throw exception here but doesn't. }This issue has been fixed for embedded mode  but not for client mode.   ,0
3708,setting tracedirectory from the command line does not work    I triedjava org.apache.derby.drda.NetworkServerControl tracedirectory /tmpand got:Trace directory changed to /tmp.java org.apache.derby.drda.NetworkServerControl trace onTrace turned on for all sessions.Trace turned on for all sessions.And the trace output was not redirected to the /tmp directory. The tracedirectory command seemed to be ignored.Setting tracedirectory with the system property derby.drda.traceDirectory or with the NetworkServerControl api seems to work ok.   ,0
3718,NPE when firing a trigger    NullPointerException raised when firing a trigger. Originally reported by Thiyagu P on the Derby user list: http://www.nabble.com/Trigger-function-broken-in-10.4.1.3--td17760208.html#a17760208 Thiyagu reports that the same script works fine in 10.3.3.0. Here's the script:CREATE TABLE TRADE( ID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1000)  BUYID INT NOT NULL  QTY FLOAT(2) NOT NULL ); CREATE TABLE TOTAL(BUYID INT NOT NULL  TOTALQTY FLOAT(2) NOT NULL); CREATE TRIGGER TRADE_INSERT AFTER INSERT ON TRADE REFERENCING NEW AS NEWROW FOR EACH ROW MODE DB2SQL UPDATE TOTAL SET TOTALQTY = NEWROW.QTY WHERE BUYID = NEWROW.BUYID; INSERT INTO TOTAL VALUES (1  0); INSERT INTO TRADE VALUES(1  1  10);Here's the stack trace:java.lang.NullPointerException at org.apache.derby.iapi.types.DataTypeDescriptor.getNull(DataTypeDescriptor.java:1008) at org.apache.derby.iapi.types.DataTypeDescriptor.normalize(DataTypeDescriptor.java:645) at org.apache.derby.impl.sql.execute.NormalizeResultSet.normalizeRow(NormalizeResultSet.java:329) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:189) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:424) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:246) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:159) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:111) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:269) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1150) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:329) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:508) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248) at org.apache.derby.impl.tools.ij.Main.go(Main.java:215) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181) at org.apache.derby.impl.tools.ij.Main.main(Main.java:73) at org.apache.derby.tools.ij.main(ij.java:59)   ,0
3719,'...replication.buffer.LogBufferFullException' causes failover to fail w/ 'XRE07  SQLERRMC: Could not perform operation because the database is not in replication master mode.'    With the patch for DERBY-3709  derby-3709_p1-v2.diff.txt  I was able to provoke this error twice in 30 test runs on this platform (On another platform I saw none in 100 test runs.)I will upload the full test run log dir.'Summary':1) testReplication_Local_StateTest_part2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&lt;XRE&#91;20&#93;&gt; but was:&lt;XRE&#91;07&#93;&gt;Master derby.log:--------------------------------------------- BEGIN REPLICATION ERROR MESSAGE (6/10/08 4:08 PM) ----Exception occurred during log shipping.org.apache.derby.impl.store.replication.buffer.LogBufferFullException at org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.switchDirtyBuffer(ReplicationLogBuffer.java:357) at org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.appendLog(ReplicationLogBuffer.java:146) at org.apache.derby.impl.store.replication.master.MasterController.appendLog(MasterController.java:428) at org.apache.derby.impl.store.raw.log.LogAccessFile.writeToLog(LogAccessFile.java:787) at org.apache.derby.impl.store.raw.log.LogAccessFile.flushDirtyBuffers(LogAccessFile.java:534) at org.apache.derby.impl.store.raw.log.LogAccessFile.flushLogAccessFile(LogAccessFile.java:574) at org.apache.derby.impl.store.raw.log.LogAccessFile.writeLogRecord(LogAccessFile.java:332) at org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(LogToFile.java:3759) at org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(FileLogger.java:370) at org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Xact.java:1193) at org.apache.derby.impl.store.raw.data.LoggableActions.doAction(LoggableActions.java:221) at org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:85) at org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8463) at org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(StoredPage.java:8336) at org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(StoredPage.java:8319) at org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(BasePage.java:808) at org.apache.derby.impl.store.raw.data.BasePage.insert(BasePage.java:653) at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:307) at org.apache.derby.impl.store.access.heap.HeapController.insert(HeapController.java:575) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:457) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1011) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1307) at org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:672) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:4197) at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:4001) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:991) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:278)-------------------- END REPLICATION ERROR MESSAGE ---------------------Slave derby.log:-------------------------------------------------------------------------------------------2008-06-10 14:05:56.408 GMT Thread&#91;DRDAConnThread_3 5 main&#93; (DATABASE = /export/home/tmp/os136789/testingInMyDerbySandbox/12/db_slave/wombat)  (DRDAID = {2})  Replication slave mode started successfully for database '/export/home/tmp/os136789/testingInMyDerbySandbox/12/db_slave/wombat'. Connection refused because the database is in replication slave mode. Replication slave role was stopped for database '/export/home/tmp/os136789/testingInMyDerbySandbox/12/db_slave/wombat'.------------ BEGIN SHUTDOWN ERROR STACK -------------ERROR XSLA7: Cannot redo operation null in the log. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296) at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1525) at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:920) at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:334) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1999) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:553) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1999) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:553) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780) at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196) at org.apache.derby.impl.db.SlaveDatabase.bootBasicDatabase(SlaveDatabase.java:424) at org.apache.derby.impl.db.SlaveDatabase.access$000(SlaveDatabase.java:70) at org.apache.derby.impl.db.SlaveDatabase$SlaveDatabaseBootThread.run(SlaveDatabase.java:311) at java.lang.Thread.run(Thread.java:619)Caused by: ERROR 08006: Database '{0}' shutdown. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276) at org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationSlaveRole(LogToFile.java:5142) at org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave(SlaveController.java:266) at org.apache.derby.impl.store.replication.slave.SlaveController.access$500(SlaveController.java:64) at org.apache.derby.impl.store.replication.slave.SlaveController$SlaveLogReceiverThread.run(SlaveController.java:531)============= begin nested exception  level (1) ===========ERROR 08006: Database '{0}' shutdown. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276) at org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationSlaveRole(LogToFile.java:5142) at org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave(SlaveController.java:266) at org.apache.derby.impl.store.replication.slave.SlaveController.access$500(SlaveController.java:64) at org.apache.derby.impl.store.replication.slave.SlaveController$SlaveLogReceiverThread.run(SlaveController.java:531)============= end nested exception  level (1) ===========------------ END SHUTDOWN ERROR STACK -------------   ,0
3726,Don't call RAFContainer.padFile() from instances of RAFContainer4    In this thread on derby-dev  http://mail-archives.apache.org/mod_mbox/db-derby-dev/200806.mbox/%3c48530848.3020501@sbcglobal.net%3e it was mentioned that RAFContainer4 calls padFile() when creating a container. Since padFile() uses old I/O calls and the rest of RAFContainer4 uses NIO  it could possibly cause similar issues as those seen in DERBY-3347. Although we haven't verified that this is a problem  we should try to avoid mixing old I/O and NIO to be on the safe side.   ,0
3727,Improve error information reported when encountering 'ERROR XSDB3: Container information cannot change once written: was 103  now 80'    Improve the text associated with ERROR XSDB3: Container information cannot change once written: was 103  now 80. It would be nice to know whichdatabase and container at least  and possibly any other info that may have changed. Maybe page/hex dumps to track down overlapping I/O errors on page 0.Here is a stack trace reported as part of DERBY-3607  as encountered by a back ground thread:2008-06-12 08:53:12.421 GMT Thread&#91;derby.rawStoreDaemon 5 derby.daemons&#93; Cleanup action starting^MERROR XSDB3: Container information cannot change once written: was 103  now 80^M at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)^M at org.apache.derby.impl.store.raw.data.AllocPage.WriteContainerInfo(Unknown Source)^M at org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(Unknown Source)^M at org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(Unknown Source)^M at org.apache.derby.impl.store.raw.data.RAFContainer.clean(Unknown Source)^M at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Unknown Source)^M at org.apache.derby.impl.services.cache.ConcurrentCache.cleanEntry(Unknown Source)^M at org.apache.derby.impl.services.cache.BackgroundCleaner.performWork(Unknown Source)^M at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(Unknown Source)^M at org.apache.derby.impl.services.daemon.BasicDaemon.work(Unknown Source)^M at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)^M at java.lang.Thread.run(Unknown Source)^M   ,0
3728,Fix error handling in PrivilegedFileOpsForTests    The exception handling in this utility class is unclear and can in some cases cause ClassCastException to be thrown.Note that SecurityException is a runtime exception.Potential issues to be fixed: 1) Avoid possibility of ClassCastException in 'getFileInputStream' 2) Don't include SecurityException in the signature (throws clause) 3) Document SecurityException in JavaDoc.Points 2 and 3 leads to the option of not catching SecurityException  which allows the code to be written more concisely and we can use PrivilegedAction instead of PrivilegedExceptionAction in some cases.There is also a missing character in the class name in the header  and an invalid JavaDoc tag in the class JavaDoc.   ,0
3731,Improve calculation of refSize in ClassSize.java    java/engine/org/apache/derby/iapi/services/cache/ClassSize.java has a static code block which calculates the size of a reference for the architecture. This code could be improved by adding garbage collection before measuring memory  to give a consistent reading. Also there have been suggestions that we use os.arch or sun.arch.data.model to make the measurement more reliable  especially on 64bit machines.   ,0
3732,SQL Length function materializes BLOB  into memory    Currently the SQL length function materializes the entire lob into memory. In SQLBinary.getLength() we have public final int getLength() throws StandardException { if (stream != null) { if (streamValueLength != -1) return streamValueLength; } return (getBytes() == null) ? 0 : getBytes().length; }Which actually is doubly bad because we call getBytes twice and materialize it twice.It would be good to read the length from the stream if available and otherwise stream the value to get the length  rather than materializing it into memory.To reproduce  run the attached repro.java -Xmx16M LengthLargeLobIt gives an out of memory exceptionCaused by: java.lang.OutOfMemoryError: Java heap space at org.apache.derby.iapi.types.SQLBinary.readFromStream(SQLBinary.java:415) at org.apache.derby.iapi.types.SQLBinary.readExternal(SQLBinary.java:318) at org.apache.derby.iapi.types.SQLBinary.getValue(SQLBinary.java:220) at org.apache.derby.iapi.types.SQLBinary.getBytes(SQLBinary.java:210) at org.apache.derby.iapi.types.SQLBinary.getLength(SQLBinary.java:250) at org.apache.derby.impl.sql.execute.BaseActivation.getDB2Length(BaseActivation.java:1684) at org.apache.derby.exe.acf81e0010x011axa317x5db8x0000003d9dc81.e1(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:141) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ProjectRestrictResultSet.java:497) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:291) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:423) ... 2 more[   ,0
3735,Incorrect position calculation in PositionedStoreStream with read(byte[] ...)    A bug in the methods 'read(byte[])' and 'read(byte[] int int)' in PositionedStoreStream can cause the position variable to be set to an incorrect value.The bug is only triggered if one of the two read methods is invoked after EOF of the underlying stream has been reached.If the bug is triggered  the position will be decreased by one because the underlying stream returns -1. Subsequent reads will further decrease the position. This can cause EOF-exceptions (during repositioning) or incorrect data being returned in subsequent calls.   ,0
3736,Revoking a column level privilege from a user  a prepared statement relying on that privilege can still be executed    When a table level SELECT privilege is revoked  a dependent prepared statement is invalidated and can no longer be executed  but in the case of a column level privilegeSELECT privilege  the dependent prepared statement can still be executed.This works as expected in 10.2  but does not work in all 10.3 and 10.4 releases.   ,1
3738,Add more tests for legal/illegal commands in the different replication states    Adding new replication state tests: ... testReplication_Local_3_p1_StateNegativeTests  testReplication_Local_3_p2_StateTests_bigInsert_immediateStopMaster  testReplication_Local_3_p2_StateTests_smallInsert_immediateStopMaster_DISABLED (Due to DERBY-3617) testReplication_Local_3_p2_StateTests_bigInsert_sleepBeforeStopMaster testReplication_Local_3_p2_StateTests_smallInsert_sleepBeforeStopMaster testReplication_Local_3_p3_StateNegativeTests  testReplication_Local_3_p4_StateNegativeTestsplus refactoring and cleanup.   ,0
3743,Revoking EXECUTE privilege on a function if used in a CHECK constraint: implementation problem    The docs say that REVOKE EXECUTE ... RESTRICT should fail if there is a dependent constraint:'The RESTRICT clause specifies that the EXECUTE privilege cannot be revoked if the specified routine is used in a view  trigger  or constraint  and the privilege is being revoked from the owner of the view  trigger  or constraint.' Revoking the privilege will be correctly restricted  but possibly for the wrong reason.   ,1
3745,Derby can leak classloaders in an app server environment    A user reported potential class loader leaks in Derby...The first one looks like Derby created a long-runningthread and copying the context class loader. To fix  thecontext class loader should be saved/set/restored around thecreation of the new thread so that it copies some benign classloader instead (e.g.  null or getClass().getClassLoader()): 0x42278e58 java/lang/Thread@302e302e &#91;truncating at running thread LEAK&#93;Object: 0x42278e58 java/lang/Thread@302e302eChildren: 0x42278ee0 java/lang/String@303f303f 0x4226e558 java/lang/ThreadGroup@6f2e6f2e 0x42278e40org/apache/derby/impl/services/monitor/AntiGC@603a603a 0x419cfac0The second is another long running thread. The same applies: 0x426fe7a0 java/lang/Thread@19901990 &#91;truncating at running thread LEAK&#93;Object: 0x426fe7a0 java/lang/Thread@19901990Parents: 0x4226e5a8 [Ljava/lang/Thread;@6f386f38 0x426fe548org/apache/derby/iapi/services/context/ContextManager@19421942Children: 0x426fe838 java/lang/String@19a319a3 0x4226e558 java/lang/ThreadGroup@6f2e6f2e 0x426fe4f8org/apache/derby/impl/services/daemon/BasicDaemon@19381938 0x419cfac0The third is a TimerThread owneed   which is created when aTimer is created. The same applies: 0x425ac538 java/util/Timer$TimerImpl@6b8a6b8a &#91;truncating at running thread LEAK&#93;Object: 0x425ac538 java/util/Timer$TimerImpl@6b8a6b8aParents: 0x41faaf58 [Ljava/lang/Thread;@3c583c58Object: 0x425ac510 java/util/Timer@6b856b85Parents: 0x425ac500org/apache/derby/impl/services/timer/SingletonTimerFactory@56e256e2For more info  see thread at:http://www.nabble.com/ClassLoader-leaks--td18121374.html   ,1
3763,Rename BaseJDBCTestCase.usingDerbyNet    The names of the methods 'usingDerbyNet' and 'usingDerbyNetClient' in BaseJDBCTestCase are confusing.I propose we change the one used to tell if we are using the DB2 client driver (JCC).   ,0
3770,Create a utility class for skipping data in an InputStream    The contract of InputStream.skip is somewhat difficult  some would even say broken.See http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#skip(long))A utility class should be created to ensure that we use the same skip procedure throughout the Derby code base.Suggested functionality: long skipFully(InputStream) : skips until EOF  returns number of bytes skipped void skipFully(InputStream long) : skips requested number of bytes  throws EOFException if there is too few bytes in the streamI know of two different approaches  both skipping in a loop: a) Verify EOF with a read call when skip returns zero. b) Throw EOFException if skip returns zero before requested number of bytes have been skipped.There's related code in iapi.util.UTF8Util. Maybe this class  say StreamUtil  could be put in the same package?   ,0
3773,ImportExportLobTest failed on Zos  Clobs differ at index 1 expected: but was:    testImportDataExportQueryLobsInExtFile(org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest)junit.framework.AssertionFailedError: Clobs differ at index 1 expected:&lt;99&gt; but was:&lt;196&gt; at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEquals(BaseJDBCTestCase.java:693) at org.apache.derbyTesting.junit.JDBC.assertSameContents(JDBC.java:1139) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.verifyData(ImportExportLobTest.java:534) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile(ImportExportLobTest.java:341) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)I ran on Windows with -Dfile.encoding='UTF-16' and got a different error.1) testImportDataExportQueryLobsInExtFile(org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest)java.sql.SQLException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:223) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2183) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1325) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1307) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportDataLobsFromExtFile(ImportExportBaseTest.java:258) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile(ImportExportLobTest.java:339) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 36 moreCaused by: java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a joinspecification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2183) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:146) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(EmbedPreparedStatement20.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(EmbedPreparedStatement30.java:63) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(EmbedPreparedStatement40.java:40) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:105) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1533) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1361) at org.apache.derby.impl.load.Import.performImport(Import.java:274) at org.apache.derby.impl.load.Import.importData(Import.java:166) at org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(SystemProcedures.java:1538) at org.apache.derby.exe.acaa7ac093x011bx0970x9cd2x00003dcd3cb42.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:76) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:384) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) ... 29 moreCaused by: ERROR 42X04: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286) at org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(ColumnReference.java:354) at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(ResultColumn.java:588) at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(ResultColumnList.java:693) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(SelectNode.java:443) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressionsWithTables(SelectNode.java:578) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables(DMLStatementNode.java:251) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindResultSetsWithTables(DMLStatementNode.java:175) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:242) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:128) ... 47 more2) testImportDataExportQueryLobsInExtFile(org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest)java.sql.SQLException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362) at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1588) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportDataLobsFromExtFile(ImportExportBaseTest.java:258) at org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile(ImportExportLobTest.java:339) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: org.apache.derby.client.am.SqlException: The exception 'java.sql.SQLException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table.' was thrown while evaluating an expression. at org.apache.derby.client.am.Statement.completeExecute(Statement.java:1601) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:322) at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:106) at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:75) at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:179) at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1567) at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2151) at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1594) at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1579) ... 38 moreCaused by: org.apache.derby.client.am.SqlException: Column 'COLUMN4' is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and isnot in the GROUP BY list. If this is a CREATE or ALTER TABLE statement then 'COLUMN4' is not a column in the target table. ... 47 more   ,0
3774,jdbc4/ClobTest fails on Zos with AssertionFailedError: Streams differ at index 0 expected: but was:    testGetAsciiStreamCreateClob(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)junit.framework.AssertionFailedError: Streams differ at index 0 expected:&lt;200&gt; but was:&lt;72&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertEquals(BaseTestCase.java:341) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob(ClobTest.java:575) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:59) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:39) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)I was able to reproduce this on Windows with slightly different errors running with -Dfile.encoding='UTF-16'There were 2 errors:) testGetCharacterStreamClobUpdates(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)java.sql.SQLException: Te position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:93) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:172) at org.apache.derby.impl.jdbc.EmbedClob.setString(EmbedClob.java:559) at org.apache.derby.impl.jdbc.EmbedClob.setString(EmbedClob.java:525) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamClobUpdates(ClobTest.java:69) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)aused by: java.sql.SQLException: The position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:11) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 34 more) testGetCharacterStreamClobUpdates(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)java.sql.SQLException: Te position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362) at org.apache.derby.client.am.Clob.setString(Clob.java:588) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamClobUpdates(ClobTest.java:69) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)aused by: org.apache.derby.client.am.SqlException: The position argument '53' exceeds the size of the BLOB/CLOB. at org.apache.derby.client.am.Clob.setStringX(Clob.java:624) at org.apache.derby.client.am.Clob.setString(Clob.java:579) ... 38 morehere were 2 failures:) testGetAsciiStreamCreateClob(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)junit.framework.AssertionFaildError: Streams differ at index 0 expected:&lt;254&gt; but was:&lt;72&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertEquals(BaseTestCase.java:343) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob(ClobTest.java:575) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)) testGetAsciiStreamCreateClob(org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest)junit.framework.AssertionFaildError: Streams differ at index 0 expected:&lt;254&gt; but was:&lt;72&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertEquals(BaseTestCase.java:343) at org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob(ClobTest.java:575) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)FAILURES!!!Tests run: 22  Failures: 2  Errors: 2   ,0
3777,SecureServerTest  SSLTest are failed on Zos with exit code 143 starting network server       ,1
3781,PositionedStoreStream.reposition(pos) with pos greater than length leaves the stream object in an inconsistent state    PositionedStoreStream.reposition(pos) with pos greater than the stream length leaves the stream object in an inconsistent state  causing subsequent calls to fail or the state to remain inconsistent (which can cause the wrong data to be returned).The problem is that the position variable gets out of sync with the underlying stream.There are at least two ways to fix this (assuming the positioned store stream does not know the length of the underlying stream): a) Reset stream to position zero. b) Let the stream be positioned at EOF and update the internal position variable.Option b) leaves the stream in an unusable state  and the next request will cause option a) to be performed. It also require a slight rewrite of 'PositionedStoreStream.skipFully' and 'PositionedStoreStream.reposition' to be able to determine the position of the stream (the length in this case).Option a) will cause the first page of the stream to be read into the cache (if not already there)  but taken the reason for doing this is an error condition it seems acceptable.A correct value of the position variable is required for correct/valid operation of PositionedStoreStream.   ,0
3782,Client Configuration.java imports engine class  org.apache.derby.iapi.services.info.JVMInfo    The client code (org.apache.derby.client.am.Configuration) imports the engine class org.apache.derby.iapi.services.info.JVMInfo.This will make two copies of the class in derby.jar and derbyclient.jar which can cause problems if mixed version jars are used and I think may cause jar sealing issues as well.Until we have a good framework for sharing code between engine and client  the client shouldn't import engine classes.   ,0
3783,LOBStreamControl shouldn't throw SQLException    LOBStreamControl throws three types of exceptions: IOException  SQLException and StandardException.All the SQLException are generated/thrown from the code in LOBStreamControl.At this level of the code  SQLException should not be thrown  as it is more tedious to handle both SQLException and StandardException at higher levels.I propose to replace SQLException with StandardException in LOBStreamControl. The purpose of this change is consistency  and also results it slightly less code at higher levels.   ,0
3784,ImportExportTest doesn't detect lack of expected errors    I observed that ImportExportTest contains many test cases which do try/catch/assertSQLException  but none of them call fail() at the end of the try block. Example: public void testEarlyEndOfFile() throws Exception { Connection c = getConnection(); try { doImportFromFile(c  'extin/EndOfFile.txt'   'T4'   null   null   null  0); } catch (SQLException e) { assertSQLState('XIE0E'  e); } }I think this means that if the expected exception isn't thrown the test still passes.   ,0
3799,NullPointerException when accessing a clob through a pooled connection    After returning a pooled connection to the pool and getting it again a NullPointerException is thrown when a clob field is accessed again. This may be related to the following post: http://mail-archives.apache.org/mod_mbox/db-derby-user/200803.mbox/%3C47CD3431.5020205@sun.com%3EHere is the stack trace:java.lang.NullPointerException at org.apache.derby.client.am.PreparedStatement.setIntX(Unknown Source) at org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(Unknown Source) at org.apache.derby.client.am.Clob.getLocatorLength(Unknown Source) at org.apache.derby.client.am.Lob.sqlLength(Unknown Source) at org.apache.derby.client.am.Clob.length(Unknown Source) at org.apache.derby.client.am.Cursor.getString(Unknown Source) at org.apache.derby.client.am.ResultSet.getString(Unknown Source) at derbyerr.Main.main(Main.java:65)Here is the code to reproduce the problem:package derbyerr;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import javax.sql.PooledConnection;import org.apache.derby.jdbc.ClientConnectionPoolDataSource;public class Main { public static void main (String[] args) { org.apache.derby.tools.sysinfo.main (args) ; ClientConnectionPoolDataSource creator = new ClientConnectionPoolDataSource () ; // There should be an empty db named testdb creator.setDatabaseName ('testdb') ; try { PooledConnection pc = creator.getPooledConnection () ; Connection c = pc.getConnection () ; PreparedStatement ps ; ResultSet rs ; String s ; // Drop the table 'test'  if it exsists try { ps = c.prepareStatement ('drop table test') ; ps.execute () ; ps.close () ; } catch (Exception e) { } // Create a test table with a clob field ps = c.prepareStatement ('create table test (pkey varchar(255) not null primary key  value clob)') ; ps.execute () ; ps.close () ; // Insert a record ps = c.prepareStatement ('insert into test values ('123'  'abc')') ; ps.execute () ; ps.close () ; // Query the record and... ps = c.prepareStatement ('select * from test') ; rs = ps.executeQuery () ; rs.next () ; // ...access the clob field - this works s = rs.getString (2) ; assert s.equals ('abc') ; rs.close () ; ps.close () ; // Simulate connection pooling: close the connection and get it again c.close () ; c = pc.getConnection () ; // Now again query the record... ps = c.prepareStatement ('select * from test') ; rs = ps.executeQuery () ; rs.next () ; // ...and access the clob - this fails s = rs.getString (2) ; assert s.equals ('abc') ; rs.close () ; ps.close () ; } catch (Exception e) { e.printStackTrace () ; } }}   ,0
3809,Add a SHOW FUNCTIONS command to ij    Currently  the ij SHOW command can give you information on a number of schema objects  including procedures. It should be fairly easy to add SHOW FUNCTIONS as well. This request surfaced on the user list: http://www.nabble.com/How-can-i-see-my-self-defined-functions--td18773980.html#a18773980   ,0
3823,NullPointerException in stress.multi test    I saw the following NPE in stress.multi running on 10.3 with derbyclient.java.lang.NullPointerException at org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.writeSQLDARD(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Cleanup action completed   ,0
3825,StoreStreamClob.getReader(charPos) performs poorly    StoreStreamClob.getReader(charPos) performs poorly because it resets the underlying stream and skips data until it reached the requested character position. Not only does the data has to be skipped  it also has to be decoded (UTF-8).The problem is exposed through EmbedClob.getSubString  which causes extremely bad performance for the client driver because the locator based Clob implementation uses this method.For the record  there is another read buffer size issue that exaggerates the problem (it will probably be handled under DERBY-3769  and also DERBY-3818).   ,0
3829,Convert derbynet/sysinfo and derbynet/sysinfo_with_properties to JUnit    I'm guessing these two can be combined into one file   ,0
3837,need to test getting appropriate error message when os files are read-only    We don't currently have a way to test what happens when a database is on read-only media (e.g. a cd  floppy).Without user involvement (i.e. inserting a disk somewhere etc) it's hard to fully test  but a test that simulates this by making the files on the OS read-only would give some coverage.   ,0
3840,The test code executes java processes by just executing java instead of using a full path. This may cause the wrong java to be picked up.    There are places in the code where we execute a java process. e.g. BaseTestCase.assertExecJavaCmdAsExpected where we execcute a java process and just call 'java'. In windows at least the new shell created for the exec'ed process does not share the parent process path but rather picks up the path from the Windows System variables. This can cause the wrong java to be picked up. Also the method does not work for j9 because it calls 'java' instead of the actual executable name. Perhaps we should have a method: public static final String getJavaExecutableName() { String vmname = getSystemProperty('com.ibm.oti.vm.exe'); if (vmname == null) vmname = getSystemProperty('java.home') + File.pathSeparator + 'java'; return vmname; }There are also issues with this in NetworkServerControlApiTest. NetworkServerTestSetup and the replication tests and maybe others as well.   ,0
3853,Behaviour of setTypeMap() differs between embedded and client    On the embedded driver  Connection.setTypeMap() behaves like this (when the connection is not closed): if the map argument is null  throw an SQLException with SQLState XJ081 if the map is not null and not empty  throw an SQLException with SQLState 0A000 if the map is not null and empty  do nothingThe behaviour on the client driver is this: always throw an SQLException with SQLState 0A000We should try to make the two drivers behave the same way when setTypeMap() is called. (This would also allow us to simplify some of the tests in J2EEDataSourceTest).   ,0
3856,difference between Embedded vs DerbyNetClient in format of return from timestamp(cast(? as varchar(32)))    There is a slight difference in how Embedded vs. DerbyNetClient return a specific cast.This showed up during conversion of the test lang/datetime.sql which before was only run with Embedded...The following sql: prepare dateTimePS as 'values( date(cast(? as integer)) timestamp(cast(? as varchar(32))))';execute dateTimePS using 'values(cast(1 as integer)  ''2003-03-05-17.05.43.111111'')';gives: 1 |2  -------------------------------------Embedded: 1970-01-01|2003-03-05-17.05.43.111111DerbyNetClient: 1970-01-01|2003-03-05 17:05:43.111111(in Embedded there's a '-' between date and time part  with DerbyNetClient a space; with Embedded the separator between time elements is .  with DerbyNetClient :. Embedded reflects the data as passed in  with DerbyNetClient it seems to be the default timestamp format).I am not sure which is correct at this point  but I confirmed the behavior is like this in latest builds of trunk and 10.3 and 10.4 branches.   ,0
3857,tools/ide is not included in the source tarball    The tools/ide directory is not part of the source tarball (checked the 10.4.1.3 release and the 10.4.2.0 release candidate). It should be included to make it easier for people to open the source code in an IDE.   ,0
3865,NPE in testSemantics(.....lang.RolesTest) on JavaME / CVM    See http://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/691643-suitesAll_diff.txt1) testSemantics(org.apache.derbyTesting.functionTests.tests.lang.RolesTest)junit.framework.AssertionFailedError: java.lang.NullPointerException:  at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(Ljava/lang/String;Ljava/util/HashMap;)Ljava/lang/Object;(JDBCDataSource.java:176) at org.apache.derbyTesting.junit.J2EEDataSource.getConnectionPoolDataSource(Lorg/apache/derbyTesting/junit/TestConfiguration;Ljava/util/HashMap;)Ljavax/sql/ConnectionPoolDataSource;(J2EEDataSource.java:58) at org.apache.derbyTesting.junit.J2EEDataSource.getConnectionPoolDataSource()Ljavax/sql/ConnectionPoolDataSource;(J2EEDataSource.java:42) at org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testCurrentRoleIsReset()V(RolesTest.java:711) at org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testSemantics()V(RolesTest.java:647) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:104) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at sun.misc.CVM.runMain()V(CVM.java:514)   ,0
3869,intermittent hang pinging  server on Linux    am looking at a intermittent hang with IBM 1.6 on Linux with the ping command. I am not entirely sure it is a jvm issue  but I have not been able to reproduce the hang with other jvms. The trace is3XMTHREADINFO 'main' TID:0x08072500  j9thread_t:0x08057AF4  state:R  prio=53XMTHREADINFO1 (native thread ID:0x1E05  native priority:0x5  native policy:UNKNOWN)4XESTACKTRACE at java/net/SocketInputStream.socketRead0(Native Method)4XESTACKTRACE at java/net/SocketInputStream.read(SocketInputStream.java:140)4XESTACKTRACE at java/net/SocketInputStream.read(SocketInputStream.java:101)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.fillReplyBuffer(NetworkServerControlImpl.java:2764)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.readResult(NetworkServerControlImpl.java:2708)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.pingWithNoOpen(NetworkServerControlImpl.java:1169)4XESTACKTRACE at org/apache/derby/impl/drda/NetworkServerControlImpl.ping(NetworkServerControlImpl.java:1144(Compiled Code))4XESTACKTRACE at org/apache/derby/drda/NetworkServerControl.ping(NetworkServerControl.java:395(Compiled Code))4XESTACKTRACE at Repro.pingForServerUp(Repro.java:38(Compiled Code))4XESTACKTRACE at Repro.startAndShutdown(Repro.java:20)The client has sent the ping  but there is no corresponding session on the server side to process thecommand. The full thread dump is in.javacore.20080903.183815.7684.0001.txtThe program Repro.java shows the problem. It repeatedly starts the server  pings until it comes up  and then shuts down.In the derby.log I see a startup error  that the address is already in use  so presumably the shutdown is not complete before we start the server and then perhaps it shuts down mid ping causing the hang?2008-09-04 01:37:51.048 GMT : Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in useAn exception was thrown during network server startup. DRDA_ListenPort.S:Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in usejava.lang.reflect.InvocationTargetException at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:599) at org.apache.derby.iapi.jdbc.DRDAServerStarter.run(DRDAServerStarter.java:236) at java.lang.Thread.run(Thread.java:735)Caused by: java.lang.Exception: DRDA_ListenPort.S:Could not listen on port 1527 on host 127.0.0.1: java.net.BindException: Address already in use at java.lang.Throwable.&lt;init&gt;(Throwable.java:67) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(NetworkServerControlImpl.java:3179) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(NetworkServerControlImpl.java:1861) at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:731) ... 5 moreFull log is attached as derby.log   ,0
3870,Concurrent Inserts of rows with XML data results in an exception    We insert rows into a table using the following prepared statement (through JDBC):INSERT INTO USER1.PSTORE values(? ?  XMLPARSE(document CAST (? AS CLOB) preserve whitespace))where each of the ?'s are replaced with a string.One thread runs fine. Two or more result in the following exception: org.apache.derby.client.am.SqlException: Java exception: 'FWK005 parse may not be called while parsing.: org.xml.sax.SAXException'. at org.apache.derby.client.am.SqlException.&lt;init&gt;(Unknown Source) at org.apache.derby.client.am.SqlException.&lt;init&gt;(Unknown Source)We believe that this comes from the dBuilder.parse(InputSource) method.   ,0
3878,Replication: stopSlave does not close serversocket when master has crashed.    The stopSlave command (connection URL attribute) fails to close the ServerSocket when called after master database has crashed. Because of this  the same Derby instance cannot later start a slave on the same port. The problem is in ReplicationMessageReceive#tearDown and SocketConnection#tearDown:SC#tearDown:When objOutputStream is closed  the stream's flush method is called. Flush throws an exception  and socket.close is not called.RMR#tearDown:When socketCon.teardown throws an exception  serverSocket.close is not called.Suggested fix: add try/catch/finally blocks so that vital code (socket.close and serverSocket.close) is always called.Note that the stop slave command can also come from the master (if stopMaster connection URL is called)  in which case this bug will not materialize.   ,0
3883,LOBStreamControl.replaceBytes() leaves temporary files open    I haven't seen any problems as a result of this  but the code that closes and deletes the old temporary file in LOBStreamControl.replaceBytes() looks wrong to me.When replaceBytes() is called on a lob that has been materialized into a temporary file  it will create a new file and copy the relevant parts from the old file. But the old file is only closed and deleted if the block that is replaced ends before the last byte of the lob. I believe that the old file should be closed and deleted also when we replace a block that ends at or after the last byte of the original lob.   ,0
3887,Embedded Derby fails under JBoss because of JMX-related conflicts    I'm trying to use embedded Derby as datasource for JBoss and found that it fails with error.See stacktrace below.It looks like JMX module in Derby conflicts with JBoss JMX.After I have disabled Derby JMX removing 'derby.module.mgmt.jmx=org.apache.derby.impl.services.jmx.JMXManagementService' line from org/apache/derby/modules.properties file in derby.jar JAR  the bug disappears.How to reproduce the issue:1). Install JBoss2). Copy jboss/docs/examples/varia/derby-plugin.jar into jboss/server/default/lib3). Copy Derby JAR (derby.jar) into jboss/server/default/lib4). Copy datasource file into jboss/server/default/lib5). Start JBoss using bin/run.batDatasource file (zzzzz-ds.xml):==={{{&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;!DOCTYPE datasources PUBLIC '-//JBoss//DTD JBOSS JCA Config 1.5//EN' 'http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd'&gt;&lt;datasources&gt; &lt;local-tx-datasource&gt; &lt;jndi-name&gt;zzzzzDatasource&lt;/jndi-name&gt; &lt;driver-class&gt;org.apache.derby.jdbc.EmbeddedDriver&lt;/driver-class&gt; &lt;!--connection-url&gt;jdbc:derby:${jboss.server.data.dir}{/}derby{/}zzzzz;create=true&lt;/connection-url--&gt; &lt;connection-url&gt;jdbc:derby:IGNORED&lt;/connection-url&gt; &lt;user-name&gt;IGNORED&lt;/user-name&gt; &lt;password&gt;IGNORED&lt;/password&gt; &lt;min-pool-size&gt;5&lt;/min-pool-size&gt; &lt;max-pool-size&gt;20&lt;/max-pool-size&gt; &lt;idle-timeout-minutes&gt;5&lt;/idle-timeout-minutes&gt; &lt;track-statements/&gt; &lt;depends&gt;jboss:service=zzzzzDerbyDB&lt;/depends&gt; &lt;/local-tx-datasource&gt; &lt;!-- Don't forget to install derby-plugin.jar and derby*.jar into jboss/server/default/lib --&gt; &lt;mbean code='org.jboss.jdbc.DerbyDatabase' name='jboss:service=zzzzzDerbyDB'&gt; &lt;attribute name='Database'&gt;zzzzz&lt;/attribute&gt; &lt;attribute name='User'&gt;sa&lt;/attribute&gt; &lt;attribute name='Password'&gt;&lt;/attribute&gt; &lt;/mbean&gt;&lt;/datasources&gt;===}}}Part of JBoss log with error and stacktrace:==={{{02:40:28 031 INFO &#91;DerbyDatabase&#93; starting derby jdbc:derby:C:/opt/jboss-4.2.3.GA/server/default/data/derby/zzzzz;create=true02:40:28 468 WARN &#91;ServiceController&#93; Problem starting service jboss:service=zzzzzDerbyDBjava.lang.ExceptionInInitializerError at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:247) at org.jboss.jdbc.DerbyDatabase.getConnection(DerbyDatabase.java:222) at org.jboss.jdbc.DerbyDatabase.startService(DerbyDatabase.java:189) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy4.start(Unknown Source) at org.jboss.deployment.SARDeployer.start(SARDeployer.java:304) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy42.start(Unknown Source) at org.jboss.deployment.XSLSubDeployer.start(XSLSubDeployer.java:197) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1025) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:819) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:782) at sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy9.deploy(Unknown Source) at org.jboss.deployment.scanner.URLDeploymentScanner.deploy(URLDeploymentScanner.java:421) at org.jboss.deployment.scanner.URLDeploymentScanner.scan(URLDeploymentScanner.java:634) at org.jboss.deployment.scanner.AbstractDeploymentScanner$ScannerThread.doScan(AbstractDeploymentScanner.java:263) at org.jboss.deployment.scanner.AbstractDeploymentScanner.startService(AbstractDeploymentScanner.java:336) at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:289) at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:245) at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:978) at $Proxy0.start(Unknown Source) at org.jboss.system.ServiceController.start(ServiceController.java:417) at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.server.Invocation.invoke(Invocation.java:86) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy4.start(Unknown Source) at org.jboss.deployment.SARDeployer.start(SARDeployer.java:304) at org.jboss.deployment.MainDeployer.start(MainDeployer.java:1025) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:819) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:782) at org.jboss.deployment.MainDeployer.deploy(MainDeployer.java:766) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:155) at org.jboss.mx.server.Invocation.dispatch(Invocation.java:94) at org.jboss.mx.interceptor.AbstractInterceptor.invoke(AbstractInterceptor.java:133) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.interceptor.ModelMBeanOperationInterceptor.invoke(ModelMBeanOperationInterceptor.java:142) at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659) at org.jboss.mx.util.MBeanProxyExt.invoke(MBeanProxyExt.java:210) at $Proxy5.deploy(Unknown Source) at org.jboss.system.server.ServerImpl.doStart(ServerImpl.java:482) at org.jboss.system.server.ServerImpl.start(ServerImpl.java:362) at org.jboss.Main.boot(Main.java:200) at org.jboss.Main$1.run(Main.java:508) at java.lang.Thread.run(Thread.java:619)Caused by: javax.management.JMRuntimeException: Failed to load MBeanServerBuilder class org.jboss.mx.server.MBeanServerBuilderImpl: java.lang.ClassNotFoundException: org/jboss/mx/server/MBeanServerBuilderImpl at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:480) at javax.management.MBeanServerFactory.getNewMBeanServerBuilder(MBeanServerFactory.java:511) at javax.management.MBeanServerFactory.newMBeanServer(MBeanServerFactory.java:298) at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:213) at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:174) at sun.management.ManagementFactory.createPlatformMBeanServer(ManagementFactory.java:302) at java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:504) at org.apache.derby.impl.services.jmx.JMXManagementService$3.run(Unknown Source) at org.apache.derby.impl.services.jmx.JMXManagementService$3.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.jmx.JMXManagementService.findServer(Unknown Source) at org.apache.derby.impl.services.jmx.JMXManagementService.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Unknown Source) at org.apache.derby.impl.services.monitor.FileMonitor.&lt;init&gt;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Unknown Source) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.&lt;clinit&gt;(Unknown Source) ... 110 moreCaused by: java.lang.ClassNotFoundException: org/jboss/mx/server/MBeanServerBuilderImpl at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:169) at javax.management.MBeanServerFactory.loadBuilderClass(MBeanServerFactory.java:427) at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:465) ... 131 more02:40:29 250 INFO &#91;ConnectionFactoryBindingService&#93; Bound ConnectionManager 'jboss.jca:service=DataSourceBinding name=DefaultDS' to JNDI name 'java:DefaultDS'02:40:29 562 INFO &#91;A&#93; Bound to JNDI name: queue/A02:40:29 562 INFO &#91;B&#93; Bound to JNDI name: queue/B02:40:29 562 INFO &#91;C&#93; Bound to JNDI name: queue/C02:40:29 562 INFO &#91;D&#93; Bound to JNDI name: queue/D02:40:29 578 INFO &#91;ex&#93; Bound to JNDI name: queue/ex02:40:29 593 INFO &#91;testTopic&#93; Bound to JNDI name: topic/testTopic02:40:29 593 INFO &#91;securedTopic&#93; Bound to JNDI name: topic/securedTopic02:40:29 609 INFO &#91;testDurableTopic&#93; Bound to JNDI name: topic/testDurableTopic02:40:29 609 INFO &#91;testQueue&#93; Bound to JNDI name: queue/testQueue02:40:29 656 INFO &#91;UILServerILService&#93; JBossMQ UIL service available at : /127.0.0.1:809302:40:29 703 INFO &#91;DLQ&#93; Bound to JNDI name: queue/DLQ02:40:29 875 INFO &#91;ConnectionFactoryBindingService&#93; Bound ConnectionManager 'jboss.jca:service=ConnectionFactoryBinding name=JmsXA' to JNDI name 'java:JmsXA'02:40:30 093 INFO &#91;TomcatDeployer&#93; deploy  ctxPath=/jmx-console  warUrl=.../deploy/jmx-console.war/02:40:30 250 ERROR &#91;URLDeploymentScanner&#93; Incomplete Deployment listing:&#8212; MBeans waiting for other MBeans &#8212;ObjectName: jboss:service=zzzzzDerbyDB State: FAILED Reason: java.lang.ExceptionInInitializerError Depends On Me: jboss.jca:service=ManagedConnectionFactory name=zzzzzDatasource&#8212; MBEANS THAT ARE THE ROOT CAUSE OF THE PROBLEM &#8212;ObjectName: jboss:service=zzzzzDerbyDB State: FAILED Reason: java.lang.ExceptionInInitializerError Depends On Me: jboss.jca:service=ManagedConnectionFactory name=zzzzzDatasource02:40:30 656 INFO &#91;Http11AprProtocol&#93; Starting Coyote HTTP/1.1 on http-127.0.0.1-808002:40:30 687 INFO &#91;AjpAprProtocol&#93; Starting Coyote AJP/1.3 on ajp-127.0.0.1-800902:40:30 703 INFO &#91;Server&#93; JBoss (MX MicroKernel) &#91;4.2.3.GA (build: SVNTag=JBoss_4_2_3_GA date=200807181439)&#93; Started in 23s:375ms   ,0
3889,LOBStreamControl.truncate() doesn't delete temporary files    If LOBStreamControl.truncate() reduces the size of the lob so that it fits in the internal buffer  it closes the temporary file  but it doesn't remove it. See the attached Java class (TruncateClob.java) which fills the tmp directory with temporary lob files  even if each lob is explicitly freed.   ,0
3897,SQLSessionContext not correctly initialized in some non-method call nested contexts    In some contexts  beside calling stored routines containing SQL  Derbyuses nested execution contexts  wehere we have two nested activations but no nested connections.In such cases  currently a new SQLSessionContext is constructed  butnot initialized correctly. This leads to the session variablesCURRENT_ROLE/CURRENT_SCHEMA not being set correctly in these contexts(they should inherited from the parent context  cf DERBY-3327).For method calls  this is being handled by generating a call tolcc.setupNestedSessionContext (seeStaticMethodCallNode#generateSetupNestedSessionContext)In some of these nested contexts  one or both of the session variablesCURRENT_ROLE/CURRENT_SCHEMA can be referenced  in othersnot. Obviously  if they can  this will lead to errors. The followingcontexts will have this problem: ALTER TABLE ADD COLUMN &lt;colname&gt; &lt;coltype&gt; DEFAULT CURRENT_ROLE In the AlterTableConstantAction  a nested UPDATE statement is used to give existing rows the new column its default value. This execution context is nested  cf. AlterTableConstantAction#executeUpdate TRIGGER body execution may reference CURRENT_ROLE/CURRENT_SCHEMA. The body executes in a nested context  cf. GenericTriggerExecutor#executeSPS.In other cases  the session variables can not be referenced  so thisnot a problem:  CHECK constraint execution when executed as part of an ALTER TABLE EmbedResultSet.insertRow  .deleteRow  .updateRowThe session context should not be changed (pushed) for these nestedexecutions  since there is no nested connection (SQL 2003  4.37.1: 'AnSQL-session is associated with an SQL-connection.')   ,0
3898,Blob.setBytes differs between embedded and client driver when the specified length is invalid    Blob.setBytes behaves differently with the embedded driver and the client driver.Assume a 1 byte array and a specified length of 2: Blob.setBytes(1  new byte[] {0x69}  0  2)Embedded: IndexOutOfBoundsException (from java.io.RandomAccessFile.writeBytes or System.arraycopy)Client: succeeds  returns insertion count 1The behavior should be made consistent  but what is the correct behavior?From the Blob.setBytes JavaDoc:'Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written. Writing starts at position pos in the BLOB value; len bytes from the given byte array are written. The array of bytes will overwrite the existing bytes in the Blob object starting at the position pos. If the end of the Blob value is reached while writing the array of bytes  then the length of the Blob value will be increased to accomodate the extra bytes.'   ,0
3902,some messages are referenced but never used - MessageBundleTest output    MessageBundleTest was taken out of derbyall because it only ran with classes  not with jars  and it was decided that it would be better to make this into a build check rather than a test...However  the build check - DERBY-1458 - was never implemented  and so  the test has not been run.When I ran  I got the following output:testSQLStateOrphanedIds ERROR: Message id 22003.S.4 in SQLState.java was not found in messages_en.propertiesERROR: Message id XCL32.S in SQLState.java was not found in messages_en.propertiesERROR: Message id X0RQ3.C in SQLState.java was not found in messages_en.propertiesERROR: Message id XSAX1 in SQLState.java was not found in messages_en.propertiesused 188 ms .testMessageIdOrphanedIds used 0 ms .testMessageBundleOrphanedMessages WARNING: Message id 22004.S.4 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J106 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J107 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J108 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id J109 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id 08000.S.1 in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id XCL17.S in messages_en.properties is not referenced in either SQLState.java or MessageId.javaWARNING: Message id XJ102.S in messages_en.properties is not referenced in either SQLState.java or MessageId.javaused 0 ms Some of these are known issues  e.g. XCL32 - it's been in MessageBundleTest.out for a long time...XSAX1 looks like a assumption mismatch in MessageBundleTest  see DERBY-1413....But others need some minor code changes/cleanup  for instance  looks like the need for J106 was removed during DERBY-2692  see http://svn.apache.org/viewvc?view=rev&amp;revision=543428  and should probably get removed from messages_en.properties/messages.xml.Needs further checking.   ,0
3905,Failed tests should save the database off to the fail directory    Currently failed tests save the derby.log to the fail directory for that test. It would be useful to save the database as well.   ,0
3913,mismatch between error XCL30 and 22003.S.4 and parameters in usage    I found a script  trunk/tools/testing/i18nTestGenerator/generateClientMessageTest.sh  intended to create a test to verify correctness of client error messages(trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/TestClientMessages.java ). The script is broken (see DERBY-1567) but after fixing up the resulting test and running it  it did show two messages which look a little odd in their usage (plus some messages for which the usage looked fine):XCL30 - LANG_STREAMING_COLUMN_I_O_EXCEPTION: messages.xml:  &lt;msg&gt; &lt;name&gt;XCL30.S&lt;/name&gt; &lt;text&gt;An IOException was thrown when reading a '{0}' from an InputStream.&lt;/text&gt; &lt;arg&gt;value&lt;/arg&gt; &lt;/msg&gt;apparently correct number of parameters  but odd...doesn't look like ioe fits the usage in the message text.EmbedBlob: } catch (IOException ioe) { throw StandardException.newException( SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION  ioe); }has a second parameter:client.am.Lob: throw new SqlException(null  new ClientMessageId( SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION)  typeDesc  ioe );looks like second parameter fits the {0}:SQLBinary:  throw StandardException. newException(SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION  ioe  getTypeName());SQLChar: throw StandardException. newException(SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION  ioe  getTypeName()); throw StandardException.newException( SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION   ioe   'java.sql.String');--------------------------------------------------------------22003.S.4 - CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE &lt;msg&gt; &lt;name&gt;22003.S.4&lt;/name&gt; &lt;text&gt;The length ({0}) exceeds the maximum length for the data type ({1}).&lt;/text&gt; &lt;arg&gt;number&lt;/arg&gt; &lt;arg&gt;datatypeName&lt;/arg&gt; &lt;/msg&gt;correct number of parameters  but new Integer(Integer.MAX_VALUE) returns a number  not a datatype name: client.am.PreparedStatement: throw new SqlException( agent_.logWriter_  new ClientMessageId( SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE) ).getSQLException();client.am.ResultSet: throw new SqlException(agent_.logWriter_  new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE)).getSQLException(); throw new SqlException(agent_.logWriter_  new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE)).getSQLException();  throw new SqlException(agent_.logWriter_  new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE)  new Long(length)  new Integer(Integer.MAX_VALUE)).getSQLException();-------------------------------------------   ,0
3925,testMetaDataQueryRunInSYScompilationSchema(.....upgradeTests.Changes10_4) fails on CVM/phoneME    Seen since ~svn r703509. See e.g. http://dbtg.thresher.com/derby/test/Daily/javaME/testing/Limited/testSummary-708609.htmlhttp://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/708609-suitesAll_diff.txt4) testMetaDataQueryRunInSYScompilationSchema(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4)java.sql.SQLException: Failed to create database 'singleUse/oneuse2d'  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Ljava/lang/String;[Ljava/lang/Object;Ljava/sql/SQLException;ILjava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Ljava/lang/String;[Ljava/lang/Object;Ljava/sql/SQLException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/derby/iapi/db/Database;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Lorg/apache/derby/jdbc/InternalDriver;Ljava/lang/String;Ljava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Lorg/apache/derby/jdbc/InternalDriver;Ljava/lang/String;Ljava/util/Properties;)V(Unknown Source) at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Ljava/lang/String;Ljava/util/Properties;)Lorg/apache/derby/impl/jdbc/EmbedConnection;(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection()Ljava/sql/Connection;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testMetaDataQueryRunInSYScompilationSchema()V(Changes10_4.java:113) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at sun.misc.CVM.runMain()V(CVM.java:514)Caused by: java.sql.SQLException: Collator support not available from the JVM for the database's locale 'no'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Lorg/apache/derby/iapi/error/StandardException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Ljava/lang/Throwable;ZZ)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) ... 99 moreCaused by: ERROR XBM04: Collator support not available from the JVM for the database's locale 'no'. at org.apache.derby.iapi.error.StandardException.newException(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/derby/iapi/error/StandardException;(Unknown Source) at org.apache.derby.iapi.types.DataValueFactoryImpl.verifyCollatorSupport()Ljava/text/RuleBasedCollator;(Unknown Source) at org.apache.derby.iapi.types.DataValueFactoryImpl.boot(ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Ljava/lang/Object;ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(ZLjava/lang/Object;Lorg/apache/derby/impl/services/monitor/ProtocolKey;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(ZLjava/lang/Object;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(ZLjava/lang/Object;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.boot(ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Ljava/lang/Object;ZLjava/util/Properties;)V(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(ZLjava/lang/Object;Lorg/apache/derby/impl/services/monitor/ProtocolKey;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Lorg/apache/derby/iapi/services/monitor/PersistentService;Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;Z)Ljava/lang/Object;(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Ljava/lang/String;Ljava/lang/String;Ljava/util/Properties;)Ljava/lang/Object;(Unknown Source) ... 99 more   ,0
3926,Incorrect ORDER BY caused by index    I think I found a bug in Derby that is triggered by an index on a large column: VARCHAR(1024). I know it is generally not a good idea to have an index on such a large column.I have a table (table2) with a column 'value'  my query orders on this column but the result is not sorted. It is sorted if I remove the index on that column.The output of the attached script is as follows (results should be ordered on the middle column):ID |VALUE |VALUE----------------------------------------------2147483653 |000002 |218572147483654 |000003 |218574294967297 |000001 |21857While I would expect:ID |VALUE |VALUE----------------------------------------------4294967297 |000001 |218572147483653 |000002 |218572147483654 |000003 |21857This is the definition:CREATE TABLE table1 (id BIGINT NOT NULL  PRIMARY KEY(id));CREATE INDEX key1 ON table1(id);CREATE TABLE table2 (id BIGINT NOT NULL  name VARCHAR(40) NOT NULL  value VARCHAR(1024)  PRIMARY KEY(id  name));CREATE UNIQUE INDEX key2 ON table2(id  name);CREATE INDEX key3 ON table2(value);This is the query:SELECT table1.id  m0.value  m1.valueFROM table1  table2 m0  table2 m1WHERE table1.id=m0.idAND m0.name='PageSequenceId'AND table1.id=m1.idAND m1.name='PostComponentId'AND m1.value='21857'ORDER BY m0.value;The bug can be reproduced by just executing the attached script with the ij-tool.Note that the result of the query becomes correct when enough data is changed. This prevented me from creating a smaller example.See the attached file 'derby-reproduce.zip' for sysinfo  derby.log and script.sql.Michael Segel pointed out:'It looks like its hitting the index ordering on id name from table 2 and is ignoring the order by clause.'   ,0
3931,GeneratedColumnsTest fails with ''F_MINUS' is not recognized as a function or procedure.' on cvm/phoneME    See http://dbtg.thresher.com/derby/test/Daily/javaME/testing/Limited/testSummary-708941.html / http://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/708941-suitesAll_diff.txt3) test_008_basicForeignKeys(org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest)java.sql.SQLException: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Lorg/apache/derby/iapi/error/StandardException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Ljava/lang/Throwable;ZZ)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement169.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;IIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.chattyPrepare(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement;(GeneratedColumnsTest.java:991) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.goodStatement(Ljava/sql/Connection;Ljava/lang/String;)V(GeneratedColumnsTest.java:977) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.test_008_basicForeignKeys()V(GeneratedColumnsTest.java:834) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at sun.misc.CVM.runMain()V(CVM.java:514)Caused by: ERROR 42Y03: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/derby/iapi/error/StandardException;(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/JavaValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.GenerationClauseNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateGenerationClauses(Lorg/apache/derby/impl/sql/compile/FromList;)V(Unknown Source) at org.apache.derby.impl.sql.compile.CreateTableNode.bindStatement()V(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z[Ljava/lang/Object;Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Ljava/lang/String;ZZ)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) ... 32 more4) test_007_basicTriggers(org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest)java.sql.SQLException: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Ljava/lang/String;Ljava/lang/String;Ljava/sql/SQLException;ILjava/lang/Throwable;[Ljava/lang/Object;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Lorg/apache/derby/iapi/error/StandardException;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Ljava/lang/Throwable;ZZ)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Ljava/lang/Throwable;)Ljava/sql/SQLException;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement169.&lt;init&gt;(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)V(Unknown Source) at org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(Lorg/apache/derby/impl/jdbc/EmbedConnection;Ljava/lang/String;ZIIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;IIII[I[Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.chattyPrepare(Ljava/sql/Connection;Ljava/lang/String;)Ljava/sql/PreparedStatement;(GeneratedColumnsTest.java:991) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.goodStatement(Ljava/sql/Connection;Ljava/lang/String;)V(GeneratedColumnsTest.java:977) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.test_007_basicTriggers()V(GeneratedColumnsTest.java:661) at org.apache.derbyTesting.junit.BaseTestCase.runBare()V(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(Ljunit/framework/TestResult;)V(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect()V(TestSetup.java:21) at junit.extensions.TestSetup.run(Ljunit/framework/TestResult;)V(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(Ljunit/framework/TestResult;)V(BaseTestSetup.java:57) at sun.misc.CVM.runMain()V(CVM.java:514)Caused by: ERROR 42Y03: 'F_MINUS' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/derby/iapi/error/StandardException;(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/JavaValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.GenerationClauseNode.bindExpression(Lorg/apache/derby/impl/sql/compile/FromList;Lorg/apache/derby/impl/sql/compile/SubqueryList;Ljava/util/Vector;)Lorg/apache/derby/impl/sql/compile/ValueNode;(Unknown Source) at org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateGenerationClauses(Lorg/apache/derby/impl/sql/compile/FromList;)V(Unknown Source) at org.apache.derby.impl.sql.compile.CreateTableNode.bindStatement()V(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z[Ljava/lang/Object;Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Lorg/apache/derby/iapi/sql/conn/LanguageConnectionContext;Z)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Lorg/apache/derby/iapi/sql/dictionary/SchemaDescriptor;Ljava/lang/String;ZZ)Lorg/apache/derby/iapi/sql/PreparedStatement;(Unknown Source) ... 32 more   ,0
3932,Add tests of generated columns when sql authorization is turned on    Add tests of generated columns under sql authorization. For instance  we need to verify the current_role cannot appear in generation clauses.   ,0
3934,Improve performance of reading modified Clobs    The performance of reading modified Clobs is poor  which is demonstrated by running a test program selecting a 10 MB Clob and then getting the contents using getSubString: unmodified Clob (StoreStreamClob) : ~1 300 ms modified Clob (TemporaryClob): ~156 000 msIn this case  the Clob was modified by changing the first character.A number of subtasks will be created to handle the various issues  which will be related to both performance and code cleanup.For a brief overview  see http://www.nabble.com/Suggestion-for-improving-ClobUpdatableReader-and-related-code-to20308303.html   ,0
3945,Generation clauses which mention user-coded functions may produce different resuls depending on who performs the triggering INSERT/UPDATE    This is similar to DERBY-3944. The compiler uses the current schema in order to resolve unqualifed function names when preparing INSERT/UPDATE statement. This means that a generation clause may evaluate differently depending on who invokes the triggering INSERT/UPDATE statement. This violates the requirement that generation clause should be deterministic (see part 2 of the ANSI/ISO standard  section 4.16.Hopefully  the same patch will fix both DERBY-3944 and this issue.   ,0
3947,Cannot insert 994 character long string into indexed column    Inserting a 994 character string into a varchar(1000) column with an index fails.These steps1. 'create table t (x varchar(1000) primary key)'2. 'insert into t values ' where ? holds a 994 character stringproduce the following error:ERROR XSCB6: Limitation: Record of a btree secondary index cannot be updated or inserted due to lack of space on the page. Use the parameters derby.storage.pageSize and/or derby.storage.pageReservedSpace to work around this limitation. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276) at org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:845) at org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1264) at org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:210) at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:439) at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:383) at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:589) at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:453) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1011) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:487) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:372) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)The page size should be set sufficiently high at index creation time to hold columns with the specified maximum size.   ,0
3948,Don't allow references to generated columns in the NEW transition variables of triggered actions of BEFORE triggers    Thanks to Dag for finding this restriction in the SQL Standard  part 2  section 11.39  SR 12 c) I see this provision: 12) If BEFORE is specified  then: : c) The &lt;triggered action&gt; shall not contain a &lt;field reference&gt; that references a field in the new transition variable corresponding to a generated column of T.   ,0
3970,PositionedStoreStream doesn't initialize itself properly    When a PositionedStoreStream is created on top of a stream from store  it must properly initialize itself.Proper initialization consists of initializing and resetting the stream to make sure the states of the streams are in sync.A case of out of sync stream states was detected in a test where the Clob reference wasn't kept  but a new Clob object was created for each operation  i.e: rs.getClob(1).length(); rs.getClob(1).getSubString(...);A symptom of out of sync stream states is EOFException on a valid request.I don't think the access style above is supposed to work  but the proper initialization should be performed anyway.   ,0
3978,Clob.truncate(long) in the client driver doesn't update the cached Clob length    The client driver caches the Clob length  but doesn't update it when Clob.truncate is called.I will attach a few regression tests  where one of them demonstrates the issue. The fix is also very simple; update the cached length.   ,0
3982,Add a facility to override the default set of old versions to be tested in the upgrade tests.    In my testing I have seen a need for performing upgrade testing from local/internal non-public 'versions' of Derby.That is  having local/internal changes to some older branch and allowing upgrade testing from this (not yet public) version.One solution is to locally modify the 'VERSIONS' table of the upgradetests '_Suite'  but this means modifying the source for each such case.A more flexible solution is to override the default versions (given in 'VERSIONS') by using a property giving a file which lists the versions to test upgrade from. The location to local version jars can currently be given by the 'derbyTesting.oldReleasePath' property. The list of versions could be given by a property 'derbyTesting.oldVersionsPath'.This will also easily allow us to skip testing upgrade from a specific version. (This can already be done by not having the version jars available.)The list of versions given via the property should be used whether versions (jars) are available locally (as given by the 'derbyTesting.oldReleasePath' property or fetched from the Apache Derby svn repository ('http://svn.apache.org/repos/asf/db/derby/jars').I have a patch for this which I will submit for review.   ,0
3990,ResultSetStreamTest fails on case sensitive file systems  and isn't run as part of any suite    ResultSetStreamTest fails on case sensitive file systems  and it isn't run as part of any suite.I believe this should be easy to fix  and can be a nice issue to work on for people wanting to get more familiar with the basics of the Derby test framework (including JUnit).Assuming the test works once the first obstacle has been removed   ,0
3993,With IBM 1.6 T_RawStoreFactory fails with There should be 0 observers  but we still have 1 observers on Win 2K    On Win2K T_RawStoreFactory fails consistently with java version '1.6.0'Java(TM) SE Runtime Environment (build pwi3260sr3-20081106_07(SR3))IBM J9 VM (build 2.4  J2RE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260-20081105_25433 (JIT enabled  AOT enabled)J9VM - 20081105_025433_lHdSMrJIT - r9_20081031_1330GC - 20081027_AB)JCL - 20081106_01     Start: T_RawStoreFactory jdk1.6.0 2008-12-17 09:37:49 ***2 del&lt; &#8211; Unit Test T_RawStoreFactory finished2 add&gt; There should be 0 observers  but we still have 1 observers.&gt; Shutting down due to unit test failure.Test Failed.    I have seen the same failure on Linux and Windows XP intermittently with IBM 1.6.   ,0
3997,ORDER BY causes column to be returned    The ORDER BY is causing the ordered column to be retrieved even though it is not part of the SELECT clause. Here is a script to create a table  insert a row  and perform the select:CREATE TABLE 'REVIEWS'.'GEOFF_REVIEWS_REVIEW'( PK INTEGER PRIMARY KEY not null  numstars BIGINT  body VARCHAR(32672)  title VARCHAR(32672)  authoremail VARCHAR(32672));INSERT INTO 'REVIEWS'.'GEOFF_REVIEWS_REVIEW' (PK numstars body title authoremail) VALUES (0 /not nullable/ 0 's' 's' 's');SELECT 'review'.'numstars'FROM 'GEOFF_REVIEWS_REVIEW' AS 'review'WHERE 'review'.'PK' = 1ORDER BY 'review'.PK   ,0
4006,ALTER COLUMN ... WITH DEFAULT NULL does not change the default    Reported on derby-user.http://mail-archives.apache.org/mod_mbox/db-derby-user/200901.mbox/%3c21349727.post@talk.nabble.com%3eij&gt; create table t (x varchar(5) default 'abc');0 rows inserted/updated/deletedij&gt; alter table t alter column x with default null;0 rows inserted/updated/deletedij&gt; insert into t values default;1 row inserted/updated/deletedij&gt; select * from t;X abc 1 row selected   ,0
4018,ArrayIndexOutOfBoundsException in TopService.inService under heavy multithreaded use of EmbeddedDriver    I have created a test program that reproduces this issue. The program pounds on Derby by running jobs on a pool of 10 threads. Each job creates a new Derby database  a schema  a table  and an index. Then it shuts down the database and finishes. The program runs until an error occurs or until 1000 jobs have finished.The problem is very intermittent  and related I think to multithreaded access of a vector 'moduleInstances' in TopService.java. I am seeing the error on my machine about half the time I run the test program. Sometimes it happens after 100 or 200 jobs...but sometimes not until 500 or more  or not at all.I am using the 10.4.2 derby.jar downloaded from http://db.apache.org/derby/releases/release-10.4.2.0.cgi  without any modifications on my part.I will attach the test program plus output from a run that failed with the ArrayIndexOutOfBoundsException. (The actual exception thrown to the application from Derby is SQLException  but the underlying cause is an ArrayIndexOutOfBoundsException.) BE AWARE that if you run this test program it can use up a GByte or more of disk space in your Java tmp directory.   ,0
4022,Remove dependency of junit targets on deprecated jdk16 variable    The junit target for running the jdbc4 tests depends on the jdk16 variable being set in your ant.properties. For the build  this variable has been deprecated. We should be able to make the jdbc4 tests depend on whether the environment is Java 6 instead.   ,0
4023,Improve length caching in TemporaryClob    TemporaryClob doesn't save the known length of the Clob in all situations.The following places in the code should be improved (some easier than others): a) TemporaryClob(String ConChild) b) copyClobContent(InternalClob long) (non-static) c) copyClobContent(InternalClob) (non-static)There might be additional places to fix too.   ,0
4024,Replace felix.jar file with the felix sources    In order to bundle Derby with popular linux distributions like Debian and Ubuntu  it must be possible to build Derby from sources and existing linux components. By replacing Felix jar with the corresponding sources  we move another step closer to being able to bundle Derby with linux distributions.   ,0
4027,An attempt was made to access an out of range slot on a page    When running our application we get the following error message:An attempt was made to access an out of range slot on a page:INSERT INTO orders (operation  receptacle  vehicle_id  iata_origin  icao_origin  sta  eta  ata  pta  onb  arr_stand_id  arr_gate  arr_flight_no  arr_remarks  flight_no  icao_flight_no  icao_callsign  iata_destination  icao_destination  std  etd  atd  ofb  stand_id  pit_code  gate  aircraft_subtype_code  aircraft_registration  fuel_request  canceled  delay_ind  remarks  ptd  slot_request_code  slot_request  slot_granted  terminal  customer_name  customer_type  supplier_id  carnet_no  carnet_expiry  contract_id  authorization_reference  service_level  standby_at  started_at  completed_at  status  comment  meter1_start_volume_automatic  meter1_start_volume_manual  meter1_stop_volume_automatic  meter1_stop_volume_manual  meter2_start_volume_automatic  meter2_start_volume_manual  meter2_stop_volume_automatic  meter2_stop_volume_manual  temperature  density  created_at  updated_at  fuel_on_board  id) VALUES('FUELLING'  NULL  NULL  NULL  NULL  '2009-01-22 07:25:00'  '2009-01-22 07:30:00'  '2009-01-22 07:27:00'  '2009-01-22 07:27:00'  '2009-01-22 07:29:46'  'anAEBO3yqr3zaaabxfoB_Q'  NULL  'DY 0201'  NULL  'DY 0242'  'NAX0242'  'NAX242'  'TOS'  'ENTC'  '2009-01-22 07:50:00'  NULL  '2009-01-22 08:13:00'  '2009-01-22 08:06:08'  'anAEBO3yqr3zaaabxfoB_Q'  NULL  '18'  '733'  'LNKHA'  7200  0  'X'  NULL  '2009-01-22 08:13:00'  NULL  NULL  NULL  '1'  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  '2009-01-21 08:04:54'  '2009-01-22 13:24:59'  0  'aV9HYQ55ir3B9DabxfoB_Q')The error occurs several times per day on different systems. It started yesterday   ,0
4038,On Z/OS store/access.sql fails with encryptionAES and encryptionDES    On Z/OS access.sql fails for encryptionAES and encryptionDES. The diff is big but I can't quite make out what the problem is. Maybe just a change of query plans.   ,1
4042,org.apache.derby.impl.load.Import needs to escape single quotes    The code that builds the SQL statement that invokes the Import VTI doesn't properly escape single quotes. This causes problems for users  see: http://mail-archives.apache.org/mod_mbox/db-derby-user/200901.mbox/%3c21754463.post@talk.nabble.com%3eImport.performImport() is the method that needs to be fixed.   ,0
4044,Use helper methods from IdUtil to quote SQL identifiers in EmbedResultSet    EmbedResultSet has two methods quoteSqlIdentifier() and getFullBaseTableName() which should be replaced with IdUtil.normalToDelimited() and IdUtil.mkQualifiedName()  respectively.   ,0
4050,Multithreaded clob update causes growth in table that does not get reclaimed    Doing a multithreaded update of a Clob table causes table growth that does not get reclaimed except by compressing the table. The reproduction has a table with two threads. One thread updates row 1 repeatedly with 33 000 character clob. The other thread updates row 2 with a small clob  'hello'. The problem occurs back to 10.2 but seems much worse on trunk than 10.2. The trunk database grew to 273MB on trunk after 10000 updates of each row. The 10.2 database grew only to 25MB. If the update is synchronized there is no growth.I will attach the repro.   ,0
4061,InputStream returned from Blob.getBinaryStream(long  long) terminates the stream by returning 0  should return -1    Take the following code to copy a sub-stream from a BLOB:Blob blob = rs.getBlob(1);InputStream stream = blob.getBinaryStream(1000  2000);try { IOUtils.copy(stream  out);} finally { stream.close();}This will loop forever in IOUtils.copy  as the InputStream is returning 0 at end of stream instead of -1. It probably should return -1 to comply with the Javadoc for InputStream.Notes:I have not yet checked Blob.getBinaryStream()  or any of the Clob methods  or the client driver. So some of these may have a similar issue.   ,0
4067,ClientConnectionPoolDataSource.getPooledConnection and ClientXADataSource.getXAConnection ignore connection attributes    The methods CCPDS.getPooledConnection and CXADS.getXAConnection fail to pick up attributes set with setConnectionAttributes(String).The current regression tests fail to detect this  because they obtain a connection using getConnection(). I'm not sure if this method should be present in a XADataSource at all  but this problem should be addressed by a separate issue.   ,0
4072,shutdown with incorrect permission on log files shows java.lang.NullPointerException  at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:3964).  Should give bettter message.    I recently saw case where a user was seeing the following error in the derby.log when trying to shutdown their database.New exception raised during cleanup nulljava.lang.NullPointerException at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:3964) at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:1781) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.flush(BaseDataFileFa at org.apache.derby.impl.store.raw.data.CachedPage.writePage(CachedPage.java:761 at org.apache.derby.impl.store.raw.data.CachedPage.clean(CachedPage.java:610) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Conc at org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(ConcurrentCac at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(ConcurrentCache at org.apache.derby.impl.services.cache.ConcurrentCache.shutdown(ConcurrentCache at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop(BaseDataFileFac at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:405) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:34 at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java: at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextIm at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextM at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Transaction at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:584) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119) at java.sql.DriverManager.getConnection(DriverManager.java:316) at java.sql.DriverManager.getConnection(DriverManager.java:273)It ended up that some of the log files did not have proper write permissions because some operation on the database had been performed by root. They had subsequently deleted their db.lck file so the database did not boot READ ONLY as it would if the root owned db.lck file still existed and the symptom was that they got this error on shutdown.Clearly this was user error  but it would have been good if we gave a better error message. To reproduce on Linux:As a user with umask 0022  run the program java MakeDBthis will make the databases wombat and create a table.su rootwith umask 0022  run the program to insert data and remove the db.lck file:java InsertALotrm wombat/db.lckgo back to the original userrun the program:java ConnectAndShutdownThe application gets the normal shutdown exception but if you look in derby.log you will see the exception.java.lang.NullPointerException at org.apache.derby.impl.store.raw.log.LogToFile.flush(LogToFile.java:3964) ...I will attach the files.   ,1
4081,BTreeController.comparePreviousRecord() may fail to release latch on left-most leaf    If comparePreviousRecord() is called on some other leaf page than the left-most leaf  and all the rows to the left of the current position are deleted so that the position is moved all the way to slot 0 on the left-most leaf  comparePreviousRecord() will return without releasing the latch on the left-most leaf. Only the leaf on which comparePreviousRecord() is called should be latched when the method returns.Since comparePreviousRecord() currently fails to continue after finding a deleted row  this bug is not possible to expose until DERBY-4028 is fixed.   ,0
4083,BTreeScan.delete() throws AM_RECORD_NOT_FOUND if record is found    The code below is from BTreeScan.delete(). If the call to reposition() manages to position on the row  an exception is raised indicating that the row could not be found. If the row is not found  no exception is raised  but code later in the method will probably throw a NullPointerException because scan_position.current_leaf is set to null by reposition(). I believe that 'if (reposition(...))' should be changed to 'if (!reposition(...))'. According to the test coverage reports  this code is not exercised by any of the existing tests. if (latch_released) { // lost latch on page in order to wait for row lock. // Because we have scan lock on page  we need only // call reposition() which will use the saved record // handle to reposition to the same spot on the page. // We don't have to search the // tree again  as we have the a scan lock on the page // which means the current_rh is valid to reposition on. if (reposition(scan_position  false)) { throw StandardException.newException( SQLState.AM_RECORD_NOT_FOUND  new Long(err_containerid)  new Long(scan_position.current_rh.getId())); } } }   ,0
4089,It should be possible to run unit tests right after 'ant all'    Right now  the property 'derby.junit.classpath' is empty by default. There should be an ant target which sets the correct classpath to run all tests after an initial checkout and 'ant all'.The current situation is very confusing to beginners and people who try to build Derby for the first time. For example  when running the tests  I got this exception:java.lang.ClassNotFoundException: org.apache.derbyTesting.junit.EnvTestbut that class was there  the file was there  everything was correct. Googling for the error didn't turn anything up  either. It took me a while to believe that build.xml just wouldn't try to setup a classpath for the tests.   ,0
4095,Trigger  fails with ERROR 38000: The exception 'java.sql.SQLException: ResultSet not open  during VTIResultSet.getNextRowCore()    I don't have a reproduction without the user database yet  but it seems that recompiling the trigger stored prepared statements on upgrade is causing a result set to get closed and is causing the following error when firing a trigger in a global transaction. The holdability in an XA transaction is CLOSE_CURSORS_AT_COMMIT so it may be that there is a commit occurring as part of the process that is causing the problem. I haven't tried yet with a regular transaction and using default holdability CLOSE_CURSORS_AT_COMMIT. The error comes on a delete which fires an after delete statement trigger to insert some values into another table.Here is the stack trace:2009-03-13 14:10:49.375 GMT Thread&#91;main 5 main&#93; (XID = 1853834)  (SESSIONID = 1)  (DATABASE = derby/wpsdb)  (DRDAID = null)  Cleanup action starting2009-03-13 14:10:49.375 GMT Thread&#91;main 5 main&#93; (XID = 1853834)  (SESSIONID = 1)  (DATABASE = derby/wpsdb)  (DRDAID = null)  Failed Statement is: DELETE FROM XXX WHERE WSID=9ERROR 38000: The exception 'java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.' was thrown while evaluating an expression. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:294) at org.apache.derby.iapi.error.StandardException.unexpectedUserException(StandardException.java:554) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:326) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176) at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113) at ReproRSClosed.main(ReproRSClosed.java:20)Caused by: java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151) at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280) at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308) ... 18 moreCaused by: java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 28 more============= begin nested exception  level (1) ===========java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151) at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280) at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176) at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113) at ReproRSClosed.main(ReproRSClosed.java:20)Caused by: java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 28 more============= end nested exception  level (1) ======================== begin nested exception  level (2) ===========java.sql.SQLException: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244) at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151) at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280) at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404) at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388) at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173) at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278) at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479) at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176) at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113) at ReproRSClosed.main(ReproRSClosed.java:20)============= end nested exception  level (2) ===========Cleanup action completed   ,0
4097,'testMixedInsertDelete(org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest)org.apache.derby.client.am.BatchUpdateException'    Seen twice....See http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/SunOS-5.9_sun4u-sparc/754716-org.apache.derbyTesting.functionTests.suites.All_diff.txthttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/SunOS-5.10_i86pc-i386/753342-org.apache.derbyTesting.functionTests.suites.All_diff.txt1) testMixedInsertDelete(org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest)org.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure. The batch was submitted  but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements. at org.apache.derby.client.am.Agent.endBatchedReadChain(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatch(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testMixedInsertDelete(NullableUniqueConstraintTest.java:481) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
4115,Provide a way to drop statistics information    Now that DERBY-269 has been resolved  users can update statistics  but once they do  they are committed to using and maintaining the statistics  even if it doesn't improve performance or they have difficulty maintaining the statistics on a regular basis. It would be good to have a way to drop statistics information so that users could revert to the prior behavior if needed.   ,0
4116,SYSCS_UTIL.SYSCS_UPDATE_STATISTICS should update the store estimated row count for the table    When SYSCS_UTIL.SYSCS_UPDATE_STATISTICS is run  it doesn't update the store estimated row count. The program oldSelectivity.java attached to DERBY-3955 shows that the statistics are not updated.See discussions in DERBY-3955https://issues.apache.org/jira/browse/DERBY-3955?focusedCommentId=12688789&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12688789https://issues.apache.org/jira/browse/DERBY-3955?focusedCommentId=12688813&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12688813   ,0
4120,derbyclient.jar is not a complete OSGi bundle    The manifest in derbyclient.jar is incomplete for usage in OSGi. There are no packages exported. This appears to only be a problem in standalone equinox (outside of eclipse). Note that I did not try other OSGi containers.The fix is relatively simple. Adding the Export-Package manifest header should take care of the problem.   ,0
4125,The in-memory storage back end doesn't work on Windows    Bug reported by Knut Magne Solem  see DERBY-646.Using the in-memory storage back end fails on Windows (i.e. connect 'jdbc:derby:memory:MyDbTest;create=true'; from ij):ERROR XJ001: Java exception: 'ASSERT FAILED serviceName = memory:C:/Documents and Settings/user/workspace/derby/MyDbTest;storageFactory.getCanonicalName() = C:/Documents and Settings/user/workspace/derby/MyDbTest: org.apache.derby.shared.common.sanity.AssertFailure'.With an insane build  the error messages will look like this:ERROR XJ041: Failed to create database 'memory:myDB'  see the next exception for details.ERROR XBM01: Startup failed due to an exception. See next exception for details.ERROR XSTB2: Cannot log transaction changes  maybe trying to write to a read only database.The error occurs during boot  which means Windows users are unable to use the in-memory back end at all.   ,0
4133,'testTableFunctionInJar' fails w/ 'The class 'DummyVTI' does not exist or is inaccessible...' on jvm1.4    Seen in tests on jvm1.4 since ~ svn rev. 759509See e.g.http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/Limited/testSummary-759509.htmlE.g.:1) testTableFunctionInJar(org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest)java.sql.SQLException: The class 'DummyVTI' does not exist or is inaccessible. This can happen if the class is not public. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testTableFunctionInJar(DatabaseClassLoadingTest.java:1045) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: Java exception: 'DummyVTI : DummyVTI (Unsupported major.minor version 49.0): java.lang.ClassNotFoundException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 38 moreCaused by: java.lang.ClassNotFoundException: DummyVTI : DummyVTI (Unsupported major.minor version 49.0) at org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.getClass(Unknown Source) at org.apache.derby.iapi.services.loader.ClassInspector.accessible(Unknown Source) at org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 34 more   ,0
4142,java.lang.VerifyError causing java.sql.SQLException: Cannot create an instance of generated class ... in lang.GeneratedColumnsTest and GeneratedColumnsPermsTest  on IBM iseries    This results in 22 errors.Here's the stack trace with an insane build:1) test_005_basicInsert(org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest)java.sql.SQLException: Cannot create an instance of generated class org.apache.derby.exe.acd83d18d1x0120x62bdx2dffxffffb19003081. at java.lang.Throwable.&lt;init&gt;(Throwable.java:196) at java.lang.Exception.&lt;init&gt;(Exception.java:41) at java.sql.SQLException.&lt;init&gt;(SQLException.java:40) at org.apache.derby.impl.jdbc.EmbedSQLException.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.chattyPrepare(GeneratedColumnsHelper.java:147) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.goodStatement(GeneratedColumnsHelper.java:125) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsTest.test_005_basicInsert(GeneratedColumnsTest.java:427) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'org/apache/derby/exe/acd83d18d1x0120x62bdx2dffxffffb19003081 0000 0000 : java.lang.VerifyError'. at java.lang.Throwable.&lt;init&gt;(Throwable.java:196) at java.lang.Exception.&lt;init&gt;(Exception.java:41) at java.sql.SQLException.&lt;init&gt;(SQLException.java:40) at org.apache.derby.impl.jdbc.EmbedSQLException.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 43 moreCaused by: java.lang.VerifyError: org/apache/derby/exe/acd83d18d1x0120x62bdx2dffxffffb19003081 0000 0000  at java.lang.Throwable.&lt;init&gt;(Throwable.java:196) at java.lang.Error.&lt;init&gt;(Error.java:49) at java.lang.VerifyError.&lt;init&gt;(VerifyError.java:34) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at org.apache.derby.iapi.services.loader.ClassInfo.getNewInstance(Unknown Source) at org.apache.derby.impl.services.reflect.LoadedGeneratedClass.newInstance(Unknown Source) at org.apache.derby.impl.services.reflect.ReflectGeneratedClass.newInstance(Unknown Source) at org.apache.derby.impl.sql.GenericActivationHolder.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.getActivation(Unknown Source) ... 39 more   ,0
4148,NullPointerException in system.sttest run with 10.5.1.0    I see the following stack trace on line 22615 of the redirected output:Thread finished: 1complete initial datatotal memory: 50713600 free: 3130088 Tue Mar 31 23:39:47 PDT 2009java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Datatypes.java:612) at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:387)Exception in thread 'Thread-9' java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:435)java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Datatypes.java:612) at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:387)Exception in thread 'Thread-10' java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:435)java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Datatypes.java:612) at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:387)Exception in thread 'Thread-11' java.lang.NullPointerException at org.apache.derbyTesting.system.sttest.Sttest.run(Sttest.java:435)quantity in pick_some is: 10 rows deletedMatching this up with the derby.log - the first entry in derby.log is 2009-04-01 03:01:52.432 GMT  and ls -al shows 2009-03-31 20:01 PDT for the creation of testDB  so time diff was 7 hours - shows nothing of interest. The last entry in derby.log is at 2009-04-01 06:52:15.595 GMT  so only 3 hours later.I've seen the same thing 3 times - this needs to be analyzed further.I will also run on another machine  and run with sane jars to see if we get any stack trace of other help from derby.log.   ,0
4157,Create a test to verify that virgin metadata is identical to hard-upgraded metadata    We should write a test to verify that the metadata is correct for each release for all hard-upgrade trajectories which terminate in that release. The test should examine all system tables. Note that if there are N releases  then there will (2&lt;sup&gt;N&lt;/sup&gt; - N) - 1 trajectories to examine.   ,0
4166,improvements to the mailjdbc test    When recently working with the mailjdbc system test org.apache.derbyTesting.system.mailjdbc on DERBY-4152 I noticed some potential improvements that might be good for the test. We should probably hold off on these improvements however until the root cause of DERBY-4152 is established  however  so we don't muddy the waters with that issue by changing the test.1) DbTasks.moveToFolders may throw an IllegalArgumentException. There is a line: message_id = Rn.nextInt(count - 1); if count is 1 the argument to nextInt() might be 0 which is not allowed. I hit this once but lost the stack trace  but it is apparent that when there is only one row in the table this can occur.2) Allow/implement multiple attachments per message and cleanup DbTasks.insertMail() logic. Remove the attach_id column from INBOX to allow multiple attachments. -Make the attachment insert part of the message for loop in insertMail. Use getGeneratedKeys() to get the id of the inserted message. When attachments are inserted  insert (1-4) attachments and give them a corresponding attach_id from 1-4.This will allow for removal of the select statements used to determine id and attach_id. I'll file another issue for these improvements if folks agree that they are sensible.A detailed description of the current implementation of insertMail is described at https://issues.apache.org/jira/secure/attachment/12405685/insertMailSummary.txt3) DbTasks.databaseSize calculation is wrong. It doesn't match du -sk. The method does not recurse into subdirectories and includes the length() on directory files which is undefined accourding to the file.length() javadoc.   ,0
4169,'No method was found that matched the method call ....' in testPayment and testSubmitter (org.apache.derbyTesting.system.oe.test.OperationsTester) on 10.5.1.1 (RC2)    Seen when running testPayment(org.apache.derbyTesting.system.oe.test.OperationsTester) with 10.5.1.1 (RC2).The test passed with no failures on 10.4.2.0.1) testPayment(org.apache.derbyTesting.system.oe.test.OperationsTester)java.sql.SQLSyntaxErrorException: No method was found that matched the method call org.apache.derbyTesting.system.oe.routines.Data.dataForBadCredit(java.lang.String  short  short  short  short  int  java.math.BigDecimal)  tried all combinations of object and primitive types and any possible type conversion for any parameters the method call may have. The method might exist but it is not public and/or static  or the parameter types are not method invocation convertible. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.system.oe.direct.StatementHelper.prepareStatement(StatementHelper.java:76) at org.apache.derbyTesting.system.oe.direct.Standard.paymentById(Standard.java:420) at org.apache.derbyTesting.system.oe.direct.Standard.payment(Standard.java:375) at org.apache.derbyTesting.system.oe.test.OperationsTester.testPayment(OperationsTester.java:134) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)2) testSubmitter(org.apache.derbyTesting.system.oe.test.OperationsTester)java.sql.SQLSyntaxErrorException: No method was found that matched the method call org.apache.derbyTesting.system.oe.routines.Data.dataForBadCredit(java.lang.String  short  short  short  short  int  java.math.BigDecimal)  tried all combinations of object and primitive types and any possible type conversion for any parameters the method call may have. The method might exist but it is not public and/or static  or the parameter types are not method invocation convertible. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derbyTesting.system.oe.direct.StatementHelper.prepareStatement(StatementHelper.java:76) at org.apache.derbyTesting.system.oe.direct.Standard.paymentById(Standard.java:420) at org.apache.derbyTesting.system.oe.direct.Standard.payment(Standard.java:395) at org.apache.derbyTesting.system.oe.client.Submitter.runPayment(Submitter.java:437) at org.apache.derbyTesting.system.oe.client.Submitter.runTransaction(Submitter.java:316) at org.apache.derbyTesting.system.oe.test.OperationsTester.testSubmitter(OperationsTester.java:259) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Related to DERBY-1483  DERBY-3119  DERBY-2179  DERBY-3652?   ,0
4171,Connections to on-disk db go to in-memory db if in-memory db with same name is booted    When an in-memory database has been booted  subsequent attempts to connect to an ordinary (on-disk) database with the same name as the in-memory database will connect to the in-memory db.ij version 10.5ij&gt; connect 'jdbc:derby:memory:MyDB;create=true'; &#8211; with subprotocol memoryij&gt; create table t (x varchar(30));0 rows inserted/updated/deletedij&gt; insert into t values 'This is the in-memory backend';1 row inserted/updated/deletedij&gt; connect 'jdbc:derby:MyDB;create=true'; --without subprotocol memory  should create disk dbWARNING 01J01: Database 'MyDB' not created  connection made to existing database instead.ij(CONNECTION1)&gt; select * from t;X ------------------------------This is the in-memory backend 1 row selected   ,0
4177,Javadoc for BTreeLockingPolicy should not mention 'scan lock' anymore    The javadoc for BTreeLockingPolicy still talks about scan locks  although the scan lock is no longer in use after DERBY-2991. The javadoc should be updated so that it reflects the current state of the code.   ,0
4179,bootLock.java fails with missing exception on z/OS with  pmz3160sr2ifix-20081021_01(SR2+IZ32776+IZ33456)  and Windows Vista    I saw this diff in store/bootLock.java. I did not see it with the 64bit jvm run on 10.5.1.0 RC1     Start: bootLock jdk1.6.0 storeall:storemore 2009-04-21 19:10:18 ***2 4d1&lt; expected exception&lt; SQLSTATE(XJ040):&lt; SQLSTATE(XSDB6):Test Failed. End: bootLock jdk1.6.0 storeall:storemore 2009-04-21 19:11:00 ***    The test passed on rerun when run independently.   ,0
4187,Convert altertable.sql to JUnit    Converting altertable.sql harness test to JUnit   ,0
4198,When using the FOR UPDATE OF clause with SUR (Scroll-insensive updatable result sets)  the updateRow() method crashes    This problem occurs on both Client/Server and Embedded.With the Embedded driver  the JVM crashes with the following error:------------------------------------8&lt;-----------------------------------1) testReproduction(org.apache.derbyTesting.functionTests.tests.store.ReproHoldCursorBug)org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED statementContext is not expected to equal statementContexts&#91;0&#93; at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(GenericLanguageConnectionContext.java:2286) at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3740) at org.apache.derbyTesting.functionTests.tests.store.ReproHoldCursorBug.testReproduction(ReproHoldCursorBug.java:71) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)-----------------------------------8&lt;--------------------------------------------(It shows a stack trace after this  but I'm attaching the result folders since those are more thorough.)&#91;1&#93;On the client driver  the JVM does not crash but it also errors out:1) testReproduction(org.apache.derbyTesting.functionTests.tests.store.ReproHoldCursorBug)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.U(more detail on the log files)&#91;2&#93;The error does not show as long as the 'OF DATA' isn't specified. It also won't show if the whole FOR UPDATE clause is omitted.I would also like some comments and advice on how to proceed on converting holdCursorJDBC30.sql as it is affected by this problem. The original test does an update on a cursor with the 'FOR UPDATE OF DATA' clause  and this isn't working on the Java version of the test. Do I go around it by removing the FOR UPDATE clause or should I wait for this bug to get fixed?Attachments:&#91;1&#93; - ErrorOutput_Embedded.tar.gz - Error output files of the Embedded run&#91;2&#93; - ErrorOutput_Client.tar.gz - Error output files of the Client/Server run&#91;3&#93; - ReproHoldCursorBug.java - The reproduction of the errors   ,0
4201,SecureServerTest AssertionFailedError: Timed out waiting for network server to start    I saw this failure in the nightly run on 4/27 on the 10.5 branch - 10.5.1.2 - (769232). I have not seen it in previous runs on the same machine. There were actually two failures in the test. I think the second one failed because of the first so am not reporting a separate issue for that.There were 2 failures:1) SecureServerTest( Opened = false  Authenticated= false  CustomDerbyProperties= null  WildCardHost= null )junit.framework.AssertionFailedError: Timed out waiting for network server to start:Spawned SpawnedNetworkServer exitCode=0 at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:200) at junit.extensions.TestSetup$1.protect(TestSetup.java:18) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)2) SecureServerTest( Opened = false  Authenticated= false  CustomDerbyProperties= functionTests/tests/derbynet/SecureServerTest.derby.properties  WildCardHost= null )junit.framework.AssertionFailedError: directory trace does not exist at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.setTraceDirectory(SecureServerTest.java:386) at org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.testServerStartup(SecureServerTest.java:358) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)   ,1
4218,'Table/View 'MAX_SCAN' does not exist' in org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest    See e.g. http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/Linux-2.6.9-34.ELsmp_x86_64-x86_64/772381-org.apache.derbyTesting.functionTests.suites.All_diff.txtThere were 2 errors:1) testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)java.sql.SQLException: Table/View 'MAX_SCAN' does not exist. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$3.doWork(IndexSplitDeadlockTest.java:590) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$AsyncThread.run(IndexSplitDeadlockTest.java:769) at java.lang.Thread.run(Thread.java:595)Caused by: ERROR 42X05: Table/View 'MAX_SCAN' does not exist. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable(Unknown Source) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(Unknown Source) ... 6 more2) testMultiplePrevKeyWaitsInForwardScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)java.sql.SQLException: Table/View 'FW_SCAN' does not exist. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$4.doWork(IndexSplitDeadlockTest.java:665) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest$AsyncThread.run(IndexSplitDeadlockTest.java:769) at java.lang.Thread.run(Thread.java:595)Caused by: ERROR 42X05: Table/View 'FW_SCAN' does not exist. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable(Unknown Source) at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 6 moreor http://dbtg.thresher.com/derby/test/Daily/jvm1.5/testing/testlog/lin/772336-suitesAll_diff.txt or http://dbtg.thresher.com/derby/test/Daily/jvm1.5/testing/testlog/sles/772336-suitesAll_diff.txt or http://dbtg.thresher.com/derby/test/Daily/javaME/testing/testlog/ubuntu/772336-suitesAll_diff.txt   ,0
4228,Remove unused pre-i18n constructors in BatchUpdateException    client.am.BatchUpdateException contains a number of unused constructors. There is a comment saying that they should be removed when i18n is complete. Since the i18n work on the client driver has been completed  and the constructors are no longer used  they should be removed.   ,0
4232,XAResource.setTransactionTimeout() makes XAResource.start() fail with the client driver    Got below error message when running an XA prolgram with derby. org.apache.derby.client.am.XaException: XAER_PROTO : Error executing a XAResource.start()  server returned XAER_PROTO. at org.apache.derby.client.net.NetXAResource.throwXAException(Unknown Source) at org.apache.derby.client.net.NetXAResource.start(Unknown Source) at TestDerbyXA.process(TestDerbyXA.java:186) at TestDerbyXA.main(TestDerbyXA.java:43)Caused by: org.apache.derby.client.am.SqlException: Error executing a XAResource.start()  server returned XAER_PROTO. at org.apache.derby.client.net.NetXAResource.xaRetValErrorAccumSQL(Unknown Source) ... 3 moreBelow is the example program I used. Note: The program will succeed if comment out line 147 - setTransactionTimeout. Does that means call XAResource.setTransactionTimeout() caused the failure?I use Apache Derby Network Server - 10.4.2.0 - (689064). The same program works fine with another version Apache Derby Network Server - 10.2.2.0 - (485682). It looks like there is a regression between the two versions.import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.sql.Statement;import javax.sql.XAConnection;import javax.transaction.xa.XAException;import javax.transaction.xa.XAResource;import javax.transaction.xa.Xid;import org.apache.derby.jdbc.ClientXADataSource;public class TestDerbyXA { ClientXADataSource xaDSLocal = null; ClientXADataSource xaDSRemote = null; public TestDerbyXA() { // Create two XA data sources. xaDSLocal = new ClientXADataSource(); xaDSLocal.setServerName('localhost'); xaDSLocal.setPortNumber(1527); xaDSLocal.setDatabaseName('testdb'); xaDSLocal.setUser('app'); xaDSLocal.setPassword('derby'); xaDSRemote = new ClientXADataSource(); xaDSRemote.setServerName('localhost'); xaDSRemote.setPortNumber(1527); xaDSRemote.setDatabaseName('testdb'); xaDSRemote.setUser('app'); xaDSRemote.setPassword('derby'); // xaDSRemote = xaDSLocal; } public static void main(String[] args) throws Exception { TestDerbyXA testObj = new TestDerbyXA(); testObj.dropTable('tablea'); testObj.createTable('CREATE TABLE tablea (col1 INT  col2 VARCHAR(32))'); testObj.dropTable('tableb'); testObj.createTable('CREATE TABLE tableb (col1 INT  col2 VARCHAR(32))'); testObj.process(); } public void dropTable(String tableName) throws Exception { Connection conn = null; Statement stmt = null; try { conn = xaDSLocal.getConnection(); stmt = conn.createStatement(); stmt.executeUpdate('DROP TABLE ' + tableName); System.out.println('Drop table ' + tableName + ' succeed.'); } catch (SQLException sqle) { System.out.println('Drop table ' + tableName + ' failed.'); sqle.printStackTrace(); } finally { // ============ Close JDBC objects  including the connection ======= if (stmt != null) { try { stmt.close(); stmt = null; } catch (SQLException e) { } } if (conn != null) { try { conn.close(); conn = null; } catch (SQLException e) { } } } } public void createTable(String DDL) throws Exception { Connection conn = null; Statement stmt = null; try { conn = xaDSLocal.getConnection(); stmt = conn.createStatement(); stmt.executeUpdate(DDL); System.out.println(DDL + ' succeed.'); } catch (SQLException sqle) { System.out.println(DDL + ' failed.'); sqle.printStackTrace(); } finally { // ============ Close JDBC objects  including the connection ======= if (stmt != null) { try { stmt.close(); stmt = null; } catch (SQLException e) { } } if (conn != null) { try { conn.close(); conn = null; } catch (SQLException e) { } } } } public void process() throws Exception { Connection connLocal = null; Connection connRemote = null; int rows = 0; PreparedStatement pstmtLocal = null; PreparedStatement pstmtRemote = null; XAConnection xaConnLocal = null; XAConnection xaConnRemote = null; XAResource xarLocal = null; XAResource xarRemote = null; Xid xidLocal = null; Xid xidRemote = null; try { xaConnLocal = xaDSLocal.getXAConnection(); xaConnRemote = xaDSRemote.getXAConnection(); connLocal = xaConnLocal.getConnection(); connRemote = xaConnRemote.getConnection(); xarLocal = xaConnLocal.getXAResource(); xarRemote = xaConnRemote.getXAResource(); // Create the Xids // Create the global ID byte[] globalTransactionId1 = new byte[64]; globalTransactionId1[0] = (byte) 1; byte[] globalTransactionId2 = new byte[64]; globalTransactionId2[0] = (byte) 2; // Create the local branch ID byte[] branchQualifierLocal = new byte[64]; branchQualifierLocal[0] = (byte) 1; xidLocal = new XidImpl(globalTransactionId1  branchQualifierLocal  0x1234); // Create the remote branch ID byte[] branchQualifierRemote = new byte[64]; branchQualifierRemote[0] = (byte) 2; xidRemote = new XidImpl(globalTransactionId2  branchQualifierRemote  0x1234); // Database operations on the local branch  suspend local branch xarLocal.setTransactionTimeout(500); //!!! The failure will disappear if comment out this line. connLocal.setAutoCommit(false); xarLocal.start(xidLocal  XAResource.TMNOFLAGS); pstmtLocal = connLocal .prepareStatement('INSERT INTO tablea (col1  col2) VALUES (?  ?)'); pstmtLocal.setInt(1  1); pstmtLocal.setString(2  'insert first rec to tablea'); rows = pstmtLocal.executeUpdate(); System.out.println(rows + ' rows inserted to tablea'); pstmtLocal.close(); pstmtLocal = null; xarLocal.end(xidLocal  XAResource.TMSUCCESS); connLocal.setAutoCommit(true); // Database operation on the remote branch  commit remote branch xarRemote.setTransactionTimeout(500); connRemote.setAutoCommit(false); xarRemote.start(xidRemote  XAResource.TMNOFLAGS); pstmtRemote = connRemote .prepareStatement('INSERT INTO tableb (col1  col2) VALUES (?  ?)'); pstmtRemote.setInt(1  2); pstmtRemote.setString(2  'insert second rec to tableb'); rows = pstmtRemote.executeUpdate(); System.out.println(rows + ' rows inserted to tableb'); pstmtRemote.close(); pstmtRemote = null; xarRemote.end(xidRemote  XAResource.TMSUCCESS); connRemote.setAutoCommit(true); System.out.println('commit remote branch'); xarRemote.commit(xidRemote  true); // Resume the local branch and do some database operation  commit local branch xarLocal.setTransactionTimeout(500); connLocal.setAutoCommit(false); xarLocal.start(xidLocal  XAResource.TMJOIN); pstmtLocal = connLocal .prepareStatement('INSERT INTO tablea (col1  col2) VALUES (?  ?)'); pstmtLocal.setInt(1  3); pstmtLocal.setString(2  'insert third rec to tablea'); rows = pstmtLocal.executeUpdate(); System.out.println(rows + ' rows inserted to tablea'); pstmtLocal.close(); pstmtLocal = null; xarLocal.end(xidLocal  XAResource.TMSUCCESS); connLocal.setAutoCommit(true); System.out.println('commit local branch'); xarLocal.commit(xidLocal  true); // Close the resources connLocal.close(); connLocal = null; connRemote.close(); connRemote = null; xaConnLocal.close(); xaConnLocal = null; xaConnRemote.close(); xaConnRemote = null; } catch (SQLException e) { System.err.println('SQL Error: ' + e.getMessage()); e.printStackTrace(); } catch (XAException e) { System.err.println('XA Error: ' + e.getMessage()); e.printStackTrace(); } finally { if (pstmtLocal != null) try { pstmtLocal.close(); pstmtLocal = null; } catch (SQLException ignore) { } if (pstmtRemote != null) try { pstmtRemote.close(); pstmtRemote = null; } catch (SQLException ignore) { } if (connLocal != null) try { connLocal.close(); connLocal = null; } catch (SQLException ignore) { } if (connRemote != null) try { connRemote.close(); connRemote = null; } catch (SQLException ignore) { } if (xaConnLocal != null) try { xaConnLocal.close(); xaConnLocal = null; } catch (SQLException ignore) { } if (xaConnRemote != null) try { xaConnRemote.close(); xaConnRemote = null; } catch (SQLException ignore) { } } }}   ,0
4241,Improve transition from read-only to writable Clob representation    When a store stream Clob is going to be modified  it will be written out to the temporary area of Derby and represented as a TemporaryClob.The transfer of the data is done in a sub-optimal manner for two reasons; o for transfer of the complete Clob  the copy method operates on the byte level and we're not able to save the character length. o for transfer of parts of the Clob (i.e. truncation)  we have to first decode the UTF-8 encoding to find the byte count and then transfer the same bytes.I intend to do the following two changes; 1) Add a getCharLengthIfKnow-method to InternalClob. 2) Add a UTF-8 aware copy method to LOBStreamControl.When a complete Clob is to be copied  code like this will be executed; cachedCharLength = internalClob.getLengthIfKnown(); if (cachedCharLength &gt; 0) // use existing byte-oriented copy method for best performance (copy until EOF) else cachedCharLength = control.copyUTF8Data()When parts of a Clob is to be copied  we always use the UTF-8 aware copy method  but we also do a cheap range check. cachedCharLength = internalClob.getLengthIfKnown(); if (cachedCharLength &gt; 0 &amp;&amp; requestedLength &gt; cachedCharLength) throw EOFException(); if (cachedCharLength == requestedLength) // use existing byte-oriented copy method for best performance (copy until EOF) else cachedCharLength = control.copyUTF8Data(requestedLength);Adding the UTF-8 aware copy method was started under DERBY-4023  including comments on the first revision of a patch.   ,0
4248,convert checkConstraint.sql to JUnit    Converting CheckConstraint.sql to JUnit under supervision of Bryan Pendleton.   ,0
4263,PropertySetter isn't able to recognize JDK without version number in path    With empty ant.properties and JDK 6 installed in /tmp/jdk as the only JDK on the system  PropertySetter complains that it's not able to set java16compile.classpath: ---- &#91;setJdkProperties&#93; &#91;setJdkProperties&#93; PropertySetter environment = &#91;setJdkProperties&#93; &#91;setJdkProperties&#93; java.vendor = Sun Microsystems Inc. &#91;setJdkProperties&#93; java.home = /tmp/jdk/jre &#91;setJdkProperties&#93; java.version = 1.6.0_13 &#91;setJdkProperties&#93; os.name = SunOS &#91;setJdkProperties&#93; j14lib = null &#91;setJdkProperties&#93; j15lib = null &#91;setJdkProperties&#93; j16lib = null &#91;setJdkProperties&#93; BUILD FAILED /code/derby/trunk0/build.xml:203: Don't know how to set java15compile.classpath  java16compile.classpath using this environment: java.vendor = Sun Microsystems Inc. java.home = /tmp/jdk/jre java.version = 1.6.0_13 os.name = SunOS j14lib = null j15lib = null j16lib = null'----Since it is able to detect both that the version of the default JDK is 1.6.0_13 and where it is installed  setting java16compile.classpath should be trivial.If the name of the JDK directory is changed from /tmp/jdk to /tmp/jdk1.6.0  Derby is built successfully.   ,0
4273,A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split    I recently merged changes for DERBY-3926 into 10.5.1.2 codeline (revision 784809) and I ran the junit tests on the merged code. The tests finished with one 'A lock could not be obtained within the time requested'. Knut suggested that I open a new jira entry for this issue. Copying his comment from DERBY-2991 here 'Yes  that test was added for DERBY-2991.. It requires some coordination between two threads  so my first guess would be that there is a timing issue in the test. Please file a separate JIRA issue for this failure. Thanks. 'Following is the stack track for the failureThere was 1 error: 1) testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)java.sql.SQLException: A lock could not be obtained within the time requested  at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)  at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)  at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)  at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)  at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)  at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)  at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4338)  at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:467)  at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:371)  at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest.testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split(IndexSplitDeadlockTest.java:489)  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:106)  at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)  at junit.extensions.TestSetup$1.protect(TestSetup.java:19)  at junit.extensions.TestSetup.run(TestSetup.java:23)  at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)  at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)  at junit.extensions.TestSetup$1.protect(TestSetup.java:19)  at junit.extensions.TestSetup.run(TestSetup.java:23)  at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) Caused by: ERROR 40XL1: A lock could not be obtained within the time requested at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)  at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:602)  at org.apache.derby.impl.services.locks.ConcurrentLockSet.zeroDurationLockObject(ConcurrentLockSet.java:855)  at org.apache.derby.impl.services.locks.AbstractPool.zeroDurationlockObject(AbstractPool.java:297)  at org.apache.derby.impl.store.raw.xact.RowLocking2nohold.lockRecordForRead(RowLocking2nohold.java:89)  at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:520)  at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:638)  at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:309)  at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:599)  at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:105)  at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:305)  at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1585)  at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray(BulkTableScanResultSet.java:327)  at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore(BulkTableScanResultSet.java:282)  at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460)  at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:427)  ... 34 more FAILURES!!! Tests run: 9258  Failures: 0  Errors: 1   ,0
4274,SYSCS_UPDATE_STATISTICS takes unnecessary table lock    I'm using SYSCS_UTIL.SYSCS_UPDATE_STATISTICS in an application and see deadlocks similar to this one from time to time:Caused by: java.sql.SQLTransactionRollbackException: A lock could not be obtained due to a deadlock  cycle of locks and waiters is:Lock : ROW  SYSSTATISTICS  (2 20) Waiting XID : {20137  S}   APP  SELECT CS.REVISION  A.NAME  CS.TIME  CS.MESSAGE  F2.PATH FROM CHANGESETS CS  FILECHANGES FC  REPOSITORIES R  FILES F  AUTHORS A  FILECHANGES FC2  FILES F2 WHERE R.PATH = ? AND F.PATH LIKE ? ESCAPE '#' AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND R.ID = CS.REPOSITORY AND FC.FILE = F.ID AND A.ID = CS.AUTHOR AND CS.ID = FC2.CHANGESET AND FC2.FILE = F2.ID ORDER BY CS.ID DESC Granted XID : {20134  X} Lock : TABLE  CHANGESETS  Tablelock Waiting XID : {20134  X}   APP  alter table 'APP'.'CHANGESETS' all update statistics  Granted XID : {20137  IS} . The selected victim is XID : 20137.Here  a select statement is being re-prepared because update statistics has invalidated it  but it has to wait for update statistics to finish in order to read the new statistics from SYSSTATISTICS. Then update statistics attempts to obtain an exclusive lock on the table whose indexes are being updated  but it has to wait because the select statement is holding an intention lock on the table. Both transactions wait for each other  so we have a deadlock.Since SYSCS_UPDATE_STATISTICS does not update the table  only its entries in SYSSTATISTICS  there is no need to take an exclusive table lock. If it didn't lock the table exclusively  this deadlock situation would go away.   ,0
4276,Update demo's to remove references to com.ibm.db2.jcc.DB2Driver    SimpleApp.java is still refering to DB2 JDBC driver. I think it should be take out to reflect DB2 driver is no longer supported.There are also some typos in SimpleApp.java. i.e. noone  retreiving  etc.example.html that should be updated as well.Kathey mention nserverdemo also has references to the DB2 driver. This issue will address that as well.   ,1
4281,10.6 Upgrade test fails: SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA is not recognized as a function    The 10.6 upgrade tests are currently commented out. When the 10.6 upgrade test is enabled  it fails with the following exception:Caused by: java.sql.SQLException: 'SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 98 moreCaused by: ERROR 42Y03: 'SYSCS_UTIL.SYSCS_SET_XPLAIN_SCHEMA' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(StaticMethodCallNode.java:216) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(JavaToSQLValueNode.java:246) at org.apache.derby.impl.sql.compile.CallStatementNode.bindStatement(CallStatementNode.java:145) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:316) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:822) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606) ... 92 more   ,0
4284,All Columns become Nullable when Using left join    Consider following:-create table person ( id varchar(20) not null  name varchar(100) not null);create table car ( id varchar(20) not null  person_id varchar(20) not null  model varchar(100) not null  plat_no varchar(100) not null);When select :-selectp.name c.model c.plat_nofrom person pleft join car c on (p.id = c.person_id);From the ResultSet  get the ResultSetMetaData and inspect each column's isNullable() value  which is always = 1 (always nullable). Expected : column 'p.name' isNullable = 0 (not nullable)  but I get 'p.name' isNullable = 1 (nullable)   ,0
4292,creation of FileInputStream in org.apache.derby.impl.tools.ij.Main not wrapped in privilege  block which can cause problems running under SecurityManager    org.apache.derby.impl.tools.ij.Main has this code where the call to FileInputStream is not wrapped in a privilege block: try { in1 = new FileInputStream(file); if (in1 != null) { in1 = new BufferedInputStream(in1  utilMain.BUFFEREDFILESIZE); in = langUtil.getNewInput(in1); } } catch (FileNotFoundException e) { if (Boolean.getBoolean('ij.searchClassPath')) { in = langUtil.getNewInput(util.getResourceAsStream(file)); }This can cause issues when running under SecurityManager   ,1
4293,Mutable public static variables    There are quite a few instances of public static fields which appear to be intended to be constant  but which are not final.The code would be safer if all the constant fields were made final.Patch to follow for some of the problem fields.The following also ought to be fixed:org.apache.derby.iapi.services.property.PropertyUtil.servicePropertyList (e.g. use an accessor to lookup the values)org.apache.derby.iapi.types.JSQLType.primitiveNames (ditto)   ,1
4297,'compilation time did not compute (0 0 0 0) expected: but was:' in testGroupBySortProps(....tests.lang.XplainStatisticsTest)    Seen inhttp://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/CYGWIN_NT-5.1_i686-unknown/790694-org.apache.derbyTesting.functionTests.suites.All_diff.txtThere was 1 failure:1) testGroupBySortProps(org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest)junit.framework.AssertionFailedError: compilation time did not compute (0 0 0 0) expected:&lt;16&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.verifySensibleStatementTimings(XplainStatisticsTest.java:707) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testGroupBySortProps(XplainStatisticsTest.java:1011) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
4312,SQLException XJ215 on insert  with setCharacterStream() and autocommit off in mailjdbc test    I am running the 10.5 maildbc test on Linux with network server and the 10.5.2.0 release candidate and an updated derbyTesting.jar to have just Lily's change to change the backup user: I see in the test output early and often  this error inserting data into the table:SQLState: XJ215Severity: 20000Message: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or afterClob's transaction has been committed or rolled back.java.sql.SQLException: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() mter the Blob/Clob's transaction has been committed or rolled back. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Lob.checkValidity(Unknown Source) at org.apache.derby.client.am.Clob.length(Unknown Source) at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(Unknown Source) at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(Unknown Source) at org.apache.derby.client.net.NetStatementRequest.writeExecute(Unknown Source) at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(Unknown Source) at org.apache.derby.client.am.PreparedStatement.writeExecute(Unknown Source) at org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeUpdateX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.insertMail(DbTasks.java:447) at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.insertMail(Refresh.java:99) at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.doWork(Refresh.java:75) at org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.run(Refresh.java:51)Caused by: org.apache.derby.client.am.SqlException: You cannot invoke other java.sql.Clob/java.sql.Blob metholling the free() method or after the Blob/Clob's transaction has been committed or rolled back.The interesting thing is that the test itself is not using any Clob methods it uses setCharacterStream and also autocommit is off.Below is a code excerpt and conn.setAutoCommit(false); PreparedStatement insertFirst = conn.prepareStatement( Statements.insertStr  Statement.RETURN_GENERATED_KEYS); String name = new String('ABCD'); String l_name = new String('WXYZ'); long s_insert = System.currentTimeMillis(); for (int i = 0; i &lt; num; i++) { String new_name = new String(increment(name  60)); String new_lname = new String(decrement(l_name  60)); insertFirst.setString(1  new_name); insertFirst.setString(2  new_lname); insertFirst.setTimestamp(3  new Timestamp(System .currentTimeMillis())); name = new_name; l_name = new_lname; try { // to create a stream of random length between 200 bytes and 3MB int clobLength = Rn.nextInt(3078000 - 200 + 1) + 200; streamReader = new LoopingAlphabetReader(clobLength  CharAlphabet.modernLatinLowercase()); insertFirst.setCharacterStream(4  streamReader  clobLength); } catch (Exception e) { MailJdbc.logAct.logMsg(LogFile.ERROR + thread_name + ' : ' + 'File not found Exception : ' + e.getMessage()); errorPrint(e); throw e; } int rand_num = Rn.nextInt(10 - 1); if (i == rand_num) { ResultSet rs = stmt .executeQuery('select count from REFRESH.INBOX where attach_id&gt;0'); while (rs.next()) { id_count = rs.getInt(1); insertFirst.setInt(5  rs.getInt(1) + 1); } rs.close(); conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED); } else insertFirst.setInt(5  0); insertFirst .setString( 6  'This column is used only to by pass the space problem. If the problem still exists  then we are going to ' + 'have a serious issue here.*****************************************************************************************************'); int result = insertFirst.executeUpdate();if I connect with ij I do see some rows in the INBOX  so some inserts do seem to be happening. Kristian pointed out that this looks similar to DERBY-4224 with setAsciiStream() but this looks far more serious as autocommit is off and there does not appear to be a commit  so there is no obvious workaround. I assume this is also a regression. We shouldn't be throwing this error if the user did not use any Clob methods. I will try to narrow down the reproduction and track down where the issue was introduced. Knut said DERBY-4224 goes all the way back to 10.3.1.4 with DERBY-208. I don't know if it is the same case with this one.   ,0
4314,With derby client setTransactionIsolation executes and commits even if isolation has not changed    With in EmbedConnection.setIsolation() we have a check to see if the isolation level is the same and if so just return without doing a commit: public void setTransactionIsolation(int level) throws SQLException { if (level == getTransactionIsolation()) return;with org.apache.derby.client.am.Connection we have no such check. It would be good if the client driver acted like embedded.   ,0
4315,Attempt to reuse streams in client on insert gives protocol exception and inserts wrong data    If a user attempts to reuse a stream set as a parameter to a prepared statement  the statement execution should fail with SQL State XJ001. Instead client fails with a protocol error and inserts wrong data. See the attached java program ReproReuseStream.java for a reproduction.&#91;C:/kmarsden/repro/reusestream&#93; java ReproReuseStreamInsert row 1Try to insert row 2 with reused streamsjava.sql.SQLException: Network protocol error: end of stream prematurely reached  parameter #4. Remaining data has been padded with 0x0. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358) at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:399) at ReproReuseStream.main(ReproReuseStream.java:41)Caused by: org.apache.derby.client.am.SqlException: Network protocol error: end of stream prematurely reached  parameter #4. Remaining data has been padded with 0x0. at org.apache.derby.client.net.Request.writePlainScalarStream(Request.java:490) at org.apache.derby.client.net.Request.writeScalarStream(Request.java:264) at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatementRequest.java:951) at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:147) at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:178) at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1801) at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2031) at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:404) at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:390) ... 1 moreGo ahead and commit so we can see the wrong data.ID |MNAMEMVALUE BYTEDATACHARDATA--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 |mname0 6363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636&amp;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&amp;2 mname0 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&amp; &amp;To workaround the issue users should not attempt to reuse streams but we should give a better message and not insert wrong data.The code was extracted from StreamingColumnTest testDerby500 but the commits were removed.   ,0
4319,hang in suites.all with ibm 1.5 on AIX after ttestDefaultProperties    The test run for 10.5.2.0 hung in suites.All. The console output (the run was with -Dderby.tests.trace=true) showed ttestDefaultProperties had successfully completed but the run was halted.ps -eaf | grep java showed the process that kicked off suites.All  and a networkserver process with the following flags: classpath &lt;classpath including derby.jar  derbytools.jar  derbyclient.jar  derbynet.jar  derbyTesting.jar  derbyrun.jar  derbyTesting.jar and junit.jar&gt; -Dderby.drda.logConnections= -Dderby.drda.traceAll= -Dderby.drda.traceDirectory= -Dderby.drda.keepAlive= -Dderby.drda.timeSlice= -Dderby.drda.host= -Dderby.drda.portNumber= -derby.drda.minThreads= -Dderby.drda.maxThreads= -Dderby.drda.startNetworkServer= -Dderby.drda.debug= org.apache.derby.drda.NetworkServerControl start -h localhost -p 1527This process had been sitting for 2 days.After killing the NetworkServerControl process  the test continued successfully (except for DERBY-4186  fixed in trunk)  but the following was put out to the console: START-SPAWNED:SpawnedNetworkServer STANDARD OUTPUT: exit code=1372009-07-18 03:16:07.157 GMT : Security manager installed using the Basic serversecurity policy.2009-07-18 03:16:09.169 GMT : Apache Derby Network Server - 10.5.2.0 - (794445)started and ready to accept connections on port 1527END-SPAWNED :SpawnedNetworkServer STANDARD OUTPUT:   ,0
4321,test nstest generates errors XBM06 re reencryption and 22003 re value outside range for decimal/numeric    The test nstest (both in embedded and networkserver) ran into a JVM-bug-related error the last few times I tried it; but with a newer jvm I notice it's generating an XBM06 error:XBM06: Startup failed. An encrypted database cannot be accessed without the correct boot password. From the test's README.txt it shows it is indeed attempting to re-encrypt  but this is failing.The test needs to be tightened up so it doesn't show unusual errors.The test also generates:22003: The resulting value is outside the range for the data type DECIMAL/NUMERIC(5 0)The test's readme and comments don't indicate this is a negative test  so this too should get tightened/cleaned up.   ,1
4326,hang on winvista with IBM 1.6 SR5 in NSSecurityMechanismTest    This is stopping my platform testing on winvista with ibm 1.6 SR5.During the initial run of suites.All  I got:-------------------------------- testNetworkServerSecurityMechanism java.net.SocketException: Connection reset by peer: setsockopt at java.net.PlainSocketImpl.socketSetOption(Native Method) at java.net.PlainSocketImpl.setOption(PlainSocketImpl.java:283) at java.net.Socket.setKeepAlive(Socket.java:1171) at org.apache.derby.impl.drda.ClientThread.run(Unknown Source)--------------------------------Rerunning suites.All gave the same error.There is only 1 java process active &amp; hanging.Running just the test itself also results in a hang but there was (so far - it's been sitting unchanged for 4 hours) java.net.SocketException.   ,1
4342,SQLSTATE 38000 (NullPointerException) at inner self join and value(x1  x2...)    create table xyz (c1 int  c2 int);insert into xyz values(1 2);select * from xyz t1 inner join xyz t2 on t1.c1 = t2.c1 where value(t1.c1  t1.c2) = 1;causes the following error:FEHLER 38000: Bei der Auswertung eines Ausdrucks wurde die Ausnahme 'java.lang.NullPointerException' ausgeloest.FEHLER XJ001: Java-Ausnahme: ': java.lang.NullPointerException'.   ,0
4343,ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection    For DERBY-4314  I thought I would do a little testing to understand the server round trips in various scenarios for pooled connections. So I wrote the small attached program ConnReuse.java and hit this assertion in client:Exception in thread 'main' org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98) at org.apache.derby.client.am.Connection.setTransactionIsolationX(Connection.java:987) at org.apache.derby.client.am.Connection.setTransactionIsolation(Connection.java:915) at org.apache.derby.client.am.LogicalConnection.setTransactionIsolation(LogicalConnection.java:253) at TestConnReuse.main(TestConnReuse.java:32)---------------To run the program on trunk:java org.apache.derby.drda.NetworkServerControl startjava TestConnReuse.This needs more investigation  but I thought I would go ahead and log the bug. I tried this only on trunk. I have not yet Tried it on the branches. Tried it with Lily's DERBY-4314 patch. Tried it with embedded. Tried actually doing something with the prior logical connection which might be related.   ,0
4348,Copy table content with 'INSERT INTO table SELECT FROM (...)' statement leads to corrupt data    I had to change a the primary key of a table and used ddlutils to do so. Ddlutils recreated the table to perform this task.After the schema conversion the row data of the changed table were corrupted. The values of the last table column were filled with values from other rows!After performing a few tests I could break down the problem to the SQL statement 'INSERT INTO table SELECT FROM (...)'To reprocude the effect do the following:1. unpack attached database 'rmdb.zip'2. connect to the database with embedded driver  User: IGEL Password: test 3. read data of an example row from database select * from stringrangenew where classname = 'x.xserver%.colordepth';result is  x.xserver%.colordepth 2 &#91;16&#93; &#91;24&#93; &#91;32&#93;4. now copy the data to the second table (column INSTANCENR has been added to this table) INSERT INTO STRINGRANGENEW_ (CLASSNAME FIRMWAREID RVALUE) SELECT CLASSNAME FIRMWAREID RVALUE FROM STRINGRANGENEW;5. select data of example row from second table select * from stringrangenew_ where classname = 'x.xserver%.colordepth';result is  x.xserver%.colordepth 2 -1 &#91;CCW&#93;&#91;CW&#93;&#91;XX&#93;-&gt; value of last column is not the same as in orignal table!Here some additional information i worked out during my tests: if you change the copy statement to include the additional column INSTANCENR  the copied data are correct. delete from STRINGRANGENEW_; INSERT INTO STRINGRANGENEW_ (CLASSNAME FIRMWAREID  INSTANCENR  RVALUE) SELECT CLASSNAME FIRMWAREID  -1  RVALUE FROM STRINGRANGENEW; if you select the rows only 'SELECT CLASSNAME FIRMWAREID RVALUE FROM STRINGRANGENEW'  the result shows correct dataNote: The effect is not restricted to this row but also applies to other rows. But it's always the same rows  that get corrupted.   ,0
4355,Implement CROSS JOIN    Implement the CROSS JOIN syntaxSELECT * from t1 CROSS JOIN t2;as an alternative syntax toSELECT * FROM t1  t2; This should be pretty straight forward and ease the migration of SQL code to Derby.   ,0
4357,TableFunctions provide no information to limit underlying query    The API specification for TableFunctions cannot provide information to the implementer of the TableFunction about the details of the query. For example: (a) I defined a table function named MyFunction with columns a b  &amp; c(b) I bind the table function properly using the CREATE FUNCTION SQL.User executes the following SQL:select a b from table ( MyFunction() ) where c = 123Without passing the column list and/or where clause as arguments to the table function  my implementation can not know that it only needs two of the three columns  and only rows where c = 123.For TableFunctions that are built to integrate distant/legacy data  the cost of the query can be prohibitive. It would be better if information regarding the columns in the select and restrictions from the where clause could be passed to the developer.   ,0
4365,NullPointerException when preparing LEFT OUTER JOIN between VALUES statements    ij version 10.5ij&gt; connect 'jdbc:derby:db;create=true';ij&gt; select a.* from (values ('a') ('b') (null)) a left outer join (values ('c') ('d')) b on 1=1;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.   ,0
4367,Replace Utils.min and Utils.max in the client driver with standard methods in java.lang.Math    The client has a utility class implementing functions for choosing the smallest and the largest int. These functions are already defined in java.lang.Math  and should be used instead because they are more familiar and because there is no need to duplicate the functionality.   ,0
4372,Wrong result for simple join when index is created    In the example below  the first SELECT has correct result. After the index is created  the second SELECT gives wrong result.ij&gt; CREATE TABLE t1 (i1 INT  j1 INT);0 rows inserted/updated/deletedij&gt; CREATE TABLE t2 (i2 INT  j2 INT);0 rows inserted/updated/deletedij&gt; INSERT INTO t1 VALUES (8  8) (NULL  8);2 rows inserted/updated/deletedij&gt; INSERT INTO t2 VALUES (8  8);1 row inserted/updated/deletedij&gt; SELECT * FROM t1 INNER JOIN t2 ON (t2.j2 = t1.i1) OR (t2.j2 = t1.j1);I1 |J1 |I2 |J2 -----------------------------------------------8 |8 |8 |8 NULL |8 |8 |8 2 rows selectedij&gt; CREATE INDEX ix2 ON t2(j2);0 rows inserted/updated/deletedij&gt; SELECT * FROM t1 INNER JOIN t2 ON (t2.j2 = t1.i1) OR (t2.j2 = t1.j1);I1 |J1 |I2 |J2 -----------------------------------------------8 |8 |8 |8 1 row selected   ,0
4386,JavaDoc warnings in several classes in impl/sql/execute/rts    A 'raw non-ASCII' character was introduced in several classes as part of a commit for DERBY-2487.These should be removed to get rid of the JavaDoc warnings.I plan to enable JavaDoc warnings reporting in the Hudson Derby build job.   ,0
4387,Infinite loop in PredicateList.joinClauseTransitiveClosure()    This sequence of statements triggers an infinite loop in PredicateList.joinClauseTransitiveClosure() and never completes:create table c (a int  b int  c int);create table cc (aa int);select * from cc t1  c t2  cc t3 where t3.aa = t2.a and t3.aa = t2.b and t3.aa = t2.c;   ,0
4388,NullPointerException in RIGHT JOIN with NOT BETWEEN    ij&gt; create table t1(x int);0 rows inserted/updated/deletedij&gt; create table t2(x int);0 rows inserted/updated/deletedij&gt; insert into t2 values (1);1 row inserted/updated/deletedij&gt; select * from t1 right join t2 on t1.x = t2.x where t1.x not between 0 and 4;X |X -----------------------ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.ERROR XJ001: Java exception: ': java.lang.NullPointerException'.   ,0
4391,NullPointerException when comparing indexed column with result from a set operation    I'm reporting this issue on behalf of Bernt M. Johnsen.If an indexed column is compared with a UNION query (or some other set operation)  a NullPointerException is raised  as can be seen by this sequence of statements in ij:ij&gt; create table t(a int not null primary key  b int);0 rows inserted/updated/deletedij&gt; select * from t where a &lt; (values 4 union values 4);ERROR XJ001: Java exception: ': java.lang.NullPointerException'.   ,0
4405,Transformation to inner join not performed for certain three-way joins    In the CROSS JOIN section in the reference manual (http://db.apache.org/derby/docs/dev/ref/rrefsqljcrossjoin.html) there are three examples that are supposed to be equivalent. However  the performance differs significantly between the different queries.The queries use the tours db and look like this:(1)SELECT * FROM CITIES LEFT OUTER JOIN (FLIGHTS CROSS JOIN COUNTRIES) ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT WHERE COUNTRIES.COUNTRY_ISO_CODE = 'US'(2)SELECT * FROM CITIES LEFT OUTER JOIN FLIGHTS INNER JOIN COUNTRIES ON 1=1 ON CITIES.AIRPORT = FLIGHTS.ORIG_AIRPORT WHERE COUNTRIES.COUNTRY_ISO_CODE = 'US'(3)SELECT * FROM CITIES LEFT OUTER JOIN (SELECT * FROM FLIGHTS  COUNTRIES) S ON CITIES.AIRPORT = S.ORIG_AIRPORT WHERE S.COUNTRY_ISO_CODE = 'US'When executed in ij  (1) and (2) need 6 seconds to complete  whereas (3) completes in 50 ms.The query plans for (1) and (2) use nested loop joins and table scans. (3) uses a combination of hash join and nested loop join  and index scans as well as table scans.It looks like (3) has been rewritten from a left outer join to an inner join internally. This is fine because all rows that have the right-side columns filled with NULLs will be filtered out by the predicate S.COUNTRY_ISO_CODE='US'  so the extra rows generated by the outer join will not be returned.This optimization should also be possible for (1) and (2). We should improve the logic so that those joins are transformed too. The transformation happens in HalfOuterJoinNode.transformOuterJoins().   ,0
4410,NullPointerException when USING clause contains all columns in both join tables    ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; select t1.  t2. from t t1 join t t2 using ;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.This statement should have raised an exception because both t1.* and t2.* expand to no columns. See DERBY-4407.   ,0
4411,Scalar subquery erroneously rejected for not returning exactly one row    This sequence of statements causes an error because the scalar sub-query supposedly doesn't return exactly one row  even though it does return exactly one row:ij&gt; create table t (x int unique  y int);0 rows inserted/updated/deletedij&gt; insert into t values (1 2);1 row inserted/updated/deletedij&gt; select * from t where x &gt; (values 1 union select y from t where 1=0);ERROR 21000: Scalar subquery is only allowed to return a single row.ij&gt; values 1 union select y from t where 1=0;1 -----------1 1 row selectedBefore DERBY-4391  the problematic statement would have caused a NullPointerException.   ,0
4412,Make getNegation() abstract in BinaryComparisonOperatorNode and UnaryComparisonOperatorNode    Both BinaryComparisonOperatorNode and UnaryComparisonOperatorNode have a method called getNegation() with the following code: /* Keep the compiler happy - this method should never be called. We should always be calling the method in a sub-class. */ if (SanityManager.DEBUG) SanityManager.ASSERT(false  'expected to call getNegation() for subclass ' + getClass().toString()); return this;Instead of relying on asserts to detect missing method overrides at run-time  we should make the methods abstract so that such errors are detected by the compiler.   ,0
4414,NullPointerException with JOIN...USING and invalid table name in select list    ij version 10.6ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(a int  b int  c int);0 rows inserted/updated/deletedij&gt; select t.* from t t1 join t t2 using (a);ERROR XJ001: Java exception: ': java.lang.NullPointerException'.java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2204) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:614) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:329) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:521) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:363) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:261) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 16 moreCaused by: java.lang.NullPointerException at org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(JoinNode.java:431) at org.apache.derby.impl.sql.compile.FromList.expandAll(FromList.java:474) at org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(ResultColumnList.java:1598) at org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(ResultColumnList.java:686) at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(SelectNode.java:451) at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(DMLStatementNode.java:227) at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:140) at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:249) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:319) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:824) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606) ... 9 moreThe query is expected to fail (because the table name in t.* does not match any of the joined tables)  but not with a NullPointerException. A similar query with ON instead of USING fails more gracefully:ij&gt; select t.* from t t1 join t t2 on t1.a=t2.a;ERROR 42X10: 'T' is not an exposed table name in the scope in which it appears.   ,0
4428,Add proper delete mechanism for in-memory databases    The current mechanism for deleting in-memory databases isn't good enough  and a proper one must be added.It is also important to be able to delete in-memory databases  since they occupy valuable main memory that should be discarded when the database is no longer needed.I intend to implement the mechanism by using the JDBC connection URL:'jdbc:derby:memory:myDatabase;delete=true&#91;;user=X;password=Y&#93;The connection attempt will throw an exception in any case  either because the request failed or because it succeeded.Reasons for a failure can be invalid user and/or password  lacking encryption attributes  or conflicting attributes.For the time being  only the database owner will be allowed to delete databases (note: do we have a way to control/limit in-memory database creation?)   ,0
4432,Memory leak when attempting to boot non-existing database with the in-memory back end    When attempting to boot a non-existing database with the in-memory back end  a DataStore is created and referenced by a map. Since the database doesn't exist  Derby won't use the DataStore again and it will hang around indefinitely in VFMemoryStorageFactory (or until the same database is actually created  in which case the data store will be used).FYI  storage factory instances are instantiated liberally  including for the same service (i.e. six instances of VFMemoryStorageFactory may be created to boot 'jdbc:derby:memory:myDB').   ,0
4438,'Table/View 'T1' already exists in Schema 'APP'' in lang.DropTableTest on phoneME/cvm    See http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Limited/testSummary-833084.htmlhttp://dbtg.foundry.sun.com/derby/test/Daily/javaME/FailReports/833084_bySig.html same signature as DERBY-4392 : org.apache.derbyTesting.functionTests.tests.lang.DropTableTest &#91;org.apache.derbyTesting.functionTests.tests.lang.CheckConstraintTest&#93;: DERBY-4392 Closed - signature&#91;1&#93;Caused by test not cleaning up and phoneME/cvm executing tests in a different order than other jvms Introduced by r833055 / DERBY-4423.I am testing a fix.   ,0
4442,Evaluation of default value and identity in an INSERT result set evaluated too early.    In contrast to generated column  which are evaluated when the next row from the result set to be inserted  currently default values and identity columns are generated 'early'  that is as part of avaluating the subquery (SELECT or VALUES as the case may be). This does not currently cause a user visible bug in Derby  but it lies behind DERBY-3 and the effect Bryan observed in DERBY-4.Additionally  'early' computation has given rise to much special handling and ensuing bugs  cf. DERBY-1644  DERBY-4413  DERBY-4419  DERBY-4425 and others.DERBY-4397 requires this fix for correct behaviour with INSERT.See alsohttps://issues.apache.org/jira/browse/DERBY-4413?focusedCommentId=12769532&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12769532   ,0
4443,Wrap rollback in exception handlers in try-catch    Avoid this pattern everywhere: }catch(SQLException se){ //issue a rollback on any errors conn.rollback(); throw se; }because an error in rollback will shadow the original exception.   ,0
4455,Prepared statement failure with CLOB: Stream has already been read and end-of-file reached and cannot be re-used.    Possibly related to #4332?We have encountered an error when using Prepared Statements and CLOBs. I have read:http://db.apache.org/derby/papers/JDBCImplementation.html#setAsciiStream%2CsetBinaryStream%2CsetCharacterStreamBut it does not seem applicable  as we are not re-using a stream.The environment is this:1. Java 62. Derby 10.5.3.03. Bitronix JTA 1.3.3We're actually using Hibernate  but I eliminated it from the equation (and the problem persists).A summary of the failure flow is this:1. Start a transaction2. Obtain a connection from a pool of connections (for this test  the pool size is pinned at 1)3. Prepare a statement that inserts a CLOB.4. Set the parameters5. Add the prepared statement to a batch (but we only batch 1 &#8211; this is to emulate what hibernate is doing as closely as possible).6. Execute the batch.Everything up to this point works.7. Repeat steps 1-6. But this time  the connection will be reused from the pool  and the statement will be gotten from a prepared statement cache (maintained by bitronix). I.e. the prepared statement is re-used.8. Observe the following failure:org.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure. The batch was submitted  but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements. at org.apache.derby.client.am.Agent.endBatchedReadChain(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatchX(Unknown Source) at org.apache.derby.client.am.PreparedStatement.executeBatch(Unknown Source) at bitronix.tm.resource.jdbc.JdbcPreparedStatementHandle.executeBatch(JdbcPreparedStatementHandle.java:248) at org.dancernetworks.TestFailure.doInsert(TestFailure.java:134) at org.dancernetworks.TestFailure.doPrepared(TestFailure.java:110) at org.dancernetworks.TestFailure.main(TestFailure.java:55)Nov 30  2009 10:29:31 PM bitronix.tm.BitronixTransactionManager shutdownINFO: shutting down Bitronix Transaction ManagerAn IOException was thrown when reading a 'java.sql.String' from an InputStream.java.sql.SQLException: An IOException was thrown when reading a 'java.sql.String' from an InputStream. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.noStateChangeException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.transferParameters(Unknown Source) at org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getPreparedStatement(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getStatement(Unknown Source) at org.apache.derby.iapi.jdbc.BrokeredStatement.close(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.close(Unknown Source) at org.apache.derby.impl.drda.Database.close(Unknown Source) at org.apache.derby.impl.drda.Session.close(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.closeSession(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Caused by: java.sql.SQLException: An IOException was thrown when reading a 'java.sql.String' from an InputStream. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 15 moreCaused by: java.sql.SQLException: Java exception: 'Stream has already been read and end-of-file reached and cannot be re-used.: java.io.EOFException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 12 moreCaused by: java.io.EOFException: Stream has already been read and end-of-file reached and cannot be re-used. at org.apache.derby.iapi.types.ReaderToUTF8Stream.read(Unknown Source) at java.io.DataInputStream.readUnsignedShort(DataInputStream.java:320) at org.apache.derby.iapi.types.SQLChar.readExternal(Unknown Source) at org.apache.derby.iapi.types.SQLChar.getString(Unknown Source) at org.apache.derby.iapi.types.SQLChar.setFrom(Unknown Source) at org.apache.derby.iapi.types.DataType.setValue(Unknown Source) at org.apache.derby.impl.sql.GenericParameterValueSet.transferDataValues(Unknown Source) at org.apache.derby.impl.sql.execute.BaseActivation.setParameters(Unknown Source) at org.apache.derby.impl.sql.GenericActivationHolder.setParameters(Unknown Source) ... 10 moreAttached is an archived Eclipse project of a self-contained reproduction. It includes everything needed to run  including the Bitronix 1.3.3 jar.   ,0
4470,Forbid ordering operations on UDTs    Knut has provided an example of an ordering operation which succeeds on a UDT in his Dec. 11  2009 comment on DERBY-651.   ,0
4476,Use helper methods from IdUtil instead of TupleDescriptor.quoteProtectName()    TupleDescriptor.quoteProtectName() duplicates functionality provided by the o.a.d.iapi.util.IdUtil class. The method should be removed  and its callers should use IdUtil.normalToDelimited() or IdUtil.mkQualifiedName() instead.   ,0
4477,Selecting / projecting a column whose value is represented by a stream more than once fails    Selecting / projecting a column whose value is represented as a stream more than once crashes Derby  i.e.:ResultSet rs = stmt.executeQuery('SELECT clobValue AS clobOne  clobValue AS clobTwo FROM mytable');rs.getString(1);rs.getString(2);After having looked at the class of bugs having to do with reuse of stream data types  I now have a possible fix. It fixes DERBY-3645  DERBY-3646 and DERBY-2349 (there may be more Jiras).The core of the fix is cloning certain DVDs being selected/projected in multiple columns. There are two types of cloning: A) materializing clone B) stream clone(A) can be implemented already  (B) requires code to clone a stream without materializing it. Note that the streams I'm talking about are streams originating from the store.Testing revealed the following: the cost of the checks performed to figure out if cloning is required seems acceptable (negligible?) in some cases (A) has better performance than (B) because the raw data only has to be decoded once stream clones are preferred when the data value is above a certain size for several reasons: avoids potential out-of-memory errors (and in case of a server environment  it lowers the memory pressure) avoids decoding the whole value if the JDBC streaming APIs are used to access only parts of the value avoids decoding overall in cases where the value isn't accessed by the client / user (this statement conflicts with the performance observation above)We don't always know the size of a value  and since the fix code deals with all kinds of data types  it is slightly more costly to try to obtain the size.What do people think about the following goal statement?Goals:----- Phase 1 1) No crashes or wrong results due to stream reuse when executing duplicate column selections (minus goal 4) 2) Minimal performance degradation for non-duplicate column selections 3) Only a minor performance degradation for duplicate [&#91;LONG&#93; VAR]CHAR &#91;FOR BIT DATA&#93; column selections----- Phase 2 4) No out-of-memory exceptions during execution of duplicate column selections of BLOB/CLOB 5) Optimize BLOB/CLOB cloningI think phase 1 can proceed by reviewing and discussing the prototype patch. Phase 2 requires more discussion and work (see DERBY-3650).A note about the bug behavior facts:Since this issue is the underlying cause for several other reported issues  I have decided to be liberal when setting the bug behavior facts. Depending on where the duplicate column selection is used  it can cause both crashes  wrong results and data corruption.   ,0
4478,Use AtomicLong for XactFactory.tranId    Dyre Tjeldvoll posted some results on DERBY-3092 that indicated that some types of load might cause contention on XactFactory.tranId (a shared long)  and suggested that it was replaced with a java.util.concurrent.atomic.AtomicLong on the platforms that support java.util.concurrent.*.I'm splitting this issue out from DERBY-3092 so that the two possible improvements reported there can be addressed independently.   ,0
4484,Add import/export support for UDTs.    Import/export should work on UDTs.   ,0
4488,Nullpointer when performing INSERT INTO    To replicate  execute the following 4 queries:CREATE TABLE feed (fst INTEGER  snd VARCHAR(50)  UNIQUE(fst))INSERT INTO feed VALUES (1  'fst')CREATE TABLE tbl (col1 INTEGER  col2 INTEGER NOT NULL REFERENCES feed (fst) ON DELETE RESTRICT ON UPDATE RESTRICT)INSERT INTO tbl(col1) SELECT 1 FROM feedThe result of the last INSERT INTO query is:java.lang.NullPointerException at org.apache.derby.impl.store.access.btree.BTreeScan.initScanParams(Unknown Source) at org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController(Unknown Source) at org.apache.derby.impl.sql.execute.TableScanResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.NormalizeResultSet.reopenCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)   ,0
4496,Column list size mismatch with ORDER BY in INSERT statement    I see this error on trunk (revision 894516):ij&gt; create table t(x varchar(100));0 rows inserted/updated/deletedij&gt; insert into t select * from (select * from sysibm.sysdummy1 order by length(ibmreqd)) t1;ERROR 42X32: The number of columns in the derived column list must match the number of columns in table 'T1'.The statement succeeds if I remove the ORDER BY clause:ij&gt; insert into t select * from (select * from sysibm.sysdummy1) t1;1 row inserted/updated/deleted   ,0
4514,j2ME test failures relating to runtimeStatisticsParser    After my change for DERBY-4038 to the runtimeStatisticsParser  the IBM tests show 44 errors and the Sun tests 48 - because I've used the String.split method which isn't available with j2ME.For example: 1) testDynamicLikeOptimization(org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest)java.lang.NoSuchMethodError: java/lang/String.split(Ljava/lang/String[Ljava/lang/String; at org.apache.derbyTesting.junit.RuntimeStatisticsParser.getStartPosition(RuntimeStatisticsParser.java:421) at org.apache.derbyTesting.junit.RuntimeStatisticsParser.&lt;init&gt;(RuntimeStatisticsParser.java:81) at org.apache.derbyTesting.junit.SQLUtilities.getRuntimeStatisticsParser(SQLUtilities.java:125) at org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testDynamicLikeOptimization(DynamicLikeOptimizationTest.java:547) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)The runtimeStatisticsParser code needs to be adjusted.   ,0
4515,Document and clarify the use of DataValueDescriptor.setValue(InputStream int)    The usage of the method DataValueDescriptor.setValue(InputStream stream  int length) is unclear. The intended use seems to be to pass on the known length of an input stream set from the JDBC-layer (i.e. setBinaryStream).There seems to be two distinct cases: the logical length of the stream is known the logical length of the stream is not knownUsing -1 when the length is not known seems to be an established pattern.   ,0
4520,Refactor and extend data type cloning facilities    With the increased use of streams to represent data values  the cloning facilities needs to be improved.Unless I get pushback  I will proceed by producing patches to reach the following goals: move the functionality provided by CloneableObject into DataValueDescriptor (all classes implementing CloneableObject also implements DataValueDescriptor) introduce the cloning methods cloneValue  cloneState and cloneHolder (all in DataValueDescriptor  see description below) Note that they all return a usable DVD. I'm all ears for better names for the clone methods (another suggestion mentioned is cloneDeep  cloneHalfDeep  and cloneShallow).NOTE: See comment below  the method names changed during the course of development.cloneValue &lt;deep&gt; (new method  functionality was present through combined calls to the DVD public interface)  a DVD obtained through cloneValue is independent of other DVDs and the state of the Derby store the data value will be materializedcloneState &lt;halfDeep&gt; (~= DataValueDescriptor.getClone) a DVD obtained through cloneState is independent of other DVDs  but may depend on the state of the Derby store (due to references to store streams) the data value will be materialized if the value is represented by a non-cloneable stream or if Derby believes materializing the value is more appropriate than keeping the stream representationcloneHolder &lt;shallow&gt; (~= CloneableObject.cloneObject) a DVD obtained through cloneHolder is dependent on the original DVD and its clones made through cloneHolder. If one of the DVDs changes its state  all of them will be affected. Will also be dependent on the state of the Derby store if there are references to store streams. the data value will never be materialized due to cloneHolder being invokedFor many of the data types  cloneState and cloneHolder will forward to cloneValue.cloneState will be used the most. cloneValue is currently only required in the sorter. cloneHolder is required (for performance reasons and maybe to avoid OOME) when DVDs pass through temporary holders (BackingStoreHashtable  TemporaryRowHolderImpl). I have not gone through all the usages of cloneState to see if any of them can be  or has to be  replaced with another clone-call.The ability to clone store streams will be added by Mike's patch attached to DERBY-3650. New method names:It turned out that using only two methods was sufficient:cloneHolder &lt;shallow&gt; (as above)cloneValue(boolean forceMaterialization) &lt;halfDeep or deep&gt;Basically  cloneValue(false) equals cloneState() above  and cloneValue(true) equals cloneValue() above.   ,0
4538,If the CREATE TRIGGER does not have the REFERENCING clause  then there is no need to keep before and after values for the triggering table    In order for the trigger action to have access to before and after values of the triggering table  the CREATE TRIGGER should use the REFERENCING clause. Without the REFERENCING clause  old and new values of triggering table can't be accessed by the trigger action. Based on this  we can improve Derby memory utilization by not keeping old and new values if REFERENCING clause is missing. It will be good to see if the code already does this optimization and if not  then introducing this optimization will definitely be very useful when the triggering table could have LOB columns.   ,0
4539,Make it possible to put the optional clauses of a CREATE SEQUENCE statement in the arbitrary order allowed by the SQL Standard    The current syntax for CREATE SEQUENCE requires that the optional clauses appear in a fixed order. The SQL Standard is more flexible here.   ,0
4542,Avoid materialization where possible when cloning CollatorSQLClob    Cloning a CollatorSQLClob results in always materializing the value. Since CLOBs can be very large  this should be avoided. There should now be sufficient functionality to do this  see SQLClob.   ,0
4545,test_11_tableFunctionColumns fails with weme (J2ME) with 'java.lang.NoClassDefFoundError: java.sql.DriverManager'    Starting Friday Feb 3  testing svn 907159  IBM weme 6.2 fails as follows.http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/907159-suites.All_diff.txtIt would appear that either the test needs to be disabled for J2ME or DriverManager use needs to be removed from the test.1) test_11_tableFunctionColumns(org.apache.derbyTesting.functionTests.tests.lang.UDTTest)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: java.sql.DriverManager' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.assertResults(GeneratedColumnsHelper.java:335) at org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_11_tableFunctionColumns(UDTTest.java:814) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: Java exception: 'java.sql.DriverManager: java.lang.NoClassDefFoundError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 41 moreCaused by: java.lang.NoClassDefFoundError: java.sql.DriverManager at org.apache.derbyTesting.functionTests.tests.lang.UDTTest.hashmapReader(UDTTest.java:854) at org.apache.derby.exe.ac8b55d5f4x0126xa337xbefex00001d5b55d51.g0(Unknown Source) at java.lang.reflect.AccessibleObject.invokeL(AccessibleObject.java:203) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 37 more   ,0
4548,would like an alternative location for ant.properties    The current build.xml directs ant to look for a file ant.properties in user.home. This can get confusing when you have multiple versions on the same machine.I've worked around this in the past by pointing ant at other directories with -Duser.home=...  but it would be easier to have another place set up - I don't really like changing user.home.We could add another line to build.xml  e.g.  for trunk's current build.xml:@@ -20 6 +20 7 @@ &lt;!-- Set Properties --&gt; &lt;!-- User settings --&gt;+ &lt;property file='ant.properties'/&gt; &lt;property file='${user.home}/ant.properties'/&gt; &lt;!-- Set property lib dir --&gt; &lt;property name='properties.dir' value='tools/ant/properties'/&gt;This would make ant look first for ant.properties in the same directory as the top level build.xml  and secondly for the one in user.home.If the community agrees this would be ok  I'd like to make this change and backport it all the way to 10.0.By having an additional place we'd not cause incompatibilities to other build processes (except if someone has put an ant.properties file in the top of the checked out tree).If we do this  I think it's up to the developers to ensure that there's not 2 ant.properties files that are conflicting.   ,0
4549,NPE in JBitSet    A NPE occurs at org.apache.derby.iapi.util.JBitSet.or().A NPE occured at the same location before: http://issues.apache.org/jira/browse/DERBY-1574The bug was confirmed by Bryan Pendleton to show in the HEAD as well: http://mail-archives.apache.org/mod_mbox/db-derby-user/201002.mbox/%3C4B79F74E.1000005@amberpoint.com%3ETo reproduce:----------------------CREATE TABLE ABC (ID int PRIMARY KEY NOT NULL);CREATE TABLE DEF (ID int PRIMARY KEY NOT NULL);SELECT * FROM ABC t1WHERE (SELECT DISTINCT t2.ID FROM DEF t2)  IN (SELECT t3.ID FROM DEF t3) ----------------------Leads to error message: Error: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.USQLState: XJ001ErrorCode: -1Stacktrace:java.lang.NullPointerException at org.apache.derby.iapi.util.JBitSet.or(Unknown Source) at org.apache.derby.impl.sql.compile.OptimizerImpl.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.sql.compile.Level2OptimizerImpl.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.getOptimizerImpl(Unknown Source) at org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.getOptimizer(Unknown Source) at org.apache.derby.impl.sql.compile.ResultSetNode.getOptimizer(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.SubqueryNode.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.SubqueryList.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.prepare(Unknown Source) at org.apache.derby.impl.drda.DRDAStatement.explicitPrepare(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Cleanup action completed   ,0
4551,Allow database user to execute stored procedures with same permissions as database owner and/or routine definer    Curretnly there is no way to hide data and database structure in embedded derby from the end user. One way to accomplish the above requirement is as follows:1. Create encrypted database so data is protected2. Enable authentication and sql authorization in database3. Create two users  dbUser and dbOwner4. Store application logic as stored procedure in the databse so dbUser does not know what tables are accecced by the application logic  thus hiding table structure5. Revoke select permission from dbUser so he cannot describe tables thus protecting table structures6. Give only Execute permissions on stored procedures to dbUserThe above steps will ensure that data and data structure is hidden when application is delivered to end user.The problem is  if user does not have select permission  the stored procedures will not execute. So I am requesting the following enhancement to Derby:If dbOwner has given Execure permission to stored procecure to a dbUser  then allow stored procedure to execute even if the dbUser has no select permission. In otherwords  When dbUser calls stored procedure  database will use dbOwners authorization to execute stored procedure rather than dbUsers. This may be implemented by creating new permission called RunAsDbOwner.DbOwner can then grant permission to dbUser to execute a stored procedure with RunAsDbOwner.If this is implemented  applications can be created which will truely hide the database structure and data from end users. Database will behave as a blackbox with only in/out data exposed in stored procedures.   ,1
4554,Remove lang/scrollCursors1.sql    lang/scrollCursors1.sql was converted to JUnit in DERBY-2542. The canons were removed  but the original sql test file is still in the code. The sql file should also be removed.   ,0
4562,Complation of prepared statement results in Syntax Error    In attempting to upgrade our product from Derby 10.3.1.4 to 10.5.3.0  I simply replaced the derby jars - no change to java environment or code. I now experience a Syntax Error when preparing a statement that previously worked correctly.This statement:SELECT Offset  CMFragmentOID  CMContentOID  FragmentLength  Fragment FROM CMFragment  WHERE CMContentOID = ? AND Offset BETWEEN  (SELECT Offset FROM CMFragment WHERE CMContentOID = ? AND Offset &lt;= ? AND Offset + FragmentLength &gt; ?)  AND (SELECT Offset FROM CMFragment WHERE CMContentOID = ? AND Offset &lt; ? AND Offset + FragmentLength &gt;= ?) ORDER BY Offset ASCWhich should evaluate to the following after the parameters are provided:SELECT Offset  CMFragmentOID  CMContentOID  FragmentLength  Fragment FROM CMFragment  WHERE CMContentOID = -6915303484809802281 AND Offset BETWEEN  (SELECT Offset FROM CMFragment WHERE CMContentOID = -6915303484809802281 AND Offset &lt;= 0 AND Offset + FragmentLength &gt; 0)  AND (SELECT Offset FROM CMFragment WHERE CMContentOID = -6915303484809802281 AND Offset &lt; 131072 AND Offset + FragmentLength &gt;= 131072) ORDER BY Offset ASCFails with:Caused by: java.sql.SQLSyntaxErrorException: Syntax error: Encountered 'Offset' at line 1  column 202. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at com.paisley.foundation.sql.decorator.BaseConnectionDecorator.prepareStatement(BaseConnectionDecorator.java:349) at com.paisley.foundation.sql.decorator.batchvalidator.BatchValidatorConnection.prepareStatement(BatchValidatorConnection.java:152) at com.paisley.foundation.sql.decorator.BaseConnectionDecorator.prepareStatement(BaseConnectionDecorator.java:349) at com.paisley.foundation.database.connection.DatabaseConnection.prepareStatement(DatabaseConnection.java:960) at com.paisley.foundation.persistent.sql.PersistentQuery.execute(PersistentQuery.java:236) at com.paisley.rnj.content.model.CMFragment.load(CMFragment.java:254) ... 25 moreCaused by: java.sql.SQLException: Syntax error: Encountered 'Offset' at line 1  column 202. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 44 moreCaused by: ERROR 42X01: Syntax error: Encountered 'Offset' at line 1  column 202. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 38 moreThe failure position indicated is in this clause: AND Offset + FragmentLength &gt; ?This statement does work correctly in 10.3.1.4. It also works as a direct SQL statement  if I don't use a prepared statement  but execute the SQL above.   ,0
4569,failures in ij2 test with cdc/foundation (ibm's weme 6.2)    The test ij2.sql from derbyall is failing for weme6.2 like so:     Start: ij2 jdkWECE J2ME Foundation Specification v1.1 derbyall:derbytools 2010-02-25 04:11:05 ***31 del&lt; IJ ERROR: Unable to establish prepared statement S31a31&gt; IJ ERROR: Unable to establish prepared statement S@CONNECTION0Test Failed. End: ij2 jdkWECE J2ME Foundation Specification v1.1 derbyall:derbytools 2010-02-25 04:11:15 ***    I think this is expected after the change: ------------------------------------------------------------------------r916014 | rhillegas | 2010-02-24 14:39:49 -0800 (Wed  24 Feb 2010) | 1 lineDERBY-4550: Commit Sylvain Leroux's patch which adds qualified identifiers to ij.------------------------------------------------------------------------Looks like all that's needed is an update of java/testing/org/apache/derbyTesting/functionTests/master/j9_foundation/ij2.out.   ,0
4580,Cannot use dblook on soft-upgraded database: Table/View 'SYS.SYSSEQUENCES' does not exist.    I tried to use dblook on trunk to dump the schema of a database created with Derby 10.5. dblook printed the following message:&#8211; Timestamp: 2010-03-12 15:45:50.836&#8211; Source database is: db&#8211; Connection URL is: jdbc:derby:db&#8211; appendLogs: false&#8211; Note: At least one unexpected error/warning message was&#8211; encountered during DDL generation. See dblook.log&#8211; to review the message(s).In dblook.log  I saw an exception with this message:java.sql.SQLSyntaxErrorException: Table/View 'SYS.SYSSEQUENCES' does not exist.   ,0
4589,Corrupted database prevents startup and should be automatically repaired perhaps    I have found a database in my application that prevents startup due to it being corrupted. The driver reports that the database does not exist  even though it does. Then when my app tries to create the database using ;create=true; on the URL it fails.I think this happened due to the app being killed in Task Manager while it was creating the database.I have the database saved so that you can reproduce the problem. (I'm not sure if I can attach it yet)   ,0
4602,10 failures and 11 errors with IBM weme6.2/j9/cdc-foundation after revision 922304 for DERBY-4483    Since March 12 there's been 10 failures and 11 errors in the nightly test run with IBM's j2ME/CDC-foundation profile implementation  see: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-922467.html. Things were ok on March 10  see: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-921667.html.I believe these were the effect of the following checkin for DERBY-4483:r922304 | kahatlen | 2010-03-12 08:01:20 -0800 (Fri  12 Mar 2010) | 8 linesDERBY-4483: Provide a way to change the hash algorithm used by BUILTIN authenticationI'll attach the full failure stacks in a separate file  but I believe perhaps new tests have been added that need to be excluded from the run  because the provider doesn't support the intended mechanism.I'd also be interested to know if these same failures occur with Sun's/Oracle's phoneME.This is the top of the first error:-------------------1) testVariousBuiltinAlgorithms(org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest)java.sql.SQLException: The message digest algorithm 'SHA-256' is not supported by any of the available cryptography providers. Please install a cryptography provider that supports that algorithm  or specify another algorithm in the derby.authentication.builtin.algorithm property. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setDatabaseProperty(AuthenticationTest.java:1208) at org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setDatabaseProperty(AuthenticationTest.java:1218) at org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testVariousBuiltinAlgorithms(AuthenticationTest.java:1118)------------------The failures are likely a result of this - the stack shows issues like no cleaning up of databases etc.   ,1
4603,test testBuiltinAuthenticationWithConfigurableHash fails from upgradeTests.Changes10_6 with ibm's j9    With the patch for DERBY-4602 I saw one error with IBM's weme 6.2:1) testBuiltinAuthenticationWithConfigurableHash(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6)java.sql.SQLException: The message digest algorithm 'SHA-256' is not supported by any of the available cryptography providers. Please install a cryptography provider that supports that algorithm  or specify another algorithm in the derby.authentication.builtin.algorithm property. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2269) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1321) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1673) at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(EmbedCallableStatement.java:117) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1328) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.setPasswords(Changes10_6.java:442) at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.testBuiltinAuthenticationWithConfigurableHash(Changes10_6.java:384) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'SHA-256: java.security.NoSuchAlgorithmException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403) ... 111 moreCaused by: java.security.NoSuchAlgorithmException: SHA-256 at java.lang.Throwable.&lt;init&gt;(Throwable.java:67) at java.security.MessageDigest.getInstance(MessageDigest.java:204) at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.encryptPasswordConfigurableScheme(AuthenticationServiceBase.java:549) at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.encryptUsingDefaultAlgorithm(AuthenticationServiceBase.java:615) at org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.map(AuthenticationServiceBase.java:411) at org.apache.derby.iapi.services.property.PropertyValidation.doValidateApplyAndMap(PropertyValidation.java:81) at org.apache.derby.impl.store.access.PropertyConglomerate.validateApplyAndMap(PropertyConglomerate.java:384) at org.apache.derby.impl.store.access.PropertyConglomerate.setProperty(PropertyConglomerate.java:513) at org.apache.derby.impl.store.access.RAMTransaction.setProperty(RAMTransaction.java:1795) at org.apache.derby.iapi.db.PropertyInfo.setDatabaseProperty(PropertyInfo.java:108) at org.apache.derby.catalog.SystemProcedures.SYSCS_SET_DATABASE_PROPERTY(SystemProcedures.java:686) at org.apache.derby.exe.ac75629305x0127xb63ax3d55xfffff5235db30.g0(Unknown Source) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1232)   ,0
4619,PropertySetter fails due to an empty jre/lib directory    If a JDK directory with an empty jre/lib directory is chosen by the old algorithm for detecting JDKs on the build system  the build fails because the classpath is set to the empty string instead of the default (stubs and the higher level JDK classpath).The situation causing this problem can arise if a JDK with extension libs is uninstalled. Depending on the packaging system  this may leave the jre/lib/ext directory behind.   ,0
4621,Invalid conversion from Timestamp to String when calling setTimestamp() with Calendar    If you set a VARCHAR parameter with setTimestamp()  the string will be formatted differently depending on whether a Calendar is specified or not  even if the default calendar is used.Take for example this statement: VALUES CAST(? AS VARCHAR(30))I executed this statement twice with the same Timestamp instance. First like this: ps.setTimestamp(1  ts);and then like this ps.setTimestamp(1  ts  Calendar.getInstance());In this example  both of the methods should use the default Calendar to convert the timestamp to a string. However  I see that they generate different strings:2010-04-20 15:17:36.0 vs 2010-04-20 03:17:36Note there are two differences:1) The method that takes a Calendar object does not show the fraction part (.0)2) The method that takes a Calendar object is 12 hours off (03 instead of 15)   ,0
4624,Broken logic for avoiding testing across midnight in TimestampArithTest    TimestampArithTest's decorator has this code to avoid failures in case the test starts close to midnight: /* Make sure that we are not so close to midnight that TODAY might be yesterday before we are finished using it. */ while (calendar.get(Calendar.HOUR) == 23 &amp;&amp; calendar.get(Calendar.MINUTE) &gt;= 58) Unknown macro: { try { Thread.sleep((60 - calendar.get(Calendar.SECOND)) * 1000); } catch (InterruptedException ie) { // ignore it } } There are at least three problems with this code:1) (calendar.get(Calendar.HOUR) == 23) never evaluates to true  because calendar.get(Calendar.HOUR) returns values in the range 0-11. Calendar.HOUR_OF_DAY should be used instead.2) If the current time is after 23:58 and before 23:59  the code sleeps until 23:59  the test will wait until 23:59 before it starts  making it even more likely that it will cross midnight while running.3) The code is executed after the Calendar object has been initialized  so if this code is ever triggered and waits until after midnight  the TODAY field is guaranteed to be yesterday when the test starts executing.   ,0
4638,Expose names of top-level test suites for easier scripting    I sometimes run each of the top-level JUnit test suites individually so that they can be run in parallel and complete faster. It would be useful if AllPackages could expose the list of suites to allow scripting of such tasks without needing to change the script when a new suite is added.   ,0
4647,BaseTestCase.execJavaCmd() does not work with weme 6.2    Spawning a java process with BaseTestCase.execJavaCmd() does not work with weme 6.2  I think because the boot classpath does not get passed. This issue came up in DERBY-4179. After this issue is fixed  BootLockTest should be enabled for weme.The error is actually.JVMJ9VM011W Unable to load jclfoun10_24: The specified module could not be found.JVMEXEX013E Internal VM error: Failed to create Java VMJVMEXEX014I Run C:/cygwin/ibmsvn/ntsoftware/weme6.2/bin/j9.exe -help for usageexecJavaProcess does pick up the j9 executable but does not pass on the other settings.This is how my script invokes the test with j9. It probably has a lot of legacy system properties not needed  but I suppose execJavaCmd should just pass along all system properties  but I don't know how it would get the bootclasspath. Perhaps -Dbootcp was a way to pass it on in the old harness.c:/cygwin/ibmsvn/ntsoftware/weme6.2/bin/j9 -jcl:foun11 -DderbyTesting.serverhost=localhost -DderbyTesting.clienthost=localhost -Demma.active= -Xbootclasspath/a:c:/cygwin/ibmsvn/ntsoftware/weme6.2/lib/jdbc.jar -Dbootcp=c:/cygwin/ibmsvn/ntsoftware/weme6.2/lib/jdbc.jar junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.store.BootLockTest Otherwise  currently I think the method is only used in replication and network server  but am not sure.   ,0
4651,Hidden assumptions in FromVTI.makeRestriction()    FromVTI.makeRestriction() has this code to strip away Boolean constants from AND and OR expressions: // strip off trailing vacuous constant if present if ( andOperator.getRightOperand() instanceof BooleanConstantNode ) { return makeRestriction( andOperator.getLeftOperand()  columnNameMap ); }and // strip off trailing vacuous constant if present if ( orOperator.getRightOperand() instanceof BooleanConstantNode ) { return makeRestriction( orOperator.getLeftOperand()  columnNameMap ); }The code for AND will only work as expected if the right operand is TRUE. The code for OR only works correctly if the right operand is FALSE.I'm not sure if this can ever result in user-visible bugs  since Boolean constants are usually removed before we get to this point in the code. The predicate has probably been transformed to conjunctive normal form  in which Boolean constants in the right operand of an AndNode or an OrNode in fact is always TRUE or FALSE  respectively.I think this code either should be changed to work regardless of the value of the constant in the right operand  or the assumption that the predicate is on conjunctive normal form should be documented in the comments (and perhaps also checked in an assert statement).   ,0
4661,Reduce size of encoding buffer for short character values    When inserting character values Derby converts from Java char to an on-disk encoding of UTF-8. To to this  the user stream is read and the resulting bytes after conversion are placed in a 'translation buffer'. The default size of the buffer is 32 KB. When inserting a lot of short values  the pressure on the Java garbage collector is unnecessary high and the allocation/GC also causes a somewhat higher CPU usage.This effect of this issue can easily be reduced by sizing the buffer in the appropriate cases.   ,0
4663,Write a regression test to verify the behavior of ResultSet.getBoolean()    The JDBC spec partially defines the expected behavior of ResultSet.getBoolean(). It would be good to have a regression test which tracks Derby's actual implementation. For the moment  it appears that Derby conforms to the defined behavior  does something reasonable in the undefined cases  and behaves the same way in the embedded and client drivers.The behavior of ResultSet.getBoolean() does not appear to have been defined until JDBC 4. Here is the JDBC 4 javadoc:'If the designated column has a datatype of CHAR or VARCHAR and contains a '0' or has a datatype of BIT  TINYINT  SMALLINT  INTEGER or BIGINT and contains a 0  a value of false is returned. If the designated column has a datatype of CHAR or VARCHAR and contains a '1' or has a datatype of BIT  TINYINT  SMALLINT  INTEGER or BIGINT and contains a 1  a value of true is returned.' The behavior for those datatypes is not specified if the actual value is not 0 or 1. However  in a private communication I have the following statement of intent from Lance Andersen  the JDBC spec lead:'Note: Please refer to your driver documentation for the return value when the designated column contains a values other than '0'  0  '1' or 1.'In addition  the behavior for other datatypes is not specified. Some day it might be good if Derby's documentation described our behavior in the unspecified cases. Here it is:1) ResultSet.getBoolean() on LONG VARCHAR behaves like CHAR and VARCHAR2) ResultSet.getBoolean() on DECIMAL  REAL  DOUBLE  and NUMERIC behaves like INTEGER.3) Derby raises an exception if you call ResultSet.getBoolean() on BLOB  CHAR FOR BIT DATA  CLOB  DATE  LONG VARCHAR FOR BIT DATA  TIME  TIMESTAMP  or VARCHAR FOR BIT DATA.4) You can't even directly select an XML value.   ,0
4665,Unidiomatic error handling in TimestampArithTest    TimestampArithTest contains some error handling code that prevents the underlying error from being reported to the JUnit framework  and it may even terminate the JVM running the tests on some errors. Examples:This code prints the stack trace of the underlying error to the terminal  but it won't be included in the report from the JUnit framework: printStackTrace(sqle); fail('Unexpected exception from statement '' + sql + ''');This code terminates the JVM on error  preventing subsequent tests from running  and also preventing the JUnit framework to report the results from the tests that did run: } catch (Exception e) { System.out.println(s + ' is not a proper timestamp string.'); System.out.println(e.getClass().getName() + ': ' + e.getMessage()); e.printStackTrace(); System.exit(1); return null; }   ,0
4685,Dead/unreachable code in OpenConglomerate.lockPositionForWrite()    OpenConglomerate.lockPositionForWrite() contains this code twice: if (!waitForLock) { // throw lock timeout error. throw StandardException.newException(SQLState.LOCK_TIMEOUT); }The second occurrence of this code can never end up throwing an exception  since waitForLock is guaranteed to be true there because of the identical check a couple of lines above. (Judging by the similar method lockPositionForRead()  it is probably the first check that should be removed  so that the latch on the page is released before the exception is thrown.)Also  the method is always called with forInsert==false  so the forInsert parameter can be removed. (I also suspect that the method doesn't work correctly if ever used in an insert operation  since it calls latchPage(RowPosition) which will unlatch the page if the row isn't found on the page  and I assume that a row that is about to be inserted does not exist yet.)   ,0
4690,Too few arguments when generating AM_RECORD_NOT_FOUND error    The message for AM_RECORD_NOT_FOUND has three parameters  but all the methods that generate an exception with that message  only use two of them. So the generated message ends up looking like this:ERROR XSAM6: Record {2} on page 7 in container 625 not found.whereas it should have looked like this:ERROR XSAM6: Record 7 on page 1 in container 625 not found.I don't know if these messages ever make it all the way up to the application  since they are typically caught by this code block in TableScanResultSet: if (se.getMessageId().equals(SQLState.AM_RECORD_NOT_FOUND)) { // Somehow the row got deleted between the above // doesCurrentPositionQualify() call and here (one way is if // this scan is read uncommitted isolation level). return null; }But they may be logged in derby.log if the log severity level is set appropriately.   ,0
4692,Unions between BOOLEAN and non-BOOLEAN datatypes should be rejected    DERBY-4684 fixed problems in implicit casts to BOOLEAN. However  the query which created the implicit casts should raise an error for other reasons:select isindex from sys.sysconglomerates where conglomeratename = 'foo'unionvalues ( 'true' )This should fail because if either of the datatypes being UNIONed is BOOLEAN  then both should be BOOLEAN. Here is my reasoning  copied from the related discussion on DERBY:1) The rules for determining whether two datatypes are union compatible are stated in the SQL Standard in part 2  section 7.3 (&lt;query expression&gt;)  syntax rule 20.b.ii.2) That  in turn  refers the reader to section 9.3 (Result of data type combinations).3) Section 9.3  syntax rule 3.g says that if either of two values to be merged is BOOLEAN  then both must be BOOLEAN.   ,0
4693,column rename looses 'identity' attribute.    renaming an identity column causes the column to loose its 'identity' attribute.you can reproduce the problem as follows:CREATE TABLE njr_version ( id INTEGER generated always as identity  databaseVersion INTEGER);insert into njr_version (databaseVersion) values (10);&#8211; column inserted successfully.rename column njr_version.id to idVersion;insert into njr_version (databaseVersion) values (10);Error: Column 'IDVERSION' cannot accept a NULL value.To compound this problem there is no way to restore the renamed column's identity attribute as the alter command doesn't let you set an identity attribute. The only work around is to create a new table and copy the data across.   ,0
4695,Internal assignment of tablenumer  columnnumber looks wrong in query tree  although no ill effects are seen.    While looking into derby-4679  I also looked at the query inderby-2526 to validate that my changes also worked for that variant ofthe problem.During inspection of the query trees after the bind phase  I found oneinstance in which the pair (tablenumber  columnnumber) of a columnreference was wrong. Although it did not seem to impact the queryresult  I note it here as as something we should probably investiateas it may be a symptom an underlying problem  or a potential forfuture problems.The query looks like this:select b3.* from b3 join bvw on (b3.c8 = bvw.c5) join b4 on (bvw.c1 = b4.c7) where b4.c4 = 42'and the underlying DDL is this:create table b2 (c1 int  c2 int  c3 char(1)  c4 int  c5 int  c6 int);create table b4 (c7 int  c4 int  c6 int);create table b3 (c8 int  c9 int  c5 int  c6 int);create table b (c1 int  c2 int  c3 char(1)  c4 int  c5 int  c6 int);create view bvw (c5  c1  c2  c3  c4) asselect c5  c1  c2  c3  c4 from b2 unionselect c5  c1  c2  c3  c4 from b;create view bvw2 (c1  c2  c3  c4  c5) asAfter the bind phase  the join clause 'bvw.c1 = b4.c7' has thefollowing entry for the column reference bvw.C1: tableNumber: 1 columnNumber: 6The problem is that the node with tablenumber 1 is bvw  which is theview with the subquery for the union  which has only 5 resultingcolumns  so 6 must be wrong. Although both the view participant tables(b  b2) both have six column  the view does not. In any case  C1 iscolumn 2 in the view and column 2 in the two union selects from both band b2.C1 is however  column 6 of the join node resulting from 'select b3.*from b3 join bvw on (b3.c8 = bvw.c5)'  but the correct table number forthat would be 5  not 1.So  it would seem the table number has been bound to the bvw view'sresult set  but the column number has been bound to the innermost joinnode's result set. This looks worrying to me.See derby.log attached for the full dump of the query tree after thebind phase.sourceResultSet:  org.apache.derby.impl.sql.compile.FromSubquery@12789d2 correlation Name: BVW null tableNumber 1 &lt;------------------------------------------- Note! level 0 resultSetNumber: 0 referencedTableMap: null statementResultSet: false resultColumns:  org.apache.derby.impl.sql.compile.ResultColumnList@c943d1 indexRow: false orderBySelect: 0 &#91;0&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@d3c6a3 **truncated** &#91;1&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@18352d8 exposedName: C1 name: C1 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: INTEGER columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 2 resultSetNumber: -1 dataTypeServices: INTEGER expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@b40ec4 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@1d95da8 **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** &#91;2&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@13576a2 exposedName: C2 name: C2 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: INTEGER columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 3 resultSetNumber: -1 dataTypeServices: INTEGER expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@ff8c74 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@61736e **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** &#91;3&#93;:  org.apache.derby.impl.sql.compile.ResultColumn@15e2ccd exposedName: C3 name: C3 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: CHAR(1) columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 4 resultSetNumber: -1 dataTypeServices: CHAR(1) expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@1cf7491 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@11946c2 **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** &#91;4&#93;: &lt;----------------------------------------- highest column number is 5 (index is zero-based) org.apache.derby.impl.sql.compile.ResultColumn@edf730 exposedName: C4 name: C4 tableName: null isDefaultColumn: false wasDefaultColumn: false isNameGenerated: false sourceTableName: B2 type: INTEGER columnDescriptor: null isGenerated: false isGeneratedForUnmatchedColumnInInsert: false isGroupingColumn: false isReferenced: true isRedundant: false virtualColumnId: 5 resultSetNumber: -1 dataTypeServices: INTEGER expression:  org.apache.derby.impl.sql.compile.VirtualColumnNode@ff94b1 dataTypeServices: null sourceColumn:  org.apache.derby.impl.sql.compile.ResultColumn@17a4989 **truncated** sourceResultSet:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated** subquery:  org.apache.derby.impl.sql.compile.UnionNode@14d7745 **truncated**   ,0
4700,Add method to obtain a bogus port in TestConfiguration    In some cases one needs to obtain a port number on which there is no Derby network server.Today this is solved in an ad-hoc way  for instance by using the current port minus one. When running tests in parallel  there is a chance that a port where there actually is a Derby network server listening is picked.As a start  I suggest that the bogus port is allocated to the last port in the port range configured for the run: baseport + MAX_PORTS_USED -1.   ,0
4712,Complex nested joins problems    I ran a randomized test for nested joins against PostgreSQL  Derby  and H2  and found some problems with Derby. The queries below throw NullPointerExceptions; the last query an assertion. The test case is here: http://code.google.com/p/h2database/source/browse/trunk/h2/src/test/org/h2/test/db/TestNestedJoins.java . There are probably shorter queries that are problematic  but I can't test it because Derby closes the connection after the assertion.create table t0(x int);create table t1(x int);create table t2(x int);create table t3(x int);create table t4(x int);insert into t4 values(0);insert into t4 values(1);insert into t4 values(2);insert into t4 values(3);create table t5(x int);insert into t5 values(0);insert into t5 values(1);insert into t5 values(2);insert into t5 values(3);insert into t5 values(4);create table t6(x int);insert into t6 values(0);insert into t6 values(1);insert into t6 values(2);insert into t6 values(3);insert into t6 values(4);insert into t6 values(5);create table t7(x int);insert into t7 values(0);insert into t7 values(1);insert into t7 values(2);insert into t7 values(3);insert into t7 values(4);insert into t7 values(5);insert into t7 values(6);create table t8(x int);insert into t8 values(0);insert into t8 values(1);insert into t8 values(2);insert into t8 values(3);insert into t8 values(4);insert into t8 values(5);insert into t8 values(6);insert into t8 values(7);create table t9(x int);insert into t9 values(0);insert into t9 values(1);insert into t9 values(2);insert into t9 values(3);insert into t9 values(4);insert into t9 values(5);insert into t9 values(6);insert into t9 values(7);insert into t9 values(8);insert into t0 values(1);insert into t1 values(2);insert into t0 values(3);insert into t1 values(3);insert into t2 values(4);insert into t0 values(5);insert into t2 values(5);insert into t1 values(6);insert into t2 values(6);insert into t0 values(7);insert into t1 values(7);insert into t2 values(7);insert into t3 values(8);insert into t0 values(9);insert into t3 values(9);insert into t1 values(10);insert into t3 values(10);insert into t0 values(11);insert into t1 values(11);insert into t3 values(11);insert into t2 values(12);insert into t3 values(12);insert into t0 values(13);insert into t2 values(13);insert into t3 values(13);insert into t1 values(14);insert into t2 values(14);insert into t3 values(14);insert into t0 values(15);insert into t1 values(15);insert into t2 values(15);insert into t3 values(15);select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x   t7.x   t8.x from (((t0 inner join ((t1 right outer join (t2 inner join t3 on t2.x = t3.x ) on t1.x = t2.x ) left outer join (t4 inner join t5 on t4.x = t5.x ) on t1.x = t4.x ) on t0.x = t2.x ) left outer join (t6 inner join t7 on t6.x = t7.x ) on t1.x = t6.x ) inner join t8 on t5.x = t8.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x   t7.x from ((t0 right outer join t1 on t0.x = t1.x ) inner join (((t2 inner join (t3 left outer join t4 on t3.x = t4.x ) on t2.x = t3.x ) right outer join t5 on t2.x = t5.x ) left outer join (t6 inner join t7 on t6.x = t7.x ) on t4.x = t6.x ) on t0.x = t5.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x   t7.x from ((((t0 left outer join t1 on t0.x = t1.x ) right outer join t2 on t0.x = t2.x ) right outer join t3 on t0.x = t3.x ) inner join ((t4 inner join t5 on t4.x = t5.x ) right outer join (t6 right outer join t7 on t6.x = t7.x ) on t4.x = t6.x ) on t1.x = t4.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x from (((t0 inner join t1 on t0.x = t1.x ) right outer join (t2 right outer join t3 on t2.x = t3.x ) on t0.x = t2.x ) inner join (t4 left outer join t5 on t4.x = t5.x ) on t1.x = t4.x );select t0.x   t1.x   t2.x   t3.x   t4.x   t5.x   t6.x from ((t0 right outer join (t1 right outer join (t2 left outer join (t3 left outer join t4 on t3.x = t4.x ) on t2.x = t3.x ) on t1.x = t3.x ) on t0.x = t1.x ) left outer join (t5 inner join t6 on t5.x = t6.x ) on t2.x = t5.x );   ,0
4716,Enable BOOLEAN typed columns    Allow tables to have boolean columns.   ,0
4729,add more information to the XACT_PROTOCOL_VIOLATION returned from store.    Improve the following message:ERROR 40XT0: An internal error was identified by RawStore module.At least add the state variables. Originally it wasn't expected that this error would ever fire  but it often does. It usuallyis caused by some previous bug and then something going wrong with the cleanup after the bug in an XA transaction.   ,0
4748,StringIndexOutOfBoundsException on syntax error (invalid COMMIT)    Start the network server on port 1527 on localhost.Run ant on the following:&lt;project default='all'&gt;  &lt;property environment='env' /&gt;  &lt;path id='derby.classpath.id'&gt;  &lt;fileset dir='${env.DERBY_LIB'&gt;  &lt;include name='derbynet.jar' /&gt;  &lt;include name='derbyclient.jar' /&gt;  &lt;/fileset&gt;  &lt;/path&gt;  &lt;target name='all'&gt;  &lt;sql driver='org.apache.derby.jdbc.ClientDriver' url='jdbc:derby://localhost:1527/derbyDB;create=true;user=derbyuser;passsword=derbypwd'  userid='derbyuser'  password='derbypwd'  classpathref='derby.classpath.id'  onerror='continue'&gt;create table mytable1 (mycol varchar(255)); commit;  &lt;/sql&gt;  &lt;/target&gt; &lt;/project&gt; On 10.5.3  I get &#91;sql&#93; Executing commands  &#91;sql&#93; Failed to execute: commit  &#91;sql&#93; java.sql.SQLSyntaxErrorException: Syntax error: Encountered 'commit'  at line 1  column 1.  &#91;sql&#93; 1 of 2 SQL statements executed successfully but on 10.6.1  I get &#91;sql&#93; Executing commands BUILD FAILED java.lang.StringIndexOutOfBoundsException: String index out of range: 6  at java.lang.String.charAt(String.java:686)  at org.apache.derby.client.am.Statement.isolateAnyInitialIdentifier(Unknown Source)  at org.apache.derby.client.am.Statement.getStatementToken(Unknown Source)  at org.apache.derby.client.am.Statement.parseSqlAndSetSqlModes(Unknown Source) ....   ,0
4752,CheapDateFormatter returns incorrect and invalid date strings    CheapDateFormatter has multiple problems. These are the ones I'm aware of:1) On the boundary between non-leap years and leap years it will return first day of thirteenth month in previous year (for instance  2011-13-01 instead of 2012-01-01)2) It treats all years divisible by four as leap years. Those divisible by 100 and not by 400 are not leap years. It attempts to adjust for that (see the snippet below) but it always ends up setting leapYear=true if (year%4)==0. // It's a leap year if divisible by 4  unless divisible by 100  // unless divisible by 400. if ((year % 4L) == 0) { if ((year % 100L) == 0) { if ((year % 400L) == 0) { leapYear = true; } } leapYear = true; }3) More leap year trouble. To find out which year it is  it calculates the number of four year periods that have elapsed since 1970-01-01. A four year period is considered 365*3+366 days. Although most four year periods are of that length  some are shorter  so we'll get one day off starting from year 2100  two days off from year 2200  and so on.   ,0
4755,DERBY-4601 added a new message to derby.log during engine shutdown and it changed the database shutdown message. Need to update docs with that information    DERBY-4601 added a new message to derby.log during engine shutdown and it changed the database shutdown message. Need to update docs with that information. I have found 2 places in our docs where we show examples of shutdown messages1)In Getting started Guide  under Creating a Derby database and running SQL statements section  we show a typical startup and shutdown message. That section will need to change2)In Derby Developer's Guide  under section Derby System -&gt; Shutting down the systemAn eg of engine shutdown message in derby.log is2010-07-23 18:59:24.078 GMT Thread&#91;main 5 main&#93; :Shutting down Derby EngineAn eg of database shutdown message is as follows2010-07-20 17:23:55.171 GMT:Shutting down instance 80220011-0129-f0e1-f479-0000000c5ef0 on database directory C:/p4clients/svnmain/client2/trunk/systest/out142/dbs/tours3 with class loader sun.misc.Launcher$AppClassLoader@3f6e3f6e (Notice that this message includes the name of the db getting shutdown. Before the changes for DERBY-4601 went in  we didn't include the name of the database)   ,0
4760,test failure in derbynet/testProtocol.java with ibm jvms    On Friday  I saw this failure:     Start: testProtocol jdk1.6.0 DerbyNetClient derbynetmats:derbynetmats 2010-07-31 00:18:53 ***308 add&gt; Test UNICODEMGR at level 1208 while sending UTF8 characters in RDBNAM&gt; PASSED&gt; Test UNICODEMGR at level 1208 while sending UTF8 characters in USRID and PASSWORD&gt; PASSED&gt; Test setting RDBNAM at ACCSEC *and* at SECCHK&gt; PASSEDTest Failed.    I assume it's related to the check-in for DERBY-4746 (revision 980800).   ,0
4764,Files with missing ASF license headers    There are some files (consisting of creative works) without license headers in the repository. Some files are also using a different text for the Apache License header then the other files.I plan to add the license header after having verified that the files were uploaded to Jira with the grant license to ASF bullet ticked.The list of files I have identified so far  grouped based on the assumed action required.&#8212; Add license headerjava/testing/org/apache/derbyTesting/functionTests/tests/memory/TriggerTests.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINScanPropsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINResultSetDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINStatementTimingsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINSortPropsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINResultSetTimingsDescriptor.javajava/engine/org/apache/derby/impl/sql/catalog/XPLAINTableDescriptor.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINSystemTableVisitor.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINDefaultVisitor.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINFactory.javajava/engine/org/apache/derby/impl/sql/execute/xplain/XPLAINUtil.javajava/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINFactoryIF.javajava/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINable.javajava/engine/org/apache/derby/iapi/sql/execute/xplain/XPLAINVisitor.javajava/tools/org/apache/derby/tools/PlanExporter.javajava/tools/org/apache/derby/impl/tools/planexporter/TreeNode.javajava/tools/org/apache/derby/impl/tools/planexporter/AccessDatabase.javajava/tools/org/apache/derby/impl/tools/planexporter/CreateHTMLFile.javajava/tools/org/apache/derby/impl/tools/planexporter/CreateXMLFile.java&#8212; Update license headerjava/engine/org/apache/derby/impl/services/jmxnone/NoManagementService.javajava/engine/org/apache/derby/impl/services/jmx/JMXManagementService.javajava/engine/org/apache/derby/iapi/services/jmx/ManagementService.java&#8212; Consider adding headerjava/shared/org/apache/derby/shared/common/sanity/SanityState.javajava/shared/org/apache/derby/shared/common/sanity/SanityState.tmpljava/tools/org/apache/derby/impl/tools/planexporter/resources/advancedViewXSL.xsljava/tools/org/apache/derby/impl/tools/planexporter/resources/vanilla_html.xsljava/tools/org/apache/derby/impl/tools/planexporter/resources/advancedViewXSL2.xslThe SanityState classes seem to come from somewhere. Does anyone have the history? Can we add the ASF license header?The xsl files also look like creative works to me. Any objections on that?   ,0
4779,NPE while inserting into a table which has a generated column and an insert trigger    The following script generates an NPE on the concluding insert:connect 'jdbc:derby:memory:dummy;create=true';create function getRegion( v int )returns varchar( 20 )language java parameter style java deterministic no sqlexternal name 'java.lang.Integer.toString';create table orders( orderID bigint primary key  salesPrice int not null  region generated always as ( getRegion( salesPrice ) ));create table dummy( a int );create trigger newOrderTriggerafter insert on ordersfor each rowinsert into dummy( a ) values ( 1 );insert into orders( orderID  salesPrice ) values ( 1  2 );------------------------Here is the NPE:java.lang.NullPointerException at org.apache.derby.impl.sql.execute.DMLWriteResultSet.objectifyStreams(Unknown Source) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)   ,0
4796,Missing escape for apostrophes in many messages    The properties file format requires that single-quote characters are escaped with an extra single-quote. A number of messages don't follow this rule.Take this example from the Italian localization:42X34=Esiste un parametro ? nell'elenco di selezione. Ci/u00F2 non /u00E8 consentito.Note that there's only a single apostrophe in 'nell'elenco' above. When this message is printed  the apostrophe will be omitted:$ LC_ALL=it_IT.UTF-8 java -jar derbyrun.jar ijVersione ij 10.6ij&gt; connect 'jdbc:derby:db;create=true';ij&gt; select ? from sys.systables;ERRORE 42X34: Esiste un parametro ? nellelenco di selezione. Ci�_۴__ non �_۴_� consentito.We should go through the message files and add extra apostrophes where they are missing.   ,0
4803,Sequences do not work in INSERT/SELECT    Using sequence in SELECT works fine whereas the same SELECT query used in INSERT/SELECT results in 'The statement references the following sequence more than once' error. This happens even though the SELECT in question returns exactly 1 row of data.The Reference Manual states 1. ' NEXT VALUE FOR expression may occur in the following places: SELECT statement: As part of the expression defining a returned column in a SELECT list' and 2. ' NEXT VALUE expression may not appear in any of these situations: CASE expression  WHERE clause  ORDER BY clause  Aggregate expression  ROW_NUMBER function  DISTINCT select list'.Nowhere a restriction on INSERT/SELECT is mentioned. Additionally  other databases (i.e. Oracle) support use of sequences in INSERT/SELECT.Therefore  I consider it a bug.   ,0
4810,setTimestamp() methods don't agree on trailing zeros    With the statement VALUES CAST(? AS VARCHAR(29))PreparedStatement.setTimestamp(int Timestamp) and PreparedStatement.setTimestamp(int Timestamp Calendar) don't agree on what to do with trailing zeros in the nanosecond component. The method that doesn't take a Calendar argument  removes trailing zeros. The method that takes a Calendar object appends zeros so that the nanosecond component always has nine digits. (Both methods have a special case when nanoseconds is zero  and they agree on adding just a single zero after the decimal point in that case.)The format used by PreparedStatement.setTimestamp(int Timestamp) matches what java.sql.Timestamp.toString() returns (in fact  it uses Timestamp.toString() internally to produce the string representation)  and I think it would be reasonable to use that format for both the methods.   ,0
4812,ReplicationMessageTransmit run does not unwrap PrivilegedActionException which can lead to failure of replicationTests.ReplicationRun_Local_StateTest_part1_1    One of our nightly tests failed with the exception (db path slightly edited) below.Looking at the source of org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.run  it seems that the code does not completely unwrap the PrivilegedActionException (compared to how this is done in for example org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests.getFileInputStream()).It could be that the test is looking for the java.io.IOException  which it doesn't get (it gets the PrivilegedActionException instead).----------------------1) testReplication_Local_StateTest_part1_1(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1)junit.framework.AssertionFailedError: Got -1 XRE42 DERBY SQL error: SQLCODE: -1  SQLSTATE: XRE42  SQLERRMC: Replicated database '/test/results/db_slave/wombat' shutdown.. Expected XRE41 at java.lang.Throwable.&lt;init&gt;(Throwable.java:67) at junit.framework.AssertionFailedError.&lt;init&gt;(AssertionFailedError.java:11) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.assertException(ReplicationRun.java:3427) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1._testPostStartedMasterAndSlave_StopSlave(ReplicationRun_Local_StateTest_part1_1.java:150) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.testReplication_Local_StateTest_part1_1(ReplicationRun_Local_StateTest_part1_1.java:134) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:201) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)----------------------The exception in the db_master-derby.log was:------------------------Database Class Loader started - derby.database.classpath=''---- BEGIN REPLICATION ERROR MESSAGE (9/13/10 9:40 AM) ----Replication slave got a fatal error for database '/test/results/db_master/wombat'. Replication will be stopped.ERROR XRE04: Could not establish a connection to the peer of the replicated database '/test/results/db_master/wombat' on address 'localhost:8888'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Caused by: java.security.PrivilegedActionException: java.net.ConnectException: Connection refused at java.security.AccessController.doPrivileged(AccessController.java:255) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) ... 17 moreCaused by: java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:352) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:214) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:201) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:378) at java.net.Socket.connect(Socket.java:528) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:251) ... 18 more============= begin nested exception  level (1) ===========java.security.PrivilegedActionException: java.net.ConnectException: Connection refused at java.security.AccessController.doPrivileged(AccessController.java:255) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)Caused by: java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:352) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:214) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:201) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:378) at java.net.Socket.connect(Socket.java:528) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:251) ... 18 more============= end nested exception  level (1) ======================== begin nested exception  level (2) ===========java.net.ConnectException: Connection refused at java.net.PlainSocketImpl.socketConnect(Native Method) at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:352) at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:214) at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:201) at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:378) at java.net.Socket.connect(Socket.java:528) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(AccessController.java:251) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source) at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source) at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)============= end nested exception  level (2) ===========   ,0
4815,Override mechanism for modules.properties works backwards    It is possible to override the properties in org/apache/derby/modules.properties by putting your own version of it somewhere on the classpath. BaseMonitor.getDefaultModuleProperties() apparently intends to use values from the first modules.properties file that mentions a property: String key = (String) newKeys.nextElement(); if( moduleList.contains( key)) // RESOLVE how do we localize messages before we have finished initialization? report( 'Ignored duplicate property ' + key + ' in ' + modulesPropertiesURL.toString()); else moduleList.setProperty( key  otherList.getProperty( key));However  moduleList.contains(key) doesn't look for a key in moduleList  it looks for a property value. This code should have used containsKey() instead.Beacuse of this  the last modules.properties on the classpath will take precedence over the ones earlier on the classpath. So if you for example have two different versions of derby.jar in the classpath  the engine will use the classes from the first jar and modules.properties from the last jar.   ,0
4847,Errors should be displayed if using wrong CLASSPATH to make documentation target for release    When making Derby documentation for 10.6.2.1 release  no error was prompt when wrong version of java is being used or wrong value for CLASSPATH.In order to make Derby documentation  the release manager has to set CLASSPATH to include: fop.jar  avalon-framework-cvs-20020806.jar  and batik.jar files located in %DOC_ROOT%/trunk/lib/ for PDF output. When using wrong CLASSPATH to build pdf documentation  no error was prompt and no PDF output was created. Error will be more intuitive that the build was not successful.   ,0
4849,Re-compilation may cause duplicate entries in the XPLAIN table    If happening at the right moment  a re-compilation request may cause duplicate entries in the XPLAIN statement tables.I have only confirmed this for the SYSXPLAIN_STATEMENTS table  and I do not know if the other XPLAIN tables are affected.The error is highly intermittent  and so far I have only been able to trigger it when testing the automatic index statistics update prototype.See the attached stack-trace for some more details.   ,0
4859,Missing doPrivileged in DatabaseClasses.WriteClassFile()    One of my test runs failed with the following error:1) testAllUncommittedReclaim(org.apache.derbyTesting.functionTests.tests.store.AccessTest)java.sql.SQLException: Java exception: 'access denied (java.io.FilePermission /export/home/tmp/kh160127/derbyall/system/ac72985692x012bxc9d4x9594xffffa08cb27a0.class write): java.security.AccessControlException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)(...)Caused by: java.security.AccessControlException: access denied (java.io.FilePermission /export/home/tmp/kh160127/derbyall/system/ac72985692x012bxc9d4x9594xffffa08cb27a0.class write) at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) at java.security.AccessController.checkPermission(AccessController.java:546) at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) at java.lang.SecurityManager.checkWrite(SecurityManager.java:962) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:169) at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:131) at org.apache.derby.impl.services.reflect.DatabaseClasses.WriteClassFile(Unknown Source) at org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(Unknown Source)(...)I think the underlying error is an OutOfMemoryError  because I have seen tests running out of permgen space with the same configuration lately. But that error never gets all the way out to the test framework because of the above file permission error.When DatabaseClasses.loadGeneratedClass() fails with a LinkageError or a VirtualMachineError (the super-class of OutOfMemoryError)  it attempts to dump the generated class to disk. But since the tests run under a security manager  and the code writes the class to disk isn't wrapped in a privileged block  the dumping of extra debug info fails and hides the original error.   ,1
4866,Simplify SYSCS_BULK_INSERT with IdUtil.mkQualifiedName()    SystemProcedures.SYSCS_BULK_INSERT contains this piece of code: String entityName = IdUtil.normalToDelimited(tableName); if (schemaName != null) { entityName = IdUtil.normalToDelimited(schemaName) + '.' + entityName; }The helper method IdUtil.mkQualifiedName() could do the exact same in one line.   ,0
4873,NullPointerException in testBoundaries with ibm jvm 1.6    With the line skipping the testBoundaries fixture of the InternationalConnectTest commented out  I get the following stack when I run the test with ibm 1.6:1) testBoundaries(org.apache.derbyTesting.functionTests.tests.jdbcapi.InternationalConnectTest)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:149) at java.sql.DriverManager.getConnection(DriverManager.java:322) at java.sql.DriverManager.getConnection(DriverManager.java:273) at org.apache.derbyTesting.functionTests.tests.jdbcapi.InternationalConnectTest.testBoundaries(InternationalConnectTest.java:111) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ001  SQLERRMC: java.lang.NullPointerExceptionXJ001.U at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2117) at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:541) at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:434) at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:297) at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121) at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:846) at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:769) at org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(NetConnection.java:601) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:408) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(NetConnection.java:218) at org.apache.derby.client.net.NetConnection40.&lt;init&gt;(NetConnection40.java:77) at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:140) ... 35 moreThis is after the latest check in for DERBY-4836 (revision 1028035).I'll attach derby.log.   ,0
4880,Unchecked warnings in JMXManagementService and VTI demos    These warnings I only see if java15compile.classpath points to Java 6 class libraries (either set explicitly in ant.properties  or implicitly by the property setter): &#91;javac&#93; /code/derby/trunk2/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java:215: warning: &#91;unchecked&#93; unchecked conversion &#91;javac&#93; found : java.lang.Class &#91;javac&#93; required: java.lang.Class&lt;java.lang.Object&gt; &#91;javac&#93; new StandardMBean(bean  beanInterface) { &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java:215: warning: &#91;unchecked&#93; unchecked method invocation: &lt;T&gt;StandardMBean(T java.lang.Class&lt;T&gt;) in javax.management.StandardMBean is applied to (java.lang.Object java.lang.Class) &#91;javac&#93; new StandardMBean(bean  beanInterface) { &#91;javac&#93; ^ &#91;javac&#93; 2 warnings &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/core/QueryVTIHelper.java:185: warning: &#91;unchecked&#93; unchecked call to getMethod(java.lang.String java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( methodName  new Class[] { String.class } ); &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java:253: warning: &#91;unchecked&#93; unchecked call to getMethod(java.lang.String java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( methodName  new Class[] { String.class } ); &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java:260: warning: &#91;unchecked&#93; unchecked call to getConstructor(java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( new Class[] { String.class  String.class  String[].class } ); &#91;javac&#93; ^ &#91;javac&#93; /code/derby/trunk2/java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/Subscription.java:278: warning: &#91;unchecked&#93; unchecked call to getMethod(java.lang.String java.lang.Class&lt;?&gt;...) as a member of the raw type java.lang.Class &#91;javac&#93; ( methodName  new Class[] {} ); &#91;javac&#93; ^ &#91;javac&#93; 4 warnings   ,0
4888,ClassCastException when calling boolean meta-data functions with 10.7 client against 10.6 server    I noticed that DESCRIBE didn't work when I tried to connect to a 10.6 server with ij/client driver at version 10.7.ij&gt; describe t;JAVA ERROR: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Booleanjava.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean at org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBoolean(DatabaseMetaData.java:2401) at org.apache.derby.client.am.DatabaseMetaData.storesLowerCaseIdentifiers(DatabaseMetaData.java:191) at org.apache.derby.impl.tools.ij.ij.caIdentifier(ij.java:3040) at org.apache.derby.impl.tools.ij.ij.DescTableStatement(ij.java:1624) at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1121) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:341) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:261) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59) at org.apache.derby.iapi.tools.run.main(run.java:53)   ,0
4895,Thread local TableDescriptor#referencedColumnMap is not removed from app threads when Derby is shut down    &gt; This has been seen to cause error messages in TomCat  cf. this quote from a mail on derby-user:&gt; &gt; http://mail-archives.apache.org/mod_mbox/db-derby-user/201011.mbox/%3C7800E37B639BC345BC2AB40980B7C529180FB525@MERCMBX03R.na.SAS.com%3E&gt; &gt; SEVERE: The web application &#91;/MyApp&#93; created a ThreadLocal with key of type [org.apache.derby.iapi.sq/&gt; l.dictionary.TableDescriptor$1] (value &#91;org.apache.derby.iapi.sql.dictionary.TableDescriptor$1@d133a3&#93;)/&gt; and a value of type &#91;java.util.WeakHashMap&#93; (value [{={1  2  3  4}  =null  =null}]) but failed to remo/&gt; ve it when the web application was stopped. This is very likely to create a memory leak.   ,0
4899,Refactor access to primary structures in AlterTableConstantAction    Many of the private methods in impl.sql.execute.AlterTableConstantAction take the activation (and sometimes a number of references obtained through it) as an argument. This seems unnecessary  and it clutters the code with argument passing  boilerplate code and variable hiding.   ,0
4907,EmbeddedXADataSource with ;create=true attribute set in setDatabaseName fails with java.sql.SQLException: Database not available    Setting the ;create=true attribute in setDatabaseName with EmbededXADataSource and EmbeddedXADataSource40 fails with $ java TestDerbyCreateException in thread 'main' java.sql.SQLException: Database not available at org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(EmbededXADataSource.java:175) at org.apache.derby.jdbc.EmbeddedXADataSource.getXAConnection(EmbeddedXDataSource.java:101) at TestDerbyCreate.main(TestDerbyCreate.java:18)using the create attributie in databaseName works fine with EmbeddedDataSource. Using setCreateDatabase('create') with EmbeddedXADataSource is a good work around and I think generally preferable.import java.sql.*;import javax.sql.*;public class TestDerbyCreate{ public static void main(String[] args) throws Throwable { org.apache.derby.jdbc.EmbeddedXADataSource ds = new org.apache.derby.jdbc.EmbeddedXADataSource(); ds.setDatabaseName('TestDB;create=true'); ds.setUser('dbuser1'); ds.setPassword('dbpwd1'); PooledConnection pooledConn = ds.getXAConnection(); Connection conn = pooledConn.getConnection(); System.out.println('Database product: ' + conn.getMetaData().getDatabaseProductName()); System.out.println('Database version: ' + conn.getMetaData().getDatabaseProductVersion()); System.out.println('Driver name: ' + conn.getMetaData().getDriverName()); System.out.println('Driver version: ' + conn.getMetaData().getDriverVersion()); System.out.println('JDBC driver major ve   ,0
4910,Four replication tests fail on z/OS with junit.framework.AssertionFailedError: startMaster did not succeed.    Four replication tests failed with junit.framework.AssertionFailedError: startMaster did not succeed. running on the 64bit JVM on z/OS:ReplicationRun_Local_3_p2 ReplicationRun_Local_StateTest_part1ReplicationRun_Local_3_p3 ReplicationRun_Local_StateTest_part1_2Below are the stack traces. I will attach the fail directory.There were 4 failures:1) testReplication_Local_StateTest_part1(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreStartedMaster(ReplicationRun_Local_StateTest_part1.java:375) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1.testReplication_Local_StateTest_part1(ReplicationRun_Local_StateTest_part1.java:136) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)2) testReplication_Local_StateTest_part1_2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.testReplication_Local_StateTest_part1_2(ReplicationRun_Local_StateTest_part1_2.java:128) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)3) testReplication_Local_3_p2_StateTests_bigInsert_sleepBeforeStopMaster(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p2)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p2.replication_Local_3_p2_StateTests(ReplicationRun_Local_3_p2.java:128) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p2.testReplication_Local_3_p2_StateTests_bigInsert_sleepBeforeStopMaster(ReplicationRun_Local_3_p2.java:248) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)4) testReplication_Local_3_p3_StateNegativeTests(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3)junit.framework.AssertionFailedError: startMaster did not succeed. at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(ReplicationRun.java:1072) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(ReplicationRun.java:906) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3.testReplication_Local_3_p3_StateNegativeTests(ReplicationRun_Local_3_p3.java:128) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:207) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)FAILURES!!!Tests run: 13032  Failures: 4  Errors: 0   ,0
4911,restoreIntrFlagIfSeen may throw ShutdownException causing confusing console stack trace at server shutdown    Exception in thread 'DRDAConnThread_508'org.apache.derby.iapi.error.ShutdownException: at org.apache.derby.iapi.services.context.ContextManager.checkInterrupt(ContextManager.java:437) at org.apache.derby.iapi.services.context.ContextManager.getContext(ContextManager.java:155) at org.apache.derby.iapi.services.context.ContextService.getContextOrNull(ContextService.java:249) at org.apache.derby.iapi.util.InterruptStatus.restoreIntrFlagIfSeen(InterruptStatus.java:158) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:356) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2284) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.closeActions(EmbedPreparedStatement.java:261) at org.apache.derby.impl.jdbc.EmbedStatement.close(EmbedStatement.java:307) at org.apache.derby.impl.drda.DRDAStatement.close(DRDAStatement.java:1027) at org.apache.derby.impl.drda.Database.close(Database.java:364) at org.apache.derby.impl.drda.Session.close(Session.java:115) at org.apache.derby.impl.drda.DRDAConnThread.closeSession(DRDAConnThread.java:8289) at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:315)   ,0
4912,Instability in Derby2017LayerBTest    Seen on 10.7 RC1:testFailedStreamInsertBinaryAutoCommitRollbackOnError(org.apache.derbyTesting.functionTests.tests.jdbc4.Derby2017LayerBTest) FAILURE:junit.framework.AssertionFailedError: Column value mismatch @ column 'B'  row 1: Expected: &gt;5468697320697320726f772031&lt; Found: &gt;5468697320697320726f772036&lt; at junit.framework.Assert.fail(Assert.java:47) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1213) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1125) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1012) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850) at org.apache.derbyTesting.functionTests.tests.jdbc4.Derby2017LayerBTest.doInsertTest(Derby2017LayerBTest.java:493) at org.apache.derbyTesting.functionTests.tests.jdbc4.Derby2017LayerBTest.testFailedStreamInsertBinaryAutoCommitRollbackOnError(Derby2017LayerBTest.java:315)   ,0
4915,test failure in OSReadOnlyTest in assertDirectoryDeleted    I've seen the assert flag a failure for deleteing a log file last night  and a seg0 file the night before.This is one stack trace:1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to delete 2 files (root=F:/test/JarResults.2010-11-23/ibm16_suites.All/system/singleUse/readWrite: F:/test/JarResults.2010-11-23/ibm16_suites.All/system/singleUse/readWrite/log (isDir=true  canRead=true  canWrite=true  size=0)  F:/jartest/JarResults.2010-11-23/ibm16_suites.All/system/singleUse/readWrite (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1421) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.moveDatabaseOnOS(OSReadOnlyTest.java:295) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:160) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)This is another:1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to delete 2 files (root=F:/test/JarResults.2010-11-22/ibm16_suites.All/system/singleUse/readOnly: F:/test/JarResults.2010-11-22/ibm16_suites.All/system/singleUse/readOnly/seg0 (isDir=true  canRead=true  canWrite=true  size=0)  F:/jartest/JarResults.2010-11-22/ibm16_suites.All/system/singleUse/readOnly (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1421) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.moveDatabaseOnOS(OSReadOnlyTest.java:295) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:152) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)This is on a machine that I've been able to arrange for a windows machine on which to run the tests for 10.7 nightly  but this is not a new machine. So perhaps the disk - being older - is a little slow in deleting? Perhaps the check can be delayed  or redone if failed first time. I'm still investigating  checking on hardware settings. The disk scan showed up healthy  and multithreading is not on.   ,0
4920,suites.All stuck in RAFContainer4.awaitRestoreChannel()    I have suites.All running on trunk  and it seems to be stuck in a call to RAFContainer4.awaitRestoreChannel(). Here's the stack for the waiting thread:'main' prio=3 tid=0x08070800 nid=0x2 waiting on condition &#91;0xfe61e000&#93; java.lang.Thread.State: TIMED_WAITING (sleeping) at java.lang.Thread.sleep(Native Method) at org.apache.derby.impl.store.raw.data.RAFContainer4.awaitRestoreChannel(RAFContainer4.java:698) at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(RAFContainer4.java:593) at org.apache.derby.impl.store.raw.data.CachedPage.writePage(CachedPage.java:787) at org.apache.derby.impl.store.raw.data.CachedPage.clean(CachedPage.java:610) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(ConcurrentCache.java:551) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(ConcurrentCache.java:509) at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(ConcurrentCache.java:460) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.checkpoint(BaseDataFileFactory.java:1211) at org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(LogToFile.java:1710) at org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(LogToFile.java:1507) at org.apache.derby.impl.store.raw.RawStore.stop(RawStore.java:368) at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:442) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:393) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:229) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:199) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:231) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119) at java.sql.DriverManager.getConnection(DriverManager.java:582) at java.sql.DriverManager.getConnection(DriverManager.java:154) at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:137) at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:120) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1599) at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp(SystemPropertyTestSetup.java:83) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)   ,0
4944,Embedded Derby does not start when derby.jar is dynamically uploaded / added to the classpath    Hi  For our workflow-system  we can use a variety of DBMS as the store engine. Derby is one of them especially popularfor test and development purposes. During setup of our system  we allow to upload a jar file with the JDBC-Driver for the DBMS.In case of derby  we use the embedded mode and upload derby.jar. After that we add the jar to the repositories of our class loaderand call Class drc = Class.forName('org.apache.derby.jdbc.EmbeddedDriver'  true  ourclassloader);Driver drv = (Driver)drc.newInstance();this worked perfectly for many years up to version 10.6.1.0  but ceased to work in 10.6.2.1; i assume the unreleased future versions are affected  toowhen derby.jar is placed in the classpath manually before starting our setup  everything works fine regardless of the derby version.investigations lead to the following conclusion: since rev. 982370 this is broken  in the immediate predecessor rev. 980035 it worked. rev. 982370 in the org.apache.derby.impl.store.raw.data.BaseDataFileFactory class introduced a new method private static String jarClassPath(final Class cls) which tries to find the jarfile from which derby was loaded. it contains the following lines: if ( cs == null ) return null;URL result = cs.getLocation();return result.toString();  but in the case  when we dynamically load derby   cs is not null but cs.getLocation() is null. so i propose to change the line with the if to:...if ( cs == null || cs.getLocation()==null) return null;...or maybe it would be better to surround the whole body of the method with a try catch  since it is not essential  and a null return value is also ok?thank you for your efforts concerning derby at large  Michael   ,0
4949,Backward  confusing error message when you use the wrong ResultSet.getXXX() method in the client driver    If you try to get a Time value out of an INTEGER column  the client driver gives this error. I believe that similar nonsense comes back when you try other mismatched getters on other datatypes: 'An attempt was made to get a data value of type 'java.sql.Types 4' from a data value of type 'java.sql.Time'.'The exception is a java.sql.SQLDataException with SQLState 22005. The embedded driver returns a better message: 'An attempt was made to get a data value of type 'java.sql.Time' from a data value of type INTEGER'.'I recommend two improvements to the utility method which generates these exceptions:1) Flip the order of the type names.2) Use the ResultSetMetaData to look up the source data type name.   ,0
4950,AccessControlException when running AssertFailureTest from Ant    Seen when running 'ant junit-all': &#91;junit&#93; Running org.apache.derbyTesting.unitTests.junit._Suite &#91;junit&#93; Exception in thread 'main' java.security.AccessControlException: access denied (java.io.FilePermission /code/derby/trunk0/junit_20101222_2349/junitvmwatcher3394322945027170783.properties write) &#91;junit&#93; at java.security.AccessControlContext.checkPermission(AccessControlContext.java:323) &#91;junit&#93; at java.security.AccessController.checkPermission(AccessController.java:546) &#91;junit&#93; at java.lang.SecurityManager.checkPermission(SecurityManager.java:532) &#91;junit&#93; at java.lang.SecurityManager.checkWrite(SecurityManager.java:962) &#91;junit&#93; at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:169) &#91;junit&#93; at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:70) &#91;junit&#93; at java.io.FileWriter.&lt;init&gt;(FileWriter.java:46) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.registerTestCase(JUnitTestRunner.java:939) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.access$000(JUnitTestRunner.java:68) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner$2.startTest(JUnitTestRunner.java:808) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner$3.startTest(JUnitTestRunner.java:1004) &#91;junit&#93; at junit.framework.TestResult.startTest(TestResult.java:151) &#91;junit&#93; at junit.framework.TestResult.run(TestResult.java:103) &#91;junit&#93; at junit.framework.TestCase.run(TestCase.java:120) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768) &#91;junit&#93; Running org.apache.derbyTesting.unitTests.junit._Suite &#91;junit&#93; Tests run: 1  Failures: 0  Errors: 1  Time elapsed: 0 sec &#91;junit&#93; Test org.apache.derbyTesting.unitTests.junit._Suite FAILED (crashed)   ,0
4960,Race condition in FileContainer#allocCache when reopening RAFContainer after interrupt    The symptom is an ArrayIndexOutOfBoundsException:java.lang.ArrayIndexOutOfBoundsException: -1 at org.apache.derby.impl.store.raw.data.AllocationCache.validate(AllocationCache.java:581) at org.apache.derby.impl.store.raw.data.AllocationCache.getLastPageNumber(AllocationCache.java:122) at org.apache.derby.impl.store.raw.data.FileContainer.pageValid(FileContainer.java:2067) at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2522) at org.apache.derby.impl.store.raw.data.FileContainer.getInsertablePage(FileContainer.java:2867) at org.apache.derby.impl.store.raw.data.FileContainer.getPageForInsert(FileContainer.java:3017) at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageForInsert(BaseContainerHandle.java:372) at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:244) at org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(HeapController.java:599) at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:452) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1028) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:505) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1241) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:308) at InterruptTest$WorkerThread.run(InterruptTest.java:261This can only happen if another thread has called allocCache.reset while the thread above is in the loop in validate  so as to set numExtents to 0.The synchronization of allocCache is documented in the Javadoc of the FileContainer class: all accesses to allocCache should synchronize.This is omitted when we reopen: FileContainer#openContainer calls readHeader -&gt; readHeaderFromArray -&gt; allocCache.reset   ,0
4980,Replication tests lose derby.log for slave    After running ReplicationRun_Local_3_p1 I notice that of the two directories created  db_master and db_slave  only db_master contains a derby.log file. This is not so nice  since the log file is sometimes needed for test debugging   ,0
4982,Retrying after interrupts in store pops a bug in derbyall/storeall/storeunit/T_RawStoreFactory in some cases    Cf Myrna's comment on DERBY-4741:'I think the latest check-in has caused the following tinderbox failure:derbyall/storeall/storeall.fail:unit/T_RawStoreFactory.unitsee: http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1061516-derbyall_diff.txt:                 Diff file derbyall/storeall/storeunit/T_RawStoreFactory.diff             Start: T_RawStoreFactory jdk1.6.0_18 storeall:storeunit 2011-01-20 23:22:23 ***2 del&lt; &#8211; Unit Test T_RawStoreFactory finished2 add&gt; ran out of time&gt; Exit due to time bombTest Failed. End: T_RawStoreFactory jdk1.6.0_18 storeall:storeunit 2011-01-21 00:22:54 ***'It failed in the nightly runs with ibm 1.6 also (and 1.4.2 and 1.5).   ,0
4983,failure in jdbcapi.StatementJdbc20Test:testCompletionClosure_jdbc4_1 with j9 (j2ME/CDC)    After revision 1061824 for DERBY-4869  there is the following failure in the tests when run with ibm's j9:1) testCompletionClosure_jdbc4_1(org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test)java.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: java.sql.DriverManager' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.vetClosedCall(StatementJdbc20Test.java:357) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.vetClosure(StatementJdbc20Test.java:317) at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.testCompletionClosure_jdbc4_1(StatementJdbc20Test.java:309) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: Java exception: 'java.sql.DriverManager: java.lang.NoClassDefFoundError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 33 moreCaused by: java.lang.NoClassDefFoundError: java.sql.DriverManager at org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.dynamicResults(StatementJdbc20Test.java:449) at org.apache.derby.exe.acdf1940dax012dxb95exf375xffffd1bbe3d70.g0(Unknown Source) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 29 moreNote  that there is no record of how this test would fare with the phoneME - those tests haven't been running since mid-September 2010 (http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Full/index_all.html).   ,0
4984,ALTER TABLE DROP COLUMN may leave triggers invalid even if they are not using the column getting dropped.    While doing testing for DERBY-4887  I found a case where ALTER TABLE DROP COLUMN will leave triggers in invalid state even if those triggers are not using the column getting dropped. egCREATE TABLE tab (  element_id INTEGER NOT NULL   altered_id VARCHAR(30) NOT NULL); insert into tab values(1 'aa');&#8211; Create a trigger against the table CREATE TRIGGER mytrig  AFTER UPDATE OF altered_id ON tab  REFERENCING NEW AS newt OLD AS oldt  FOR EACH ROW MODE DB2SQL  SELECT newt.altered_id from tab;--Drop the first column in the table. This will cause the column positions to be recalculated within the tablealter table tab drop column element_id; --mytrig is still looking for column altered_id at position 2 but drop column has changed it's position within the table to 1update tab set altered_id='bb';As shown in the example above  table 'TAB' only has 2 columns. The trigger 'MYTRIG' uses the 2nd column in it's trigger action through the REFERENCING clause. During trigger action sql parsing  every column referenced through REFERENCING clause gets transformed into a reference to the column through it's column position in the trigger table(this change to look for columns based on their column positions rather than the name went in as revision 397959 with following commit comments DERBY-1258 Change the generated code for a new/old column in a row trigger to access columns by position and not name to avoid the case-insensitive name lookup specified by JDBC.) When in the script above  we drop the column in position 1  the trigger 'MYTRIG' ends up becoming invalid because column being used in the trigger action is no more in column position 2.One possible solution is to regenerate the SPSDescriptor associated with the trigger action for all the triggers defined on the table whose column is getting dropped. We could be little smarter and only regenerate the SPSDescriptor for the triggers who use the REFERENCING clause. But we need to do more testing to make sure that triggers without REFERENCING clause do not get impacted by a drop of column which is not the last column of the table. This optimization of recognizing the right triggers may not be worth it since performance may not be that big a criteria for an ALTER TABLE DROP COLUMN which should be a rare operation in a production system.An interim solution to this problem is obviously to drop and recreate the triggers   ,0
4985,BootLockTest can fail with ERROR XCY03: Required property 'derby.serviceProtocol' has not been set  with slow configurations    If derby tests are running with JVM options that slow things down substantially  it can fail with:1) testBootLock(org.apache.derbyTesting.functionTests.tests.store.BootLockTest)junit.framework.ComparisonFailure: Dual boot not detected: check BootLockMinion.log expected:&lt;...SDB6&gt; but was:&lt;...CY03&gt; at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:769) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:804) at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBootLock(BootLockTest.java:145) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Required property 'derby.serviceProtocol' hasnot been set. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2723) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:384) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:128) at java.sql.DriverManager.getConnection(DriverManager.java:322) at java.sql.DriverManager.getConnection(DriverManager.java:297) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43) at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1538) at org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection(BaseJDBCTestCase.java:428) at org.apache.derbyTesting.junit.BaseJDBCTestCase.getConnection(BaseJDBCTestCase.java:110) at org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBootLock(BootLockTest.java:136) ... 31 moreCaused by: java.sql.SQLException: Required property 'derby.serviceProtocol' hasnot been set. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 45 moreCaused by: ERROR XCY03: Required property 'derby.serviceProtocol' has not been set. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1679) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1560) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2686) ... 43 moreThe test waits for the spawned process to create db.lck and service.properties and then waits three seconds more to make sure the properties have been written  but this might not be enough time.Although I have not seen this myself with unchanged code   I can simulate it on windows by changing StorageFactoryService.saveServiceProperties() to have a sleep between creating the service.properties file and writing the properties out  e.g. try { os = servicePropertiesFile.getOutputStream(); try { Thread.sleep(10000); } catch (Exception e) {} properties.store( os  serviceName + MessageService.getTextMessage(MessageId.SERVICE_PROPERTIES_DONT_EDIT));   ,0
4992,Release notes should specify which Java version is needed to run Derby    Since 10.3  it appears we no longer include information about what Java version is needed to run Derby  at least not on the release notes published on the web site  cf.http://db.apache.org/derby/releases/release-10.7.1.1.html and others.In the 10.2 release notes  we see:JDK/JDBC support: JDK 1.3  1.4  1.5  and J2ME J2ME/CDC/Foundation Profile JSR-169  JDBC 2.1  and JDBC 3.0 supportI think this type of information should still be readily available from the release notes  does anybody know why we stopped doing that?   ,0
5001,Intermittent bug in InterruptResilienceTest    Knut saw an error on the nightly test on Windows 2003: apparently an interrupt happened when waiting for a lock. Cf. enclosure test.log.   ,0
5008,[patch] fix npe in error condition    LogToFile#switchLogFile: In the cleanup code that handles failure of initLogFile  we seecode nulls out a variable and then access it: push the nulling down to the end.   ,0
5011,[patch] Client driver lexer to determine statement type: fix bad attempt at incrementing a variable    In the client driver lexer to determine statement type  we look for token 'select'  'update'  'values' etc. The lexer used to has a bug in itshandling of end-of-line comments '--'.code doesidx = idx++;but this does absolutely nothing   ,0
5018,[patch] remove erroneous throws clauses on non derivable methods that don't throw    various constructors/private methods declare throwing exceptions that they don't in fact throw. This causes calling methods to handle these exceptions  for no reason. patch removes.   ,0
5022,[patch] override equals correctly    code implements equals w/o an Object parm. Calling code that doesn't have first class signature of FormatableBitSet will not work as expected. Properly override equals to fix.   ,0
5023,Cannot find Ant libraries when building from NetBeans    Building Derby doesn't work out of the box in NetBeans. The wiki page http://wiki.apache.org/db-derby/BuildingDerby instructs NetBeans users to specify the ant.library.dir property in order to get the build working.The Ant documentation says the following about the ant.library.dir property: 'The following property is only set if Ant is started via the Launcher class (which means it may not be set inside IDEs either)' - http://ant.apache.org/manual/properties.htmlSince the property is not guaranteed to be set  I suggest that we replace references to '${ant.library.dir}/ant.jar' with references to '${ant.core.lib}' in the build scripts. According to the above mentioned Ant manual page the ant.core.lib property should always be available and point to ant.jar. Changing this makes it possible to build Derby from NetBeans with no special customization.   ,0
5025,UpdateStatisticsTest fails after we enabled the automatic calculation of index statistics.    After enabling the automatic calculation of statistics  we see the following error in UpdateStatisticsTest in the tinderbox run. See  for instance  http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-1069761.html :1) testUpdateStatistics(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:164) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)2) testUpdateStatistics(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:164) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
5032,[patch] derived InternalXact attempts (and fails) to override a method from base    RawTransaction implementspublic void checkLogicalOperationOk() throws StandardException {}which is attempted to be overridden in derived class InternalXact  but is not done so because of a case problem in InternalXact public void checkLogicalOperationOK() throws StandardException { throw StandardException.newException( SQLState.XACT_NOT_SUPPORTED_IN_INTERNAL_XACT);}Code that calls this method thru the parent will not get the overridden method called.   ,0
5033,[patch] System.arraycopy  being native  is more performant    various places in the code  manual loops are used to copy one array to another  switch with System.arraycopy for better performance.   ,0
5034,[patch] bad field masking makes non functional rowsInput evaluation    RealDistinctScalarAggregateStatistics derives from RealScalarAggregateStatisticsRealDistinctScalarAggregateStatistics takes a constructor parm of rowsInput and forwards it to the super class's constructor  where it is stored for use by the class.However  the subclass mistakenly added a masked rowsInput field that is never set  and thus interferes with the proper use of the super class's rowsInput field.patch removed the erroneous subclass's field.   ,0
5042,ResultSet.updateBoolean() on new BOOLEAN type throws exception    I am encountering an error trying to update a BOOLEAN type through anupdatable ResultSet. My table looks like this:CREATE TABLE file_store ( path VARCHAR(255) NOT NULL  network VARCHAR(32) NOT NULL  file_blob BLOB  file_md5 VARCHAR(32)  is_directory BOOLEAN NOT NULL DEFAULT false  PRIMARY KEY (path  network));My SQL looks like this:SELECT path  network  is_directory FROM file_storeWHERE path=? AND network=? AND is_directory=true FOR UPDATE OF path  network  is_directoryMy Java code looks like this:...resultSet.moveToInsertRow();resultSet.updateString('path'  dirPath);resultSet.updateString('network'  network);resultSet.updateBoolean('is_directory'  true);resultSet.insertRow();An exception is thrown in the call to updateBoolean() as follows:java.sql.SQLException: An attempt was made to put a data value of type 'byte' into a data value of type 'BOOLEAN'.It's a shame  I was looking forward to using the new BOOLEAN type before I roll out the next version of our software. For now I will fallback to SMALLINT. Does/will ALTER TABLE support a change from SMALLINT to BOOLEAN?   ,0
5045,Assert failures in UpdateStatisticsTest    I saw these failures when running suites.All against revision 1070949 + the 1b patch attached to DERBY-642:junit.framework.AssertionFailedError: Index statistics for &lt;ALL TABLES&gt;1: {tableId=94a458d3-012e-2a1f-d23d-ffff93077fa3  tableName=&lt;n/a&gt;  indexName=&lt;n/a&gt;  lcols=1  rows=160  unique/card=160  created=2011-02-15 17:31:00.951} expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.IndexStatsUtil.assertStats(IndexStatsUtil.java:132) at org.apache.derbyTesting.junit.IndexStatsUtil.assertNoStats(IndexStatsUtil.java:109) at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:91) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)junit.framework.AssertionFailedError: Index statistics for &lt;ALL TABLES&gt;1: {tableId=94a458d3-012e-2a1f-d23d-ffff93077fa3  tableName=&lt;n/a&gt;  indexName=&lt;n/a&gt;  lcols=1  rows=160  unique/card=160  created=2011-02-15 17:31:00.951} expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.IndexStatsUtil.assertStats(IndexStatsUtil.java:132) at org.apache.derbyTesting.junit.IndexStatsUtil.assertNoStats(IndexStatsUtil.java:109) at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testUpdateStatistics(UpdateStatisticsTest.java:91) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
5046,Intermittent assert failure in AutomaticIndexStatisticsTest.testStatisticsCorrectness    An assert on timestamps in the test AutomaticIndexStatisticsTest.testStatisticsCorrectnes is unstable  and fails on sufficiently fast machines and/or operating systems with lower resolution timers.   ,0
5052,[patch] Bad name collision causes non functional method    ijMultipleResultSetResult has this method /** Create a ijResultImpl that represents multiple result set. */ public ijMultipleResultSetResult(List resultSets) throws SQLException { resultSets = new ArrayList(); resultSets.addAll(resultSets); }due to the name collision  this does nothing... patch fixes with this. prefixing.   ,0
5053,[patch] reduce superfluous boxing histrionics    code converts strings to primitives using excessive boxing patterns. patch reduces.   ,0
5063,Embedded driver allows updateBytes() on BOOLEAN column    The following code inserts the value TRUE into the table T on the embedded driver: Statement s = c.createStatement(ResultSet.TYPE_FORWARD_ONLY  ResultSet.CONCUR_UPDATABLE); s.execute('create table t(b boolean)'); ResultSet rs = s.executeQuery('select b from t'); rs.moveToInsertRow(); rs.updateBytes(1  'this is a test'.getBytes()); rs.insertRow();The client driver fails:java.sql.SQLException: An attempt was made to put a data value of type 'byte[]' into a data value of type 'BOOLEAN'.I believe the client driver is correct  and embedded should be changed to match it.   ,0
5070,[patch] remove unused fetching of data dictionary    code fetches data dictionary for no reason.   ,0
5071,[patch] use string buffers when building strings in loops    Various spots in code builds up strings in loops. This causes n extra StringBuffer allocations and n extra String allocationspatch replaces with direct StringBuffer use.   ,0
5074,test failure(s) with IBM 1.4.2 in store.InterruptResilienceTest.testRAFWriteInterrupted: java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: interrupt flag lost' was thrown while evaluating an expression.    Since February 17  I see this failure:1) testRAFWriteInterrupted(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest) java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: interrupt flag lost' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFWriteInterrupted(InterruptResilienceTest.java:204) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java(Compiled Code)) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'interrupt flag lost: junit.framework.AssertionFailedError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 46 moreCaused by: junit.framework.AssertionFailedError: interrupt flag lost at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFwriteInterrupted(InterruptResilienceTest.java(Compiled Code)) at org.apache.derby.exe.ac0b5b0099x012ex376dx55e3x00000a2ef4be0.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 42 moretwice (February 20 and February 25) this was followed by a second test failure:2) testRAFReadWriteMultipleThreads(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest)java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;30000&lt; Found: &gt;29999&lt;' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFReadWriteMultipleThreads(InterruptResilienceTest.java:515) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java(Compiled Code)) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)Caused by: java.sql.SQLException: Java exception: 'Column value mismatch @ column '1'  row 1: Expected: &gt;30000&lt; Found: &gt;29999&lt;: junit.framework.AssertionFailedError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 46 moreCaused by: junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;30000&lt; Found: &gt;29999&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java(Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java(Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code)) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java(Compiled Code)) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFReadWriteMultipleThreads(InterruptResilienceTest.java:265) at org.apache.derby.exe.ac070a00b0x012ex46e5x5b33x0000368ebfa60.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code)) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code)) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 42 moreSee for instance: http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm142/1071866-suites.All_diff.txtand:http://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm142/1072825-suites.All_diff.txtI can reproduce the first failure on my laptop with Windows XP with ibm 1.4.2 (in fact  I got the same failure twice  I assume once with NetworkServer/client  once with embedded) by just running the test.This popping up on the 17th is because this test didn't run with ibm 1.4.2 for a while before revision 1071754 (see DERBY-4463  but this is a different problem.)I marked this 'store'  but this test doesn't fail with Sun's 1.4.2 jvm  judging from the results at http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.4/testing/Limited/   so it's possible there's a jvm issue here.   ,0
5076,[patch] move instanceof check up above where casts occur    code does an instanceof check on Diagnosable much after multiple casts to Diagnosable occurs above it.Move the instanceof check up before the first cast  so that it does some good.   ,0
5077,[patch] remove non productive instanceof checks    various places in code does instanceof checks where the outcome can be determined statically to be always true or always false.removed these checks as they do nothing.   ,0
5078,Incorrect list of compatible JRE versions in client trace    When running with client side tracing enabled  these lines appear first in the trace file:&#91;derby&#93; BEGIN TRACE_DRIVER_CONFIGURATION&#91;derby&#93; Driver: Apache Derby Network Client JDBC Driver 10.8.0.0 alpha - (1075248P)&#91;derby&#93; Compatible JRE versions: { 1.3  1.4 }The list of compatible JRE versions is wrong. The client driver doesn't work on 1.3  and 1.5 and 1.6 are missing from the list.   ,0
5079,DERBY-4984 caused a regression which will not allow users to drop a table if the table was involved in a trigger action rebind during ALTER TABLE DROP COLUMN    The fix for DERBY-4984 has introduced a regression which adds rows into SYSDEPENDS which are incorrect. The error I think was caused when before doing a rebind of trigger action  I made the trigger table as the current dependent in the dependency system and hence all the dependencies required by the trigger action got associated with that trigger table and hence causing the errorneous behavior. I will work on this asap. The fix went into trunk and 10.7. I will add a test case for this in the jira and will also add a test case in our junit test   ,0
5082,ShutdownException in ContextManager.checkInterrupt() during shutdown    When running the attached repro script  I often (but not always) see a ShutdownException in ContextManager.checkInterrupt() when ij exits and shuts down the Derby engine. ij expects an exception here  but it expects an SQLException  not a ShutdownException.   ,0
5085,After specifying deregister=false on the engine shutdown URL  Derby forgets that the default behavior is deregister=true    If you shutdown the engine specifying deregister=false  then get a new connection  then shutdown the engine again without specifying any value for the deregister attribute  Derby acts as though you specified deregister=false again. I will attach a test program which shows this problem.   ,0
5086,Disable istat logging by default    The automatic index statistics daemon will by default log what it's doing. That means messages like these ones will be written to derby.log during normal operation:Wed Mar 02 13:36:22 CET 2011 Thread&#91;main 5 main&#93; {istat} 'APP'.'T': update scheduled - 23ce809c-012e-7691-6c29-000003480128 reason=&#91;no stats  row-estimate=36167&#93; (queueSize=1)Wed Mar 02 13:36:22 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat} 'APP'.'T': generating index statisticsWed Mar 02 13:36:23 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat} 'APP'.'T': generation complete (509 ms)Wed Mar 02 13:36:23 CET 2011 Thread&#91;main 5 main&#93; {istat} stopping daemon  active=false  work/age=510/14736 &#91;q/p/s=0/1/1 err:k/u/c=0/0/0 rej:f/d/o=0/0/0&#93;Although these messages may be helpful in diagnosing bugs  they may also be a source of confusion since users probably only expect errors/problems to be logged by default. Also  for some workloads  large quantities of log may be produced and take up disk space. Therefore  I think we should disable the logging before the 10.8 release  and instead instruct users who experience problems to enable logging manually with the derby.storage.indexStats.log property.   ,0
5087,NPE in istat daemon when encountering critical exception during shutdown    If the istat daemon encounters a critical error during shutdown and the data dictionary module has been stopped  it will run into a NPE.This bug is highly timing-dependent in two ways: the data dictionary module must have been stopped first  and then the istat daemon must encounter a critical error 'at the right time'.I have seen this bug once on my laptop.   ,0
5092,[patch] avoid Boolean allocations for rowset data in client cursor    code allocates a new Boolean for every row value of a boolean column  creating needless garbage. Patch switches to use immutable Boolean.TRUE and Boolean.FALSE values.   ,0
5093,[patch] avoid Integer allocations fetching client meta data info    code needlessly generates Integer objects (garbage) in loops looking for meta data information  patch removes these allocations   ,0
5100,GetCurrentPropertiesTest depends on implicit ordering of test cases    The test cases in GetCurrentPropertiesTest must run in the order in which they are defined in the source file. If for example the test case testPropertiesTraceOn runs first  the test will fail with the following stack trace:1) testPropertiesTraceOn(org.apache.derbyTesting.functionTests.tests.derbynet.GetCurrentPropertiesTest)junit.framework.ComparisonFailure: expected:&lt;&#91;tru&#93;e&gt; but was:&lt;&#91;fals&#93;e&gt; at org.apache.derbyTesting.functionTests.tests.derbynet.GetCurrentPropertiesTest.testPropertiesTraceOn(GetCurrentPropertiesTest.java:206) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)(...)Seen in the nightly tests  for example here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/vista-64/1076682-suitesAll_diff.txt   ,0
5103,ProcedureInTriggerTest depends on implicit ordering of test cases    If for example the test case testTriggerContainsSql is executed as the first test case  it will fail with the following error:1) testTriggerContainsSql(org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest)junit.framework.AssertionFailedError: expected:&lt;2&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.checkAndResetGetConnectionProcCount(ProcedureInTriggerTest.java:514) at org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testTriggerContainsSql(ProcedureInTriggerTest.java:120) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)The test should either make the order of the test cases explicit or make the test cases independent of the order in which they run.Seen in the nightly tests  for example here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/lin/1076682-suitesAll_diff.txt   ,0
5106,Lacking cleanup in CheckConstraintTest.testJira4282()    The test case testJira4282 in CheckConstraintTest doesn't drop the table it creates. The table itself has a unique name that doesn't conflict with any other test case  but it also has a constraint with a generic name (CK1) that is in conflict with constraints created in testCheckConstraints and testPositionalUpdate. If testJira4282 runs before any of those test cases  the test will fail.Example from the nightly tests:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/lin/1076682-suitesAll_diff.txt1) testCheckConstraints(org.apache.derbyTesting.functionTests.tests.lang.CheckConstraintTest)java.sql.SQLException: Constraint 'CK1' already exists in Schema 'APP'. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.CheckConstraintTest.testCheckConstraints(CheckConstraintTest.java:243)   ,0
5114,Assert failure in SavepointJdbc30Test.testReleaseSqlSavepointAndRollback    Seen in nightly testing on Java 7:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/vista-64/1078855-suitesAll_diff.txt23) testReleaseSqlSavepointAndRollback(org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test)junit.framework.AssertionFailedError: expected:&lt;6&gt; but was:&lt;0&gt; at org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseSqlSavepointAndRollback(SavepointJdbc30Test.java:775) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)   ,0
5117,ParameterMetaDataJdbc30Test fails with ''DUMMYINT' is not recognized as a function or procedure'    ParameterMetaDataJdbc30Test has failed a couple of times in the nightly tests on Java 7.http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/lin/1078310-suitesAll_diff.txt1) testMetatdataAfterProcRecompile(org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test)java.sql.SQLSyntaxErrorException: 'DUMMYINT' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedCallableStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(BaseJDBCTestCase.java:317) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testMetatdataAfterProcRecompile(ParameterMetaDataJdbc30Test.java:524)   ,0
5119,testQualifiers(org.apache.derbyTesting.functionTests.tests.store.AccessTest)java.sql.SQLException: Table/View 'FOO' already exists in Schema 'APP'.    1) testQualifiers(org.apache.derbyTesting.functionTests.tests.store.AccessTest)java.sql.SQLException: Table/View 'FOO' already exists in Schema 'APP'. at java.lang.Throwable.&lt;init&gt;(Throwable.java:80) at java.sql.SQLException.&lt;init&gt;(SQLException.java:153) at java.sql.SQLException.&lt;init&gt;(SQLException.java:176) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.testQualifiers(AccessTest.java:1807) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:51) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)Caused by: java.sql.SQLException: Table/View 'FOO' already exists in Schema 'APP'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 47 moreCaused by: ERROR X0Y32: Table/View 'FOO' already exists in Schema 'APP'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(Unknown Source) at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Unknown Source) at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 41 moreNote this was followed by another failure DERBY-4550. Not sure if the failure to create the table might have impacted that test.   ,0
5133,nightly test failure in derbyall/storeall/storemore/SpaceTable    http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.4/testing/testlog/lin/1081468-derbyall_diff.txtFailure Details:                 Diff file derbyall/storeall/storemore/SpaceTable.diff             Start: SpaceTable jdk1.4.2_02 storeall:storemore 2011-03-15 11:50:03 ***145 del&lt; PLATYPUS |0 |1 |20 |4096 |81920 145a145&gt; PLATYPUS |0 |2 |19 |4096 |77824 Test Failed. End: SpaceTable jdk1.4.2_02 storeall:storemore 2011-03-15 11:50:13 ***------------------------------------------------------   ,0
5157,Incomplete quoting of SQL identifiers in AlterTableConstantAction    AlterTableConstantAction generates SQL statements various places. Identifiers (schema names  table names  column names) are surrounded with double quotes in case they contain special characters. This is not enough if the identifiers contain double quotes  as can be seen with this example:ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; alter table t add column '''' int default 42;ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 22.I've found three places where AlterTableConstantAction generates SQL statements: updateNewColumnToDefault()  updateNewAutoincrementColumn()  getColumnMax(). All three places suffer from this problem.   ,0
5159,ParameterMetaDataJdbc30Test fails with ''PMDD' is not recognized as a function or procedure'    Seen in nightly testing on Java 7:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/sol32/1085472-suitesAll_diff.txt1) testParameterMetadataWithLITERALParameters(org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test)java.sql.SQLSyntaxErrorException: 'PMDD' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedCallableStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedCallableStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(BaseJDBCTestCase.java:317) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetadataWithLITERALParameters(ParameterMetaDataJdbc30Test.java:743) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Caused by: java.sql.SQLException: 'PMDD' is not recognized as a function or procedure. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 47 moreCaused by: ERROR 42Y03: 'PMDD' is not recognized as a function or procedure. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(Unknown Source) at org.apache.derby.impl.sql.compile.CallStatementNode.bindStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 41 moreLooks like a problem with the ordering of the test cases. testParameterMetadataWithDECIMALParameters() creates the procedure PMDD  and testParameterMetadataWithLITERALParameters() calls it and drops it. If the test cases run in the opposite order  testParameterMetadataWithLITERALParameters() cannot find the procedure and fails.   ,0
5161,Cannot rollback after syntax error in internal statement    To reproduce  execute the statements below in ij. Can only be reproduced this way before DERBY-5157. I don't know how to reproduce it when that bug is fixed.ij version 10.7ij&gt; connect 'jdbc:derby:db;create=true';ij&gt; autocommit off;ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; alter table t add column '''' int default 42;ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 22.Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt; rollback;ERROR X0Y67: Cannot issue rollback in a nested connection when there is a pending operation in the parent connection.The error message implies that we've called rollback() on a nested transaction  whereas we're in fact called it on the parent transaction.Expected result: The rollback statement should abort the transaction without raising any errors.   ,0
5162,CLOB INOUT arg set to NULL by procedure does not preserve NULL value when re-invoked    If a procedure sets an INOUT CLOB arg to NULL and is then re-invoked  the NULL is not preserved. Instead  the procedure sees the same CLOB that it saw in the last invocation. This bug was disclosed during the testing of the fix for DERBY-2515. I will attach a repro.   ,0
5163,[patch] fix up sql cleanup handling    When a sql exception occurs  don't allow potential cascading sql problems when closing sql objects from masking the original cause of the exception.Also make sure statements get closed.   ,0
5189,PropertySetter should ignore GCJ installations    Many Linux platforms come with GCJ installed. GCJ implements most of the Java SE API  but not all of it  so it cannot be used to build Derby. Unfortunately  PropertySetter sometimes get confused by it and constructs a compile classpath using GCJ's libraries.For example  on a machine running Debian 6.0.1  I have the sun-java6-jdk package as well as the gcj-jdk package installed. When running ant to build Derby (with no ~/ant.properties)  I get these compile classpaths constructed:printCompilerProperties: &#91;echo&#93; After setting properties: compilerPropsAlreadySet = true &#91;echo&#93; After setting properties: compilerLevel16 = 1.6 &#91;echo&#93; After setting properties: jsr169compile.classpath = /home/kah/derby/trunk/classes/stubs/jsr169:/usr/lib/jvm/java-1.5.0-gcj-4.4/jre/lib/rt.jar &#91;echo&#93; After setting properties: j14lib = ${j14lib} &#91;echo&#93; After setting properties: java14compile.classpath = /usr/lib/jvm/java-1.5.0-gcj-4.4/jre/lib/rt.jar &#91;echo&#93; After setting properties: j15lib = ${j15lib} &#91;echo&#93; After setting properties: java15compile.classpath = /usr/lib/jvm/java-1.5.0-gcj-4.4/jre/lib/rt.jar &#91;echo&#93; After setting properties: j16lib = ${jdk16}/jre/lib &#91;echo&#93; After setting properties: java16compile.classpath = /usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/alt-rt.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/alt-string.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/charsets.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/deploy.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/javaws.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/jce.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/jsse.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/management-agent.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/plugin.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/resources.jar:/usr/lib/jvm/java-6-sun-1.6.0.24/jre/lib/rt.jarSince java15compile.classpath is based on GCJ  and GCJ lacks some classes in the javax.management.remote package  the build fails when it gets to the JMX tests:compile_jdk15: &#91;javac&#93; Compiling 14 source files to /home/kah/derby/trunk/classes &#91;javac&#93; /home/kah/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/JMXConnectionDecorator.java:26: cannot find symbol &#91;javac&#93; symbol : class JMXServiceURL &#91;javac&#93; location: package javax.management.remote &#91;javac&#93; import javax.management.remote.JMXServiceURL; &#91;javac&#93; ^(...) &#91;javac&#93; /home/kah/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/RemoteConnectionGetter.java:73: cannot find symbol &#91;javac&#93; symbol : class JMXConnector &#91;javac&#93; location: class org.apache.derbyTesting.functionTests.tests.management.RemoteConnectionGetter &#91;javac&#93; JMXConnector jmxc = conns.remove(jmxConnection); &#91;javac&#93; ^ &#91;javac&#93; 17 errorsBUILD FAILED/home/kah/derby/trunk/build.xml:596: The following error occurred while executing this line:/home/kah/derby/trunk/java/testing/build.xml:80: The following error occurred while executing this line:/home/kah/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/management/build.xml:53: Compile failed; see the compiler error output for details.Total time: 1 minute 30 secondsPropertySetter should ignore GCJ installations to prevent this problem. If it hadn't found GCJ  it would have constructed java15compile.classpath from java16compile.classpath  and the build would have succeeded.   ,0
5192,Setting up network server for management tests hangs intermittently    I've seen on three occurrences with the 10.8.1.0 and 10.8.1.1 release candidates that suites.All has been stuck when setting up the network server decorator for the management test suite. Here's what I see at the end of the console output (running with derby.tests.trace=true): &#91;junit&#93; test_jdbc4_1 used 0 ms  &#91;junit&#93; test_jdbc4_1 used 0 ms  &#91;junit&#93; test_notBooted used 1623 ms java.net.SocketException: Connection reset &#91;junit&#93; at java.net.SocketInputStream.read(SocketInputStream.java:189) &#91;junit&#93; at java.net.SocketInputStream.read(SocketInputStream.java:121) &#91;junit&#93; at java.net.SocketInputStream.read(SocketInputStream.java:107) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) &#91;junit&#93; at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) &#91;junit&#93; at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) &#91;junit&#93; at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) &#91;junit&#93; at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:636) &#91;junit&#93; at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:196) &#91;junit&#93; at junit.extensions.TestSetup$1.protect(TestSetup.java:20) &#91;junit&#93; at junit.framework.TestResult.runProtected(TestResult.java:124) &#91;junit&#93; at junit.extensions.TestSetup.run(TestSetup.java:25) &#91;junit&#93; at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) &#91;junit&#93; at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) &#91;junit&#93; at junit.extensions.TestSetup$1.protect(TestSetup.java:21) &#91;junit&#93; at junit.framework.TestResult.runProtected(TestResult.java:124) &#91;junit&#93; at junit.extensions.TestSetup.run(TestSetup.java:25) &#91;junit&#93; at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) &#91;junit&#93; at junit.extensions.TestSetup$1.protect(TestSetup.java:21) &#91;junit&#93; at junit.framework.TestResult.runProtected(TestResult.java:124) &#91;junit&#93; at junit.extensions.TestSetup.run(TestSetup.java:25) &#91;junit&#93; at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at junit.framework.TestSuite.runTest(TestSuite.java:230) &#91;junit&#93; at junit.framework.TestSuite.run(TestSuite.java:225) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052) &#91;junit&#93; at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)The exception trace is just printed to the console  but it doesn't make any test fail. (The exception printed on FreeBSD was different  it said 'DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.' The other two looked like the one above.)All the hangs have happened on VirtualBox instances  though with different guest operating systems and JVMs. Probably the timing is different from what we have on physical machines.   ,0
5233,Interrupt of create table or index (i.e. a container) will throw XSDF1 under NIO - connection survives    Cf the enclosed repro. It would be good to make Derby ignore the interrupt here. Cf DERBY-4741. Note that this is less serious than in the cases referred to in DERBY-4741: here the database does not get shut down  even the connection survives  cf the repro. So  this can be considered a follow-up to DERBY-4741 to further improve Derby's robustness under interrupts.   ,0
5236,Client driver silently truncates strings that exceed 32KB    Can be seen with this JUnit test case that retrieves a VARCHAR value with 20000 characters. With the client driver  the string is truncated to 10900 characters (32700 bytes when encoded in UTF-8). public void testLongColumn() throws SQLException { PreparedStatement ps = prepareStatement( 'values cast(? as varchar(20000))'); char[] chars = new char[20000]; Arrays.fill(chars  '/u4e10'); String str = new String(chars); ps.setString(1  str); JDBC.assertSingleValueResultSet(ps.executeQuery()  str); }   ,0
5239,Remove usages of DriverManager to obtain an Embedded Connection in Derby Server    The Derby Network Server appears to look up the Derby Embedded Driver from the java.sql.DriverManager in a couple of places in order to get the connection to the actual database.This means the network server cannot operate in environments where for whatever reason it is not OK to access the embedded driver from the DriverManager. Just in general this behavior is unexpected as it should be possible to directly load the embedded driver.I've observed this issue in 10.6.1.0 and checked that the relevant usages are unchanged in trunk.   ,0
5243,assert failure in test testRAFReadWriteMultipleThreads: interrupted flag cleared    This is another instance of an interrupted thread losing its interrupted flag after calling Derby  but I believe this is distinct from other we have seen.1) testRAFReadWriteMultipleThreads(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest)java.sql.SQLException: The exception 'junit.framework.AssertionFailedError: WorkerThread 0' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFReadWriteMultipleThreads(InterruptResilienceTest.java:532) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: java.sql.SQLException: Java exception: 'WorkerThread 0: junit.framework.AssertionFailedError'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 45 moreCaused by: junit.framework.AssertionFailedError: WorkerThread 0 at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:771) at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFReadWriteMultipleThreads(InterruptResilienceTest.java:323) at org.apache.derby.exe.ac070a00b0x0130x06edxad12x000062ebfce90.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 41 moreCaused by: junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:430)   ,0
5244,DatabaseMetaData.getColumns(null  null  tableName  null) does not return the columns meta for a SYNONYM    DatabaseMetaData.getColumns(null  null  tableName  null) does not return the columns meta for a SYNONYM.Sample java code use for testing./** ListColumns.java */import java.sql.*;import java.util.Properties;public class ListColumns { public static void main(String[] args) { Connection con = null; try { Class.forName('org.apache.derby.jdbc.ClientDriver'); Properties connectionProps = new Properties(); connectionProps.put('user'  'app'); connectionProps.put('password'  'app'); con = DriverManager.getConnection( 'jdbc:derby://localhost:1527/northwind'  connectionProps); String tableName = 'V1'; DatabaseMetaData meta = con.getMetaData(); System.out.println('Database Product Version' + meta.getDatabaseProductVersion()); ResultSet res = meta.getColumns(null  null  tableName  null); System.out.println('List of columns for ' + tableName); while (res.next()) { System.out.println(' ' + res.getString('TABLE_SCHEM') + '  ' + res.getString('TABLE_NAME') + '  ' + res.getString('COLUMN_NAME') + '  ' + res.getString('TYPE_NAME') + '  ' + res.getInt('COLUMN_SIZE') + '  ' + res.getString('NULLABLE')); } res.close(); con.close(); } catch (java.lang.ClassNotFoundException e) { System.err.println('ClassNotFoundException: ' + e.getMessage()); } catch (SQLException e) { System.err.println('SQLException: ' + e.getMessage()); } }}   ,0
5246,Simplify bytecode generation for concatenation operator    ConcatenationOperatorNode generates bytecode that ensures the result object is not null before calling the method that implements the operator. This breaks the pattern used by other operators (which ensures that the result object is not null inside the method that implements the operator  not in the generated bytecode)  and it unnecessarily complicates the code in BinaryOperatorNode.The comments indicate that the current approach was chosen to prevent the null check from happening at execution time  but the generated bytecode does perform the null check at execution time  so generating byte code for it shouldn't have any real benefit over writing Java code for it. In general  implementing as much as possible of the execution time code as Java code is preferred to implementing it directly as bytecode because it's easier to read and debug Java code  and because the generated bytecode cannot be shared between execution plans and take more memory.   ,0
5247,Warnings regarding XPath displayed when generating JavaDoc    When generating JavaDocs for Derby. the following warnings are displayed: &#91;javadoc&#93; Constructing Javadoc information... &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:51: package org.w3c.dom.xpath does not exist &#91;javadoc&#93; import org.w3c.dom.xpath.XPathEvaluator; &#91;javadoc&#93; ^ &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:52: package org.w3c.dom.xpath does not exist &#91;javadoc&#93; import org.w3c.dom.xpath.XPathExpression; &#91;javadoc&#93; ^ &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:53: package org.w3c.dom.xpath does not exist &#91;javadoc&#93; import org.w3c.dom.xpath.XPathResult; &#91;javadoc&#93; ^ &#91;javadoc&#93; /home/kw160128/derby/commits/10.8/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java:128: cannot find symbol &#91;javadoc&#93; symbol : class XPathExpression &#91;javadoc&#93; location: class org.apache.derby.iapi.types.SqlXmlUtil &#91;javadoc&#93; private XPathExpression query;   ,0
5249,A table created with 10.0.2.1 with constraints cannot be dropped with 10.5 due to NullPointerException with insane build or ASSERT FAILED Failed to find sharable conglomerate descriptor for index conglomerate  with sane build    In 10.0.2.1 there was some bug that caused a duplicate entry in sys.sysconglomerates.After running the attached repro_create.sql with 10.0.2.1  you will see two rows returned instead of one with:select c.constraintname  c.constraintid  cong.conglomerateid  cong.conglomeratename from sys.sysconglomerates cong  sys.syskeys k  sys.sysconstraints c where c.constraintname = 'PK_RS' and c.constraintid =k.constraintid and k.conglomerateid = cong.conglomerateid ;I am not sure what practical impact this has with 10.0 as you can still drop the table s.rs with that version.On connecting to the database with 10.5  either soft or hard upgrade with 10.5.3.2 - 1103924DROP TABLE S.RS fails with:Caused by: java.sql.SQLException: Java exception: 'ASSERT FAILED Failed to findsharable conglomerate descriptor for index conglomerate # 785: org.apache.derby.shared.common.sanity.AssertFailure'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70) ... 17 moreCaused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Failed to find sharable conglomerate descriptor for index conglomerate # 785 at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) at org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.describeSharedConglomerate(ConglomerateDescriptor.java:638) at org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.drop(ConglomerateDescriptor.java:428) at org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.drop(ConstraintDescriptor.java:738) at org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(DDLSingleTableConstantAction.java:144) at org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(DDLSingleTableConstantAction.java:107) at org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(DropTableConstantAction.java:315) at org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(DropTableConstantAction.java:222) at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:61) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235) ... 10 moreand with an insane build with a NullPointerException:java.lang.NullPointerException  at  org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.drop(Unknown  Source)  at  org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.drop(Unknown  Source)  at  org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConst  raint(Unknown Source)  at  org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConst  raint(Unknown Source)  at  org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstra  intDescriptors(Unknown Source)  at  org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstan  tAction(Unknown Source)  at org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown  Source)  at  org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown  Source)  at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown  Source)  at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown  Source)  at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)  at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown  Source) Still need to figure out the exact versions affected  when the dup row was fixed  and when the drop stopped working.To reproduce connect to a database with 10.0.2.1 (can be accessed at http://svn.apache.org/repos/asf/db/derby/jars/10.0.2.1)run the attached script repro_create.sql;connect with the latest on the trunk or 10.5 branchDROP TABLE S.RS;The table will not drop. The work around is to drop the table with the old version 10.0.2.1   ,0
5253,Engine code references org.apache.derby.shared.common.sanity.SanityManager    Derby engine code is importing org.apache.derby.shared.common.sanity.SanityManager  causing sealing violations. See DERBY-4669 why this fix is inadequate.Even though this won't fix the/all problems  using shared.common.sanity.SanityManager on the client and iapi.services.sanity.SanityManager in the engine code is a simple rule to follow. Violations are also easily addressed.   ,0
5277,Intermittent OutOfMemoryErrors in BasicSetup.testTriggersWithLOBcolumns()    Seen many times in the JDK 7 tests lately  and also in the Tinderbox. First occurrence was here: http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/testlog/sol32/1134678-suitesAll_diff.txt(There had been no commits in the last two days before this test run  so it's difficult to say if a recent change caused it.)The test case has a comment that says that it should never read the LOB into memory  but according to the stack trace  that's exactly what's happening:Caused by: java.lang.OutOfMemoryError: Java heap space at org.apache.derby.iapi.types.SQLBinary.readFromStream(Unknown Source) at org.apache.derby.iapi.types.SQLBinary.readExternal(Unknown Source) at org.apache.derby.iapi.types.SQLBinary.getValue(Unknown Source) at org.apache.derby.iapi.types.SQLBinary.loadStream(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.objectifyStream(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testTriggersWithLOBcolumns(BasicSetup.java:854)   ,0
5280,Large batch of DDL in a database procedure dies on a transaction severity error.    The batch of DDL run by the procedure which registers database metadata functions now dies with the following error:ERROR 40XC0: Dead statement. This may be caused by catching a transaction severity error inside this statement.A process of binary search shows that this problem was introduced by revision 1086920 as part of the work on DERBY-5161.The bug can be reproduced by compiling the DBMDWrapper class attached to DERBY-3973 and then running the following script:connect 'jdbc:derby:memory:db;create=true'; create procedure registerPublicStaticMethods( in connectionURL varchar( 200 )  in printSQL boolean )language java parameter style java modifies sql dataexternal name 'DBMDWrapper.registerPublicStaticMethods';call registerPublicStaticMethods( 'jdbc:default:connection'  false );If you change the second argument to registerPublicStaticMethods to true  then you will see all of the DDL being issued by the database procedure. The procedure runs fine in 10.7 but fails with this error in 10.8.   ,0
5286,Update tools/ide/netbeans directory    The tools/ide directory contains projects for two versions of NetBeans (5.5 and 6.0). Since they haven't been updated for newer versions of NetBeans  I suppose it means they aren't used much. Also  since there are two of them  NetBeans gets confused as to which of the projects to use  and I have experienced that it often uses a mix of the 5.5 and 6.0 projects for the open source files  which causes problems for navigation and debugging. The problem with having multiple NetBeans projects pointing to the same source is described here: http://wiki.netbeans.org/FaqSourceRootOverlapTo prevent these problems  we should either remove the tools/ide/netbeans directory and let NetBeans users create their own projects (there a pretty good description on the wiki: http://wiki.apache.org/db-derby/BuildingDerby#Using_NetBeans_to_Build_Derby )  or provide an updated project and remove the old ones.(The project files aren't really tied to a particular version of NetBeans and can be opened by newer versions. But the projects still need to be updated to be usable  I think. For example  they should have project-specific formatting settings (added in NB 6.5  I think) which set tab size to 4  since setting tab size globally to 4 as you would have to with the current projects  only works if Derby is the only project you're working on in NetBeans.)   ,0
5289,Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata    I have been unable to get Derby 10.7.1.1 and 10.8.1.2 to boot the attached 10.5.1.1 database. Derby 10.6.1.0 is however able to use the DB.I'm not sure if this is a backwards compatibility bug or the result of corruption to the database. Running SYSCS_CHECK_TABLE and SYSCS_COMPRESS_TABLE under 10.6.1.0 found no problems with the database.NOTE: I have had to remove all data and non-essential tables/columns/triggers/etc prior to attaching this database.Output when connecting to the DB using ij:ERROR XJ040: Failed to start database 'C:/Users/BMASON/Sandbox/InternalDB' with class loader sun.misc.Launcher$AppClassLoader@11b86e7  see the next exception for details.ERROR XSDA7: Restore of a serializable or SQLData object of class   attempted to read more data than was originally storedFull exception from our application:java.sql.SQLException: Failed to start database 'C:/Users/BMASON/Sandbox/InternalDB' with class loader sun.misc.Launcher$AppClassLoader@93dee9  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source) at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(Unknown Source) at com.ADInstruments.LTS.util.DerbyUtils.exists(DerbyUtils.java:86) at com.ADInstruments.LTS.InternalDB.InternalDbUtilities.cacheInternalDbVersion(InternalDbUtilities.java:117) at com.ADInstruments.LTCS.InternalDB.InternalDbStartup.initialiseDatabase(InternalDbStartup.java:23) at com.ADInstruments.LTCS.StartupTasks$StartupRunnable.initDatabases(StartupTasks.java:35) at com.ADInstruments.LTCS.StartupTasks$StartupRunnable.run(StartupTasks.java:52) at java.lang.Thread.run(Thread.java:662)Caused by: java.sql.SQLException: Failed to start database 'C:/Users/BMASON/Sandbox/InternalDB' with class loader sun.misc.Launcher$AppClassLoader@93dee9  see the next exception for details. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 17 moreCaused by: java.sql.SQLException: Restore of a serializable or SQLData object of class   attempted to read more data than was originally stored at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source) ... 14 moreCaused by: ERROR XSDA7: Restore of a serializable or SQLData object of class   attempted to read more data than was originally stored at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(Unknown Source) at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(Unknown Source) at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(Unknown Source) at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaHeap(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllSPSDescriptors(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropJDBCMetadataSPSes(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateMetadataSPSes(Unknown Source) at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(Unknown Source) at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(Unknown Source) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source) ... 14 moreCaused by: java.io.EOFException at java.io.DataInputStream.readInt(DataInputStream.java:375) at org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(Unknown Source) at org.apache.derby.impl.sql.execute.TriggerInfo.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.impl.sql.execute.WriteCursorConstantAction.readExternal(Unknown Source) at org.apache.derby.impl.sql.execute.UpdateConstantAction.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(Unknown Source) at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source) at org.apache.derby.iapi.types.UserType.readExternal(Unknown Source) ... 39 more   ,0
5291,test failure: NullPointerException with J2ME (weme 6.2) in testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest)    See: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1136748-suites.All_diff.txt(until cleaned up).This test started failing after the following three changes were committed:-----------------------------------------------------------r1136397 | kahatlen | 2011-06-16 05:21:07 -0700 (Thu  16 Jun 2011) | 3 linesDERBY-5239: Remove usages of DriverManager to obtain an Embedded Connection in Derby ServerRemove import of DriverManager now that it's not used.------------------------------------------------------------------------r1136371 | kahatlen | 2011-06-16 03:54:33 -0700 (Thu  16 Jun 2011) | 6 linesDERBY-5274: getColumns() doesn't work with auto generated identitycolumns that start with large numbersRemoved hard-coded maximum length for the start value and increment inthe meta-data query.------------------------------------------------------------------------r1136363 | kristwaa | 2011-06-16 03:22:46 -0700 (Thu  16 Jun 2011) | 10 linesDERBY-4137: OOM issue using XA with timeouts Reduce the memory footprint when executing successful XA transactions thathave a timeout set by nulling out the reference to the XATransactionStateobject in the timer task. The timer task will stay around in the timer queueuntil reaching the scheduled time - even if the task is canceled.Added a regression test (run as part of 'ant junit-lowmem').Patch file: derby-4137-2a-reduce_memory_footprint.diff-----------------------------------------------------------The stack trace is like so:---------------------------------------------1) testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest)junit.framework.AssertionFailedError: java.lang.NullPointerException at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:182) at org.apache.derbyTesting.junit.J2EEDataSource.getXADataSource(J2EEDataSource.java:98) at org.apache.derbyTesting.junit.J2EEDataSource.getXADataSource(J2EEDataSource.java:69) at org.apache.derbyTesting.functionTests.tests.memory.XAMemTest.testDerby4137_TransactionTimeoutSpecifiedNotExceeded(XAMemTest.java:65) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Likely this test just needs to not run if (JDBC.vmSupportsJSR169()).   ,0
5292,SQLAuthorisation and views    Hi in some cases there seem to be issues with SQLAuthorisation in conjunction with database VIEWS.Please see attached files as repro (script.txt has only the SQL I executed  output is the output resulting when running the script). I would think identical results should be returned in all cases and independent on how the view has been defined  but this to my surprise not being the case:1) Trying to select from view appl.'VW_MyTasks' - which is a simple view defined on just one table - leads to expected results  i.e. 'my' tasks are being returned.2) Trying to select from view appl.'VW_MyPriorityTasks - which is a view defined on two joined tables without using an inner join clause - leads to expected results  i.e. 'my' priority tasks are being returned.3) Trying to select from view appl.'VW2_MyPriorityTasks - which is the same view but now the two tables joined using an inner join clause - leads to an error and no tasks returned (when the same results as in 2) above were expected).4) Trying to select from view appl.'VW3_MyPriorityTasks' - which is a view defined using a subselect - also unexpectedly leads to an error.Note: While I could rewrite each inner join clause with changing the syntax like in 2) above  this provides a simple work-around for such cases. May be there is a work-around for subselects also (not sure if every subselect could be rewritten to a join?). However when depending on using EXISTS constructs in the query there unfortunately is no way (I would know of) to get around this problem. Unfortuanetly a view that makes use of EXISTS is also one I would need to define in my data base...Thanks   ,1
5300,Change derby.tests.trace to print the class as well as fixture name    I was thinking it would be good for the test output with -Dderby.tests.trace=true to have the class name as well as the fixture as I think if I had a nickel for every time I grepped for a fixture name to find out what class it is in  I would have a pretty big piggy bank.It could print the full class name  like this:org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.testBasicOperations used 844 ms .or strip off the org.apache.derbyTesting.functionTests for less output like:tests.lang.SimpleTest.testBugFixes used 6265 ms .Any preferences?   ,0
5306,Remove dead methods (June 2011)    Unused methods should be removed.   ,0
5313,Assert failure with CASE expression in GROUP BY clause    I see the following assert failure with debug jars on 10.5.3.0 and later (doesn't fail on 10.5.1.1 and earlier):ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; select case when a=1 then 1 else 2 end from t t1(a) join t t2(b) on a=b group by case when a=1 then 1 else 2 end;ERROR XJ001: Java exception: 'ASSERT FAILED retVN expected to be instanceof ColumnReference  not org.apache.derby.impl.sql.compile.ConditionalNode: org.apache.derby.shared.common.sanity.AssertFailure'.   ,0
5331,Incorrect use of CharsetEncoder in DDMWriter    DDMWriter has two calls to CharsetEncoder.encode()  in writeLDString() and writeString(). According to the javadoc for CharsetEncoder  one should call reset() before one calls encode()  and flush() after on. DDMWriter doesn't call reset() or flush(). I'm not aware of any problems that happen because of it  but we should follow the spec to avoid surprises.   ,0
5336,Repeated database creation causes OutOfMemoryError    Repeatedly creating  querying  updating  and shutting down a database or databases eventually causes OutOfMemoryError.Java source reproducing the problem is attached.   ,0
5343,Starting 7/13/2011 weme 6.2 upgrade tests started failing with 213 failures 127 errors with java.lang.IllegalAccessException    Starting on 7/13/2011 weme 6.2 upgrade tests started failing with many failures and errors.The first Error is a java.lang.IllegalAccessException with stack trace below. It is probably related to this checkin.r1145973 | kahatlen | 2011-07-13 05:28:39 -0700 (Wed  13 Jul 2011) | 3 linesDERBY-5316: Unload old JDBC drivers when done with them in the upgrade testsAt first glance it looks like a JVM issue as the native method shoudln't get an IllegalAccessException.Probably best to work around it short term and disable the fix for weme. I think it just impacts the tests and not the product.Time: 11 927.828There were 127 errors:1) 10.1.1.0 Upgrade Phase: CREATE java.lang.IllegalAccessException at java.lang.reflect.Field.setImpl(Native Method) at java.lang.reflect.Field.set(Field.java:431) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.clearField(PhaseChanger.java:228) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.clearDerby23ThreadLocals(PhaseChanger.java:264) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.tearDown(PhaseChanger.java:153) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)2) testUnimplementedSQLObjectAttributes(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)SQL Exception: Feature not implemented: no details. at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.notImplemented(Unknown Source) at org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getAttributes(Unknown Source) at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testUnimplementedSQLObjectAttributes(DatabaseMetaDataTest.java:944) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:23)   ,0
5345,URLCheck fails on phoneME    I see this failure on phoneME:org.apache.derbyTesting.functionTests.tests.tools.ToolScripts.URLCheck (from org.apache.derbyTesting.functionTests.suites.All)junit.framework.ComparisonFailure: Output at line 19 expected:&lt;&#91;ij(CONNECTION1)&gt; -- Find an unknown attribute.&#93;&gt; but was:&lt;&#91;JAVA ERROR: java.lang.NoClassDefFoundError: java.sql.Driver&#93;&gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(Unknown Source) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)The original test was excluded on Foundation because it required java.sql.Driver.   ,0
5346,ij3Test fails on phoneME    org.apache.derbyTesting.functionTests.tests.tools.ij3Test.ij3 (from org.apache.derbyTesting.functionTests.suites.All)junit.framework.ComparisonFailure: Output at line 1 expected:&lt;ij&#91;(CONNECTION1)&#93;&gt; --&gt; but was:&lt;ij[]&gt; --&gt; at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(Unknown Source) at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)   ,0
5369,Restricted Table Function support should pass NOT EQUAL restrictions to initScan    Restricted Table Function support should pass NOT EQUAL restrictions to initScan. Currently any '!=' or '&lt;&gt;' constraints on the SQL used in the WHERE clause of a SELECT on a Restricted Table Funtion are not passed to the initScan method. These can be useful depending on how the Restricted Table Function is implemented.   ,0
5377,AssertionFailedError in testCaseCS4595B_NonUniqueIndex in AccessTest    There was 1 failure:1) testCaseCS4595B_NonUniqueIndex(org.apache.derbyTesting.functionTests.tests.store.AccessTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AccessTest.assertStatsOK(AccessTest.java:402) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.doTestCaseCS4595B(AccessTest.java:1720) at org.apache.derbyTesting.functionTests.tests.store.AccessTest.testCaseCS4595B_NonUniqueIndex(AccessTest.java:1830) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Cf. http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/Limited/testSummary-1154534.html   ,0
5390,NPE in BasicDatabase.stop in replication slave mode (dd.clearSequenceCaches)    To reproduce  set up a replication pair and then stop the master (I used 'stopMaster=true').From derby.log on the slave:Replication slave role was stopped for database 'replicDB'.java.lang.NullPointerException at org.apache.derby.impl.db.BasicDatabase.stop(Unknown Source) at org.apache.derby.impl.db.SlaveDatabase.stop(SlaveDatabase.java:167) at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:443) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:394) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:229) at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextImpl.java:77) at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343) at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:437) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:339) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290) at org.apache.derby.impl.jdbc.EmbedConnection.internalStopReplicationSlave(EmbedConnection.java:1034) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:353) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:73) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(EmbedConnection40.java:51) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144) at org.apache.derby.impl.db.SlaveDatabase.handleShutdown(SlaveDatabase.java:428) at org.apache.derby.impl.db.SlaveDatabase.access$200(SlaveDatabase.java:72) at org.apache.derby.impl.db.SlaveDatabase$SlaveDatabaseBootThread.run(SlaveDatabase.java:328) at java.lang.Thread.run(Thread.java:722)The reason is that there is no data dictionary available when the database is in replication slave mode.Note that the exception is caught and simply printed to derby.log.   ,0
5395,By default  only the DBO should be allowed to run several of the diagnostic VTIs.    Only the DBO should be allowed to run the following VTIs: syscs_diag.statement_cache syscs_diag.transaction_table syscs_diag.error_log_reader( ) syscs_diag.statement_duration()   ,1
5406,Intermittent failures in CompressTableTest and TruncateTableTest    The test cases CompressTableTest.testConcurrentInvalidation() and TruncateTableTest.testConcurrentInvalidation() fail intermittently with errors such as:ERROR XSAI2: The conglomerate (2 720) requested does not exist.The problem has been analyzed in the comments on DERBY-4275  and a patch attached to that issue (invalidation-during-compilation.diff) fixes the underlying race condition. However  that patch only works correctly together with the fix for DERBY-5161  which was backed out because it caused the regression DERBY-5280.We will therefore need to find a way to fix DERBY-5161 without reintroducing DERBY-5280 in order to resolve this issue.   ,0
5412,MemoryLeakFixesTest.testRepeatedDatabaseCreationWithAutoStats() fails on phoneME: java.lang.InternalError: Number of class names exceeds vm limit.    Seen when running MemoryLeakFixesTest  both with trunk and with the 10.8.2.1 release candidate:1) testRepeatedDatabaseCreationWithAutoStats(org.apache.derbyTesting.functionTests.tests.memory.MemoryLeakFixesTest)java.lang.InternalError: Number of class names exceeds vm limit. at java.lang.ClassLoader.findLoadedClass0(Native Method) at java.lang.ClassLoader.findLoadedClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.util.ResourceBundle.loadBundle(Unknown Source) at java.util.ResourceBundle.findBundle(Unknown Source) at java.util.ResourceBundle.getBundleImpl(Unknown Source) at java.util.ResourceBundle.getBundle(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getBundleWithEnDefault(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getBundleForLocale(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.getBundle(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getBundle(Unknown Source) at org.apache.derby.iapi.services.i18n.MessageService.getCompleteMessage(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver169.getNewEmbedConnection(Unknown Source) at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Unknown Source) at org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(Unknown Source) at org.apache.derbyTesting.functionTests.tests.memory.MemoryLeakFixesTest.testRepeatedDatabaseCreationWithAutoStats(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)   ,0
5414,SysDiagVTIMappingTest.test_5391() failed: java.text.ParseException: Unparseable date: 'Thu Sep 15 14:00:16 CEST 2011'    Seen when testing the 10.8.2.1 release candidate on Windows 7:http://dbtg.foundry.sun.com/derby/test/10.8.2.1_RC/logs/jvm1.6/win7/suitesAll/report.txtThere were 2 errors:1) test_5391(org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest)java.text.ParseException: Unparseable date: 'Thu Sep 15 14:00:16 CEST 2011' at java.text.DateFormat.parse(DateFormat.java:337) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.vetTimestamp(SysDiagVTIMappingTest.java:744) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.test_5391(SysDiagVTIMappingTest.java:728) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) test_5391(org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest)java.text.ParseException: Unparseable date: 'Thu Sep 15 14:00:16 CEST 2011' at java.text.DateFormat.parse(DateFormat.java:337) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.vetTimestamp(SysDiagVTIMappingTest.java:744) at org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.test_5391(SysDiagVTIMappingTest.java:728) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)   ,0
5419,Make Derby run on Oracle Java ME Embedded Client    I tried running Derby on Oracle Java ME Embedded Client 1.0  and booting the engine failed:Caused by: java.lang.NoClassDefFoundError: java.nio.channels.OverlappingFileLockException at org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(DirStorageFactory4.java:57) at org.apache.derby.impl.io.DirStorageFactory.newStorageFile(DirStorageFactory.java:58) at org.apache.derby.impl.services.monitor.StorageFactoryService$1.run(StorageFactoryService.java:96) at java.security.AccessController.doPrivileged(Compiled Method)(AccessController.java:351) at java.security.AccessController.doPrivileged(AccessController.java:320) at org.apache.derby.impl.services.monitor.StorageFactoryService.&lt;init&gt;(StorageFactoryService.java:86) at org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(BaseMonitor.java:1630) at org.apache.derby.impl.services.monitor.BaseMonitor.access$100(BaseMonitor.java:99) at org.apache.derby.impl.services.monitor.BaseMonitor$ProviderEnumeration.getNextStorageFactory(BaseMonitor.java:2146) at org.apache.derby.impl.services.monitor.BaseMonitor$ProviderEnumeration.hasMoreElements(BaseMonitor.java:2159) at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1516) at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2697) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:385)This seems to happen because Derby recognizes it as a Java 1.4 platform  whereas it's actually a CDC/FP 1.1.2 platform.   ,0
5424,On z/OS testConnectWrongSubprotocolWithSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.Asserti ailedError    With the release candidate 10.8.2.1 - (1170221) I saw the following two failures on z/OS in testConnectWrongSubprotoctestolWithoutSystemPropertyThere were 2 failures:1) testConnectWrongSubprotocolWithSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.checkConnectWrongSubprotocol(ConnectWrongSubprotocolTest.java:82) at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.testConnectWrongSubprotocolWithSystemProperty(ConnectWrongSubprotocolTest.java:68) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)2) testConnectWrongSubprotoctestolWithoutSystemProperty(org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.checkConnectWrongSubprotocol(ConnectWrongSubprotocolTest.java:82) at org.apache.derbyTesting.functionTests.tests.tools.ConnectWrongSubprotocolTest.testConnectWrongSubprotoctestolWithoutSystemProperty(ConnectWrongSubprotocolTest.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.extensions.TestSetup.run(TestSetup.java:16)FAILURES!!!Tests run: 13984  Failures: 2  Errors: 0The test is newly converted with DERBY-5084 so not likely a regression  but probably more likely an encoding issue related to this test: String ijResult = runIjScript(ijScript  useSystemProperties);  assertTrue(ijResult.indexOf('08001') &gt; -1);   ,0
5427,Unauthorized shutdown should not generate thread dump and javacore. AuthenticationTest dumps over 20 javacores with IBM JVM for normal user errors    If jdbcapi.AuthenticationTest is run without changing the derby.stream.error.extendedDiagSeverityLevel as is done in the test  it generates thread dumps and javacores for IBM jvms. I beleive the errors in this test are expected user errors and not crashes so they should not generate a thread dump or javacore. To reproduce remove this line from test: //Derby-4856 set the property to avoid thread dump and diagnostic info sysprops.put('derby.stream.error.extendedDiagSeverityLevel' '50000');Until fixed  users can work around the issue by setting derby.stream.error.extendedDiagSeverityLevel to 50000 as is done in the test.   ,1
5438,Empty MAPS table in toursdb    The toursdb that's bundled with 10.7.1.1 and 10.8.1.2 (and the 10.8.2.1 release candidate) has no rows in the MAPS table. Version 10.6.2.1 had three rows in that table:ij&gt; select * from maps;MAP_ID |MAP_NAME |REGION |AREA |PHOTO_FORMAT |PICTURE --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------1 |North Ocean |Cup Island |1776.1100 |gif |4749463839613601fe00f70000000000800000008000808000000080800080008080808080c0c0c0ff000000ff00ffff000000ffff00ff00ffffffffff00000&amp;2 |Middle Ocean |Small Island |1166.7700 |gif |47494638396192008e00f70000000000800000008000808000000080800080008080808080c0c0c0ff000000ff00ffff000000ffff00ff00ffffffffff00000&amp;3 |South Ocean |Witch Island |9117.9000 |gif |474946383961f602f301f70000000000800000008000808000000080800080008080808080c0c0c0ff000000ff00ffff000000ffff00ff00ffffffffff00000&amp;3 rows selectedBuilding it on a clean trunk and looking at generated/toursdb/toursdb.out gives the following hint:FAIL &#8211; unexpected exception: java.sql.SQLException: Database 'toursDB' not found.java.sql.SQLException: Database 'toursDB' not found. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:227) at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3085) at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:735) at org.apache.derby.impl.jdbc.EmbedConnection.&lt;init&gt;(EmbedConnection.java:414) at org.apache.derby.impl.jdbc.EmbedConnection30.&lt;init&gt;(EmbedConnection30.java:73) at org.apache.derby.impl.jdbc.EmbedConnection40.&lt;init&gt;(EmbedConnection40.java:51) at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:146) at java.sql.DriverManager.getConnection(DriverManager.java:582) at java.sql.DriverManager.getConnection(DriverManager.java:207) at toursdb.insertMaps.main(insertMaps.java:51)Caused by: java.sql.SQLException: Database 'toursDB' not found. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 14 moreI suspect this was introduced by the changes in DERBY-3986 when the destination directory for toursdb was changed.   ,0
5444,SpawnedProcess.complete may fail to destroy the process when a timeout is specified    The logic in SpawnedProcess has a weakness that may result in the wrapped process not being destroyed if the destroy variable is false and a timeout is specified.The problem is that the while condition will shortcut the if condition in the catch clause (where destroy is set to true if the timeout is exceeded).   ,0
5454,ERROR 40001 deadlock in nstest on select max(serialkey)    nstest with 10.8.2 (both 10.8.2.1 RC2 (revision 1170221) and builds off the 10.8. tree at 10.8.2.2 level after backing out re DERBY-5448) show deadlock errors like the following:Caused by: ERROR 40001: A lock could not be obtained due to a deadlock  cycle of at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source) at org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source) at org.apache.derbyTesting.system.nstest.utils.DbUtil.pick_one(DbUtil.java:491) at org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(DbUtil.java:418) at org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation(TesterObject.java:175) at org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting(Tester2.java:109) at org.apache.derbyTesting.system.nstest.NsTest.run(NsTest.java:555)Caused by: java.sql.SQLException: A lock could not be obtained due to a deadlock  cycle of locks and waiters is:Lock : ROW  NSTESTTAB  (619 15) Waiting XID : {104564  S}   NSTEST  select max(serialkey) from nstesttab where serialkey &gt; ? Granted XID : {104179  X}Lock : ROW  NSTESTTAB  (619 16) Waiting XID : {104179  S}   NSTEST  select max(serialkey) from nstesttab where serialkey &gt; ? Granted XID : {104564  X}. The selected victim is XID : 104564. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 14 moreFor more examples  see comments on DERBY-5448.   ,0
5456,Problems running SecureServerTest and replication tests on Open JDK 7 for Mac OS X    I see the following errors when I run the JUnit tests on Open JDK 7 for Mac OS X:sanity is sane..START-SPAWNED:sysinfo STANDARD OUTPUT: exit code=1Tue Oct 11 10:15:02 PDT 2011 : Error getting SysInfo information.END-SPAWNED :sysinfo STANDARD OUTPUT:FSTART-SPAWNED:SpawnedNetworkServer STANDARD OUTPUT: exit code=143Tue Oct 11 10:14:54 PDT 2011 : Security manager installed using the Basic server security policy.Tue Oct 11 10:15:01 PDT 2011 : Warning: UnknkownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not known.Tue Oct 11 10:15:01 PDT 2011 : Apache Derby Network Server - 10.8.2.2 - (1181258) started and ready to accept connections on port 1527Tue Oct 11 10:15:02 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands Tue Oct 11 10:15:02 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands END-SPAWNED :SpawnedNetworkServer STANDARD OUTPUT:E.START-SPAWNED:sysinfo STANDARD OUTPUT: exit code=1Tue Oct 11 10:15:50 PDT 2011 : Error getting SysInfo information.END-SPAWNED :sysinfo STANDARD OUTPUT:FSTART-SPAWNED:SpawnedNetworkServer STANDARD OUTPUT: exit code=143Tue Oct 11 10:15:43 PDT 2011 : Security manager installed using the Basic server security policy.Tue Oct 11 10:15:50 PDT 2011 : Warning: UnknkownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not known.Tue Oct 11 10:15:50 PDT 2011 : Apache Derby Network Server - 10.8.2.2 - (1181258) started and ready to accept connections on port 1527Tue Oct 11 10:15:50 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands Tue Oct 11 10:15:50 PDT 2011 : host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands END-SPAWNED :SpawnedNetworkServer STANDARD.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.....START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F......................START-SPAWNED:SpawnedNetworkServer ERROR OUTPUT:Error: Exception thrown by the agent : java.net.MalformedURLException: Local host name unknown: java.net.UnknownHostException: richard-hillegas-computer.local: richard-hillegas-computer.local: nodename nor servname provided  or not knownEND-SPAWNED :SpawnedNetworkServer ERROR OUTPUT:F.E.E.E.F.E.E.E.E.E.E.E.E.E.E.E.E.E.E.ETime: 5 033.075There were 20 errors:1) SecureServerTest( Opened = false  Authenticated= true  CustomDerbyProperties= null  WildCardHost= 0.0.0.0 )java.lang.Exception: DRDA_NeedLocalHost.S:host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands  at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.shutdown(Unknown Source) at org.apache.derby.drda.NetworkServerControl.shutdown(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.tearDown(NetworkServerTestSetup.java:379) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) SecureServerTest( Opened = false  Authenticated= true  CustomDerbyProperties= null  WildCardHost= 0.00.000.0 )java.lang.Exception: DRDA_NeedLocalHost.S:host: localhost is not local to the server running on 0.0.0.0  so cannot be used for NetworkServerControl commands  at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.shutdown(Unknown Source) at org.apache.derby.drda.NetworkServerControl.shutdown(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.tearDown(NetworkServerTestSetup.java:379) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)3) testReplication_Local_LogFilesSynched(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.testReplication_Local_LogFilesSynched(ReplicationRun_Local.java:195) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more4) testReplication_Local_1_InsertUpdateDeleteOnMaster(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1.testReplication_Local_1_InsertUpdateDeleteOnMaster(ReplicationRun_Local_1.java:77) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more5) testReplication_Local_1_Indexing(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.makeReadyForReplication(ReplicationRun.java:2518) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1Indexing.testReplication_Local_1_Indexing(ReplicationRun_Local_1Indexing.java:70) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 33 more6) testReplication_Local_StateTest_part1_1(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.testReplication_Local_StateTest_part1_1(ReplicationRun_Local_StateTest_part1_1.java:96) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more7) testReplication_Local_StateTest_part1_2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.testReplication_Local_StateTest_part1_2(ReplicationRun_Local_StateTest_part1_2.java:104) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more8) testReplication_Local_StateTest_part1_3(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3.testReplication_Local_StateTest_part1_3(ReplicationRun_Local_StateTest_part1_3.java:95) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:206) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.StatementReply.readPrepare(Unknown Source) at org.apache.derby.client.net.NetStatement.readPrepare_(Unknown Source) at org.apache.derby.client.am.Statement.readPrepare(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeX(Unknown Source) ... 32 more9) testReplication_Local_StateTest_part2(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2)java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XSAI2  SQLERRMC: 384XSAI2.S at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.execute(Unknown Source) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(ReplicationRun.java:868) at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.testReplication_Local_StateTest_part2(ReplicationRun_Local_StateTest_part2.java:97) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.functi,0
5463,ant release should not modify drdamaint version    ant release automatically sets drdamaint version to 0 in release.properties.However  on the 10.8 branch  drdamaint version had been increased to trigger a difference in behavior with vs. without a particular check in; ant release caused this to get reset thus breaking the fix.ant release should somehow assess the value of drdamaint.   ,0
5474,Speed up message splitting in build    On a slow machine I sometimes use to build Derby  running the org.apache.derbyBuild.splitmessages tool takes 30 seconds and accounts for 15% of the total time needed to run 'ant -q buildsource' (which builds the engine  the network server and the client  but not the tests or demos). The tool is invoked 15 times  and each time a new Java process is started because the Ant target has specified fork='yes'. By changing it to run the splitmessages tool in the same Java process as the one running Ant  the time is reduced to 3-4 seconds on the same machine.   ,0
5478,Speed up creation of bin scripts    The binscripts build target takes around 3 seconds in the environments I use for building Derby. It looks like most of the time is spent running the chmod Ant task on the generated scripts. There are six invocations of the chmod task  one for each script. The chmod task can operate on multiple files  so one invocation should be enough (and one invocation on six files seems to have about the same cost as one invocation on a single file).A related problem is that the scripts are always regenerated in incremental builds  even when there's nothing to do  so the binscripts target accounts for a significant part of the time it takes to run an incremental build.   ,0
5479,Don't run MessageVetter unless messages have changed    Continuing my series of patches micro-optimizing the build scripts...MessageVetter is always run as part of the build  also in incremental builds when nothing has changed. Since it needs to go through more than 800 files  it may take a while (just half a second on the fastest machine I tested  so not a big deal  but that's still a significant portion of the total time in an incremental build). We should skip the message check in incremental builds if none of the messages have changed.   ,0
5482,Reduce number of jar invocations in the buildjars target    When building derby.jar  derbytools.jar and derbynet.jar  the build script runs the jar target twice for each of the jars. The first jar invocation creates the jar and adds some files  and the second one updates the jars with some more files. It would be simpler to create each of the jar files in a single invocation  and it would also cut off a few seconds on the time to build the jars.   ,0
5492,Restrictive file permissions: permissions removed also for owner on NTFS if Acl does not contain explicit entry for owner    It turns out that the file owner does not necessarily get an explicit AclEntry; this depends on whether the created file has sufficient permissions already through  say  a permission for everybody to write. The present logic removes all AclEntries except those granted to the file's owner  erroneously presuming there would be such an entry always. This led to all AclEntries being removed. This error is seen in Oracle's nightly regressions for Windows  but did not reproduced when running manually on Windows. This was due to different default inherited permissions on the directories in which the regression tests were run.   ,1
5493,Same value returned by successive calls to a sequence generator.    The following script shows the same value being returned from a sequence generator by two successive NEXT VALUE FOR calls. Thanks to Knut for finding this:connect 'jdbc:derby:memory:db;create=true';create table t (x int);create sequence s;autocommit off;select count from sys.syssequences with rs;values next value for s;drop table t;rollback;&#8211; same value as previous callvalues next value for s;   ,0
5498,ClosedByInterruptException in AuthenticationTest    AuthenticationTest failed with this error on trunk (intermittent error  passed when I reran suites.All):java.sql.SQLException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ040  SQLERRMC: Failed to start database 'singleUse/oneuse2c' with class loader sun.misc.Launcher$AppClassLoader@1ff5ea7  see the next exception for details.::SQLSTATE: XJ001Java exception: 'ASSERT FAILED Unable to Acquire Exclusive Lock on /export/home/hudsond/.hudson/jobs/Derby-JUnit/workspace/test/system/singleUse/oneuse2c/dbex.lck: org.apache.derby.shared.common.sanity.AssertFailure'.::SQLSTATE: XJ001Java exception: ': java.nio.channels.ClosedByInterruptException'. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:99) at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166) at java.sql.DriverManager.getConnection(DriverManager.java:579) at java.sql.DriverManager.getConnection(DriverManager.java:190) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81) at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43) at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1574) at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72) at org.apache.derbyTesting.junit.DatabasePropertyTestSetup.tearDown(DatabasePropertyTestSetup.java:280) at junit.extensions.TestSetup$1.protect(TestSetup.java:24) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27)Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1  SQLSTATE: XJ040  SQLERRMC: Failed to start database 'singleUse/oneuse2c' with class loader sun.misc.Launcher$AppClassLoader@1ff5ea7  see the next exception for details.::SQLSTATE: XJ001Java exception: 'ASSERT FAILED Unable to Acquire Exclusive Lock on /export/home/hudsond/.hudson/jobs/Derby-JUnit/workspace/test/system/singleUse/oneuse2c/dbex.lck: org.apache.derby.shared.common.sanity.AssertFailure'.::SQLSTATE: XJ001Java exception: ': java.nio.channels.ClosedByInterruptException'. at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125) at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538) at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431) at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294) at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121) at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826) at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762) at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591) at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406) at org.apache.derby.client.net.NetConnection.&lt;init&gt;(NetConnection.java:220) at org.apache.derby.client.net.NetConnection40.&lt;init&gt;(NetConnection40.java:74) at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269) at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157)The server side log was not preserved because the failure happened inside a decorator.   ,1
5501,Subquery is only allowed to return a single column - When using derby with hibernate (or JPA) queries are created per JPA spec. For tables with multi-column PK  subqueries are created with two columns in select clause.    ERROR: Subquery is only allowed to return a single column.PROBLEM: When using derby with hibernate (or JPA) queries are created by the JPA engine per JPA spec. For tables with multi-column PK  subqueries are created with two columns in select clause (see select colofassig6_.activityID  colofassig6_.assigneeID from Assignment in the query below).Without this support  I can not use Derby with JPA.Hibernate: select distinct activitybe0_.activityID as activityID69_  activitybe0_.createdBy as createdBy69_  activitybe0_.createdOn as createdOn69_  activitybe0_.lastModifiedBy as lastModi4_69_  activitybe0_.lastModifiedOn as lastModi5_69_  activitybe0_.activityDate as activity6_69_  activitybe0_.activityTypeHierarchyID as activity7_69_  activitybe0_.activityTypeID as activity8_69_  activitybe0_.campaignID as campaignID69_  activitybe0_.comments as comments69_  activitybe0_.description as descrip11_69_  activitybe0_.inputID as inputID69_  activitybe0_.inputTypeID as inputTy13_69_  activitybe0_.name as name69_  activitybe0_.notes as notes69_  activitybe0_.organizationID as organiz16_69_  activitybe0_.parentActivityTypeID as parentA17_69_ from Activity activitybe0_  Activity activitybe1_ inner join ActivitySchedule colofactiv2_ on activitybe1_.activityID=colofactiv2_.activityID inner join ActivityScheduleStatus colofactiv3_ on colofactiv2_.activityScheduleID=colofactiv3_.activityScheduleID inner join ActivityScheduleStatusType activitysc4_ on colofactiv3_.activityScheduleStatusTypeID=activitysc4_.activityScheduleStatusTypeID  ActivityTypeHierarchy activityty5_ where activitybe0_.activityTypeHierarchyID=activityty5_.activityTypeHierarchyID and activityty5_.activityTypeHierarchyID=? and not (exists (select colofassig6_.activityID  colofassig6_.assigneeID from Assignment colofassig6_ where activitybe0_.activityID=colofassig6_.activityID)) and (activitybe0_.activityID&lt;&gt;activitybe1_.activityID or activitysc4_.name&lt;&gt;'Route')2011-11-14 11:41:13 413 ERROR &#91;org.hibernate.util.JDBCExceptionReporter&#93; (EJB-Timer-1321288405420&#91;target=jboss.j2ee:ear=oecrm1.6.3RC1-derby-jboss.ear jar=builder-ejb.jar name=WorkflowActivatorBean service=EJB3&#93;) Subquery is only allowed to return a single column.   ,0
5504,SecureServerTest  Driver40UnbootedTest and replication tests not prepared for space in java.home    SecureServerTest  Driver40UnbootedTest and the replication tests fork JVMs by calling Runtime.exec() methods that take the command as a String parameter  not a String[]. This causes problems like the ones seen in DERBY-5490 when there's a space in ${java.home}.The tests should be rewritten to use the helper method BaseTestCase.execJavaCmd()  which handles this case correctly.   ,0
5529,XATransactionTest: Table/View 'DERBY1016' already exists    Cf the test report on trunk.http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.7/testing/Limited/testSummary-1211980.htmlIt looks like the ordering between testForgetExceptionDerby1016PROTO and testForgetExceptionDerby1016NOTA is inversed in this run on Windows  and the test currently requires testForgetExceptionDerby1016PROTO to be run ahead of testForgetExceptionDerby1016NOTA. JDK 7 can/will reorder the fixtures.   ,0
5530,SQLChar.getCollationKey NPE in index-stat-thread    With this JDBC connection url is : jdbc:derby:directory:db_name;territory=fr_FR;collation=TERRITORY_BASED:PRIMARY;create=trueI get a NullPointerException in index-stat-threadSun Dec 11 19:33:11 CET 2011 Thread&#91;pool-3-thread-1 5 main&#93; {istat} 'PROXIFLEX'.'IDAXX_RES': update scheduled  reason=&#91;no stats  row-estimate=375&#93; (queueSize=1)Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat trace@26130360} worker thread started (xid=12049) &#91;q/p/s=1/0/1 err:k/u/c=0/0/0 rej:f/d/o=0/0/0&#93;Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat trace@26130360} processing 'PROXIFLEX'.'IDAXX_RES' Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat} runtime exception during normal operationjava.lang.NullPointerException at org.apache.derby.iapi.types.SQLChar.getCollationKey(Unknown Source) at org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.stringCompare(Unknown Source) at org.apache.derby.iapi.types.CollatorSQLVarchar.stringCompare(Unknown Source) at org.apache.derby.iapi.types.SQLChar.compare(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.compareWithPrevKey(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.processingLoop(Unknown Source) at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(Unknown Source) at java.lang.Thread.run(Thread.java:662)Sun Dec 11 19:33:11 CET 2011 Thread&#91;index-stat-thread 5 main&#93; {istat trace@26130360} worker thread exit &#91;q/p/s=0/0/1 err:k/u/c=0/0/0 rej:f/d/o=0/0/0&#93;If I remove territory and collation parameters I don't have the exception.In case you want to disable automatic statistics  set derby property : derby.storage.indexStats.auto to false.   ,0
5539,Harden password hashing in the builtin authentication service    The Open Web Application Security Project has some suggestions on how to make it harder for an attacker to crack hashed passwords: https://www.owasp.org/index.php/Hashing_JavaThe builtin authentication service doesn't follow all the suggestions. In particular  it doesn't add a random salt  and it only performs the hash operation once.I propose that we add two new properties that makes it possible to configure builtin to use a random salt and run multiple iterations of the hash operation: derby.authentication.builtin.saltLength - the length of the random salt to add (in bytes) derby.authentication.builtin.iterations - the number of times to perform the hash operationI'd also suggest that we set the defaults so that random salt and multiple iterations are used by default. The OWASP page mentions 64 bits of salt (8 bytes) and a minimum of 1000 iterations. I consulted a security expert who thought that these recommendations sounded OK  but he believed the recommended salt length was likely to be revised and suggested 16 bytes instead. The only price we pay by going from 8 to 16 bytes  is that we'll need to store 8 bytes extra per user in the database  so I don't see any reason not to set the default for derby.authentication.builtin.saltLength as high as 16. Setting the default for derby.authentication.builtin.iterations to 1000 will make authentication of a user somewhat slower (which is the point  really)  but experiments on my machine suggest that running our default hash function (SHA-256) 1000 times takes around 1 ms. Since authentication only happens when establishing a new connection to the database  that would be a negligible cost  I think.If saltLength is set to 0 and iterations is set to 1  the hashing will be done in the exact same way as in previous versions.Both of the properties should only be respected when the data dictionary version is 10.9 or higher  so that users in soft-upgraded databases can still log in after a downgrade.   ,1
5540,Call initCause() and getCause() without reflection in BaseJDBCTestCase    BaseJDBCTestCase uses reflection to call Throwable.initCause() and Throwable.getCause(). This was needed when running the tests on Java 1.3 and on Foundation Profile 1.0  but those platforms aren't supported any more. Now we should call the methods directly.   ,0
5541,Remove unnecessary field rwsOK in DirStorageFactory4    DirStorageFactory4 has a field called rwsOK defined like this: private static final boolean rwsOK = JVMInfo.JDK_ID &gt;= JVMInfo.J2SE_142;The only supported platform whose JVMInfo.JDK_ID is less than JVMInfo.J2SE_142  is FP/CDC. But DirStorageFactory4 is not used on FP/CDC because it depends on NIO. This means that the field will always have the value true  and it can be eliminated.   ,0
5547,NSSecurityMechanismTest fixture testNetworkServerSecurityMechanism fails intermittentlyt    There's an intermittent failure in NSSecurityMechanismTest fixture testNetworkServerSecurityMechanism  which I couldn't find was logged separately.This is the stack trace:1) testNetworkServerSecurityMechanism(org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest)junit.framework.AssertionFailedError: Timed out waiting for network server to start at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:577) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)The test output printed out this in the console:(net)derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:197) at java.net.SocketInputStream.read(SocketInputStream.java:116) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:625) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:694) at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:576) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:197) at java.net.SocketInputStream.read(SocketInputStream.java:116) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:625) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:694) at org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerTestSetup.java:576) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(NSSecurityMechanismTest.java:430) at org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:327) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:618) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)I've looked through my nightly test records for earlier occurrences on trunk/linux (this apparently has not happened on windows)   and found the following occurrences:2011-12-02 (ibm15)Slightly different stack traces were seen in other runs:2011-09-22 (ibm15)2011-10-09 (ibm15)2011-10-21 (ibm15)2011-10-31 (ibm16)2011-11-10 (ibm15)2011-12-12 (ibm16)2011-12-14 (ibm15)   ,1
5552,Derby threads hanging when using ClientXADataSource and a deadlock or lock timeout occurs    The issue arrives when multiple XA transactions are done in parallel and there is either a lock timeout or a lock deadlock detected. When this happens the connection is leaked in the Glassfish connection pool and the client thread hangs in 'org.apache.derby.client.netReply.fill(Reply.java:172)'. Shutting down the app server fails because the thread has a lock in 'org.apache.derby.client.net.NetConnection40' and another task is calling 'org.apache.derby.client.ClientPooledConnection.close(ClientPooledConnection.java:214)' which is waiting for the lock.Killing the appsever using 'kill' and then attempting to shutdown Derby network server causes the Network Server to hang. One of the threads hangs waiting for a lock at 'org.apache.derby.impl.drda.NeworkServerControlImpl.removeFromSessionTable(NetworkServerControlImpl.java:1525)' and the 'main' thread has this locked at 'org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2242)' and it itself is waiting for a lock which belongs to a thread that is stuck at 'org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(ActiveLock.java:118) which is in the TIMED_WAITING state.Only by killing the Network Server using 'kill' is possible at this point.There are transactions left even though all clients have been removed.   ,0
5554,NullPointerException in generated VTI code    With the latest 10.8.2.2 binary distribution  the following short script produces a NullPointerException:java -Dij.exceptionTrace=true org.apache.derby.tools.ijij&gt; connect 'jdbc:derby:brydb;create=true';ij&gt; create table t1 (a int);ij&gt; SELECT T2.  systabs.  syscgs.conglomeratenumber FROM  SYS.SYSTABLES systabs  sys.sysconglomerates syscgs  TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2 WHERE systabs.tabletype = 'T' and systabs.tableid = syscgs.tableid;The exception trace is pasted below:ERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 18 moreCaused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) ... 15 moreCaused by: java.lang.NullPointerException at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 11 moreERROR XJ001: Java exception: ': java.lang.NullPointerException'.java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 19 moreCaused by: java.lang.NullPointerException at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source) at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) ... 11 more   ,0
5559,AssertFailures (7  or 8) with ibm 1.6 and 1.5 on Windows XP in lang.NativeAuthProcs fixture testAll    Since revision 1221569  on windows XP I see some failures in the nightly test like this:1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.vetResetPassword(NativeAuthProcs.java:364) at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.resetPasswordTests(NativeAuthProcs.java:332) at org.apache.derbyTesting.functionTests.tests.lang.NativeAuthProcs.testAll(NativeAuthProcs.java:189) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)See for instance: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1222901-suites.All_diff.txtThere might be an intermittent issue here  one of the runs lists only 7 failures. But mostly there's 8.This does not occur on Linux with the same jvm versions.The changes between this run and the previous one when these failures did not occur: ================SUBVERSION LOG FROM 1221076 TO 1221569:------------------------------------------------------------------------r1221456 | rhillegas | 2011-12-20 11:35:44 -0800 (Tue  20 Dec 2011) | 1 lineDERBY-866: Add regression tests for GRANT/REVOKE on new procedures supporting NATIVE authentication.------------------------------------------------------------------------r1221434 | rhillegas | 2011-12-20 10:59:09 -0800 (Tue  20 Dec 2011) | 1 lineDERBY-866: Adjust RolesTest to account for new tuple in SYSROUTINEPERMS.------------------------------------------------------------------------r1221423 | rhillegas | 2011-12-20 10:44:33 -0800 (Tue  20 Dec 2011) | 1 lineDERBY-866: Add syscs_reset_password() and syscs_modify_password() system procedures.================derby.log in the failed directory only shows a start and shutdown.   ,0
5560,Java deadlock between LogicalConnection40 and ClientXAConnection40 (patch attached)    There is a Java deadlock between LogicalConnection40 and ClientXAConnection40. The order of calls that cause the deadlock are:Thread 1LogicalConnection.closeClientPooledConnection.recycleConnectionThread 2ClientPooledConnection.closeLogicalConnection.nullPhysicalConnectionThread 1 acquires a lock on the LogicalConnection and attempts to acquire a lock on the ClientPooledConnectionThread 2 acquires a lock on the ClientPooledConnection and attempts to acquire a lock on the LogicalConnectionIn production this occurs when one thread is committing a transaction and another thread is trying to close the connection. This occurred because the Glassfish connection pool is setup to close all connections on any error on any connection and an error has been detected on another connection in the pool.   ,0
5561,Race conditions in LogicalConnection checking for a null physical connection    There are race conditions with checkForNullPhysicalConnection calls in LogicalConnection. checkForNullPhysicalConnection is not synchronized and it checks for the member 'phsyicalConnection' which can be cleared by 'nullPhsyicalConnection' (which is synchronized) and 'close' (which is synchronized) and 'closeWithoutRecyclingToPool' (which is synchronized).This affects 'nativeSQL'  'getAutoCommit'  'getTransactionIsolation'  'getWarnings'  'isReadOnly'  'getCatalog'  'getTypeMap'  'createStatement'  'prepareCall'  'prepareStatement'  'setHoldability'  'getHoldability'  'setSavePoint'  'rollBack'  'releaseSavePoint'  'getSchema'  'setSchema'.All of these call 'checkForNullPhysicalConnection' and then use the member 'physicalConnection' after that call returns. Because these methods are not synchronized  between the time 'checkForNullPhysicalConnectoin' returns and 'physicalConnection' is used  the 'physicalConnection' member could be set to null and then a NPE occurs.Probably all of these methods should be changed to synchronized.   ,0
5565,Network Server should reject client connections that are not Derby Network Client    Since there have been no other network clients besides Derby Network Client tested or supported with Derby since 10.1 and since any protocol based client needs to understand Derby's DRDA extensions  deviations  and stored procedure usage. I think it would be a good idea in 10.9 for Network Server to outright reject any network clients that are not Derby Network Client.This would eliminate confusion up front for those that might not be aware that the DB2 Universal JDBC Driver and DB2 Runtime Client are not supported. They would get a clean reasonable error instead of hitting various protocol errors.Also it would mean if someone does want to add support for some network client in the future they would at least need to add the one or two lines of code in AppRequester to identify it  which I think would be a good thing.I think the code change would not be hard but the biggest impact might be anyone who still runs tests with JCC on trunk would need to disable those tests. There is a separate issue DERBY-4785 that Jayaram is working on to complete remove the JCC related code from the tests and test infrastructure.   ,1
5567,AlterTableTest#testDropColumn fails: drop view cannot be performed due to dependency    Saw this when running suitesAll on 10.8.2.2:1) testDropColumn(org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest)java.sql.SQLException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object. at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source) at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdate(Unknown Source) at org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest.testDropColumn(AlterTableTest.java:2465) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: org.apache.derby.client.am.SqlException: Operation 'DROP VIEW' cannot be performed on object 'ATDC_VW_5A_1' because VIEW 'ATDC_VW_5A_2' is dependent on that object. at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) at org.apache.derby.client.am.Statement.completeExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(Unknown Source) at org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.StatementReply.readExecuteImmediate(Unknown Source) at org.apache.derby.client.net.NetStatement.readExecuteImmediate_(Unknown Source) at org.apache.derby.client.am.Statement.readExecuteImmediate(Unknown Source) at org.apache.derby.client.am.Statement.flowExecute(Unknown Source) at org.apache.derby.client.am.Statement.executeUpdateX(Unknown Source) ... 55 morePrior to this  though  I saw this on the console  but no error/failure. Probably not related  I believe we have seen this before:java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data. at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:472) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)   ,0
5568,AssertionFailedError: Should not hold locks after commit in ResultSetMiscTest    Saw this failure when running the 10.8.2.2 regression tests on Java 7u4-b06:1) testBug4810(org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest)junit.framework.AssertionFailedError: Should not hold locks after commit at org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.checkLocksForAutoCommitSelect(ResultSetMiscTest.java:695) at org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testBug4810(ResultSetMiscTest.java:478) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
5580,NativeAuthenticationServiceTest getting multiple errors trying to delete files/directories during teardown    Multiple errors during teardown while trying to delete files/directories of the test databases on vista against sun jdk16 on vista  but passed against same jvm on sun nightly runs againstlinux and solaris.As of time of this report the tests against other sun jvms had not finished. Errors were also seen in ibm nightly runs  I'll rerport those in following comments.The following checkin that was included in the reported test failures changed the Native authentication tests  so seems likely to have caused the issues:r1233377 | rhillegas | 2012-01-19 14:51:13 +0100 (Thu  19 Jan 2012) | 1 lineFirst version of NATIVE authentication service  including first tranche of tests for it.vista run had 6 errors:http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/vista/1233467-suitesAll_diff.txt1) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d): C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/db.lck (isDir=false  canRead=true  canWrite=true  size=38)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/log/log1.dat (isDir=false  canRead=true  canWrite=true  size=1048576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/log (isDir=true  canRead=true  canWrite=true  size=0)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c10.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c101.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c111.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c121.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c130.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c141.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c150.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c161.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c171.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c180.dat (isDir=false  canRead=true  canWrite=true  size=36864)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c191.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1a1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1b1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1e0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c1f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c20.dat (isDir=false  canRead=true  canWrite=true  size=28672)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c200.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c211.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c221.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c230.dat (isDir=false  canRead=true  canWrite=true  size=114688)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c241.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c251.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c260.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c271.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c281.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c290.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2c1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2d0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c2f0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c300.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c31.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c311.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c321.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c331.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c340.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c351.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c361.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c371.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c380.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c391.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c3f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c400.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c41.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c411.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c421.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c430.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c441.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c451.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c461.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c470.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c481.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c51.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c60.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c71.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c81.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/c90.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/ca1.dat (isDir=false  canRead=true  canWrite=true  size=24576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cb1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cc0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cd1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/ce1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0/cf0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d/seg0 (isDir=true  canRead=true  canWrite=true  size=12288)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1d (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120) at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35) at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92) at org.apache.derbyTesting.junit.TestConfiguration$6.tearDown(TestConfiguration.java:828) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e): C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/db.lck (isDir=false  canRead=true  canWrite=true  size=38)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/log/log1.dat (isDir=false  canRead=true  canWrite=true  size=1048576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/log (isDir=true  canRead=true  canWrite=true  size=0)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c10.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c101.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c111.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c121.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c130.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c141.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c150.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c161.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c171.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c180.dat (isDir=false  canRead=true  canWrite=true  size=36864)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c191.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1a1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1b1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1e0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c1f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c20.dat (isDir=false  canRead=true  canWrite=true  size=28672)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c200.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c211.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c221.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c230.dat (isDir=false  canRead=true  canWrite=true  size=114688)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c241.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c251.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c260.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c271.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c281.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c290.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2c1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2d0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c2f0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c300.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c31.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c311.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c321.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c331.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c340.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c351.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c361.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c371.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c380.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c391.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3a1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3b1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3c0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3d1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3e1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c3f1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c400.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c41.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c411.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c421.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c430.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c441.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c451.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c461.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c470.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c481.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c51.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c60.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c71.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c81.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/c90.dat (isDir=false  canRead=true  canWrite=true  size=20480)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/ca1.dat (isDir=false  canRead=true  canWrite=true  size=24576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cb1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cc0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cd1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/ce1.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0/cf0.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e/seg0 (isDir=true  canRead=true  canWrite=true  size=12288)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1e (isDir=true  canRead=true  canWrite=true  size=0) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertDirectoryDeleted(BaseJDBCTestCase.java:1491) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:120) at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35) at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:106) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:103) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:99) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:92) at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:798) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)3) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)junit.framework.AssertionFailedError: Failed to delete 77 files (root=C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f): C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/db.lck (isDir=false  canRead=true  canWrite=true  size=38)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/log/log1.dat (isDir=false  canRead=true  canWrite=true  size=1048576)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/log (isDir=true  canRead=true  canWrite=true  size=0)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c10.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c101.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c111.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c121.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c130.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c141.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c150.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c161.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c171.dat (isDir=false  canRead=true  canWrite=true  size=8192)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c180.dat (isDir=false  canRead=true  canWrite=true  size=36864)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c191.dat (isDir=false  canRead=true  canWrite=true  size=16384)  C:/cludev/jagtmp/autoderbyN_regression/suitesAll_7/log/system/singleUse/oneuse1f/seg0/c1a1.dat (isDir=false  canRead=true  canWrite=true  size=16384)  ,0
5582,Access denied (java.lang.RuntimePermission modifyThreadGroup) in IndexStatisticsDaemonImpl.schedule()    I user reported this exception with 10.8.2.3 - (1212722) when running regression tests against 10.8.As soon as the Index Statistics Thread was initialized they got the stack trace below.There was some discussion of this issue on the dev list:http://old.nabble.com/Report-of-security-manager-issue-with-10.8-and-ndexStatisticsDaemonImpl.schedule-to33137398.htmlI assume the failure is in  runningThread = new Thread(this  'index-stat-thread');Stack Trace:java.security.AccessControlException: Access denied(java.lang.RuntimePermission modifyThreadGroup) atjava.security.AccessController.checkPermission(AccessController.java:108) atjava.lang.SecurityManager.checkPermission(SecurityManager.java:544) atcom.ibm.ws.security.core.SecurityManager.checkPermission(SecurityManager.java:208) atcom.ibm.ws.security.core.SecurityManager.checkAccess(SecurityManager.java:407) at java.lang.ThreadGroup.checkAccess(ThreadGroup.java:226) at java.lang.Thread.initialize(Thread.java:345) at java.lang.Thread.&lt;init&gt;(Thread.java:281) at java.lang.Thread.&lt;init&gt;(Thread.java:179) atorg.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.schedule(UnknownSource) atorg.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(UnknownSource) atorg.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(UnknownSource) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) atorg.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) atorg.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at   ,1
5584,Select statement with subqueries with group by and count distinct statements returns wrong number of results    Steps to reproduce:1. Create database  connect to database with any JDBC client2. create two tables:CREATE TABLE TEST_5 ( profile_id INTEGER NOT NULL  group_ref INTEGER NOT NULL  matched_count INTEGER NOT NULL ); CREATE TABLE TEST_6 ( profile_id INTEGER NOT NULL  group_ref INTEGER NOT NULL  matched_count INTEGER NOT NULL );3. Insert two records for each table:insert into test_5 values (1  10000 1);insert into test_5 values (2  10000  2);insert into test_6 values (1  10000 1);insert into test_6 values (2  10000  2);4. Run following statementSELECT *FROM (SELECT ps1.group_ref  COUNT(DISTINCT ps1.matched_count) AS matched_count FROM test_5 ps1 GROUP BY ps1.group_ref  ps1.profile_id ) a  (SELECT ps2.group_ref  COUNT( DISTINCT ps2.matched_count) AS matched_count FROM test_6 ps2 GROUP BY ps2.group_ref  ps2.profile_id ) bAs a result I've got 3 records instead of 4 - at least Oracle 10greturns 4 records for this statement. Maybe i'm doing something wrong.Do you have any suggestions / possible workarounds for this problem   ,0
5604,[patch] access static constants with static references    code access static fields by fetching instances and getting the static variable from the object. Just use the class reference.   ,0
5609,Prepare old test harness for running tests on Java 8    When running an old harness test with a Java 8 preview (available from http://jdk8.java.net/download.html)  it'll fail like this:$ java org.apache.derbyTesting.functionTests.harness.RunTest lang/supersimple.sql&#8211; listing properties &#8211;derby.locks.deadlockTimeout=3 derby.locks.waitTimeout=3WHOA  javavm is NULLProcess exception: java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.harness.jdk18     Start: supersimple jdk1.8.0-ea 2012-02-08 20:29:59 ***Exception in thread 'main' java.lang.ClassNotFoundException: org.apache.derbyTesting.functionTests.harness.jdk18 at java.net.URLClassLoader$1.run(URLClassLoader.java:359) at java.net.URLClassLoader$1.run(URLClassLoader.java:348) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:347) at java.lang.ClassLoader.loadClass(ClassLoader.java:423) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308) at java.lang.ClassLoader.loadClass(ClassLoader.java:356) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:181) at org.apache.derbyTesting.functionTests.harness.jvm.getJvm(jvm.java:217) at org.apache.derbyTesting.functionTests.harness.RunTest.buildTestCommand(RunTest.java:2267) at org.apache.derbyTesting.functionTests.harness.RunTest.testRun(RunTest.java:490) at org.apache.derbyTesting.functionTests.harness.RunTest.main(RunTest.java:360)    We need to add the org.apache.derbyTesting.functionTests.harness.jdk18 class to make the tests run on Java 8.   ,0
5610,ServerPropertiesTest prints .java.net.SocketException: Connection reset to console but test passes    ServerPropertiesTest showed the below output when running. The ping retries and the test passes. I am not sure if in fact a Connection reset is a valid response if the server is not fully up and the test is just being too verbose or if it is real problem that we get this Error......................java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:168) at java.net.SocketInputStream.read(SocketInputStream.java:90) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest.java:309) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:484) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at junit.textui.TestRunner.start(TestRunner.java:172) at junit.textui.TestRunner.main(TestRunner.java:138)java.net.SocketException: Connection reset at java.net.SocketInputStream.read(SocketInputStream.java:168) at java.net.SocketInputStream.read(SocketInputStream.java:90) at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source) at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source) at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:567) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest.java:309) at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:484) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:600) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22) at junit.extensions.TestSetup$1.protect(TestSetup.java:19) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:23) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at junit.textui.TestRunner.doRun(TestRunner.java:116) at junit.textui.TestRunner.start(TestRunner.java:172) at junit.textui.TestRunner.main(TestRunner.java:138)....................   ,0
5615,NPE in Store  when running SELECT in a read-only database accessed via the classpath subprotocol when authentication  authorization  and Java security are turned on    I get an NPE trying to select from a table on which I don't have select privilege. The database is stored in a jar file accessed via the classpath protocol. BUILTIN authentication and sql authorization are turned on in the database. Running under a Java security manager. I will attach a repro. Here is the NPE:Failed Statement is: select * from KIWI.tjava.lang.NullPointerException at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:661) at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:591) at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Xact.java:1316) at org.apache.derby.impl.store.access.btree.OpenBTree.init(OpenBTree.java:380) at org.apache.derby.impl.store.access.btree.BTreeController.init(BTreeController.java:1250) at org.apache.derby.impl.store.access.btree.index.B2IController.init(B2IController.java:140) at org.apache.derby.impl.store.access.btree.index.B2I.open(B2I.java:821) at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:476) at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1308) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(DataDictionaryImpl.java:9584) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndexMinion(DataDictionaryImpl.java:9492) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:9303) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2887) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(DataDictionaryImpl.java:2851) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.finishTableDescriptor(DataDictionaryImpl.java:2408) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex1Scan(DataDictionaryImpl.java:2277) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(DataDictionaryImpl.java:2293) at org.apache.derby.impl.sql.catalog.NameTDCacheable.setIdentity(NameTDCacheable.java:110) at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(DataDictionaryImpl.java:2224) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(DataDictionaryImpl.java:9905) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getNonCoreTI(DataDictionaryImpl.java:9702) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermissionsDescriptor(DataDictionaryImpl.java:13712) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTablePermsDescriptor(DataDictionaryImpl.java:13660) at org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(PermissionsCacheable.java:71) at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissions(DataDictionaryImpl.java:13364) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTablePermissions(DataDictionaryImpl.java:13350) at org.apache.derby.iapi.sql.dictionary.StatementTablePermission.oneAuthHasPermissionOnTable(StatementTablePermission.java:239) at org.apache.derby.iapi.sql.dictionary.StatementTablePermission.hasPermissionOnTable(StatementTablePermission.java:160) at org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(StatementColumnPermission.java:99) at org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(GenericAuthorizer.java:183) at org.apache.derby.exe.ac40348015x0135x7cc7x4621x0000040700000.fillResultSet(Unknown Source) at org.apache.derby.exe.ac40348015x0135x7cc7x4621x0000040700000.execute(Unknown Source) at org.apache.derby.impl.sql.GenericActivationHolder.execute(GenericActivationHolder.java:353) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:441) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:372) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Cleanup action completed   ,1
5624,System can run out of stack space while processing DropOnCommit requests.    The system currently recursively calls xact.notifyObservers() from DropOnCommit.update(). It does this because in some casesnew observers can be added while processing the list of notifyObservers and those were being missed before the change  causingAssertions in the tests and possibly files not properly dropped on commit.Multiple users on the Derby user list have had failures running SYSCS_UTIL.SYSCS_COMPRESS_TABLE()  running out of stack trackwith a heavily recursive stack trace of the form (see more detail from these reports in subsequent comments):Caused by: java.lang.StackOverflowErrorat java.lang.ThreadLocal.get(ThreadLocal.java:125)at java.lang.StringCoding.deref(StringCoding.java:46)at java.lang.StringCoding.encode(StringCoding.java:258)at java.lang.String.getBytes(String.java:946)at java.io.UnixFileSystem.getBooleanAttributes0(Native Method)at java.io.UnixFileSystem.getBooleanAttributes(UnixFileSystem.java:228)at java.io.File.exists(File.java:733)at org.apache.derby.impl.store.raw.data.StreamFileContainer.run(Unknown Source)at java.security.AccessController.doPrivileged(Native Method)at org.apache.derby.impl.store.raw.data.StreamFileContainer.privExists(Unknown Source)at org.apache.derby.impl.store.raw.data.StreamFileContainer.open(Unknown Source)at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.xact.Xact.openStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.xact.Xact.dropStreamContainer(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)at org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Unknown Source)at org.apache.derby.impl.store.raw.data.DropOnCommit.update(Unknown Source)at java.util.Observable.notifyObservers(Observable.java:142)   ,0
5642,OutOfMemoryError in OCRecoveryTest on phoneME    http://dbtg.foundry.sun.com/derby/test/Daily/javaME/testing/Limited/testSummary-1298470.htmlThere was 1 failure:1) testOCRecovery(org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest)junit.framework.AssertionFailedError: expectedExitValue:0 does not match exitValue:1expected output strings: &#91;0&#93;OK (1 test) actual output:&lt;STDOUT&gt;.ETime: 4.432There was 1 error:1) launchOCRecovery_1(org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest)&lt;END STDOUT&gt;&lt;STDERR&gt;java.lang.OutOfMemoryError: [C at java.io.BufferedReader.&lt;init&gt;(Unknown Source) at java.io.BufferedReader.&lt;init&gt;(Unknown Source) at junit.runner.BaseTestRunner.getFilteredTrace(Unknown Source) at junit.textui.ResultPrinter.printDefectTrace(Unknown Source) at junit.textui.ResultPrinter.printDefect(Unknown Source) at junit.textui.ResultPrinter.printDefects(Unknown Source) at junit.textui.ResultPrinter.printErrors(Unknown Source) at junit.textui.ResultPrinter.print(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)&lt;END STDERR&gt; expected:&lt;0&gt; but was:&lt;1&gt; at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(Unknown Source) at org.apache.derbyTesting.functionTests.tests.store.OCRecoveryTest.testOCRecovery(Unknown Source) at org.apache.derbyTesting.junit.BaseTestCase.runBare(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at org.apache.derbyTesting.junit.BaseTestSetup.run(Unknown Source) at junit.extensions.TestDecorator.basicRun(Unknown Source) at junit.extensions.TestSetup$1.protect(Unknown Source) at junit.extensions.TestSetup.run(Unknown Source) at sun.misc.CVM.runMain(Unknown Source)   ,0
5646,Get upgrade tests to pass on OJEC 1.1    The upgrade tests fail on OJEC 1.1 because Derby 10.3.1.4 cannot be loaded. That version is ignored on phoneME for the exact same reason. We should do the same for OJEC.   ,0
5647,NATIVE warns about password expiry for DBO    The DBO's password cannot expire. Still  NATIVE warns that the password is about to expire.ij&gt; connect 'jdbc:derby:authdb;create=true;user=admin';ij&gt; call syscs_util.syscs_set_database_property('derby.authentication.native.passwordLifetimeMillis'  '100');0 rows inserted/updated/deletedij&gt; call syscs_util.syscs_create_user('ADMIN'  '%*$');0 rows inserted/updated/deletedij&gt; call syscs_util.syscs_set_database_property('derby.authentication.provider'  'NATIVE::LOCAL');0 rows inserted/updated/deletedij&gt; connect 'jdbc:derby:authdb;shutdown=true';ERROR 08006: Database 'authdb' shutdown.ij&gt; connect 'jdbc:derby:authdb;user=admin;password=%*$';WARNING 01J15: Your password will expire in 0 day(s). Please use the SYSCS_UTIL.SYSCS_MODIFY_PASSWORD procedure to change your password.   ,0
5679,Rolling back a transaction leads to an inconsistent state    Rolling back a transaction can leave a table in an inconsistent state if the table has been previously altered through the addition of new columns. It appears that if newly added columns have not been changed from their default value  then when a transaction which sets new values for these columns is rolled back the new columns are not restored to their previous values.Attached is an ij script with fairly minimal steps to reproduce the problem on Derby 10.6.2.0 and 10.8.2.2 (Win7 x64  Sun 32-bit JRE 1.6.0.26). Expected and observed output also attached.Would appreciate any suggestions as to a workaround for this issue. Running SYSCS_UTIL.SYSCS_COMPRESS_TABLE on the table after adding the columns seems to avoid the problem but may be just masking the issue.   ,0
5681,When a foreign key constraint on a table is dropped  the associated statistics row for the conglomerate is not removed    If you drop the foreign key constraint for a table  the statistics row does not get removed. This affects the indexStat daemon because it now finds these statistics row which always appear as out of date  causing an update to be scheduled.Here is how to get it to happen:set schema app;CREATE TABLE TEST_TAB_1( ID INTEGER PRIMARY KEY NOT NULL);CREATE TABLE TEST_TAB_2( ID INTEGER PRIMARY KEY NOT NULL);ALTER TABLE TEST_TAB_2ADD CONSTRAINT TEST_TAB_2_FK_1FOREIGN KEY (ID) REFERENCES TEST_TAB_1(ID);insert into app.TEST_TAB_1 values (1);insert into test_tab_2 values(1);call syscs_util.syscs_update_statistics('APP'  'TEST_TAB_2'  null);selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; At this point there are two statistic rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 05278254-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.628 I true 1 numunique= 1 numrows= 1&#8211; Now drop the constraintalter table TEST_TAB_2drop constraint TEST_TAB_2_FK_1;selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; There are still two statistic rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 05278254-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.628 I true 1 numunique= 1 numrows= 1&#8211; Add another rowinsert into app.TEST_TAB_1 values (2);insert into test_tab_2 values(2);&#8211; Update the statisticscall syscs_util.syscs_update_statistics('APP'  'TEST_TAB_2'  null);selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; There are still two rows but now one show 1 row and one shows 2 rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 18438274-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:41:19.164 I true 1 numunique= 2 numrows= 2&#8211; Add the constraint back onALTER TABLE TEST_TAB_2ADD CONSTRAINT TEST_TAB_2_FK_1FOREIGN KEY (ID) REFERENCES TEST_TAB_1(ID);&#8211; Insert another rowinsert into app.TEST_TAB_1 values (3);insert into test_tab_2 values(3);&#8211; Update the statisticscall syscs_util.syscs_update_statistics('APP'  'TEST_TAB_2'  null);selectc.TABLEID c.CONGLOMERATENUMBER c.CONGLOMERATENAME c.ISINDEX c.ISCONSTRAINT c.CONGLOMERATEID t.TABLEID t.TABLENAME t.TABLETYPE s.STATID s.REFERENCEID s.TABLEID s.CREATIONTIMESTAMP s.TYPE s.VALID s.COLCOUNT CAST(STATISTICS AS VARCHAR(40)) as STATISTICSfrom sys.SYSCONGLOMERATES c join sys.SYSTABLES t on c.TABLEID = t.TABLEID join sys.SYSSTATISTICS s on s.TABLEID = t.TABLEIDwhere t.TABLENAME = 'TEST_TAB_2' and c.ISINDEX = false;&#8211; Now there are 3 rowsTABLEID CONGLOMERATENUMBER CONGLOMERATENAME ISINDEX ISCONSTRAINT CONGLOMERATEID TABLEID TABLENAME TABLETYPE STATID REFERENCEID TABLEID CREATIONTIMESTAMP TYPE VALID COLCOUNT STATISTICS84490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T edbc8255-0136-6999-c1b4-000065089f97 55410238-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:36:49.629 I true 1 numunique= 1 numrows= 184490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 45eb02e8-0136-6999-c1b4-000065089f97 63454207-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:46:00.211 I true 1 numunique= 3 numrows= 384490209-0136-6999-c1b4-000065089f97 348432 84490209-0136-6999-c1b4-000065089f97 false false cccb420a-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 TEST_TAB_2 T 0ea502e9-0136-6999-c1b4-000065089f97 7ab90278-0136-6999-c1b4-000065089f97 84490209-0136-6999-c1b4-000065089f97 2012-03-31 17:46:00.212 I true 1 numunique= 3 numrows= 3Note that dropping that recreating the constraint or compressing the table does not fix the problem.   ,0
5687,Back out the concurrency improvements for identity columns introduced by derby-4437    DERBY-4437 attempted to improve the concurrency of identity columns by using SYSSEQUENCE-style sequence generators. These improvements caused NsTest to behave differently than it used to and they disclosed a problem in clearing the identity cache. The community lost confidence in this solution and it was backed out of the 10.8 branch under issue DERBY-5448. This new issue is filed to back the improvements out of the 10.9 trunk. Further useful discussion about how to improve the concurrency and correctness of identity columns has been taking place on DERBY-5443 and DERBY-5493.For the 10.9 release  identity columns will return to their old behavior of being ill-suited for high concurrency applications. Applications which need higher concurrency should be re-coded to use sequences rather than identity columns.   ,0
5692,intermittent test failure in storetests/st_derby715.java    I am seeing an irregularly occurring failure with ibm 1.4.2 on one machine - which happens to be the only 4 CPU machine and the only one running Windows 2008...And I've got 10.8 nightly tests running on it.I have not seen this with other jvms on the same machine.It's possible this would also happen on trunk  but we stopped supporting 1.4.2 with trunk and so I do not run tests against trunk with (ibm) 1.4.2.When the test passes  the output contains 5 identical lines 'Got a Deadlock'.The test failures are of 2 kinds: 1 (or more?) of the 'Got a Deadlock' lines is missing we get a '40XL1' error (timeout) instead of a deadlock.As the second situation seems to match what DERBY-715 was about  I thought it worthwhile reporting as a separate JIRA. We should check it's not somehow a regression.   ,0
5705,Authorization decorators don't null out connections when done    Some decorators used to test authorization don't close and null out references to Connection objects when they have completed. Since these tests often create/boot single-use databases  and the Connection objects have references to the database instance and  directly or indirectly  many of its modules  this prevents much garbage from being removed from the heap after the tests have completed and shut down their single-use databases. We should close the default connection and clear the reference to it when tearing down these decorators  so the space is released for subsequent tests to use.This problem affects decorators returned by the following methods:DatabasePropertyTestSetup.builtinAuthenticationNoTeardown()TestConfiguration.sqlAuthorizationDecorator()TestConfiguration.sqlAuthorizationDecoratorSingleUse()These methods return modified versions of DatabasePropertyTestSetup where the tearDown() method is a no-op.   ,0
5706,Clean up statements in CreateTableFromQueryTest    CreateTableFromQueryTest has a Statement field that it closes  but doesn't null out  in tearDown(). Since the field isn't nulled out  it cannot be garbage collected  and one Statement per test case will be left on the heap after completion.   ,0
5709,ResultSetFromPreparedStatementTest keeps references to non-default connections    ResultSetFromPreparedStatementTest keeps references to non-default connections in the fields c2 and c3. c2 is closed and nulled out in tearDown(). c3 is only closed. It should be nulled out too in order to allow gc of resources after test completion.   ,0
5710,BigDataTest.tearDown() doesn't call super.tearDown()    BigDataTest's tearDown() method doesn't call super.tearDown()  causing it to leave statements and connections open and not eligible for gc.   ,0
5712,CheckConstraintTest holds on to resources after completion    CheckConstraintTest keeps connections  statements and result sets in instance variables  but never clears the variables  so they are kept forever.   ,0
5714,ColumnDefaultsTest holds on to resources after completion    ColumnDefaultsTest keeps connections  statements and result sets in instance variables  but never clears the variables  so they are kept forever.   ,0
5715,InbetweenTest holds on to resources after completion    InbetweenTest keeps connections  statements and result sets in instance variables  but never clears the variables  so they are kept forever.   ,0
5716,TimestampArithTest keeps references to statements after completion    TimestampArithTest keeps references to statements in static fields  but never closes them or clears the fields.   ,0
5717,TableFunctionTest keeps reference to connection after completion    The test cases in TableFunctionTest store a DatabaseMetaData instance in an instance variable. The DatabaseMetaData instance references the default connection  and the connection can therefore not be gc'ed after the test has completed.   ,0
5720,UngroupedAggregatesNegativeTest doesn't call super.tearDown()    public void tearDown() throws SQLException { dropTable('t1'); dropTable('t2'); }Should call super.tearDown() to close and release connection and statements.   ,0
5721,ParameterMappingTest lacks call to super.tearDown()    ParameterMappingTest.tearDown() should call super.tearDown() to release connections/statements.   ,0
5722,InternationalConnectTest forgets to call super.tearDown()    Its tearDown() method should call super.tearDown() to free resources.   ,0
5724,EncryptionKeyTest sometimes keeps reference to connection    EncryptionKeyTest has this code to clean up the connection: if (con != null &amp;&amp; !con.isClosed()) { con.rollback(); con.close(); con = null; }If the connection is already closed  it won't null out the reference. It should set con to null unconditionally.   ,0
5729,Replication tests keep references to connections after completion    The base class for the replication tests  ReplicationRun  keeps references to connections used during the test also after the test has completed. The connections are referenced from these fields: masterConn slaveConn startSlaveException (which references a connection indirectly via client.am.SqlException -&gt; client.am.Sqlca)   ,0
5732,ProtocolTest doesn't clean up its test resources    ProtocolTest doesn't clean up its test resources. A tearDown method should be added to make the referenced instances eligable for garbage collection. The test class instances currenlty retain more than 10 MB on the heap.   ,0
5736,NullPointerException in GenericTriggerExecutor.executeSPS() caused by OutOfMemoryError    If I run TriggerTest with the flags -server and -Xmx150M passed to the JVM  I fairly consistently see a NPE being thrown:java.lang.NullPointerException at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:221) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:114) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:281) at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:818) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:280) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1715) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1370) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(TriggerTest.java:880) at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(TriggerTest.java:779) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.textui.TestRunner.doRun(TestRunner.java:121) at junit.textui.TestRunner.start(TestRunner.java:185) at junit.textui.TestRunner.main(TestRunner.java:143)In derby.log  there is an OOME right before the NPE:java.lang.OutOfMemoryError: Java heap space at org.apache.derby.impl.jdbc.LOBStreamControl.updateData(LOBStreamControl.java:154) at org.apache.derby.impl.jdbc.LOBStreamControl.write(LOBStreamControl.java:247) at org.apache.derby.impl.jdbc.LOBStreamControl.&lt;init&gt;(LOBStreamControl.java:89) at org.apache.derby.impl.jdbc.EmbedBlob.&lt;init&gt;(EmbedBlob.java:189) at org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(EmbedResultSet.java:4072) at org.apache.derby.impl.jdbc.EmbedResultSet.getObject(EmbedResultSet.java:1704) at org.apache.derby.exe.ac56961bb1x0137x0d04x3d17x00005ffb0f6356.e0(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:139) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:148) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:507) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:313) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:176) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:114)(...)The code that fails with NPE  is this call to cleanupOnError() in a catch block in GenericTriggerExecutor.executeSPS(): /* retrieve the current active SC */ StatementContext sc = lcc.getStatementContext(); /* make sure that the cleanup is on the new SC */ if (active_sc != sc)  { sc.cleanupOnError(e); }   ,0
5740,Remove unsued code in AlterTableConstantaction.columnDroppedAndTriggerDependencies    The following code is executed  but the results are not used: CollectNodesVisitor visitor = new CollectNodesVisitor(ColumnReference.class); stmtnode.accept(visitor); Vector refs = visitor.getList(); &lt;--- never usedI plan to remove the code  but just want to record it here in case there are side-effects by using the visitor.   ,0
5742,Native user authentication: improve wording of error message    This error message no longer has a correct string: XCY05(quote from English locale):Invalid setting of the derby.authentication.provider property. This property cannot be set to NATIVE::LOCAL unless credentials for the database owner have been stored in the database using the SYSCS_UTIL.SYSCS_CREATE_USER procedure.This property should no longer ever need to be set to NATIVE::LOCAL: it is done automatically when the first user is created via SYSCS_UTIL.SYSCS_CREATE_USER.The wording should be adjusted. Note: Now  the property should never be set manually for native authentication via SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY  this is only meaningful for LOCAL credentials db  but this is done automatically since version 7 of the spec.   ,1
5750,Sending an empty string as table name to compress table procedure or empty string as index name to update statistics procedure makes the parser throw an exception.    When empty string is passed for the index name to the update statistics procedure  it throws following exception(passing an empty string for table to compress table procedure also gives simiar exception). The new stored procedure being created through DERBY-4115 for dropping the statistics also gave similar exceptionjava -Dij.exceptionTrace=true org.apache.derby.tools.ijconnect 'jdbc:derby:db1;create=true'; create table t1(c11 int  statistics int not null);call syscs_util.SYSCS_UPDATE_STATISTICS( 'APP'  'T1'  '' );ERROR 38000: The exception 'java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42.' was thrown while evaluating an expression.java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Caused by: java.sql.SQLException: The exception 'java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42.' was thrown while evaluating an expression. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 17 moreCaused by: java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:153) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513) at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753) at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) ... 10 moreCaused by: ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:134) ... 24 moreERROR 42X01: Syntax error: Encountered '/'' at line 1  column 42.java.sql.SQLSyntaxErrorException: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:92) at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2360) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:153) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:107) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1685) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1513) at org.apache.derby.catalog.SystemProcedures.SYSCS_UPDATE_STATISTICS(SystemProcedures.java:753) at org.apache.derby.exe.acace4c0a3x0137x2f19xcc22x00000013e5704.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at java.lang.reflect.Method.invoke(Method.java:611) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:443) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:324) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:630) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:559) at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367) at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369) at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245) at org.apache.derby.impl.tools.ij.Main.go(Main.java:229) at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184) at org.apache.derby.impl.tools.ij.Main.main(Main.java:75) at org.apache.derby.tools.ij.main(ij.java:59)Caused by: java.sql.SQLException: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) ... 30 moreCaused by: ERROR 42X01: Syntax error: Encountered '/'' at line 1  column 42. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278) at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357) at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(EmbedPreparedStatement.java:134) ... 24 moreIssue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt;   ,0
5760,Missing argument in some XJ022 errors    EmbedBlob and EmbedClob some times wrap IOExceptions in an SQLException with SQLState XJ022 (SQLState.SET_STREAM_FAILURE)  but they don't always specify the message argument  so the error message ends up like this:java.sql.SQLException: Unable to set stream: '{0}'.(The detailed error message does appear in a chained exception  so it's not a very big problem  but it looks a bit odd.)I don't know of a way to expose these exceptions in a test. I just noticed it when I added some manual asserts to force a failure when investigating another issue.The fix should be simple: Use the helper method Util.setStreamFailure() that sets the message argument automatically.   ,0
5771,Use TestNullOutputStream where possible    Derby's test framework provides a stream class  TestNullOutputStream  that discards all data written to it. Utf8CcsidManagerClientTest's constructor and BaseJDBCTestCase.runScript() create their own anonymous classes that provide the same functionality. They should be changed to reuse TestNullOutputStream.   ,0
5775,Upgrade tests should  print full IOException stack trace when it fails to access old versions    When the Upgrade tests fail to access the oldVersions due to an IOException the message is not very clear as to what the IOException was. e g. can output ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!ALARM: IOException msg: 'svn.apache.org'. Upgrade tests can NOT be run!Time: 0.008OK (0 tests)The code in OldVersions.getVersions() } } catch (IOException ioe) { alarm('Error reading from file: ' + oldVersionsPath + ioe.getMessage()); }should print the exception stack trace or possibly even fail on IOException.   ,0
5779,Table functions should only accept arguments which are constant in their query block.    Derby lets you invoke a table function in the FROM list of a query  passing in arguments built out of columns in other tables in the FROM list. This syntax is illegal and the resulting queries have no meaning under the SQL Standard. See the discussion on DERBY-5554. We should forbid this syntax. Similar syntax involving correlated subqueries in the FROM list is already forbidden. Fixing this will create a backward incompatibility which requires a release note.   ,0
5783,Remove duplicated code for starting remote processes in replication tests    ReplicationRun has two copies of each of the methods runUserCommand()  runUserCommandRemotely() and processOutput(). One variant takes an id parameter (used only in debug output)  and one doesn't. It would be sufficient to have one copy of each of these methods.   ,0
5791,Replication tests should use BaseTestCase.execJavaCmd() to run local commands    The replication tests invoke Runtime.exec() directly in order to spawn processes. The sub-processes that run on the same host as the main test process  should instead be started with the helper method BaseTestCase.execJavaCmd(). Having all the tests use the helper method would make it easier if we for example want to pass specific flags to all sub-processes created in a test run.Note that the replication tests also have code for starting processes on a remote host via ssh. BaseTestCase.execJavaCmd() cannot do that  so only local processes can be started with the helper method. When the replication tests run as part of suites.All  all the spawned processes run locally.   ,0
5792,Make it possible to turn off encryption on an already encrypted database.    Currently  you can encrypt an unencrypted database and you can change the encryption key on an already encrypted database. However  Derby does not expose a way to turn off (unencrypt) an already encrypted database.   ,1
5795,Documentation in release doesn't include stylesheets    The documentation that is bundled with the Derby releases does not include the three .css stylesheets that are copied into the out/&lt;manual-name&gt; directory by the Ant task that builds the HTML files. These need to be included in the docs/html/&lt;manual-name&gt; directories for the releases.I believe this problem has existed from the beginning &#8211; it certainly goes back several releases.   ,0
5796,Remove unused methods in client.am.DateTime    The DateTime class contains two unused methods: timestampToDateBytes() and timestampToTimeBytes(). These methods also contain calls to deprecated methods in the java.util.Date class  so it would be good to get rid of them.   ,0
5797,AssertionFailedError in functionTests.tests.lang.UpdateStatisticsTest.testDisposableStatsEagerness    I noticed a test failure in UpdateStatisticsTest.testDisposableStatsEagerness.The link is: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1345812-suites.All_diff.txtThe stack trace: testDisposableStatsEagerness(org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.lang.UpdateStatisticsTest.testDisposableStatsEagerness(UpdateStatisticsTest.java:594) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
5798,Disable i18n/JapanCodeConversion.sql on platforms that don't support EUC_JP or SJIS    I ran derbyall on Java SE for Embedded 7  which doesn't support the EUC_JP or SJIS encodings. i18n/JapanCodeConversion.sql failed because of this:                 Diff file derbyall/i18nTest/JapanCodeConversion.diff             Start: JapanCodeConversion jdk1.7.0_04-ea derbyall:i18nTest 2012-05-31 15:10:02 ***55 del&lt; 0 rows inserted/updated/deleted55a55 58&gt; ERROR 38000: The exception 'java.sql.SQLException: The exception 'java.lang.reflect.InvocationTargetException' was thrown while evaluating an expression.' was thrown while evaluating an expression.&gt; ERROR 38000: The exception 'java.lang.reflect.InvocationTargetException' was thrown while evaluating an expression.&gt; ERROR XJ001: Java exception: ': java.lang.reflect.InvocationTargetException'.&gt; ERROR XJ001: Java exception: 'java.io.UnsupportedEncodingException: EUC_JP'.59 74d61(...)    We should skip the test on platforms that don't support these encodings.   ,0
5802,Remove unused class ExecProcUtil    The class living in java/testing/org/apache/derbyTesting/functionTests/util/ExecProcUtil.java isn't used and can be removed.   ,0
5815,Add replicationTests.ReplicationSuite to junit-core ant target    The replication tests aren't run as part of the junit-core ant target (nor in any of the other relevant targets).I suggest adding the suite such that is is run as part of the top-level ant targets for testing Derby.Note that it would have been simpler to simply run suites.All  but the special logic for JDBC 4 code may still be relevant for some platforms (JSR169). It is also nice to get some more feedback as the test cycle proceeds. The downside of not using suites.All is that we may forget adding new suites to the ant target(s)  but we're adding so few new suites that it shouldn't be much of a problem.   ,0
5824,testOSReadOnly fails with k.AssertionFailedError: expected an error indicating the db is readonly on HP java 1.6    This failure was reported running suites.All on HP. Read only database is apparently not read only.1) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: expected an error indicating the db is readonly at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.assertExpectedInsertBehaviour(OSReadOnlyTest.java:261) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:139) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) testOSReadOnly(org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest)junit.framework.AssertionFailedError: Failed to copy directory from /local1/derbytest/test/system/singleUse/oneuse4b to /local1/derbytest/test/system/singleUse/readOnly at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.copyDatabaseOnOS(OSReadOnlyTest.java:282) at org.apache.derbyTesting.functionTests.tests.store.OSReadOnlyTest.testOSReadOnly(OSReadOnlyTest.java:131) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)FAILURES!!!Tests run: 11145  Failures: 2  Errors: 0bash-4.0#   ,1
5830,Make DoubleProperties.propertyNames() thread-safe    As discussed in DERBY-4269  DoubleProperties.propertyNames() may throw a NullPointerException if properties are removed by another thread while the method is executing. Since DoubleProperties is a sub-class of  and used as a drop-in replacement for  java.util.Properties  it should be thread-safe just like the propertyNames() method in the parent class.   ,0
5838,By using syscs_set_database_property  you can set the database version to a garbage string which prevents you from booting the database.    The following script shows this problem:connect 'jdbc:derby:db;create=true';values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) );call syscs_util.syscs_set_database_property( 'DataDictionaryVersion'  'foobar' );values ( syscs_util.syscs_get_database_property( 'DataDictionaryVersion' ) );connect 'jdbc:derby:db;shutdown=true';&#8211; fails to bootconnect 'jdbc:derby:db';   ,0
5847,Clean up IDE warnings in DRDAConnThread    When I open DRDAConnThread in NetBeans  I see 49 warnings. Most of them are harmless (like static fields accessed via an instance  suggestions about using StringBuilder instead of StringBuffer  or using System.arraycopy() instead of for loops). Others indicate real problems  like the use of != to compare SQL states in writeSQLDIAGGRP().We should clean up the warnings so that it's easier to notice new warnings about potential problems.   ,0
5860,Remove unused methods in DDMReader and DDMWriter    Many of the methods in DDMReader and DDMWriter are not used anymore. Those methods could be removed.   ,0
5874,Remove JDBC 3 constants from client.am.Statement    org.apache.derby.client.am.Statement defines three constants  CLOSE_CURRENT_RESULT  KEEP_CURRENT_RESULT and CLOSE_ALL_RESULTS  that are also defined in java.sql.Statement. Since client.am.Statement implements java.sql.Statement  we could remove those constants and let it inherit them instead. The only reason why these constants are defined in client.am.Statement  is to make the client compile on JDKs predating JDBC 3 (that is  Java 1.3 and earlier). Since we don't support those JDKs anymore  the constants can be removed now.   ,0
5877,Prune the brokered class tree    The brokered class tree still separates between the JDBC 2.0 functionality and JDBC 3.0. This leads to unnecessarily many levels of classes (for example  BrokeredPreparedStatement -&gt; BrokeredPreparedStatement30 -&gt; BrokeredStatement40). Another consequence is that BrokeredCallableStatement30 and BrokeredPreparedStatement30 don't have a common base class that could hold shared JDBC 3.0 methods (their common base class is BrokeredPreparedStatement  which is JDBC 2.0)  and therefore new JDBC 3.0 PreparedStatement methods are duplicated in the two classes.We should fold the JDBC 3.0 classes into the JDBC 2.0 classes so that we can reduce the number of classes and the duplication of code in the brokered statement sub-tree.   ,0
5878,Add message argument names  as comments  to English message file produced by MessageBuilder.    The MessageBuilder program turns messages.xml into two output files:1) The DITA source for the Reference Guide section on error messages.2) The messages_en.properties file of engine messages.All of the translators I have dealt with want to use (2) as the English input for their translations. I believe this is because translators have written their own tools and those tools expect to work on properties files.Messages may have arguments. Those arguments appear as sub-elements of the messages in messages.xml. The arguments turn up in (1) but are thrown away when MessageBuilder produces (2). We can help translators do a better job by also writing the arguments as comments in (2).   ,0
5883,Simplify JSR-169 implementation class tree    The JSR-169 interface is a subset of JDBC 3.0  but still the JDBC 3.0 implementation classes do not extend the JSR-169 implementation classes. Instead  the JSR-169 and JDBC 3.0 implementation classes extend a common base class. The reason for this structure  is that the JSR-169 compile targets used to be optional  so the JDBC 3.0 classes could not depend on them.For example  the class javadoc comment for EmbedResultSet169 says: ResultSet implementation for JSR169. Adds no functionality to its (abstract) parent class. If Derby could be compiled against JSR169 that the parent class could be the concrete class for the environment. Just like for the JDBC 2.0 specific classes. Until that is possible (ie. easily downloadable J2ME/CDC/Foundation/JSR169 jar files  this class is required and is only compiled by an optional target.Since the JSR-169 code is no longer optional  we should do as the comment suggests  and use the base class directly instead. This would allow us to simplify the class tree.   ,0
5885,The order of argument names in messages.xml is sometimes wrong when the arguments occur in the message out of sequence.    In most Derby messages  arguments appear in ascending order. That is  {0} occurs in the message first  then {1}  then {2}  and so on. Sometimes  however  arguments occur out of sequence. When this happens  the names in the &lt;arg&gt; sub-elements may not agree with the order that the arguments actually occur in the message. This causes MessageBuilder to garble the dita source for the Reference Guide page titled 'SQL error messages and exceptions'.For instance  here is the messages.xml element for SQLState 22014: &lt;msg&gt; &lt;name&gt;22014&lt;/name&gt; &lt;text&gt;The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '{2}'. The string to search for is '{0}'. The string to search from is '{1}'. &lt;/text&gt; &lt;arg&gt;startIndex&lt;/arg&gt; &lt;arg&gt;searchString&lt;/arg&gt; &lt;arg&gt;fromString&lt;/arg&gt; &lt;/msg&gt;This gives rise to the following garbled text in the generated reference guide page:'The start position for LOCATE is invalid; it must be a positive integer. The index to start the search from is '&lt;fromString&gt;'. The string to search for is '&lt;startIndex&gt;'. The string to search from is '&lt;searchString&gt;'. 'We should re-order the &lt;arg&gt; sub-elements so that the first &lt;arg&gt; sub-lement corresponds to {0}  the second &lt;arg&gt; sub-element corresponds to {1}  and so on.   ,0
5897,Broken handling of paths with special characters in compatibility/VersionCombinationConfigurator    Some of the code handling paths in compatibility/VersionCombinationConfigurator is broken.The issue is that the location of a given class is given as a URL. This means the path will be URL encoded  and  for instance  spaces will be encoded as '%20'.This bug typically shows itself as an NPE when invoking compatibility._Suite.   ,0
5898,add ibm18 class to functionTests.harness    The 'old test harness'  in package java.org.apache.derbyTesting.functionTests.harness  needs an ibm18 class - similar to ibm17. I don't plan to run tests with this jvm against branches older than 10.8  but it will need to be backported to 10.9 and 10.8.   ,0
5914,Incorrect list of compatible JRE versions in client trace #2    The list of compatible JRE versions is out of sync again. It currently says 1.4  1.5  and 1.6.For trunk I believe we must remove 1.4  and we should add 1.7.For 10.9  if we want to change it  I think we can keep 1.4? And 1.7 was out and supported before we released 10.9  right?This issue was logged as DERBY-5078 the previous time it was out of sync.   ,0
5927,Add utility methods to query state of URL attributes in EmbedConnection    Add utility methods to determine whether URL attributes are set or have the value true.The motivation for the change is improved readability/formatting of the code.   ,0
5951,Missing method exception raised when using Clobs with territory based collation    When using territory-based collation with Clobs  Derby raises an error trying to invoke a missing method. The following script shows this problem:connect 'jdbc:derby:memory:db;create=true;collation=TERRITORY_BASED';create function makeClob( contents varchar( 32672 ) ) returns cloblanguage java parameter style java no sql deterministicexternal name 'org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest.makeClob';create table clobTable( a clob );&#8211; fails with a java.lang.NoSuchMethodError exceptioninsert into clobTable( a ) values ( makeClob( 'a' ) );connect 'jdbc:derby:memory:db1;create=true';create function makeClob( contents varchar( 32672 ) ) returns cloblanguage java parameter style java no sql deterministicexternal name 'org.apache.derbyTesting.functionTests.tests.lang.UserDefinedAggregatesTest.makeClob';create table clobTable( a clob );&#8211; succeedsinsert into clobTable( a ) values ( makeClob( 'a' ) );Here is the error:ERROR 38000: The exception 'java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;' was thrown while evaluating an expression.ERROR XJ001: Java exception: 'org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;: java.lang.NoSuchMethodError'....and here is the stack trace:Tue Oct 16 08:27:23 PDT 2012 Thread&#91;main 5 main&#93; (XID = 172)  (SESSIONID = 1)  (DATABASE = memory:db)  (DRDAID = null)  Failed Statement is: &#8211; fails with a java.lang.NoSuchMethodError exceptioninsert into clobTable( a ) values ( makeClob( 'a' ) )ERROR 38000: The exception 'java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue;' was thrown while evaluating an expression. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.iapi.error.StandardException.unexpectedUserException(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)Caused by: java.lang.NoSuchMethodError: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(Ljava/sql/Clob;Lorg/apache/derby/iapi/types/StringDataValue;I)Lorg/apache/derby/iapi/types/StringDataValue; at org.apache.derby.exe.ace50d80a4x013ax6a2fxb54bx00000467ed600.e0(Unknown Source) ... 17 more   ,0
5954,NPE in SELECT involving subselects and windows functions    A user reports and I have verified an NPE on the following SELECT:connect 'jdbc:derby:memory:db;create=true';create table blah ( a int );insert into blah values (1)  (2)  (3)  (4)  (5)  (6)  (7);SELECT rn  (SELECT rn FROM (SELECT row_number() over() rn FROM blah ) as T2where T2.rn = T1.rn+1) rn2FROM (SELECT row_number() over() rn from blah) as T1;   ,0
5964,Timestamp comparison failure in AutomaticIndexStatisticsTest.testStatisticsCorrectness    http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/lin/1402814-suitesAll_diff.txt1) testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testStatisticsCorrectness(AutomaticIndexStatisticsTest.java:324) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)The failure is caused by this assert: assertTrue(s.created.before(now));It might be a coincidence  but it happened the same night as Europe was switching from DST.It may also be related to DERBY-5046  where a similar assert failed because poor clock resolution made the two timestamps equal.   ,0
5969,Encryption  re-encryption  and un-encryption silently fail if the database is already booted.    If the database is already booted  then the DBO's attempt to re-encrypt or un-encrypt the database will silently fail. It will appear to the DBO that the re(un)encryption succeeded but in fact the database will not be changed. Derby should raise an error if the database is already booted when the DBO attempts re(un)encryption.   ,1
5972,Grammar doesn't accept OR operator without parentheses    The grammar doesn't accept the OR operator without parentheses in some constructs.For example  in a select list:ij&gt; create table t(b1 boolean  b2 boolean);0 rows inserted/updated/deletedij&gt; select b1 or b2 from t;ERROR 42X01: Syntax error: Encountered 'or' at line 1  column 11. (errorCode = 30000)Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.However  it does not fail if OR is replaced by AND  or if parentheses are used around the OR expression:ij&gt; select (b1 or b2) from t;1 0 rows selectedij&gt; select b1 and b2 from t;1 0 rows selectedSimilar behaviour is seen in VALUES statements:ij&gt; values true or false;ERROR 42X01: Syntax error: Encountered 'or' at line 1  column 13. (errorCode = 30000)Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt; values (true or false);1 true 1 row selectedij&gt; values true and false;1 false1 row selected   ,0
5989,Stop producing byte code for non-existent qualifiers    For all result set nodes that have predicate lists  Derby's compiler lays out byte code for fields to hold qualifiers  and also code to reinitialize the values in those fields on every execution. It does this even if there are no qualifiers. See PredicateList.generateQualifiers(). That method does actually check whether there are qualifiers  and it skips some of the code generation if there are none. It should be changed so that it skips all the code generation if there are no qualifiers.For an example  see the decompiled generated class for a natural join attached to DERBY-5947: https://issues.apache.org/jira/secure/attachment/12549514/natural-join-after-3a.txtThat class contains three Qualifier[][] fields: private Qualifier[][] e1; private Qualifier[][] e3; private Qualifier[][] e4;Only one of them (e4) is ever set to a non-null value. Still  the reinit() method  which is called on every execution  has code for each of the fields: protected void reinit() throws StandardException { BaseActivation.reinitializeQualifiers(e1); BaseActivation.reinitializeQualifiers(e3); BaseActivation.reinitializeQualifiers(e4); }   ,0
5992,Use BaseTestCase.execJavaCmd() to start process from NetworkServerTestSetup    NetworkServerTestSetup invokes Runtime.exec(String[]) manually when it needs to start a sub-process. It should use BaseTestCase.execJavaCmd(). In addition to reducing the amount of code  it would make the server processes pick up the flags they need to work well with EMMA and JaCoCo.   ,0
5998,Replication tests fail on CDC platforms without optional JSSE package    The replication code uses the javax.net.ServerSocketFactory class  which is not part of the core API defined by Foundation Profile 1.1. It is however part of an optional security package (JSSE) defined by the same specification  so it may or may not be available on the CDC platforms that Derby runs on.Running the replication tests on phoneME without said optional package  results in NoClassDefFoundError:Caused by: java.lang.NoClassDefFoundError: javax.net.SocketFactory at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Unknown Source) at java.security.AccessController.doPrivileged(Unknown Source) at org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.setupConnection(Unknown Source) at org.apache.derby.impl.store.replication.master.MasterController.startMaster(Unknown Source) at org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(Unknown Source) at org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(Unknown Source) at org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(Unknown Source)We might fix this by rewriting the replication code so that it's not dependent on optional packages on CDC. However  there have not been any user requests for this functionality on platforms without that package  as far as I'm aware  so I suggest we just skip the replication tests for now if that package is missing.The tests I've run on Oracle Java Micro Edition Embedded Client 1.1 (OJEC) have not revealed this problem  as OJEC comes with the optional JSSE package (it's version output lists 'JSSE JSR219' under the components section). And since the reports from the weme 6.2 test runs don't show this failure  I think it's included there as well.   ,0
6001,ErrorMessageTest assert failure: Only one of the waiters should be aborted    I occasionally see this test failure on some ARM devices:junit.framework.AssertionFailedError: Only one of the waiters should be aborted at org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.testDeadlockTimeout(ErrorMessageTest.java:206) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)It's probably timing-dependent  since the failing test case runs two threads  and the devices where it's seen are slow compared to most other test servers.   ,0
6006,NullPointerException in INSERT INTO ... SELECT FROM ... ORDER BY    A NullPointerException was reported by Harm-Jan Zwinderman on derby-user:http://mail-archives.apache.org/mod_mbox/db-derby-user/201211.mbox/%3C50B66527.5040906%40gmail.com%3EI've managed to reproduce it on 10.9.1.0 like this:ij version 10.9ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(x double);0 rows inserted/updated/deletedij&gt; insert into t values (0);1 row inserted/updated/deletedij&gt; prepare ps as 'insert into t select 1 from t order by x';ij&gt; execute ps;1 row inserted/updated/deletedij&gt; execute ps;2 rows inserted/updated/deletedij&gt; execute ps;4 rows inserted/updated/deletedij&gt; execute ps;ERROR XJ001: Java exception: ': java.lang.NullPointerException'.Full stack trace:java.lang.NullPointerException at org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createFormatIds(Unknown Source) at org.apache.derby.impl.store.access.heap.Heap.create(Unknown Source) at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(Unknown Source) at org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(Unknown Source) at org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insert(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source) at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source) at org.apache.derby.impl.tools.ij.ij.ExecuteStatement(Unknown Source) at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source) at org.apache.derby.iapi.tools.run.main(Unknown Source)   ,0
6017,IN lists with mixed types may return wrong results    Given this table:ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(x bigint);0 rows inserted/updated/deletedij&gt; insert into t values 9223372036854775805  9223372036854775806  9223372036854775807;3 rows inserted/updated/deletedA query that uses an IN list that contains all the three values actually stored in the table  returns all three rows as expected:ij&gt; select * from t where x in (9223372036854775805  9223372036854775806  9223372036854775807);X --------------------9223372036854775805 9223372036854775806 9223372036854775807 3 rows selectedHowever  if we add a value whose type precedence is higher  like a DOUBLE value  and that value happens to be equal to the approximation of the other values in the IN list when they are cast from BIGINT to DOUBLE  only one row is returned:ij&gt; select * from t where x in (9223372036854775805  9223372036854775806  9223372036854775807  9.223372036854776E18);X --------------------9223372036854775805 1 row selectedI believe this query should return all three rows too.   ,0
6033,Lift the arbitrary limit on the number of routine parameters.    The number of parameters to a Derby routine is arbitrarily limited to 90. This limit is causing difficulties for users (see http://apache-database.10148.n7.nabble.com/number-of-parameters-td126108.html). It ought to be safe to lift this limit. Changes need to be made to CreateAliasNode and to the corresponding dbManagerLimits.testMostParametersInStoredProcedures() test.   ,0
6045,in list multi-probe by primary key not chosen on tables with >256 rows    I have a table with a long integer primary key field and 11 million rows. I seem to be unable to load large chunks of rows via id in a reasonably efficient manner. 1. If I do individual lookups via the primary key  then a fast indexed lookup occurs. However  if I do large numbers of such queries  then the time is overwhelmed by round-trip overhead which makes everything incredibly slow. 2. If I use a single query with a disjunction of the primary keys of interest  then a table scan is performed (even if the clause only contains 1-3 items)  which walks over 11 million rows...incredibly inefficient. 3. If I use an IN clause  then a table scan is performed (even if the clause only contains 1-3 items)  which walks over 11 million rows...incredibly inefficient.I'm guessing that this might have something to do with the fact that I'm using large integers and really big numbers that don't start anywhere at or about 1 for my keys. Could this possibly be confusing the optimizer?Here are the unlimited query plans for the 3 cases that I enumerated:*********************************************************************************************&#91;EL Fine&#93;: 2013-01-17 11:09:53.384-ServerSession(582235416)Connection(1430986883)Thread(Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93;)-SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?) bind =&gt; &#91;2251799814033500&#93;Thu Jan 17 11:09:53 CST 2013 Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93; (XID = 4711079)  (SESSIONID = 3)  SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID = ?) ******* Project-Restrict ResultSet (3):Number of opens = 1Rows seen = 1Rows filtered = 0restriction = falseprojection = true constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1.00 optimizer estimated cost: 6.59Source result set: Index Row to Base Row ResultSet for FORMULA_TERM: Number of opens = 1 Rows seen = 1 Columns accessed from heap = {1  2  3  4  5  6  7  8} constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 optimizer estimated row count: 1.00 optimizer estimated cost: 6.59 Index Scan ResultSet for FORMULA_TERM using constraint KB_FORMULA_TERM_TERM_ID_PK at read committed isolation level using share row locking chosen by the optimizer Number of opens = 1 Rows seen = 1 Rows filtered = 0 Fetch Size = 1 constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 next time in milliseconds/row = 0 scan information: Bit set of columns fetched=All Number of columns fetched=2 Number of deleted rows visited=0 Number of pages visited=3 Number of rows qualified=1 Number of rows visited=1 Scan type=btree Tree height=-1 start position: &gt;= on first 1 column(s). Ordered null semantics on the following columns:  stop position: &gt; on first 1 column(s). Ordered null semantics on the following columns:  qualifiers: None optimizer estimated row count: 1.00 optimizer estimated cost: 6.59&#91;EL Fine&#93;: 2013-01-17 11:01:00.732-ServerSession(1237006689)Connection(927179828)Thread(Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93;)-SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?)) bind =&gt; &#91;2251799814033500  2251799814033501  2251799814033499&#93;Thu Jan 17 11:01:10 CST 2013 Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93; (XID = 4711078)  (SESSIONID = 3)  SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (((TERM_ID = ?) OR (TERM_ID = ?)) OR (TERM_ID = ?)) ******* Project-Restrict ResultSet (3):Number of opens = 1Rows seen = 3Rows filtered = 0restriction = falseprojection = true constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54Source result set: Project-Restrict ResultSet (2): Number of opens = 1 Rows seen = 11767298 Rows filtered = 11767295 restriction = true projection = false constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54 Source result set: Table Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer Number of opens = 1 Rows seen = 11767298 Rows filtered = 0 Fetch Size = 16 constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 next time in milliseconds/row = 0 scan information: Bit set of columns fetched=All Number of columns fetched=9 Number of pages visited=34358 Number of rows qualified=11767298 Number of rows visited=11767298 Scan type=heap start position: null stop position: null qualifiers: None optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54&#91;EL Fine&#93;: 2013-01-17 11:27:00.627-ServerSession(1237006689)Connection(1688096771)Thread(Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93;)-SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (? ? ?)) bind =&gt; &#91;2251799814033500  2251799814033501  2251799814033499&#93;Thu Jan 17 11:47:26 CST 2013 Thread&#91;&quot;Initial Lisp Listener&quot; 5 SubL Thread Group&#93; (XID = 4711080)  (SESSIONID = 3)  SELECT TERM_ID  ARG0  ARG1  ARG2  ARG3  FORMULA_HASH  FORMULA_LENGTH  FORMULA_TYPE  KB_STATUS FROM KB.FORMULA_TERM WHERE (TERM_ID IN (? ? ?)) ******* Project-Restrict ResultSet (3):Number of opens = 1Rows seen = 3Rows filtered = 0restriction = falseprojection = true constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54Source result set: Project-Restrict ResultSet (2): Number of opens = 1 Rows seen = 11767298 Rows filtered = 11767295 restriction = true projection = false constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 restriction time (milliseconds) = 0 projection time (milliseconds) = 0 optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54 Source result set: Table Scan ResultSet for FORMULA_TERM at read committed isolation level using instantaneous share row locking chosen by the optimizer Number of opens = 1 Rows seen = 11767298 Rows filtered = 0 Fetch Size = 16 constructor time (milliseconds) = 0 open time (milliseconds) = 0 next time (milliseconds) = 0 close time (milliseconds) = 0 next time in milliseconds/row = 0 scan information: Bit set of columns fetched=All Number of columns fetched=9 Number of pages visited=34358 Number of rows qualified=11767298 Number of rows visited=11767298 Scan type=heap start position: null stop position: null qualifiers: None optimizer estimated row count: 1176730.30 optimizer estimated cost: 5931065.54   ,0
6064,Failures in upgradeTests.Changes10_9 related to index cardinality statistics    The upgrade test fails when run with 10.8.3. The reason is that a fix has been backported to 10.8.3  and older branches back to 10.3  and this fix invalidates assumptions made in some of the tests in Changes10_9.Example of failures:https://builds.apache.org/job/Derby-10.9-suites.All/60/testReport/As a side note  I'm wondering if we don't have good enough routines to make sure we run the upgrade tests with maintenance releases on older branches before releasing them. I don't know if we can avoid this situation in general  that would at least require very careful consideration on how to write the upgrade test.   ,0
6079,100's of errors in nightly test run on weme after jacoco property/priviledges checkin    100's of errors in nightly test  all seem to be a null pointer while processing policy files during setup. problem is in jvm code  and it seems specific to the weme6.2 jvm.The only change being tested in this run was  For instance:330) testAll(org.apache.derbyTesting.functionTests.tests.lang.NativeAuthenticationServiceTest)java.lang.NullPointerException at com.ibm.oti.util.DefaultPolicy.addGrant(DefaultPolicy.java:619) at com.ibm.oti.util.DefaultPolicy.readPolicy(DefaultPolicy.java:608) at com.ibm.oti.util.DefaultPolicy.getSystemPolicy(DefaultPolicy.java:922) at com.ibm.oti.util.DefaultPolicy.getPermissionsImpl(DefaultPolicy.java:114) at com.ibm.oti.util.DefaultPolicy$1.run(DefaultPolicy.java:67) at java.security.AccessController.doPrivileged(AccessController.java:204) at com.ibm.oti.util.DefaultPolicy.privateGetPermissions(DefaultPolicy.java:65) at com.ibm.oti.util.DefaultPolicy.getPermissions(DefaultPolicy.java:53) at java.security.Policy.getPermissions(Policy.java:131) at java.security.ProtectionDomain.implies(ProtectionDomain.java:177) at java.security.AccessController.checkPermission(AccessController.java:99) at java.lang.SecurityManager.checkPermission(SecurityManager.java:534) at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:331) at java.lang.System.getProperty(System.java:384) at java.lang.System.getProperty(System.java:366) at org.apache.derbyTesting.junit.BaseTestCase$3.run(BaseTestCase.java:292) at java.security.AccessController.doPrivileged(AccessController.java:204) at org.apache.derbyTesting.junit.BaseTestCase.getSystemProperty(BaseTestCase.java:288) at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:86) at org.apache.derbyTesting.junit.TestConfiguration$5.tearDown(TestConfiguration.java:868) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)Here is link to all errors:http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-suites.All_diff.txthttp://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/1447575-derbyall_diff.txt   ,0
6090,Package javadoc publishedapi/jdbc4/index.html out of date    Quote: ' Derby runs on any J2SE 1.4.2 or higher virtual machine and supports Java ME/CDC/Foundation. Derby's database format is platform independent allowing databases to be copied to any machine type. 'I think we have dropped 1.4.2  so we could omit that  but also include JDK 8 Profile 2 here  since we do mention CDC.   ,0
6092,testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)j fails with : 'The handle is invalid.: java.io.IOException'.    There was 1 error:http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm15/1449432-suites.All_diff.txt1) testPositionAgressive(org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest)java.sql.SQLException: Java exception: 'The handle is invalid.: java.io.IOException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.commit(Unknown Source) at org.apache.derbyTesting.junit.BaseJDBCTestCase.commit(BaseJDBCTestCase.java:393) at org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionAgressive(BlobClob4BlobTest.java:1070) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: java.io.IOException: The handle is invalid. at java.io.RandomAccessFile.close0(Native Method) at java.io.RandomAccessFile.close(RandomAccessFile.java:573) at org.apache.derby.impl.jdbc.LOBFile.close(Unknown Source) at org.apache.derby.impl.jdbc.EncryptedLOBFile.close(Unknown Source) ... 53 more   ,0
6100,Upgrade tests fail on compact2    The upgrade tests fail on the compact2 profile because they use data sources to create databases with old Derby versions  and to shut down the old engines after the test. The data sources in Derby versions before 10.10 require JNDI to be present. Since JNDI is not present on compact2  the attempts to obtain data sources fail:1) 10.0.2.1 Upgrade Phase: CREATE java.lang.NoClassDefFoundError: javax/naming/Referenceable at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(Unknown Source) at java.security.SecureClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.defineClass(Unknown Source) at java.net.URLClassLoader.access$100(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Unknown Source) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(JDBCDataSource.java:162) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:108) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:93) at org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(JDBCDataSource.java:47) at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp(PhaseChanger.java:93) at junit.extensions.TestSetup$1.protect(TestSetup.java:20) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)Caused by: java.lang.ClassNotFoundException: javax.naming.Referenceable at java.net.URLClassLoader$1.run(Unknown Source) at java.net.URLClassLoader$1.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) at java.lang.ClassLoader.loadClass(Unknown Source) ... 107 more   ,0
6107,Investigate why setting a login timeout causes NativeAuthenticationServiceTest to fail when run in a suite    See DERBY-6094 for the details of this problem.   ,1
6112,SSL Test (and network server )  can hang if serverSocket.accept() fails for something other than an IOException    In starting a server with SSL as in SSLTest if serverSocket.accept() fails for some reason other than an IOException it may just print the error to console and hang. In this case it was:java.security.AccessControlException: Access denied (java.util.PropertyPermissionI saw this when debugging a java issue in serverSocket.accept() but I think it could be simulated by adding an unwrapped System.getProperty() of some sort before serverSocket.accept() to force a permission error. e.g.  System.getProperty('derby.system.home'); return serverSocket.accept(); } catch (IOException acceptE) {I have not verified that would work.   ,1
6124,Marshalling error in JDBCDriverTest as part of CompatibilityTest    Internal Oracle testing of RC 2 testing of 10.10 (Tendril Request 5574239 Tendril Task 3614491 ):                 Diff file derbyall/derbynetclientmats/DerbyNetClient/encodingTests/TestEnc.diff             Start: TestEnc jdk1.7.0 DerbyNetClient derbynetclientmats:encodingTests 2013-03-21 14:55:59 ***derbyTesting.encoding can only be used with jdk15  skipping test End: TestEnc jdk1.7.0 DerbyNetClient derbynetclientmats:encodingTests 2013-03-21 14:55:59 ***            Diff file derbyall/derbynetclientmats/DerbyNetClient/derbynetclientmats/CompatibilityTest.diff             Start: CompatibilityTest jdk1.7.0 DerbyNetClient derbynetclientmats:derbynetclientmats 2013-03-21 14:55:59 ***0 add&gt; .E.&gt; There was 1 error:&gt; 1) testJDBCDriver(org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest)java.sql.SQLException: Error marshalling or unmarshalling a user defined type: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992  local class serialVersionUID = 1827170030595550895&gt; Caused by: org.apache.derby.client.am.SqlException: Error marshalling or unmarshalling a user defined type: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992  local class serialVersionUID = 1827170030595550895&gt; ... 22 more&gt; Caused by: java.io.InvalidClassException: org.apache.derbyTesting.functionTests.tests.lang.Price; local class incompatible: stream classdesc serialVersionUID = 102726277789621992  local class serialVersionUID = 1827170030595550895&gt; ... 25 more&gt; FAILURES!!!&gt; Tests run: 2  Failures: 0  Errors: 1Test Failed. End: CompatibilityTest jdk1.7.0 DerbyNetClient derbynetclientmats:derbynetclientmats 2013-03-21 14:56:04 ***    Looking at the Price class I see it doesn't have an explicit serialVersionUID.   ,0
6131,select from view with 'upper' and 'in' list throws a ClassCastException    the issue can be reproduced1. create table myTbl1 (name varchar(1000));2. create table myTbl2 (name varchar(1000));3. create view myView (name) as select t1.name from myTbl1 t1 union all select t2.name from myTbl2 t2;4. select name from myView where upper(name) in ('AA'  'BB');#4 failed with 'org.apache.derby.impl.sql.compile.SimpleStringOperatorNode incompatible with org.apache.derby.impl.sql.compile.ColumnReference: java.lang.ClassCastException'If the view is created as 'create myView (name) as select t1.name from myTbl1 t1'  the query worked fine.   ,0
6144,nightly regression test failure  intermittent error : testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError    failure in nightly regression test  candidate 10.10 branch  ibm17may be related to daylight savings time change  there were similar resolved bugs that were marked fixed so reporting new one in case this is different.http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/ibm17/1461391-suites.All_diff.txtThere was 1 failure:1) testStatisticsCorrectness(org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest)junit.framework.AssertionFailedError at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testStatisticsCorrectness(AutomaticIndexStatisticsTest.java:332) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:88) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
6146,nightly regression test failure: testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)junit.framework.AssertionFailedError: Column value mismatch @ column '1'     http://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1461387-suites.All_diff.txt1) testMultipleLastKeyWaitsInMaxScan(org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest)junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;4&lt; Found: &gt;3&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1213) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1125) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1012) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:835) at org.apache.derbyTesting.functionTests.tests.store.IndexSplitDeadlockTest.testMultipleLastKeyWaitsInMaxScan(IndexSplitDeadlockTest.java:657) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:110) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)FAILURES!!!Tests run: 15197  Failures: 1  Errors: 0   ,0
6150,Add automatic cleanup of connections opened with openDefaultConnection()    In JDBCBaseTestCase  the default connection is automatically rolled back and closed but connections opened with openDefaultConnection() can stay open and hold locks and affect other tests if the database can not be cleaned because locks are held. It would be good to clean up all the connections in tearDown().   ,0
6151,Derby does not report warnings raised by table functions    If a table function raises warnings as the user loops through ResultSet.next()  those warnings are silently thrown away by Derby. Derby should return those warnings when the user calls ResultSet.getWarnings().   ,0
6161,Simplify code that handles LOB files    When investigating DERBY-6092  I found some code that could be simplified/cleaned up. Will make those changes here.   ,1
6167,Interrupt restarts clock for login timeout    If a login takes time  and the thread that's blocked in Driver20.timeLogin() is interrupted  it will call Future.get() again with the same timeout value. This means that interrupting a getConnection() call will not make it terminate faster  as one might expect. Instead  it restarts the timeout clock and makes it terminate later than if it had not been interrupted.   ,0
6168,Clean up registered format ids    RegisteredFormatIds and StoredFormatIds contain identifiers for classes that implement the Formatable interfaces and are used when serializing/deserializing instances of those classes.Many of the classes referenced there do however not implement Formatable. The references to them could be removed. I've seen that many classes in the impl.sql.execute.rts package are there  none of which implement Formatable. There may be more.   ,0
6178,AutoloadTest does not proprogate original jvm -D flags to spawned JVM  leading to LAB regression test failures    IBM lab nightly regression testing is seeing numerious intermittent errors while running theAutoloadTest. This regression testing often runs multiple runs of Suites.all on the same machine atthe same time and uses the -Dderby.tests.basePort=3500 option to the tests to insure networkserver is created on different ports and don't intefere.I think the following code in this test that spawn a process is not going pass that port info onto the networkserver startup and then lead to problems: /** Run {@code AutoloadTest} in a separate JVM. */ public void spawnProcess() throws Exception { String[] cmd = { 'junit.textui.TestRunner'  spawnedTestClass.getName() }; SpawnedProcess proc = new SpawnedProcess(execJavaCmd(cmd)  spawnedTestClass.getName()); if (proc.complete() != 0) { fail(proc.getFailMessage('Test process failed')); } }   ,0
6182,Cleanup suspect coding practices in org.apache.derby.iapi.error package    Similar to DERBY-6177.   ,0
6185,Query against view  with 'where name LIKE 'Col1' ESCAPE '/' ' failed    The error can be reproduced 1) create table mytbl1 (name clob(10K));2) create table mytbl2 (name clob(10K));3) create view myview (name) as select t1.name from mytbl1 t1 union all select t2.name from mytbl2 t2;4) select name from myview where name LIKE 'Col1' ESCAPE '/';'4)' failed with error message 'ERROR 42818: Comparisons between 'CLOB (UCS_BASIC)' and 'CHAR (UCS_BASIC)' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match  a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1') at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator(Unknown Source) at org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(Unknown Source) at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(Unknown Source) at org.apache.derby.impl.sql.compile.FromList.pushPredicates(Unknown Source) at org.apache.derby.impl.sql.compile.SelectNode.preprocess(Unknown Source) at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 19 more   ,0
6188,Cleanup suspect coding practices in org.apache.derby.iapi.services.io package    Similar to DERBY-6177.   ,0
6197,Cleanup suspect coding practices in the org.apache.derby.impl.tools.planexporter package    Similar to DERBY-6177.   ,0
6200,Cleanup suspect coding practices in the org.apache.derby.iapi.types package    Similar to DERBY-6177.   ,0
6202,Cleanup suspect coding practices in the org.apache.derby.iapi.sql.dictionary package    Similar to DERBY-6177.   ,0
6206,Cleanup suspect coding practices in misc Derby packages    Similar to DERBY-6177.   ,0
6211,Make Optimizer trace logic pluggable.    Right now the trace logic in the optimizer is hard-coded to produce a stream of diagnostics. It would be good to be able to plug alternative trace logic into the optimizer. This would make the following possible:1) Plug in trace logic which produces formats which are easier to study and which can be analyzed mechanically. E.g.  xml formatted output.2) Plug in trace logic which can be used during unit testing to verify that the optimizer has picked the right plan. Over time this might make it easier to migrate canon-based tests to assertion-based tests.   ,0
6212,NullPointerException when calling a procedure with sub-query as argument    ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; call syscs_util.syscs_set_database_property('abc'  (values 'def'));ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)The query should either compile and execute just fine  or it should raise a proper exception. It should not fail with a NullPointerException.   ,0
6224,Issues with latest JDK 8 EA build because of missing SQLPermission    With the latest EA build of JDK 8 (build 1.8.0-ea-b89)  I see many failures in suites.All. For example:1) testStartNetworkServerFalse(org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest)java.security.AccessControlException: access denied ('java.sql.SQLPermission' 'deregisterDriver') at java.security.AccessControlContext.checkPermission(AccessControlContext.java:364) at java.security.AccessController.checkPermission(AccessController.java:562) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at java.sql.DriverManager.deregisterDriver(DriverManager.java:399) at org.apache.derby.jdbc.AutoloadedDriver.unregisterDriverModule(AutoloadedDriver.java:263) at org.apache.derby.jdbc.Driver20.stop(Driver20.java:105) at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:443) at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:394) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:227) at org.apache.derby.impl.services.monitor.FileMonitor.shutdown(FileMonitor.java:44) at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:197) at org.apache.derby.impl.services.monitor.FileMonitor.shutdown(FileMonitor.java:44) at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255) at org.apache.derby.jdbc.Driver20.connect(Driver20.java:246) at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:145) at java.sql.DriverManager.getConnection(DriverManager.java:661) at java.sql.DriverManager.getConnection(DriverManager.java:208) at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:204) at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:171) at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1822) at org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStartTest.setUp(DerbyNetAutoStartTest.java:82) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)What's new in EA build 89 is that DriverManager.deregisterDriver() now requires an SQLPermission when running under a security manager. Most of suites.All runs under a security manager  and Derby's engine shutdown code calls deregisterDriver()  so this problem probably affects all tests that shut down the engine.   ,1
6225,SecureServerTest assertion error on contents of stdout from subprocess       ,1
6230,Use the JVM's cache of Number instances in ReuseFactory    ReuseFactory has a cache of Byte  Short  Integer and Long instances to avoid excessive allocation of such instances.As of Java 5  the JVM has a cache of its own  available through static valueOf() methods in these classes.The JVM's cache is guaranteed to have at least all values in the range &#91;-128  127&#93;. ReuseFactory currently caches Integer instances in the range &#91;-1  18&#93; plus a few special values  and Byte  Short and Long instances in the range &#91;0  10&#93;.If we change ReuseFactory so that it uses the JVM's cache  the number of cache misses will be lower  and the code will become shorter.   ,0
6231,Remove unnecessary checks for UnsupportedEncodingException in the client    Many methods in the client need handling of UnsupportedEncodingException  typically because they call String methods that take the name of the encoding as argument. Most of these methods have overloads that take a Charset instead of a String to describe the encoding  and those methods don't throw UnsupportedEncodingException as the encoding is known to be supported once we have a Charset instance for it. We should use the methods that take a Charset and simplify the exception handling.   ,0
6233,XMLBindingTest fails on latest JDK 8 EA    java.sql.SQLDataException: Invalid XML Document: External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:79) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148) at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:349) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:85) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1438) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1695) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1379) at org.apache.derbyTesting.junit.XML.insertDocWithDTD(XML.java:240) at org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest$XBindTestSetup.setUp(XMLBindingTest.java:301) at junit.extensions.TestSetup$1.protect(TestSetup.java:22) at junit.extensions.TestSetup.run(TestSetup.java:27) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.extensions.TestSetup.run(TestSetup.java:27)Caused by: java.sql.SQLException: Invalid XML Document: External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:126) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)Caused by: java.sql.SQLException: Java exception: 'External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed.: org.xml.sax.SAXException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:126) at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148) at org.apache.derby.impl.jdbc.Util.javaException(Util.java:370) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:432)Caused by: org.xml.sax.SAXException: External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed.org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 119; External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at org.apache.derby.iapi.types.SqlXmlUtil$XMLErrorHandler.fatalError(SqlXmlUtil.java:767) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:180) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441) at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368) at com.sun.org.apache.xerces.internal.impl.XMLScanner.reportFatalError(XMLScanner.java:1388) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.dispatch(XMLDocumentScannerImpl.java:1158) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$DTDDriver.next(XMLDocumentScannerImpl.java:1050) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl$PrologDriver.next(XMLDocumentScannerImpl.java:964) at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:606) at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116) at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:509) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:858) at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:787) at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123) at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:237) at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:329) at org.apache.derby.iapi.types.SqlXmlUtil$1.run(SqlXmlUtil.java:320) at org.apache.derby.iapi.types.SqlXmlUtil$1.run(SqlXmlUtil.java:317) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.iapi.types.SqlXmlUtil.serializeToString(SqlXmlUtil.java:315) at org.apache.derby.iapi.types.XML.XMLParse(XML.java:632) at org.apache.derby.exe.acbfcc1aadx013exeff7x4f4fx000077cfc4780.e0(Unknown Source) at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:101) at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(RowResultSet.java:148) at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:185) at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:128) at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:520) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:453) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:334) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1346)Caused by: org.xml.sax.SAXParseException; lineNumber: 20; columnNumber: 119; External DTD: Failed to read external DTD 'personal.dtd'  because 'file' access is not allowed. at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:203) at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)   ,0
6247,updatelocksJDBC30 test failing in nightly regression tests    updatelocksJDBC30 test failed intermittently in nightly regression tests  trunk  ibm16http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1488447-derbyall_diff.txt                 Diff file derbyall/encryptionAll/storemats/storemats/updatelocksJDBC30.diff             Start: updatelocksJDBC30 jdk1.6.0 storemats:storemats 2013-05-31 19:48:20 ***15110d15109&lt; APP |UserTransaction|ROW |1 |U |A |(1 7) |GRANT|ACTIVE 15112a15112&gt; APP |UserTransaction|ROW |2 |U |A |(1 7) |GRANT|ACTIVE 15125d15124&lt; APP |UserTransaction|ROW |1 |U |A |(1 7) |GRANT|ACTIVE 15129a15129&gt; APP |UserTransaction|ROW |2 |U |A |(1 7) |GRANT|ACTIVE 15138d15137&lt; APP |UserTransaction|ROW |1 |U |A |(1 7) |GRANT|ACTIVE 15142a15142&gt; APP |UserTransaction|ROW |2 |U |A |(1 7) |GRANT|ACTIVE Test Failed. End: updatelocksJDBC30 jdk1.6.0 storemats:storemats 2013-05-31 19:48:32 ***   ,0
6266,Add ability to print a Derby execution ResultSet as xml.    Add a method for printing an org.apache.derby.iapi.sql.ResultSet as xml. The idea is to get a quick snapshot of a plan shape without all of the overhead of PlanExporter and runtimestatistics. This method could be used by our tests to verify plan shapes.   ,0
6267,Add ability to compactly specify a complete query plan in an optimizer override.    It would be nice to be able to override the optimizer's choice and specify a complete query plan using the compact summary syntax output by XMLOptTrace. Given how the optimizer handles a statement  this would require binding a query plan at the query block level. Two obvious candidates for such a feature are:1) Extend the use of DERBY-PROPERTIES in the comments of a query.2) Add an extra clause to query blocks. The clause would have to be a clearly marked Derby extension.(1) might look like this (here we add a new 'fullQueryPlan' property):select tablename from sys.systables t  sys.syscolumns c  sys.sysaliases awhere t.tablename = c.columnname and c.columnname = a.alias&#8211; DERBY-PROPERTIES fullQueryPlan = (SYSCOLUMNS_HEAP # SYSALIASES_INDEX1) # SYSTABLES_INDEX1union allselect tablename from sys.systables t  sys.syscolumns c  sys.sysaliases a  sys.syssequences swhere t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&#8211; DERBY-PROPERTIES fullQueryPlan = ((SYSCOLUMNS_HEAP # SYSTABLES_INDEX1) # SYSALIASES_INDEX1) # SYSSEQUENCES_INDEX2;(2) might look like this (here we add a new 'using derby join order' clause):select tablename from sys.systables t  sys.syscolumns c  sys.sysaliases awhere t.tablename = c.columnname and c.columnname = a.aliasusing derby join order (SYSCOLUMNS_HEAP # SYSALIASES_INDEX1) # SYSTABLES_INDEX1union allselect tablename from sys.systables t  sys.syscolumns c  sys.sysaliases a  sys.syssequences swhere t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencenameusing derby join order ((SYSCOLUMNS_HEAP # SYSTABLES_INDEX1) # SYSALIASES_INDEX1) # SYSSEQUENCES_INDEX2;Here's a comparison of these approaches:(1)+ Portability: the same query text can be used against different RDBMSes. Parsing of DERBY-PROPERTIES happens outside the grammer.(2)+ Parsing happens in the parser. Not portable.I slightly prefer approach (1). If I pursue that approach  I would like to see if I can move the parsing into the parser.I am interested in other opinions about how to address this feature. Thanks.   ,0
6273,NullPointerException when using more than one parameter in COALESCE    Calls to COALESCE fail with NullPointerExceptions if there are multiple ? parameters:ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; prepare ps as 'values coalesce(? ? 1)';ERROR XJ001: Java exception: ': java.lang.NullPointerException'. (errorCode = 0)java.lang.NullPointerException at org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(Unknown Source) at org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generate(Unknown Source) at org.apache.derby.impl.sql.compile.RowResultSetNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.CursorNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&lt;init&gt;(Unknown Source) at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.&lt;init&gt;(Unknown Source) at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source) at org.apache.derby.impl.tools.ij.ij.PrepareStatement(Unknown Source) at org.apache.derby.impl.tools.ij.ij.ijStatement(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source) at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.go(Unknown Source) at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source) at org.apache.derby.impl.tools.ij.Main.main(Unknown Source) at org.apache.derby.tools.ij.main(Unknown Source)   ,0
6292,Use Arrays.copyOf() in FormatableArrayHolder.getArray()    FormatableArrayHolder.getArray() creates an array of the correct type using reflection and copies it manually. Java 6 introduced a copyOf() method in java.util.Arrays that could do all of this automatically. Now that Java 6 is the minimum level on trunk  we could take advantage of the library method and simplify the code.   ,0
6295,Allow tests to show detailed error when spawning new process fails    In recent versions of Java  Runtime.exec() will hide the underlying exception unless the code base is granted read permission on the executable file.Example:These two failures probably have the same cause:http://download.java.net/javadesktop/derby/javadb-5579292-report/javadb-task-3689381.htmlhttp://download.java.net/javadesktop/derby/javadb-5579170-report/javadb-task-3688261.htmlThe former  running on an older JVM  shows the real cause:java.io.IOException: Cannot run program '/localhome/tendril4.2/work/install/sun-jdk-7u10-fcs-bin-b31/jdk7_10/jdk1.7.0_10/jre/bin/java': error=12  Not enough spaceCaused by: java.io.IOException: error=12  Not enough spaceThe latter  running on a more recent JVM  hides the real failure behind an AccessControlException:java.io.IOException: Cannot run program '/localhome/tendril4.2/work/install/sun-jdk-8-ea-bin-b93/jdk8/jdk1.8.0/jre/bin/java'Caused by: java.security.AccessControlException: access denied ('java.io.FilePermission' '/localhome/tendril4.2/work/install/sun-jdk-8-ea-bin-b93/jdk8/jdk1.8.0/jre/bin/java' 'read')We should consider changing the following grant in derby_tests.policy to include 'read' in order to make it easier to see why a test is failing: // Tests need to be able to exec a java program. permission java.io.FilePermission '${java.home}${/}-'  'execute';   ,0
6296,Simplify PropertyUtil using Properties.stringPropertyNames()    PropertyUtil should use Properties.stringPropertyNames() (new method in Java 6) instead of Properties.propertyNames() since a Set&lt;String&gt; view of the property names is easier to work with than an Enumeration&lt;?&gt;. The Set&lt;String&gt; view can be used with for-each loops and many of the helper methods in the standard library.   ,0
6297,Intermittent failures in XplainStatisticsTest.testSimpleXplainOnly    XplainStatisticsTest.testSimpleXplainOnly fails intermittently.Examples:http://download.java.net/javadesktop/derby/javadb-5579342-report/javadb-task-3689858.html junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;1&lt; Found: &gt;2&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1278) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1190) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1077) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1000) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:957) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:915) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:900) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleXplainOnly(XplainStatisticsTest.java:1148) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)http://download.java.net/javadesktop/derby/javadb-5579365-report/javadb-task-3690182.html junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;4&lt; Found: &gt;7&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1278) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1190) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1077) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1000) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:957) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:915) at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:900) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleXplainOnly(XplainStatisticsTest.java:1183) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
6306,XplainStatisticsTest.testSimpleQuery: BEGIN_COMP_TIME unexpectedly NULL    Seen on two platforms in nightly testing of trunk revision 1506904:http://download.java.net/javadesktop/derby/request_5579443/javadb-task-3691350.htmlhttp://download.java.net/javadesktop/derby/request_5579443/javadb-task-3691354.htmljunit.framework.AssertionFailedError: BEGIN_COMP_TIME unexpectedly NULL at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.getNonNullTimestamp(XplainStatisticsTest.java:1538) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.verifySensibleStatementTimings(XplainStatisticsTest.java:1417) at org.apache.derbyTesting.functionTests.tests.lang.XplainStatisticsTest.testSimpleQuery(XplainStatisticsTest.java:1038) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
6320,Log a page dump to derby.log if ERROR nospc: nospc.U  is returned to the user    ERROR nospc: nospc.U should only be an internal error that is caught and handled. If returned to the user  it is likely a bug. It would be useful if this occurs to have a page dump printed to derby.log. Care should be taken to only do this if the error is returned to the user and not for the internal variety.   ,0
6323,Fix incorrect @throws and @exception tags in javadoc    Many javadoc comments have @throws or @exception tags that either misspell the name of the exception class or name an exception that is not actually thrown from the method. We should fix those references.   ,0
6324,DatabaseMetaData.getJDBCMinorVersion() should return 2 now that we've implemented JDBC 4.2    Now that the work on DERBY-6000 is done  DatabaseMetaData.getJDBCMinorVersion() should return 2 rather than 1. The following script shows that we're still returning 1:connect 'jdbc:derby:memory:db;create=true';call syscs_util.syscs_register_tool( 'databaseMetaData'  true );values getJDBCMajorVersion();values getJDBCMinorVersion();call syscs_util.syscs_register_tool( 'databaseMetaData'  false );   ,0
6330,Simplify StringBuffer use  as they are mutable    code cleanup where code reasssigns StringBuffers for no reason. remove for easier code reading.   ,0
6338,Remove Profile attribute from jar file manifests    DERBY-5955 added a Profile attribute to the jar file manifests. Starting with JDK 8 b105  the attribute has no effect and can be removed.See here: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=8022921   ,0
6342,failure in testConstraintDrops(org.apache.derbyTesting.functionTests.lang.ConglomerateSharingTest)junit.framework.AssertionFailedError: Error 23505 should have been caused by index/constraint...    Don't think this failure has been reported before.The url for failure is http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/weme6.2/1520721-suites.All_diff.txt1) testConstraintDrops(org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest)junit.framework.AssertionFailedError: Error 23505 should have been caused by index/constraint 'DROPC_UIX2' but 'DROPC_UIX2' did not appear in the following error message: 'The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint or unique index identified by 'DROPC_UC1' defined on 'DROPC_T2'.' at org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.checkStatementError(ConglomerateSharingTest.java:762) at org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.testConstraintDrops(ConglomerateSharingTest.java:272) at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
6356,java.security.AccessControlException in i18n.LocalizedDisplayScriptTest    Seeing more test failures because of an intentional security change in TimeZone.setDefault(). Therefore need to wrap Timezone.setDefault in a priv block in the test. 5) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.security.AccessControlException: Access denied ('java.util.PropertyPermission' 'user.timezone' 'write') at java.security.AccessController.throwACE(AccessController.java:100) at java.security.AccessController.checkPermission(AccessController.java:174) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at java.util.TimeZone.hasPermission(TimeZone.java:756) at java.util.TimeZone.setDefault(TimeZone.java:778) at org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest.setUp(LocalizedDisplayScriptTest.java:140) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)and:6) LocalizedDisplay(org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest)java.security.AccessControlException: Access denied ('java.util.PropertyPermission' 'user.timezone' 'write') at java.security.AccessController.throwACE(AccessController.java:100) at java.security.AccessController.checkPermission(AccessController.java:174) at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) at java.util.TimeZone.hasPermission(TimeZone.java:756) at java.util.TimeZone.setDefault(TimeZone.java:778) at org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest.setUp(LocalizedDisplayScriptTest.java:140) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)   ,1
6357,CREATE TRIGGER doesn't detect all illegal references to SESSION schema    The reference manual's section on the DECLARE GLOBAL TEMPORARY TABLE statement says: Temporary tables cannot be referenced in a triggered-SQL-statementIt detects most cases and reports:ERROR XCL51: The requested function can not reference tables in SESSION schema.However  some references are not detected if they are in a subquery. For example:ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; declare global temporary table temptable(x int) not logged;0 rows inserted/updated/deletedij&gt; create table t1(x int);0 rows inserted/updated/deletedij&gt; create table t2(b boolean);0 rows inserted/updated/deletedij&gt; create trigger tr1 after insert on t1 insert into t2 values exists(select * from session.temptable);0 rows inserted/updated/deletedThis CREATE TRIGGER statement should have raised an error.   ,0
6386,Errors in jdbc4.LobStreamTest if derbyclient.jar is first in the classpath    I see the following errors in jdbc4.LobStreamTest if derbyclient.jar is before derby.jar on trunk 10.11 Rev: 1533320There were 2 errors:1) testWriteWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)java.lang.NoClassDefFoundError: org/apache/derby/iapi/error/ExceptionUtil at org.apache.derby.impl.jdbc.LOBStreamControl.write(LOBStreamControl.java:237) at org.apache.derby.impl.jdbc.LOBOutputStream.write(LOBOutputStream.java:108) at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues(LobStreamTest.java:302) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)2) testReadWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)java.lang.NoClassDefFoundError: org/apache/derby/iapi/error/ExceptionUtil at org.apache.derby.impl.jdbc.LOBInputStream.read(LOBInputStream.java:133) at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues(LobStreamTest.java:384) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)There were 2 failures:1) testWriteWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)junit.framework.AssertionFailedError: Expected IndexOutOfBoundException at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues(LobStreamTest.java:305) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)2) testReadWithInvalidParameterValues(org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest)junit.framework.AssertionFailedError: Expected IndexOutOfBoundException at org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues(LobStreamTest.java:387) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)I notice derbyclient.jar contains Mon Oct 21 13:30:14 PDT 2013 org/apache/derby/iapi/error/ExceptionUtil$1.classMon Oct 21 13:30:14 PDT 2013 org/apache/derby/iapi/error/ExceptionUtil.classwhich I think is only supposed to be in derby.jar   ,0
6396,NullPointerException in DirFile    We got a NullPointerException trying to start a Derby database in embedded mode; the stacktrace indicated it happened in org.apache.derby.impl.io.DirFile.deleteAll(); that method got called from org.apache.derby.impl.io.BaseStorageFactory.createTempDir().After investigating  it appears that the deleteAll() method calls 'super.list()'  which according to the java.io.File specifications  can return null. But the deleteAll() method doesn't handle that case gracefully.   ,0
6410,ClassCastException when launching derby from windows subst drive    When launching derby bundled with glassfish4 on a substed drive derby fails to startup and logs the following into the derby.log:Fri Nov 08 10:30:34 CET 2013 : Sicherheitsmanager mit einfacher Server-Sicherheitsrichtlinie installiert.java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at com.sun.enterprise.admin.cli.optional.DerbyControl.invokeNetworkServerControl(DerbyControl.java:158) at com.sun.enterprise.admin.cli.optional.DerbyControl.main(DerbyControl.java:245)Caused by: java.lang.ExceptionInInitializerError at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(Unknown Source) at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(Unknown Source) at org.apache.derby.drda.NetworkServerControl.main(Unknown Source) ... 6 moreCaused by: java.lang.ClassCastException: java.nio.file.FileSystemException cannot be cast to java.lang.RuntimeException at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(Unknown Source) at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.run(Unknown Source) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.makeStream(Unknown Source) at org.apache.derby.impl.services.stream.SingleStream.boot(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source) at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Unknown Source) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Unknown Source) at org.apache.derby.impl.services.monitor.FileMonitor.&lt;init&gt;(Unknown Source) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Unknown Source) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.boot(Unknown Source) at org.apache.derby.jdbc.EmbeddedDriver.&lt;clinit&gt;(Unknown Source) ... 12 moreDerby was started via the glassfish command:$ asadmin start-databaseThe asadmin command only fails if it is launched from a substed windows drive. The substed drive was created with the following command:$ subst d: c:/dWhen derby is started from drive 'C' everything is fine.   ,0
6411,Minimal select privilege should be checked in subqueries    DERBY-4191 added checks for minimal select privilege in cases where a SELECT query didn't access any actual column in the base table  such as SELECT COUNT FROM USER1.T and SELECT 1 FROM USER1.T. That privilege checking is only done for top-level SELECT statements. It should also be done for subqueries.Examples of queries where Derby does not currently check for minimal select privileges on the accessed tables (performed as USER2  which has no privileges on any of USER1's tables):SELECT * FROM (SELECT COUNT FROM USER1.T) SSELECT 1 FROM USER1.T UNION SELECT 2 FROM USER1.TINSERT INTO USER2.T SELECT 1 FROM USER1.TI believe that the above statements should have failed  but currently they succeed.   ,1
6414,Incorrect handling when using an UPDATE to SET an identity column to DEFAULT    Derby violates the SQL Standard when an UPDATE statement SETs an identity column to the value DEFAULT. Derby does the right thing for INSERTs  however.For INSERTs  the 2011 Standard defines the meaning of DEFAULT in part 2  section 15.10 (Effect of inserting tables into base tables)  general rule 2. For INSERTs  the DEFAULT value is the next value of the sequence generator which defines the identity column.For UPDATEs  the 2011 Standard defines the meaning of DEFAULT in part 2  section 15.13 (Effect of replacing rows in base tables)  general rule 5. For UPDATEs  the DEFAULT value is also the next value of the sequence generator which defines the identity column.Note also that the 2011 Standard says that a GENERATED ALWAYS identity column can be SET to DEFAULT. Furthermore  that is the only explicit value accepted. See the 2011 Standard  part 2  section 14.15 (set clause list)  syntax rule 5:{'If &lt;set clause&gt; SC specifies an &lt;object column&gt; that references a column of which some underlying column is either a generated column or an identity column whose descriptor indicates that values are always generated  then the &lt;update source&gt; specified in SC shall consist of a &lt;default specification&gt;.'}What Derby actually does for UPDATEs is the following:1) If the column was declared GENERATED ALWAYS  then Derby raises a compile-time error saying that the value of an identity column can't be overridden.2) If the column was declared GENERATED BY DEFAULT  then Derby raises an execution time-error when trying to stuff a null into the column.Correcting this bug would result in backwardly incompatible behavior. However  I think that the incompatibility is minor: it would mean the successful run of statements which previously raised errors.I tripped across this problem while implementing the UPDATE action of the MERGE statement (DERBY-3155). If we decide to fix this bug  we will want to make sure that the UPDATE actions of MERGE statements also correctly handle DEFAULT values for identity columns.The following script shows this problem:connect 'jdbc:derby:memory:db;create=true';create table t1( a int generated always as identity  b int );create table t2( a int generated by default as identity  b int );insert into t1( a  b ) values ( default  100 );insert into t2( a  b ) values ( default  100 );update t1 set a = default;update t2 set a = default;select * from t1;select * from t2;   ,0
6434,Incorrect privileges may be required for INSERT and DELETE statements.    This issue is a place to address problems with INSERT and DELETE statements similar to the problems affecting UPDATE statements recorded on DERBY-6429. In particular  DERBY-6432 and DERBY-6433 list some of the problems with INSERT statements.   ,1
6440,Connections opened by ForeignTableVTI never get released    I noticed during a run of suites.All that one database instance never got garbage collected  even after it had been shut down. It turned out it could not get garbage collected because it was still referenced from the static HashMap _connections in ForeignTableVTI. Looking closer at ForeignTableVTI  it looks as if it only calls put() and get() on the HashMap  never remove()  so its memory footprint will keep increasing as it is used.It would be good to have some way (preferably automatic) of releasing the resources held by ForeignTableVTI when they are no longer needed.   ,0
6443,ArrayIndexOutOfBoundsException when calling function from trigger    I'm having problems will calling functions from within a trigger.The problem seems to be with the outer function call (FLOOR() in this case  but it also happens with other functions). It works fine in the SELECT statement  but when used in the trigger it throws a ArrayIndexOutOfBoundsException.Remove the FLOOR() part from the trigger and it works fine.-- create source table and some dataCREATE TABLE foo (name VARCHAR(20)  val DOUBLE);INSERT INTO foo (name  val) VALUES ('A'  10)  ('A'  20)  ('B'  30)  ('C'  40);-- calling the function works fine hereSELECT name  FLOOR(AVG(LOG10(val)))  COUNT(*)FROM fooGROUP BY name;-- create target table for triggerCREATE TABLE summary (name VARCHAR(20)  aver DOUBLE  size INT);-- create the triggerCREATE TRIGGER trg_foo AFTER INSERT ON fooREFERENCING NEW TABLE AS changed FOR EACH STATEMENT MODE DB2SQLINSERT INTO summary (name  aver  size)SELECT name  FLOOR(AVG(LOG10(val)))  COUNT(*)FROM changedGROUP BY name;-- insert rows to cause trigger to fireINSERT INTO foo (name  val) VALUES ('A'  10)  ('A'  20)  ('B'  30)  ('C'  40);SELECT * FROM foo;SELECT * FROM summary;   ,0
6455,Infinite loop in NetworkServerControlImpl.ensureDataInBuffer    NetworkServerControlImpl.ensureDataInBuffer missing check for return -1 (EOF) from 'clientIs.read'. When read returns -1 thread consumes 100% CPU. Method NetworkServerControlImpl.fillReplyBuffer correctly throw exception.Fix: add two lines: private void ensureDataInBuffer(int minimumBytesNeeded) throws Exception { // make sure the buffer is large enough while ((replyBufferCount - replyBufferPos) &lt; minimumBytesNeeded) { try { int bytesRead = clientIs.read(replyBuffer  replyBufferCount  replyBuffer.length - replyBufferCount);+ if (bytesRead == -1)+ consolePropertyMessage('DRDA_InvalidReplyTooShort.S'  true); replyBufferCount += bytesRead; } catch (IOException e) { clientSocketError(e); } } }StackTrace: java.lang.Thread.State: RUNNABLE at java.net.SocketInputStream.read(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.ensureDataInBuffer(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.readLDString(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.readStringReply(Unknown Source:-1) at org.apache.derby.impl.drda.NetworkServerControlImpl.runtimeInfo(Unknown Source:-1) at org.apache.derby.drda.NetworkServerControl.getRuntimeInfo(Unknown Source:-1) at com.crcdata.dbadmin.server.DerbyEngine.getRuntimeInfo(DerbyEngine.java:134) at com.crcdata.dbadmin.server.DerbyEngine$DerbyServerMonitorTask.run(DerbyEngine.java:305) at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source:-1) at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source:-1) at java.util.concurrent.FutureTask.run(Unknown Source:-1) at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source:-1) at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source:-1) at java.lang.Thread.run(Unknown Source:-1)   ,0
6457,NetworkServerControl API breaks when username or password contains non-ascii characters    If you pass a non-ascii username/password combination to a NetworkServerControl API command  such as java -jar derbynet.jar shutdown -user Bj�_۴_�rn -password D�_۴__hlieit will hang forever.The reason is that NetworkServerControlImpl.writeLDString() writes the length of the string in characters  whereas NetworkServerControlImpl.readLDString() expects the length to be in number of bytes.   ,0
6471,Create a regression test which will fail if classes from one Derby jar file leak into another jar file    We should write a test so that we find out early on when a checkin breaks the separation between Derby jar files.   ,0
6482,Revamp the vti demo to look and behave more like the other demos.    The VTI demo began as a set of classes which could not be compiled by the normal build because they used Java 5 features. We hooked these classes into the ordinary build later on (see DERBY-3684). But the VTI demo still sticks out like a sore thumb. We ought to be able to make the VTI demo behave like the other demos now.   ,0
6484,Include SQLState in client exception messages    When the embedded driver raises an SQLException  it is linked to a iapi.error.StandardException whose toString() method adds the SQLState to the error message. An SQLException raised by the client driver is linked to a client.am.SqlException  which does not add the SQLState. Because of this  printStackTrace() gives more information when called on an embedded exception. You have to call getSQLState() on the client exception in order to see the SQLState.We should change client.am.SqlException's toString() method to work the same way as StandardException.toString().See also the discussion in DERBY-1997.   ,0
6496,Optional tool registration may fail because the CompilerContext is not always available at execution time.    For reasons which elude me  the CompilerContext is sometimes available at execution time and sometimes not. When the CompilerContext is not available at execution time  optional tool loading fails on an NPE:Caused by: java.lang.NullPointerException at org.apache.derby.catalog.Java5SystemProcedures.SYSCS_REGISTER_TOOL(Java5SystemProcedures.java:104) at org.apache.derby.exe.ac4d3680a5x0144x93adx0136xffffe1d7aa3e0.g0(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46) at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)   ,0
6500,intermittent error in nightly regression tests: AutoIncrementTest    junit.framework.AssertionFailedError: Column value mismatch @ column 'COLUMNNAME'  row 1: Expected: &gt;A_ZERO&lt; Found: &gt;A_ONE&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1277) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1189) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1076) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:999) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:956) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:914) at org.apache.derbyTesting.functionTests.tests.lang.AutoIncrementTest.testderbyIncrementTest(AutoIncrementTest.java:167) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)   ,0
6503,Starting network server on a network drive fails with JDK 7 on Windows    Starting a network server on a network drive with JDK 7 on Windows fails. The reported exception is a ClassCastException  but the underlying exception is the following:java.nio.file.AccessDeniedException: //host/path/derby.log at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83) at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97) at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102) at sun.nio.fs.WindowsAclFileAttributeView.setAcl(WindowsAclFileAttributeView.java:221) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:601) at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(FileUtil.java:897) at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(FileUtil.java:747) at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(SingleStream.java:205) at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:401) at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:72) at java.security.AccessController.doPrivileged(Native Method) at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(SingleStream.java:394) at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(SingleStream.java:356) at org.apache.derby.impl.services.stream.SingleStream.makeStream(SingleStream.java:132) at org.apache.derby.impl.services.stream.SingleStream.boot(SingleStream.java:92) at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991) at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541) at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44) at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:362) at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:343) at org.apache.derby.impl.services.monitor.FileMonitor.&lt;init&gt;(FileMonitor.java:58) at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285) at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67) at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:199) at org.apache.derby.jdbc.EmbeddedDriver.&lt;clinit&gt;(EmbeddedDriver.java:95) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:188) at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1032) at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:732) at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2277) at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:353)   ,0
6511,java.lang.NoSuchMethodError chaining a function and procedure    java.lang.NoSuchMethodError is raised when calling a procedure which takes an Integer argument and passing it the result of a function which returns an int. The error is raised in generated code.   ,0
6534,Remove StorageFile.getURL() and its implementations    StorageFile.getURL() is only called from CPFile  which is an implementation of StorageFile. The getURL() method could therefore be removed from the StorageFile interface and all its implementation classes except for CPFile  and it could be made private in CPFile.   ,0
6535,Remove storageFactory field from subclasses of InputStreamFile    The InputStreamFile class has a field called storageFactory which holds the BaseStorageFactory instance that created it. This field is accessible by all subclasses of InputStream. Still  each subclass has its own storageFactory field which shadows the field in the parent class and holds a reference to the exact same factory instance as the parent.I'd like to remove the extra fields in the subclasses in order to simply the code and silence IDE warnings about the shadowing.   ,0
6543,Syntax error when reference to transition variable has whitespace around it    If a trigger action references a transition variable and has whitespace around the period sign that separates the transition variable name from the column name  it fails with a syntax error.For example:ij&gt; create table t1(x int);0 rows inserted/updated/deletedij&gt; create table t2(x int);0 rows inserted/updated/deletedij&gt; --failscreate trigger tr1 after insert on t1 referencing new as newfor each row insert into t1 select x from t2 where x = new . x;ERROR 42X01: Syntax error: Encountered 'x' at line 1  column 150.Issue the 'help' command for general information on IJ command syntax.Any unrecognized commands are treated as potential SQL commands and executed directly.Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.ij&gt; --succeedscreate trigger tr2 after insert on t1 referencing new as newfor each row insert into t1 select x from t2 where x = new.x;0 rows inserted/updated/deletedThe only difference between the failing trigger definition and the successful one  is that the former says 'new . x' and the latter 'new.x'.Both should succeed.   ,0
6544,Non-english locale flunks LuceneSupportTest    The following error surfaced in the nightly tests on a windows machine with a Swedish locale. See http://download.java.net/javadesktop/derby/request_5589934/ junit.framework.AssertionFailedError: Column value mismatch @ column '1'  row 1: Expected: &gt;en&lt; Found: &gt;sv&lt; at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303) at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215) at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982) at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940) at org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testCreateAndQueryIndex(LuceneSupportTest.java:75) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)   ,0
6547,testDERBY5120NumRowsInSydependsForTrigger fails when the starting version of the upgrade trajectory is 10.10.2.0    When I run the upgrade tests with 10.10.2.0 as the starting point  I see the following error. I don't see this error when the starting point is 10.10.1.1. This may suggest that 10.10.2.0 has not been added as a starting point for the upgrade tests in the nightly/continuous-integration test runs.1) testDERBY5120NumRowsInSydependsForTrigger(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.AssertionFailedError: Expected error(s) ' 42802' but no error was thrown. at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementErrorMinion(BaseJDBCTestCase.java:1194) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1145) at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1228) at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testDERBY5120NumRowsInSydependsForTrigger(BasicSetup.java:514) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:21) at junit.extensions.TestSetup.run(TestSetup.java:25)   ,0
6553,Sequence generator makes CREATE TRIGGER fail with internal error    I'm seeing this on trunk:ij version 10.11ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t1(x int  y int  z int);0 rows inserted/updated/deletedij&gt; create table t2(x int  y int  z int);0 rows inserted/updated/deletedij&gt; create sequence seq;0 rows inserted/updated/deletedij&gt; values next value for seq;1 ------------21474836481 row selectedij&gt; create trigger tr1 after insert on t1 insert into t2(x) values (next value for seq);ERROR 40XT8: An internal error was identified by RawStore module. Internal state detail from the transaction is as follows: savedEndStatus = 0needSync = falsejustCreated = falsemyGlobalId = nullmyId = nullstate = 0inComplete = nullseenUpdates = falseinPostCommitProcessing = falselogStart = nulllogLast = nullrecoveryTransaction = falsepostCompleteMode = falsesanityCheck_xaclosed = falsetransName = UserTransactionreadOnly = falseflush_log_on_xact_end = truebackupBlocked = falsedontWaitForLocks = false   ,0
6563,NOT elimination for CASE expressions is broken    NOT elimination for CASE expressions seems to be broken. Take this example:ij&gt; select * from sysibm.sysdummy1 where not ( case when ibmreqd = 'Y' then true else true end );IBM&amp;----Y 1 row selectedBoth branches of the CASE expression evaluate to TRUE  so one would expect the predicate 'not ( case ... )' to evaluate to FALSE  and the query should return an empty result.   ,0
6565,ROW_NUMBER function throws NullPointerException in UPDATE statement    A NullPointerException is raised with this (possibly illegal?) UPDATE statement:ij version 10.10ij&gt; connect 'jdbc:derby:memory:db;create=true';ij&gt; create table t(x int);0 rows inserted/updated/deletedij&gt; insert into t values 1;1 row inserted/updated/deletedij&gt; update t set x = row_number() over ();ERROR XJ001: Java exception: ': java.lang.NullPointerException'.   ,0
6566,Simplify handling of untyped nulls in CASE and NULLIF expressions    The parser translates both CASE and NULLIF expressions into ConditionalNodes  but it represents untyped NULLs differently in the two cases.In a CASE expression  any branch that is an untyped NULL  is translated into an UntypedNullConstantNode that's wrapped in a CastNode that casts the value to CHAR(1). The CastNode is replaced with a cast to the correct type during the bind phase.A NULLIF expression is turned into a CASE expression that has a THEN NULL clause. The parser simply creates an UntypedNullConstantNode for that clause  without wrapping it in a CastNode. A CastNode is instead added during the bind phase.This slight difference in how NULLs are represented by the parser in the two cases  means that ConditionalNode needs to handle the two cases differently during the bind phase. It would be better if the parser generated NULLs in the same way for the two cases  so that ConditionalNode didn't need to know if it was generated for a CASE expression or a NULLIF expression.   ,0
6567,Incorrect nullability for CASE expression with parameter    This JUnit test code fails because it detects that the query returns null even though the result column is reported as not nullable: PreparedStatement ps = prepareStatement( 'values case when false then 1 else ? end'); ps.setNull(1  Types.INTEGER); JDBC.assertSingleValueResultSet(ps.executeQuery()  null);   ,0
6585,add HoldForConnection ij command to match NoHoldForConnection    DERBY-6515 was created to document the NoHoldForConnection ij command  which was used in some of Derby's sql style tests.In subsequent comments  it was felt there should be a matching HoldForConnection ij command to set the value back to the default (ResultSet.HOLD_CURSORS_OVER_COMMIT).   ,0
6595,CheckToursDBTest failed while updating sequence value on disk    I saw a failure in CheckToursDBTest while running the demo test suite on trunk. It was reported as an ArrayIndexOutOfBoundsException. The ArrayIndexOutOfBoundsException happened during cleanup and shadowed the original exception. The original exception in derby.log looked like this:ERROR XSTA2: A transaction was already active  when attempt was made to make another transaction active. at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290) at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285) at org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(XactFactory.java:766) at org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(XactFactory.java:293) at org.apache.derby.impl.store.raw.xact.XactFactory.startNestedUpdateUserTransaction(XactFactory.java:350) at org.apache.derby.impl.store.raw.RawStore.startNestedUpdateUserTransaction(RawStore.java:460) at org.apache.derby.impl.store.access.RAMTransaction.startNestedUserTransaction(RAMTransaction.java:2326) at org.apache.derby.impl.sql.catalog.SequenceUpdater.updateCurrentValueOnDisk(SequenceUpdater.java:486) at org.apache.derby.impl.sql.catalog.SequenceUpdater.clean(SequenceUpdater.java:218) at org.apache.derby.impl.sql.catalog.SequenceUpdater.clearIdentity(SequenceUpdater.java:257) at org.apache.derby.impl.services.cache.ConcurrentCache.removeEntry(ConcurrentCache.java:167) at org.apache.derby.impl.services.cache.ConcurrentCache.ageOut(ConcurrentCache.java:583) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSequenceCaches(DataDictionaryImpl.java:8968) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8951) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8937) at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.doneReading(DataDictionaryImpl.java:1184) at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:519) at org.apache.derby.impl.sql.GenericStatement.prepareStorable(GenericStatement.java:687) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(SPSDescriptor.java:373) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(SPSDescriptor.java:264) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:739) at org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171) at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346) at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113) at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272) at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:831) at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:282) at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470) at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349) at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704) at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631) at org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doUpdate(CheckToursDBTest.java:163) at org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.testToursDB(CheckToursDBTest.java:108) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at junit.framework.TestCase.runTest(TestCase.java:168) at junit.framework.TestCase.runBare(TestCase.java:134) at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440) at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457) at junit.framework.TestResult$1.protect(TestResult.java:110) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.framework.TestResult.run(TestResult.java:113) at junit.framework.TestCase.run(TestCase.java:124) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24) at junit.extensions.TestSetup$1.protect(TestSetup.java:23) at junit.framework.TestResult.runProtected(TestResult.java:128) at junit.extensions.TestSetup.run(TestSetup.java:27) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at junit.framework.TestSuite.runTest(TestSuite.java:232) at junit.framework.TestSuite.run(TestSuite.java:227) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052) at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)   ,0
6611,Broken link in API docs to derby.drda.keepAlive documentation    In the javadoc for NetworkServerMBean#getDrdaKeepAlive  there is a@see link which is broken. It points to:http://db.apache.org/derby/docs/dev/adminguide/radmindrdakeepalive.html   ,0
6616,User procedures can call system procedures  circumventing SQL authorization.    System procedures are implemented as public static methods in org.apache.derby.catalog.SystemProcedures. These methods can be called by code in user-written procedures. This allows a user-written procedure to circumvent the SQL authorization checks which are supposed to limit some procedures to being called only by the DBO. I will attach a repro.   ,1
6624,Use javax.xml.xpath interfaces for XPath support    Currently  Derby uses the interfaces in the org.w3c.dom.xpath package to implement XPath support. That package is not part of the Java SE specification. Even though the package is included as an internal API in some of the major Java runtimes  using the standard javax.xml.xpath package instead would be better. It would be more portable  and less likely to break in the future if JVM vendors remove the internal API.   ,0
6626,Check type of user-supplied modules before creating instances    Derby allows users to specify names of classes to use for various pluggable modules.In some cases  it verifies that the class implements the expected interface before it creates an instance of the class. For example in SpecificAuthenticactionServiceImpl: Class sasClass = Class.forName(specificAuthenticationScheme); if (!UserAuthenticator.class.isAssignableFrom(sasClass)) { throw StandardException.newException(SQLState.AUTHENTICATION_NOT_IMPLEMENTED  specificAuthenticationScheme  'org.apache.derby.authentication.UserAuthenticator'); } UserAuthenticator aScheme = (UserAuthenticator) sasClass.newInstance();In other cases  it creates an instance without checking  and instead fails with a ClassCastException or some other exception when trying to use the instance of the incorrect type. Examples: Java5SystemProcedures SYSCS_REGISTER_TOOL()  JCECipherFactory  SequenceUpdater.makePreallocator().I think it would be good to have similar checks in these other cases too. That'll give clearer error messages which explain what the problem is  and it will be safer because it limits which constructors the users can force the Derby engine to invoke.   ,1
6644,Support standard syntax for altering column nullability    Derby supports altering the nullability of a column via an ALTER TABLE statement  but the supported syntax is different from what the SQL:2011 standard defines. We should add support for the standard syntax as well.The standard syntax is ALTER TABLE t ALTER COLUMN c SET NOT NULL ALTER TABLE t ALTER COLUMN c DROP NOT NULL   ,0
6652,Compilation error using a view as the source data set for a MERGE statement    Mamta found the following problem when using a view as the source data set of a MERGE statement:connect 'jdbc:derby:memory:db;create=true';CREATE TABLE employee (employee_id int first_name VARCHAR(20) last_name VARCHAR(20) dept_no int salary int);create view v1employee as select * from employee;CREATE TABLE bonuses (employee_id int  bonus int DEFAULT 100);create view v2bonuses as select * from bonuses;-- compiles without the viewMERGE INTO bonuses BUSING employee EON B.employee_id = E.employee_idWHEN MATCHED AND E.dept_no=20 THEN UPDATE SET B.bonus = E.salary * 0.1WHEN NOT MATCHED AND dept_no=20 THEN INSERT (employee_id  bonus) VALUES (E.employee_id  E.salary * 0.05);-- compilation error with the viewMERGE INTO bonuses BUSING v1employee EON B.employee_id = E.employee_idWHEN MATCHED AND E.dept_no=20 THEN UPDATE SET B.bonus = E.salary * 0.1WHEN NOT MATCHED AND dept_no=20 THEN INSERT (employee_id  bonus) VALUES (E.employee_id  E.salary * 0.05);   ,0
6670,Rollback to savepoint allows violation of deferrable constraints    The bug is illustrated by the following code snippet: Connection c = DriverManager.getConnection('jdbc:derby:memory:db;create=true'); c.setAutoCommit(false); Statement s = c.createStatement(); s.execute('create table t1(x int primary key initially deferred)'); s.execute('insert into t1 values 1 1 1 1'); Savepoint sp = c.setSavepoint(); s.execute('drop table t1'); c.rollback(sp); // Since there are four identical rows in T1  this call should have // failed because the primary key was violated. c.commit(); // Instead  it succeeds  and all four rows are committed  as can // be seen here: ResultSet rs = s.executeQuery('select * from t1'); while (rs.next()) { System.out.println(rs.getInt(1)); } // Insert yet another row  so that we have five identical rows ... s.execute('insert into t1 values 1'); // ... and now commit complains ... c.commit();With auto-commit off  add duplicates into a deferred primary key. Then set a savepoint  drop the table  and roll back to the savepoint.Apparently  when you drop the table  information about any constraint violations seen on that table is lost  and that information is not restored when the drop table operation is undone by the rollback to savepoint.So when you commit the transaction after having rolled back the drop operation  no deferred checking of constraints happens  and the duplicates you have inserted are committed.   ,0
6672,Allow Derby to rename tables referenced by foreign keys    Hi  I'm on the Apache Roller team and we use database migration scripts to update databases between Roller releases. (We have a common template (http://svn.apache.org/viewvc/roller/trunk/app/src/main/resources/sql/500-to-510-migration.vm?view=co) that is run through Velocity to create specific scripts for the several databases that we support.) One handicap with Derby that we're not seeing with other databases is its inability to rename tables that have FK's on them. Renaming one of our tables returns this error from Derby:rename table website to weblog;Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WP_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 30000Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WE_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WC_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'FO_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'MF_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'NF_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999Error: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'AP_WEBSITEID_FK' is dependent on that object.SQLState: X0Y25ErrorCode: 99999This results in the migration scripts needing to be messy  first dropping all constraints before recreating them  for the one RDBMS that requires it. It would be great if a future release of Derby could be coded to support table renames regardless of the constraints defined on it. Thanks!   ,0
6685,Permission problems when running JUnit tests with Ant 1.9.4    I saw many permission problems when I set up a build job for the 10.11 branch. See for example this log: https://builds.apache.org/job/Derby-10.11-suites.All/1/consoleFirst stack trace: [junit] Running org.apache.derby.PackagePrivateTestSuite [junit] Tests run: 67  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 5.662 sec [junit] Exception in thread 'main' java.security.AccessControlException: access denied ('java.io.FilePermission' '/home/jenkins/jenkins-slave/workspace/Derby-10.11-suites.All/10.11-head/junit_20140804_1122/TEST-org.apache.derby.PackagePrivateTestSuite.xml' 'write') [junit] at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457) [junit] at java.security.AccessController.checkPermission(AccessController.java:884) [junit] at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) [junit] at java.lang.SecurityManager.checkWrite(SecurityManager.java:979) [junit] at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:194) [junit] at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:156) [junit] at org.apache.tools.ant.taskdefs.optional.junit.FormatterElement$DelayedFileOutputStream.write(FormatterElement.java:381) [junit] at java.io.OutputStream.write(OutputStream.java:116) [junit] at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221) [junit] at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291) [junit] at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:295) [junit] at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141) [junit] at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229) [junit] at java.io.BufferedWriter.flush(BufferedWriter.java:254) [junit] at org.apache.tools.ant.util.DOMElementWriter.openElement(DOMElementWriter.java:371) [junit] at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:209) [junit] at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222) [junit] at org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222) [junit] at org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.endTestSuite(XMLJUnitResultFormatter.java:188) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.fireEndTestSuite(JUnitTestRunner.java:840) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:575) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179) [junit] at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030) [junit] Running org.apache.derby.PackagePrivateTestSuite [junit] Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 0 sec [junit] Test org.apache.derby.PackagePrivateTestSuite FAILED (crashed)I can reproduce these failures in my environment by running the junit-single target with Ant 1.9.4. For example:ant -Dderby.junit.testclass=org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest junit-singleIf I use an older Ant version (I've tried 1.9.0 and 1.8.2) it does not fail.   ,1
6691,ROW_NUMBER should not be allowed as argument in a procedure call    Fails with assert/NPE instead of proper error:ij&gt; call syscs_util.syscs_compress_table('APP'  'T'  row_number() over ());ERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.   ,0
6693,Assert failure/ArrayIndexOutOfBoundsException when using COUNT in MERGE matching clause    This (meaningless) statement gives NPE in insane builds andassert failure in sane builds:s.execute('create table t2(x int)');s.execute('create table t1(x int)');s.execute('insert into t2 values 3 4');s.executeUpdate('merge into t1 using t2 on (t1.x=t2.x) ' + 'when not matched then insert values (count(*))');I see it also applies to other aggregates  e.g. MAX.stack trace (insane):Exception in thread 'main' java.sql.SQLException: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'. at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source) at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source) at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source) at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source) at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source) at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source) at derby6565.Derby6565.main(Derby6565.java:46)Caused by: ERROR XJ001: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'. at org.apache.derby.iapi.error.StandardException.newException(Unknown Source) at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source) ... 12 moreCaused by: java.lang.ArrayIndexOutOfBoundsException: -1 at org.apache.derby.impl.services.bytecode.BCMethod.popStack(Unknown Source) at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(Unknown Source) at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source) at org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(Unknown Source) at org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.MergeNode.generate(Unknown Source) at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source) at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source) at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source) ... 4 more   ,0
6708,OOME when running ConstraintCharacteristicsTest with smaller heap    When I ran suites.All on a device with little memory  so that I needed to reduce the heap (-Xmx160M)  it stopped and failed with an OOME when it came to ConstraintCharacteristicsTest.That test uses a memory database in order to speed it up. One of the test cases (testManySimilarDuplicates) has such a big data set that the database doesn't fit in the heap. It would be good if we could reduce the memory requirements of the test so that it passes on smaller devices to. Alternatively  we could add a switch that makes it easy to disable test cases that are known to have high memory requirements.   ,0
6719,Add derbyoptionaltools.jar to the class paths of the scripts in the bin directory    The derbyoptionaltools.jar should be added to the class paths constructed by all of the scripts in the bin distros which include derby.jar. Otherwise  the Lucene plugin (and future features which we put in derbyoptionaltools.jar) won't be available when you use the scripts to run ij  the network server  and sysinfo.For instance  you will see information on this jar file if you run sysinfo this way...java -jar derbyrun.jar sysinfo��_�__but not if you run the sysinfo script in the bin directory of a Derby installation.   ,0
6720,Add derbyoptionaltools.jar to the maven artifacts we publish    The new derbyoptionaltools.jar is not published to the maven repositories along with the other Derby jar files.   ,0
6730,Cannot create a Lucene index if a key column's name is case-sensitive    The workaround is to create a view which gives the columns case-insensitive names. The following script shows this problem:connect 'jdbc:derby:memory:db;create=true';call syscs_util.syscs_register_tool( 'luceneSupport'  true );create schema 's';create table 's'.'t'( 'passageID' int  'text' varchar( 32672 ));-- fails because the trailing key id is case-sensitivecall luceneSupport.createIndex( ''s''  ''t''  ''text''  null  ''passageID'');create view 's'.'t_view' ( passageID  text ) as select * from 's'.'t';-- succeeds on a view with case-insensitive identifierscall luceneSupport.createIndex( ''s''  ''t_view''  'text'  null  'passageID');   ,0
6736,The jacoco-junit target fails to store coverage data for some sub-suites    The console log for the code coverage test runs at https://builds.apache.org/job/Derby-JaCoCo/ shows that JaCoCo fails to write coverage data for the following test suites:langjdbcapistoreengineencryptionIt is caused by the following permissions-related exception: [junit] java.security.AccessControlException: access denied ('java.io.FilePermission' '/home/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140912_1758/jacoco.exec' 'write') [junit] at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372) [junit] at java.security.AccessController.checkPermission(AccessController.java:559) [junit] at java.lang.SecurityManager.checkPermission(SecurityManager.java:549) [junit] at java.lang.SecurityManager.checkWrite(SecurityManager.java:979) [junit] at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:203) [junit] at org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.openFile(FileOutput.java:67) [junit] at org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.writeExecutionData(FileOutput.java:53) [junit] at org.jacoco.agent.rt.internal_9dd1198.Agent.shutdown(Agent.java:143) [junit] at org.jacoco.agent.rt.internal_9dd1198.Agent$1.run(Agent.java:60)The result of this is that the coverage report shows lower coverage than what's actually covered by the tests.   ,1
6742,For update statement  collect generated keys if Statement.RETURN_GENERATED_KEYS flag is supplied to the JDBC call.    DERBY-6414 is providing SQL support to update identity columns using DEFAULT keyword. This jira will look into collecting generated keys if Statement.RETURN_GENERATED_KEYS flag is supplied to the JDBC call for an UPDATE sql.   ,0
641,Remove need for db2jcc.jar for executing ij or upload it on ibiblio    I'm trying to automate loading DDL files with Maven/Maven2 and all the derby are available on ibiblio except db2jcc.jar...Thanks!   ,0
1813,Fix hard-coded JDBC 4.0 type constants    The JDBC 4.0 driver has hard-coded type constants in JDBC40Translation. Some of these were changed in build 98 of jdk1.6 and should be updated. The nightly tests on jdk1.6 are failing because of this  see for instance http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/testlog/JDK16Jvm1.6SunOS-5.10_i86pc-i386/440135-jdbc40_diff.txt.   ,0
2985,In suites.All  certain test orders cause AccessControlException    While working on DERBY-2925  order of tests in suites/AllPackages.java causedjava.security.AccessControlException. For related derby-dev discussion please see:http://www.nabble.com/forum/ViewPost.jtp?post=11835420&amp;framed=y   ,0
5080,Utilize JQL to fetch JIRA issue list for release notes generation    DERBY-4857 made it possible to use the JIRA SOAP API to fetch a list of issues fixed in a release. However  the release manager have to manually create a JIRA filter and feed the filter id to the tool.Now that the Apache JIRA instance has been updated to 4.x  we can use the JIRA Query Language (JQL) to avoid that manual step.   ,0
5476,Remove unused parameter in splitmessages    splitmessages requires three parameters  but it only uses two of them. A comment in the class describing the parameters  only describe the first two of them: /** arg&#91;0&#93; is the destination directory arg&#91;1&#93; is the source file. */The third  unused parameter should be removed.   ,0
