<title>Issue 43880 -   chromium -    net/base/effective_tld_names.cc could be more space efficient - Project Hosting on Google Code</title> <pre> The current implementation uses gperf perfect hashing  which is very   runtime efficient but uses a lot of space.    I compute ~170kB of additional binary size for 32bit builds  and ~200kB   additional binary size for 64bit builds.    The additional binary size is compressible to about 45kB (using gzip in a   quick test).    If we switched to a trie implementation where each node in the trie was a   hostname part (e.g. co.uk would become 2 nodes  where &quot;uk&quot; was the parent   node of &quot;co&quot;) I estimate that we could reduce the binary size by ~140kB   pre-compression and perhaps 20kB post-compression.    All unique hostname parts would be put in a char table. So for instance   &quot;co.uk&quot; and &quot;ac.uk&quot; might produce a hostname part table of &quot;co0uk0ac0&quot;.    This would reduce the string storage space requirements from ~36kB now to   ~18kB.    We'd then use uint16 to index into this table  intead of char*. This would   reduce the per-node hostname part reference cost from 4bytes on   32bit/8bytes on 64bit to 2 bytes.    I've got some other ideas for defining a compact trie node datastructure.   Since leaf nodes are just strings  we would not use a full trie node for   the leaves.    I estimate that the total size would be in the 30-40kB range  possibly   smaller. </pre>