<title>Issue 25044 -   chromium -    Reloading page leaks old DOM tree - Project Hosting on Google Code</title> <pre> Reloading a web page often leaves behind a leaked copy of the DOM tree (the   WebCore::Document and WebCore::DOMWindow objects are left behind  plus everything they   hang onto.) Repeated reloads can cause up to four DOM trees to be leaked  even after large   numbers of full mark-sweep garbage collections.    TO REPRODUCE:  1. Instrument DOM::Document so you can count the number of instances (I hacked in some   printfs to the constructor and destructor.)  2. Launch Chrome with --js-flags=&quot;--expose-gc&quot;  3. Go to <a href="http://flickr.com">http://flickr.com</a>  4. Reload  5. Repeat step three any number of times  --&gt; Number of Document instances increases by one every time  5. Enter &quot;javascript:gc()&quot; in the address bar  hit Enter  6. Repeat step 5 about 10 times  --&gt; Number of documents will drop  starting after about 5 GCs  but will never drop to 1.    MORE DETAILS:  * The first DOM tree is among those never released. The other leaks seem random.  * Does not reproduce on a trivial HTML page with either no JavaScript  or a trivial script (&quot;3+4&quot;)    or a script that just installs an event handler on a DOM object.  * WebCore isn't leaking any global V8 handles.  * V8GCController is disposing the V8 context for the document when the reload occurs  as   expected.  * Calling &quot;v8::internal::Heap::TracePathToGlobal()&quot; from gdb shows that there are several global   contexts still around ... these must be what are holding onto the DOM trees. </pre>