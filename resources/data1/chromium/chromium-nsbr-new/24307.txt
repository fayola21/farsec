<title>Issue 24307 -   chromium -    Data race on reference counter - Project Hosting on Google Code</title> <pre> I've noticed the following report while running chromium unittests under   ThreadSanitizer (<a href="http://dev.chromium.org/developers/how-tos/using-">http://dev.chromium.org/developers/how-tos/using-</a>  valgrind/threadsanitizer)    INFO: T0 is program's main thread  INFO: T79 has been created by T0 at this point: {{{      #0  clone /lib32/libc-2.7.so      #1  pthread_create@@GLIBC_2.1 /lib32/libpthread-2.7.so      #2  pthread_create@* /home/timurrrr/valgrind-patches/valgrind-  10880/tsan/ts_valgrind_intercepts.c:556      #3  (anonymous namespace)::CreateThread(unsigned int  bool    PlatformThread::Delegate*  unsigned long*) base/platform_thread_posix.cc:93      #4  PlatformThread::CreateNonJoinable(unsigned int    PlatformThread::Delegate*) base/platform_thread_posix.cc:113      #5  base::LinuxDynamicThreadPool::PostTask(Task*)   base/worker_pool_linux.cc:138      #6  (anonymous   namespace)::WorkerPoolImpl::PostTask(tracked_objects::Location const&amp;    Task*  bool) base/worker_pool_linux.cc:45      #7  WorkerPool::PostTask(tracked_objects::Location const&amp;  Task*  bool)   base/worker_pool_linux.cc:90      #8  (anonymous namespace)::InFlightIO::PostWrite(disk_cache::File*    void const*  unsigned int  unsigned int  disk_cache::FileIOCallback*  bool)   net/disk_cache/file_posix.cc:206      #9  disk_cache::File::AsyncWrite(void const*  unsigned int  unsigned   int  bool  disk_cache::FileIOCallback*  bool*)   net/disk_cache/file_posix.cc:344      #10 disk_cache::File::Write(void const*  unsigned int  unsigned int    disk_cache::FileIOCallback*  bool*) net/disk_cache/file_posix.cc:329      #11 disk_cache::EntryImpl::WriteData(int  int  net::IOBuffer*  int    CallbackRunner&lt;Tuple1&lt;int&gt; &gt;*  bool) net/disk_cache/entry_impl.cc:337      #12 DiskCacheEntryTest::InternalAsyncIO()   net/disk_cache/entry_unittest.cc:194      #13 DiskCacheEntryTest_InternalAsyncIO_Test::TestBody()   net/disk_cache/entry_unittest.cc:229      #14 testing::Test::Run() testing/gtest/src/gtest.cc:2069  }}}  WARNING: Possible data race during read of size 4 at 0x95E7184: {{{     T0 (locks held: {}):      #0  base::subtle::RefCountedBase::Release() base/ref_counted.cc:43      #1  base::RefCounted&lt;disk_cache::File&gt;::Release() base/ref_counted.h:89      #2  disk_cache::BlockFiles::CloseFiles()   net/disk_cache/block_files.cc:196      #3  disk_cache::BlockFiles::~BlockFiles()   net/disk_cache/block_files.cc:167      #4  disk_cache::BackendImpl::~BackendImpl()   net/disk_cache/backend_impl.cc:332      #5  DiskCacheTestWithCache::TearDown()   net/disk_cache/disk_cache_test_base.cc:88      #6  testing::Test::Run() testing/gtest/src/gtest.cc:2076    Concurrent write(s) happened at (OR AFTER) these points:     T79 (locks held: {}):      #0  base::subtle::RefCountedBase::Release() base/ref_counted.cc:36      #1  base::RefCounted&lt;disk_cache::File&gt;::Release() base/ref_counted.h:89      #2  scoped_refptr&lt;disk_cache::File&gt;::~scoped_refptr()   base/ref_counted.h:206      #3  (anonymous namespace)::BackgroundIO::~BackgroundIO()   net/disk_cache/file_posix.cc:38      #4  base::RefCountedThreadSafe&lt;(anonymous   namespace)::BackgroundIO&gt;::Release() base/ref_counted.h:117      #5  RunnableMethodTraits&lt;(anonymous   namespace)::BackgroundIO&gt;::ReleaseCallee((anonymous   namespace)::BackgroundIO*) base/task.h:228      #6  RunnableMethod&lt;(anonymous namespace)::BackgroundIO  void   ((anonymous namespace)::BackgroundIO::*)()  Tuple0&gt;::ReleaseCallee()   base/task.h:287      #7  RunnableMethod&lt;(anonymous namespace)::BackgroundIO  void   ((anonymous namespace)::BackgroundIO::*)()  Tuple0&gt;::~RunnableMethod()   base/task.h:272      #8  (anonymous namespace)::WorkerThread::ThreadMain()   base/worker_pool_linux.cc:79      #9  ThreadFunc(void*) base/platform_thread_posix.cc:26    Location 0x95E7184 is 4 bytes inside a block starting at 0x95E7180 of   size 32 allocated by T0 from heap:      #0  malloc /home/timurrrr/valgrind-patches/valgrind-  10880/tsan/ts_valgrind_intercepts.c:318      #1  operator new(unsigned int) /usr/lib32/libstdc++.so.6.0.9      #2  disk_cache::BlockFiles::OpenBlockFile(int)   net/disk_cache/block_files.cc:240      #3  disk_cache::BlockFiles::Init(bool)   net/disk_cache/block_files.cc:181      #4  disk_cache::BackendImpl::Init() net/disk_cache/backend_impl.cc:302      #5  disk_cache::BackendImpl::CreateBackend(std::basic_string&lt;wchar_t    std::char_traits&lt;wchar_t&gt;  std::allocator&lt;wchar_t&gt; &gt; const&amp;  bool  int    net::CacheType  disk_cache::BackendFlags)   net/disk_cache/backend_impl.cc:222      #6  DiskCacheTestWithCache::InitDiskCache()   net/disk_cache/disk_cache_test_base.cc:64      #7  DiskCacheTestWithCache::InitCache()   net/disk_cache/disk_cache_test_base.cc:31      #8  DiskCacheEntryTest_InternalAsyncIO_Test::TestBody()   net/disk_cache/entry_unittest.cc:228      #9  testing::Test::Run() testing/gtest/src/gtest.cc:2069  }}}    The report shows that disk_cache::File inherits base::RefCounted  not   base::RefCountedThreadSafe though it can be used (and Release()d) from   several threads.    Please note that a similar issue led to one of the past top crashers in   Chromium  <a href="http://code.google.com/p/chromium/issues/detail?id=18488">http://code.google.com/p/chromium/issues/detail?id=18488</a> </pre>