<title>Issue 41372 -   chromium -    Crash in the histogram code - Project Hosting on Google Code</title> <pre> I thought it was another occurrence of Issue 36500  but I was asked to   enter a new issue  so here it is. Still with the histogram  but at a   different point. And at the point where I caught it  there was only one   thread left in the process  so I can't confirm if it is still a threading   issue.    Here's the new call stack:  dbghelp!_SEH_prolog4_GS+0x1a  dbghelp!SymGetLineFromAddr64+0x4a  chrome_64610000!`anonymous   namespace'::SymbolContext::OutputTraceToStream+0x16f  chrome_64610000!StackTrace::OutputToStream+0xf7  chrome_64610000!logging::LogMessage::~LogMessage+0x73  chrome_64610000!base::AtExitManager::RegisterCallback+0xa0  chrome_64610000!Singleton&lt;logging::LogEventProvider `anonymous   namespace'::LogEventProviderTraits logging::LogEventProvider&gt;::get+0x78  chrome_64610000!logging::LogEventProvider::LogMessage+0x5b  chrome_64610000!logging::LogMessage::~LogMessage+0xb3  chrome_64610000!base::AtExitManager::RegisterCallback+0xa0  [...]  Goes on an on and on and on until we get to...  [...]  006af0d8 66c62e78   chrome_64610000!base::AtExitManager::RegisterCallback+0xa0   [d:srcceee2srcbaseat_exit.cc @ 41]  006af0f0 66c62a6b   chrome_64610000!Singleton&lt;logging::LogEventProvider `anonymous   namespace'::LogEventProviderTraits logging::LogEventProvider&gt;::get+0x78   [d:srcceee2srcbasesingleton.h @ 143]  006af254 654e22e3   chrome_64610000!logging::LogEventProvider::LogMessage+0x5b   [d:srcceee2srcbaselogging_win.cc @ 78]  006af434 655217b8 chrome_64610000!logging::LogMessage::~LogMessage+0xb3   [d:srcceee2srcbaselogging.cc @ 473]  006af724 65520e5c chrome_64610000!Histogram::ValidateBucketRanges+0x108   [d:srcceee2srcbasehistogram.cc @ 184]  006af8a0 655245bd chrome_64610000!Histogram::~Histogram+0xbc   [d:srcceee2srcbasehistogram.cc @ 90]  006af8ac 65524566 chrome_64610000!LinearHistogram::~LinearHistogram+0x2d   [d:srcceee2srcbasehistogram.h @ 485]  006af8b8 6528c1cf chrome_64610000!LinearHistogram::`scalar deleting   destructor'+0x16  006af8d4 6528c17c   chrome_64610000!base::RefCountedThreadSafe&lt;Histogram base::DefaultRefCounte  dThreadSafeTraits&lt;Histogram&gt; &gt;::DeleteInternal+0x3f   [d:srcceee2srcbaseref_counted.h @ 146]  006af8e0 6528c157   chrome_64610000!base::DefaultRefCountedThreadSafeTraits&lt;Histogram&gt;::Destruc  t+0xc [d:srcceee2srcbaseref_counted.h @ 112]  006af8f4 6528c0f3   chrome_64610000!base::RefCountedThreadSafe&lt;Histogram base::DefaultRefCounte  dThreadSafeTraits&lt;Histogram&gt; &gt;::Release+0x47   [d:srcceee2srcbaseref_counted.h @ 140]  006af900 67a7658d   chrome_64610000!scoped_refptr&lt;Histogram&gt;::~scoped_refptr&lt;Histogram&gt;+0x23   [d:srcceee2srcbaseref_counted.h @ 239]  006af908 64629720   chrome_64610000!`net::HttpStreamParser::DoSendHeaders'::`21'::`dynamic   atexit destructor for 'counter''+0xd  006af94c 646297ef chrome_64610000!doexit+0x94   [f:ddvctoolscrt_bldself_x86crtsrccrt0dat.c @ 591]  006af95c 6462cfdc chrome_64610000!_cexit+0xb   [f:ddvctoolscrt_bldself_x86crtsrccrt0dat.c @ 427]  006af96c 6462d10e chrome_64610000!_CRT_INIT+0xac   [f:ddvctoolscrt_bldself_x86crtsrcdllcrt0.c @ 178]  006af9ac 6462d179 chrome_64610000!__DllMainCRTStartup+0xa9   [f:ddvctoolscrt_bldself_x86crtsrcdllcrt0.c @ 340]  006af9b8 7770fcc0 chrome_64610000!_DllMainCRTStartup+0x1e   [f:ddvctoolscrt_bldself_x86crtsrcdllcrt0.c @ 281]  006af9d8 77729e5b ntdll!LdrpCallInitRoutine+0x14  006afa78 77729e7f ntdll!LdrShutdownProcess+0x1a9  006afa80 76e287e3 ntdll!RtlExitUserProcess+0x64  006afa94 00290a2b kernel32!ExitProcess+0x12  006afaa0 002909b4 chrome!__crtExitProcess+0x1b   [f:ddvctoolscrt_bldself_x86crtsrccrt0dat.c @ 732]  006afaf0 002905d2 chrome!doexit+0x1e4   [f:ddvctoolscrt_bldself_x86crtsrccrt0dat.c @ 644]  006afb04 002828f7 chrome!exit+0x12   [f:ddvctoolscrt_bldself_x86crtsrccrt0dat.c @ 412]  006afb9c 0028276f chrome!__tmainCRTStartup+0x177   [f:ddvctoolscrt_bldself_x86crtsrccrt0.c @ 272]  006afba4 76e9e4a5 chrome!wWinMainCRTStartup+0xf   [f:ddvctoolscrt_bldself_x86crtsrccrt0.c @ 182]  006afbb0 7775cfed kernel32!BaseThreadInitThunk+0xe  006afbf0 7775d1ff ntdll!__RtlUserThreadStart+0x23  006afc08 00000000 ntdll!_RtlUserThreadStart+0x1b    Comment from s...@chromium.org   This seems to stem from the fact that there's something bogus in an   Histogram instance that's being destroyed at static de-initialization time.   Something in this function is asserting:    bool Histogram::ValidateBucketRanges() const {    // Standard assertions that all bucket ranges should satisfy.    DCHECK(ranges_.size() == bucket_count_ + 1);    DCHECK_EQ(0  ranges_[0]);    DCHECK(declared_min() == ranges_[1]);    DCHECK(declared_max() == ranges_[bucket_count_ - 1]);    DCHECK(kSampleType_MAX == ranges_[bucket_count_]);    return true;  }    which is obscured by the fact that this happens post AtExit-processing    which throws logging for a spin. This may well be an artifact of the   problem that the histogram macros are not threadsafe  and so once in a blue   moon you may see double-initialization  early destruction or some such.    See histogram.h  around line 158:    #define UMA_HISTOGRAM_ENUMERATION(name  sample  boundary_value) do {       static scoped_refptr&lt;Histogram&gt; counter = LinearHistogram::FactoryGet(             name  1  boundary_value  boundary_value + 1            Histogram::kUmaTargetedHistogramFlag);       counter-&gt;Add(sample);     } while (0)   </pre>