<title>Issue 25905 -   chromium -    Optimize page scrolling in the presence of animating regions - Project Hosting on Google Code</title> <pre> Optimize page scrolling in the presence of animating regions    When instructed by WebKit to scroll a region of the page  we queue up a   request to scroll soon (via PostTask).  If we receive an overlapping   invalidation before the scroll task runs  then the scroll rect will be   unioned with the invalidation rect to result in a larger invalidation rect.    This effectively disables optimized (memmove-based) scrolling  and can   seriously degrade scrolling performance on many pages.    (The same kind of thing happens when we paint.  We have a queued up paint    and if a scroll happens during that time  we will again union the existing   paint with the new scroll  thus resulting in suboptimal scrolling.)    This is mostly a problem for pages with small animations like windowless   flash ads and animating gifs.  But  it may also explain part of the   performance problems observed when scrolling a page containing a html5   video.    For small invalidations relative to the scroll rect  it would probably be   good to preserve the scroll and then do a deferred paint after the scroll   to account for invalidation.  Or  if a paint rect was already present  then   we should do that paint  and then scroll separately.  It should be much   faster than doing a full repaint to scroll the page.    Marking this Available for M5 since I think we can ship M4 without this. </pre>