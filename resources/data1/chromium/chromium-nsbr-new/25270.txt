<title>Issue 25270 -   chromium -    ProcessUtilTest.FDRemapping fails on x86_64 linux - Project Hosting on Google Code</title> <pre> To reproduce:   out/Debug/base_unittests  --gtest_filter=ProcessUtilTest.FDRemapping     What should happen:    test should pass    What happens instead:   test aborts  with log  ...  ** (base_unittests:28562): WARNING **: Failed to send buffer  ** (base_unittests:28562): WARNING **: Serious fd usage error 11  [28561:28561:1019/171117:548063176591:FATAL:base/process_util_unittest.cc(247)]  Check failed: WaitForSingleProcess(handle  1000).     The child process is closing fd's it doesn't know about.    One of them  fd 11  is connected by    connect(11  {sa_family=AF_FILE   path=&quot;/tmp/orbit-dkegel/linc-1d19-0-5bef7673304c2&quot;}  46) = 0  and the WARNING is the child process trying to talk to orbit upon exit.    Another  fd 10  is connected by  connect(10  {sa_family=AF_FILE  path=&quot;/tmp/.X11-unix/X0&quot;}  110) = 0  and when fd 10 is connected  it seems the child gets hung  up in libxcb in XCloseDisplay():    #0  0x00007f21da5b5c5f in poll () from /lib/libc.so.6  #1  0x00007f21d7c282a2 in _xcb_conn_wait (c=0x1676f00  cond=&lt;value  optimized out&gt;  vector=0x7fffe64807d0  count=0x7fffe64807dc) at xcb_conn.c:342  #2  0x00007f21d7c288bb in _xcb_out_send (c=0x1676f00   vector=0x7fffe64807d0  count=0x7fffe64807dc) at xcb_out.c:279  #3  0x00007f21d7c289ed in _xcb_out_flush_to (c=0x7fffe6480740  request=10)  at xcb_out.c:297  #4  0x00007f21d7c29d56 in xcb_wait_for_reply (c=0x1676f00  request=10   e=0x7fffe64808b8) at xcb_in.c:326  #5  0x00007f21da22bf78 in _XReply (dpy=0x1676060  rep=0x7fffe6480900   extra=0  discard=1) at ../../src/xcb_io.c:364  #6  0x00007f21da2208aa in XSync (dpy=0x1676060  discard=1) at  ../../src/Sync.c:48  #7  0x00007f21da2008ae in XCloseDisplay (dpy=0x1676060) at  ../../src/ClDisplay.c:67  #8  0x00007f21d6b7e19c in ?? () from /usr/lib/gtk-2.0/modules/libatk-bridge.so  #9  0x00007f21da51c110 in exit () from /lib/libc.so.6  #10 0x00007f21da5051cb in __libc_start_main () from /lib/libc.so.6  #11 0x00000000005d1dc9 in _start ()    so child processes pile up  and the test fails.    A less invasive way to count open file descriptors without  relying on linux /proc tricks might be to use dup() and then close().  I have a patch ready for review. </pre>