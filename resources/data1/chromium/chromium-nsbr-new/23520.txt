<title>Issue 23520 -   chromium -    Synchronous XHR should not accumulate data in browser - Project Hosting on Google Code</title> <pre>   1. Do a large synchronous XML HTTP Request from Java Script  2. Observe the amount of memory used is the browser process  3. Browser process may use several times the size of the request.    Currently  a 30MB request  performed while TCMalloc (in its current form)   is active  can induce a memory utilization in the browser of close to   200MB.        Optimally  the browser process should quickly forward data to the renderer    so only the render memory usage should be impacted.    The method SyncResourceHandler::OnReadCompleted(int request_id  int*   bytes_read) does an append() of the new bytes to the existing buffer (of   previously read bytes).  Even with aggressive preallocation of large string   space (to avoid thrashing against the allocator)  this approach will   intermittently require memory at least 3x the size of the buffered data.     If we can't push the data off incrementally (rather than doing these almost   O(N^2) copy operations)  then we could at least allocate an array of   strings  and serialze them only once (when we have the full request in   hand).  That would be much faster  and use much less memory.     Better yet would be to have this data buffered only in the target renderer    and have incremental data forwarded to the renderer.  Discussion with Darin   suggested that the hard part is to deal with the fact that the renderer has   to block its main JS thread waiting for the response.  As a result  the   renderer would either need to use a nested message loop (I don't like   having to resort to that)  or use a second thread to accumulate the XHR   response  and have the JS thread block and wait. </pre>