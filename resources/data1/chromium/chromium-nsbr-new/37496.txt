<title>Issue 37496 -   chromium -    Data race on vector in chrome/browser/sync/engine/syncer_thread_unittest.cc - Project Hosting on Google Code</title> <pre> The data race was detected by ThreadSanitizer (see <a href="http://www.chromium.org/developers/how-tos/using-valgrind/threadsanitizer">http://www.chromium.org/developers/how-tos/using-valgrind/threadsanitizer</a> )    Here's an example of the report:  WARNING: Possible data race during write of size 8 at 0x7FEFFF9A0: {{{     T3 (SyncEngine_SyncerThread) (locks held: {}):      #0  std::vector&lt;...&gt;::_M_insert_aux(...)      #1  std::vector&lt;...&gt;::push_back(base::TimeTicks const&amp;)      #2  browser_sync::SyncShareIntercept::Observe() chrome/browser/sync/engine/syncer_thread_unittest.cc:120      #3  MockConnectionManager::PostBufferToPath(...) chrome/test/sync/engine/mock_server_connection.cc:147      #4  browser_sync::ServerConnectionManager::PostBufferWithCachedAuth(...) chrome/browser/sync/engine/net/server_connection_manager.cc:172      #5  browser_sync::SyncerProtoUtil::PostAndProcessHeaders(...) chrome/browser/sync/engine/syncer_proto_util.cc:134      #6  browser_sync::SyncerProtoUtil::PostClientToServerMessage(...) chrome/browser/sync/engine/syncer_proto_util.cc:181      #7  browser_sync::DownloadUpdatesCommand::ExecuteImpl(browser_sync::sessions::SyncSession*) chrome/browser/sync/engine/download_updates_command.cc:62      #8  browser_sync::SyncerCommand::Execute(browser_sync::sessions::SyncSession*) chrome/browser/sync/engine/syncer_command.cc:20      #9  browser_sync::Syncer::SyncShare(browser_sync::sessions::SyncSession*  browser_sync::SyncerStep  browser_sync::SyncerStep) chrome/browser/sync/engine/syncer.cc:121      #10 browser_sync::Syncer::SyncShare(browser_sync::sessions::SyncSession*) chrome/browser/sync/engine/syncer.cc:95      #11 browser_sync::Syncer::SyncShare(browser_sync::sessions::SyncSession::Delegate*) chrome/browser/sync/engine/syncer.cc:79      #12 browser_sync::SyncerThread::SyncMain(browser_sync::Syncer*) chrome/browser/sync/engine/syncer_thread.cc:377      #13 browser_sync::SyncerThread::ThreadMainLoop() chrome/browser/sync/engine/syncer_thread.cc:262      #14 browser_sync::SyncerThread::ThreadMain() chrome/browser/sync/engine/syncer_thread.cc:364      #15 void DispatchToMethod&lt;...&gt;(browser_sync::SyncerThread*  void (browser_sync::SyncerThread::*)()  Tuple0 const&amp;) base/tuple.h:412      #16 RunnableMethod&lt;browser_sync::SyncerThread  void (browser_sync::SyncerThread::*)()  Tuple0&gt;::Run() base/task.h:290      #17 MessageLoop::RunTask(Task*) base/message_loop.cc:331      #18 MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&amp;) base/message_loop.cc:339      #19 MessageLoop::DoWork() base/message_loop.cc:458    Concurrent read(s) happened at (OR AFTER) these points:     T0 (locks held: {}):      #0  std::vector&lt;...&gt;::end() const /usr/include/c++/4.2/bits/stl_vector.h:354      #1  std::vector&lt;...&gt;::vector(...) /usr/include/c++/4.2/bits/stl_vector.h:230      #2  browser_sync::SyncShareIntercept::times_sync_occured() const chrome/browser/sync/engine/syncer_thread_unittest.cc:137      #3  browser_sync::SyncerThreadWithSyncerTest_Polling_Test::TestBody() chrome/browser/sync/engine/syncer_thread_unittest.cc:592      #4  testing::Test::Run() testing/gtest/src/gtest.cc:2085    Location 0x7FEFFF9A0 is 5720 bytes inside T0's stack [0x7FE800FF8 0x7FF000FF8]  }}}    The race can be proved using RaceChecker class (see  <a href="http://code.google.com/p/data-race-test/wiki/RaceCheckerClass">http://code.google.com/p/data-race-test/wiki/RaceCheckerClass</a> )      1. Apply the attached patch (adds RaceChecker class files into base/...   adds dependencies for these files and puts RaceChecker calls into  SyncShareIntercept)  2. gclient sync &amp;&amp; hammer -C build sync_unit_tests  3. RACECHECKER=2 RACECHECKER_SLEEP_MS=80 ./sconsbuild/Debug/sync_unit_tests --gtest_filter=&quot;SyncerThreadWithSyncerTest.Throttling&quot;  [==========] Running 1 test from 1 test case.  [----------] Global test environment set-up.  [----------] 1 test from SyncerThreadWithSyncerTest  [ RUN      ] SyncerThreadWithSyncerTest.Throttling  ...  RACECHECKER: READ at 0x7fffb5ecdbc0  RACECHECKER: WRITE at 0x7fffb5ecdbc0  Race found between these points  === writer:   RACECHECKER: WRITE at 0x7fffb5ecdbc0  ./sconsbuild/Debug/sync_unit_tests[0xcf986a]  ./sconsbuild/Debug/sync_unit_tests[0xdf4308]  ...  === reader:   ./sconsbuild/Debug/sync_unit_tests[0xcf973c]  ./sconsbuild/Debug/sync_unit_tests[0xdf642d]  ...    Please note that a data race on a vector can cause test flakiness (I've managed FAIL it by simply adding one sleep) and segfaults. </pre>