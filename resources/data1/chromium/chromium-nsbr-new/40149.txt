<title>Issue 40149 -   chromium -    Enable stack unwinding for TCMalloc - Project Hosting on Google Code</title> <pre> =====  From arun.sharma:  I'm not very familiar with the Chromium code base - so its entirely possible that I'm confused.    Do you know which one of the implementations is getting used on 64 bit by default?    <a href="http://src.chromium.org/viewvc/chrome/trunk/src/third_party/tcmalloc/chromium/src/stacktrace_config.h">http://src.chromium.org/viewvc/chrome/trunk/src/third_party/tcmalloc/chromium/src/stacktrace_config.h</a>  ?  revision=41950&amp;view=markup    If you try to use stacktrace_x86-inl.h without frame pointers  crashes are totally expected.  There   are   heuristics in the code to avoid them. Eg:      // Assume stack frames larger than 100 000 bytes are bogus.      if ((uintptr_t)new_sp - (uintptr_t)old_sp &gt; 100000) return NULL;    But they're not bullet proof.  =====    In answer to your question  yes  we are using stacktrace_x86-inl.h.  This tells me that we're just   getting lucky by falling into the heuristics  but we should probably explicitly support / disable   stack unwinding for TCMalloc.  I'm inclined to support it.  I'm going to test the perf impact of   enabling frame pointers.  I suspect we might run into issues with v8 performance if we do this.    Alternatively  we can perhaps depend on libunwind (I'd have to examine the license and all that   nonsense to make sure it's kosher). </pre>