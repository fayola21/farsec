<title>Issue 45553 -   chromium -    Investigate layer cycling during scrolling - Project Hosting on Google Code</title> <pre> backing_store_mac contains this code when scrolling happens:          scoped_cftyperef&lt;CGLayerRef&gt; new_layer(CreateCGLayer());          // If the current view is in a window  the replacement must be too.        DCHECK(new_layer);          CGContextRef layer = CGLayerGetContext(new_layer);        CGContextDrawLayerAtPoint(layer  CGPointMake(0  0)  cg_layer());        CGContextSaveGState(layer);        CGContextClipToRect(layer                             CGRectMake(clip_rect.x()                                        size().height() - clip_rect.bottom()                                        clip_rect.width()                                        clip_rect.height()));        CGContextDrawLayerAtPoint(layer  CGPointMake(dx  -dy)  cg_layer());        CGContextRestoreGState(layer);        cg_layer_.swap(new_layer);    I don't understand why          CGContextRef layer = CGLayerGetContext(cg_layer());          CGContextSaveGState(layer);        CGContextClipToRect(layer                             CGRectMake(clip_rect.x()                                        size().height() - clip_rect.bottom()                                        clip_rect.width()                                        clip_rect.height()));        CGContextDrawLayerAtPoint(layer  CGPointMake(dx  -dy)  cg_layer());        CGContextRestoreGState(layer);    wouldn't do the same thing. It'd save copying the whole layer over to a new layer on every scroll  so it should be faster.    For some reason  doing the change leaves smudge pixel rows around every now and then  as if the repainted rect is a   pixel too small  so this needs some investigation.    awalker says there's probably no reason the code is like it is at the moment. </pre>