<title>Issue 27821 -   chromium -    WebCore::GraphicsContext3D NULL pointers - Project Hosting on Google Code</title> <pre> During fuzzing  I am finding a number of very similar NULL pointers. These happen when a WebCore::GraphicsContext3D is created or a method of the context is called. I am   unable to create a reliable repro for this.    However  from looking at where the crash happens in the assembly and mapping it back to the code  I believe have tracked down the cause. Below are three functions in which   I've seen this happend and I've marked where the crash happens.    unsigned GraphicsContext3D::createRenderbuffer()  {      makeContextCurrent();      GLuint o;      glGenRenderbuffers(1  &amp;o);  // *** CRASH      return o;  }    int GraphicsContext3D::getRenderbufferParameteri(unsigned long target                                                    unsigned long pname)  {      makeContextCurrent();      GLint param;      glGetRenderbufferParameteriv(target  pname  &amp;param);  // *** CRASH      return static_cast&lt;int&gt;(param);  }    void GraphicsContext3DInternal::reshape(int width  int height)  {  &lt;snip&gt;      if (!m_texture) {          // Generate the texture object          m_texture = createTextureObject(target);          // Generate the framebuffer object          glGenFramebuffersEXT(1  &amp;m_fbo);  // *** CRASH          // Generate the depth buffer          glGenRenderbuffersEXT(1  &amp;m_depthBuffer);          checkError();      }    These functions are defined in /src/third_party/glew/src/glew.c and src/third_party/glew/include/GL/glew.h. In glew.c they are initialized to NULL and set to useful pointers   using &quot;_glewInit_GL_EXT_framebuffer_object&quot; which is called in the same file as follows:    #ifdef GL_EXT_framebuffer_object    CONST_CAST(GLEW_EXT_framebuffer_object) = glewGetExtension(&quot;GL_EXT_framebuffer_object&quot;);    if (glewExperimental || GLEW_EXT_framebuffer_object) CONST_CAST(GLEW_EXT_framebuffer_object) = !_glewInit_GL_EXT_framebuffer_object(GLEW_CONTEXT_ARG_VAR_INIT);  #endif /* GL_EXT_framebuffer_object */    I can't understand what the code is doing exactly  what with all the macros and stuff. However  I think that what happens is that there is a problem during initialization    causing the function pointers not to get set to useful values. Later  when the code tries to call these functions  it calls NULL instead.    Can somebody that is familiar with the code investigate? </pre>