<title>Issue 35571 -   chromium -    ExtensionCrashRecoveryTest leaks RenderProcessHost - Project Hosting on Google Code</title> <pre> Here's the relevant stacktrace          StackTrace::StackTrace() [0xcda3da]          RenderProcessHost::Release() [0x76bd8a]          RenderWidgetHost::~RenderWidgetHost() [0x795e62]          RenderViewHost::~RenderViewHost() [0x7744f0]          RenderWidgetHost::Destroy() [0x79831b]          RenderWidgetHost::Shutdown() [0x7963d9]          RenderViewHost::Shutdown() [0x778a48]          ExtensionHost::~ExtensionHost() [0x57d3ee]          ExtensionProcessManager::Observe() [0x59af88]          NotificationService::Notify() [0x100e3d6]          ExtensionsService::NotifyExtensionUnloaded() [0x5b8960]          ExtensionsService::UnloadExtension() [0x5b932b]          ExtensionsService::Observe() [0x5bab22]          NotificationService::Notify() [0x100e4d1]          ExtensionHost::RenderViewGone() [0x57df45]          RenderViewHost::OnMsgRenderViewGone() [0x778dc2]          IPC::Message::Dispatch&lt;&gt;() [0x7858ac]          RenderViewHost::OnMessageReceived() [0x7775c3]          BrowserRenderProcessHost::OnChannelError() [0xa64ca6]          IPC::ChannelProxy::Context::OnDispatchError() [0x143cfda]          DispatchToMethod&lt;&gt;() [0x143fb01]          RunnableMethod&lt;&gt;::Run() [0x143f7b4]          MessageLoop::RunTask() [0xcf07ba]          MessageLoop::DeferOrRunPendingTask() [0xcf0840]          MessageLoop::DoWork() [0xcf0e34]          base::MessagePumpForUI::HandleDispatch() [0xd3a923]          (anonymous namespace)::WorkSourceDispatch() [0xd39ddd]          0x7f0f9958cbce          0x7f0f99590598          0x7f0f995906c0          base::MessagePumpForUI::RunWithDispatcher() [0xd3a5d8]          base::MessagePumpForUI::Run() [0xd3ad6e]          MessageLoop::RunInternal() [0xcf0138]          MessageLoop::RunHandler() [0xceffe4]          MessageLoopForUI::Run() [0xcf14a8]          ui_test_utils::RunMessageLoop() [0xc8328c]          ui_test_utils::RegisterAndWait() [0xc84588]          ExtensionBrowserTest::WaitForExtensionCrash() [0x43a300]          ExtensionCrashRecoveryTest::CrashExtension() [0x446bf8]          ExtensionCrashRecoveryTest_Basic_Test::RunTestOnMainThread() [0x445f8a]          InProcessBrowserTest::RunTestOnMainThreadLoop() [0x401a73]          DispatchToMethod&lt;&gt;() [0x40aeb5]          RunnableMethod&lt;&gt;::Run() [0x40acba]          MessageLoop::RunTask() [0xcf07ba]          MessageLoop::DeferOrRunPendingTask() [0xcf0840]          MessageLoop::DoWork() [0xcf0e34]          base::MessagePumpForUI::HandleDispatch() [0xd3a923]          (anonymous namespace)::WorkSourceDispatch() [0xd39ddd]          0x7f0f9958cbce          0x7f0f99590598          0x7f0f995906c0          base::MessagePumpForUI::RunWithDispatcher() [0xd3a5d8]          base::MessagePumpForUI::Run() [0xd3ad6e]          MessageLoop::RunInternal() [0xcf0138]          MessageLoop::RunHandler() [0xceffe4]          MessageLoopForUI::Run() [0xcf14a8]          (anonymous namespace)::RunUIMessageLoop() [0x4cfa7c]          BrowserMain() [0x4d216b]          InProcessBrowserTest::SetUp() [0x401304]          testing::Test::Run() [0xdf223f]          testing::internal::TestInfoImpl::Run() [0xdf280f]          testing::TestCase::Run() [0xdf2ee8]    In BrowserRenderProcessHost::OnChannelError()  we get an iterator to listeners_ so   we can pass the RenderViewGone message to each of them.  This will cause them to   Release() the RenderProcessHost.  Note that when you get an iterator to an IDMap    the IDMap::Remove() will not remove the id directly  but will add it to a   removed_ids_ set  and will Compact() the IDMap when we've stopped iterating.    IDMap::IsEmpty() only checks data_.empty()  but does not examine the removed_ids_   set  therefore it's possible for all the ids to have been removed  but for   data_.empty() not to be true  if we're iterating through the IDMap  so   IDMap::IsEmpty() returns false.  RenderProcessHost::Release() calls   IDMap::IsEmpty() to determine whether or not to delete itself.  Since   IDMap::IsEmpty() returns false here  we leak the RenderProcessHost.    I'm not sure if we can only enter this condition via ExtensionHost or not  or   whether it's a general bug for all RenderProcessHosts. </pre>