<title>Issue 24674 -   chromium -    Review the os_error we set with URLRequestStatus::CANCELED and URLRequestStatus::FAILED - Project Hosting on Google Code</title> <pre> Some users reported they get a &quot;This webpage is not available&quot;  error page in which the error code is 0 (net::OK) or  2 (net::ERR_FAILED).    Assuming that we get that error page when some URLRequest failed  or was cancelled  I searched our source tree for  URLRequestStatus::CANCELED and URLRequestStatus::FAILED.  Here  are my findings.    1. URLRequestStatus::CANCELED: We sometimes use the os_error 0  or net::ERR_FAILED with URLRequestStatus::CANCELED.  I suggest  that we use net::ERR_ABORTED instead in those cases.    The risk of this change is the following code in  ResourceDispatcher::OnRequestComplete in resource_dispatcher.cc:      if (status.status() == URLRequestStatus::CANCELED &amp;&amp;        status.os_error() != net::ERR_ABORTED) {      // Resource canceled with a specific error are filtered.      SecurityFilterPeer* new_peer =          SecurityFilterPeer::CreateSecurityFilterPeerForDeniedRequest(              request_info.resource_type               request_info.peer               status.os_error());      if (new_peer) {        request_info.peer = new_peer;        peer = new_peer;      }    }    2. URLRequestStatus::FAILED: We sometimes use the os_error 0   net::ERR_FAILED  or net::ERR_ABORTED with URLRequestStatus::FAILED.    For 0 and net::ERR_FAILED  we should try to use a more specific  error code instead.    For net::ERR_ABORTED  we should find out if the URLRequest's  status should be set to URLRequestStatus::CANCELED instead. </pre>