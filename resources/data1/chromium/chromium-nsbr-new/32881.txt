<title>Issue 32881 -   chromium -    Issues in passing parameters to HTML5 worker threads - Project Hosting on Google Code</title>   1. Access below html file to compute 10 + 10 with worker threads.  &lt;html&gt;      &lt;title&gt;Test worker thread parameters&lt;/title&gt;      &lt;body&gt;      &lt;script type=&quot;text/javascript&quot;&gt;        var worker = new Worker(&quot;testParam1.js&quot;);         worker.onmessage = function(event) {           alert(&quot;Got: &quot; + event.data);         };         worker.onerror = function(error) {           alert(&quot;Worker error1: &quot; + error.message);           throw error;         };         worker.postMessage(10);       &lt;/script&gt;      &lt;/body&gt;    &lt;/html&gt;    Content of testParam1.js:  onmessage = function(event) {       var n = event.data;       postMessage(n+10);     };    2.Access below html file to compute 10 + 20 with worker threads.  &lt;html&gt;      &lt;title&gt;Test worker thread parameters &lt;/title&gt;      &lt;body&gt;      &lt;script type=&quot;text/javascript&quot;&gt;        var worker = new Worker(&quot;testParam2.js&quot;);         worker.onmessage = function(event) {           alert(&quot;Got: &quot; + event.data);         };         worker.onerror = function(error) {           alert(&quot;Worker error1: &quot; + error.message);           throw error;         };         var args2 = [10  20];       worker.postMessage(args2);       &lt;/script&gt;      &lt;/body&gt;    &lt;/html&gt;    testParam2.js:  onmessage = function(event) {       var data = event.data;       postMessage(data[0] + data[1]);     };    3.Access below html file to compute 10 + 20 with worker threads.  &lt;html&gt;      &lt;title&gt;Test worker thread parameters &lt;/title&gt;      &lt;body&gt;      &lt;script type=&quot;text/javascript&quot;&gt;        var worker = new Worker(&quot;testParam3.js&quot;);         worker.onmessage = function(event) {           alert(&quot;Got: &quot; + event.data);         };         worker.onerror = function(error) {           alert(&quot;Worker error1: &quot; + error.message);           throw error;         };         var args = {       x: 10        y: 20      }       worker.postMessage(args);       &lt;/script&gt;      &lt;/body&gt;    &lt;/html&gt;    testParam3.js:  onmessage = function(event) {       var data = event.data;       postMessage(data.x + data.y);     };        Return &quot;Got:20&quot; from case1 and &quot;Got:30&quot; from case2 and case3  just as   Firefox does.      Chromium returns &quot;Got:1010&quot; for case 1  &quot;Got:10&quot; for case 2  and &quot;Got:   NaN&quot; from case 3. It is hard to understand the return values.    <b>Please provide