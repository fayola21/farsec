<title>Issue 27444 -   chromium -    Inspector broken with pages that use localStorage - Project Hosting on Google Code</title> <pre> I sync'ed this week  rebuilt from scratch (after blowing away the debug directory) and every time I try to inspect a page that uses localStorage I get a renderer crash in V8 going through V8IsolatedWorlds.    Reduced test case is attached. It is very simple  just fetches a value from localStorage.    Call stack:    &gt;chrome.dll!v8::internal::OS::DebugBreak()  Line 907	C++  chrome.dll!v8::internal::OS::Abort()  Line 902	C++  chrome.dll!V8_Fatal(const char * file=0x5600eab0  int line=2278  const char * format=0x5600c8f0  ...)  Line 57	C++  chrome.dll!CheckHelper(const char * file=0x5600eab0  int line=2278  const char * source=0x5600ea88  bool condition=false)  Line 62 + 0x16 bytes	C++  chrome.dll!v8::Object::GetHiddenValue(v8::Handle&lt;v8::String&gt; key={...})  Line 2278 + 0x2f bytes	C++  chrome.dll!WebCore::V8IsolatedWorld::getEnteredImpl()  Line 101	C++  chrome.dll!WebCore::V8IsolatedWorld::getEntered()  Line 89	C++  chrome.dll!WebCore::V8Proxy::context(WebCore::Frame * frame=0x04b77000)  Line 1150 + 0x5 bytes	C++  chrome.dll!WebDevToolsFrontendImpl::ExecuteScript(const WTF::Vector&lt;WebCore::String 0&gt; &amp; v={...})  Line 233 + 0x12 bytes	C++  chrome.dll!WebDevToolsFrontendImpl::JsLoaded(const v8::Arguments &amp; args={...})  Line 335	C++  chrome.dll!v8::internal::Builtin_HandleApiCall(v8::internal::Arguments args={...})  Line 383 + 0x13 bytes	C++  033c018b()	  chrome.dll!v8::internal::Invoke(bool construct=false  v8::internal::Handle&lt;v8::internal::JSFunction&gt; func={...}  v8::internal::Handle&lt;v8::internal::Object&gt; receiver={...}  int argc=1  v8::internal::Object * * * args=0x04f3ef44  bool *   has_pending_exception=0x04f3ee77)  Line 103 + 0x19 bytes	C++  chrome.dll!v8::internal::Execution::Call(v8::internal::Handle&lt;v8::internal::JSFunction&gt; func={...}  v8::internal::Handle&lt;v8::internal::Object&gt; receiver={...}  int argc=1  v8::internal::Object * * * args=0x04f3ef44  bool * pending_exception=0x04f3ee77)  Line   129 + 0x1f bytes	C++  chrome.dll!v8::Function::Call(v8::Handle&lt;v8::Object&gt; recv={...}  int argc=1  v8::Handle&lt;v8::Value&gt; * argv=0x04f3ef44)  Line 2384 + 0x1d bytes	C++  chrome.dll!WebCore::V8Proxy::callFunction(v8::Handle&lt;v8::Function&gt; function={...}  v8::Handle&lt;v8::Object&gt; receiver={...}  int argc=1  v8::Handle&lt;v8::Value&gt; * args=0x04f3ef44)  Line 498 + 0x1f bytes	C++  chrome.dll!WebCore::V8EventListener::callListenerFunction(WebCore::ScriptExecutionContext * context=0x0584c034  v8::Handle&lt;v8::Value&gt; jsEvent={...}  WebCore::Event * event=0x05832680)  Line 75 + 0x26 bytes	C++  chrome.dll!WebCore::V8AbstractEventListener::invokeEventHandler(WebCore::ScriptExecutionContext * context=0x0584c034  WebCore::Event * event=0x05832680  v8::Handle&lt;v8::Value&gt; jsEvent={...})  Line 144 + 0x1f bytes	C++  chrome.dll!WebCore::V8AbstractEventListener::handleEvent(WebCore::ScriptExecutionContext * context=0x0584c034  WebCore::Event * event=0x05832680)  Line 90	C++  chrome.dll!WebCore::EventTarget::fireEventListeners(WebCore::Event * event=0x05832680)  Line 297 + 0x35 bytes	C++  chrome.dll!WebCore::DOMWindow::dispatchEvent(WTF::PassRefPtr&lt;WebCore::Event&gt; prpEvent={...}  WTF::PassRefPtr&lt;WebCore::EventTarget&gt; prpTarget={...})  Line 1328 + 0x11 bytes	C++  chrome.dll!WebCore::DOMWindow::dispatchLoadEvent()  Line 1289	C++  chrome.dll!WebCore::Document::dispatchWindowLoadEvent()  Line 2904	C++  chrome.dll!WebCore::Document::implicitClose()  Line 1735	C++  chrome.dll!WebCore::FrameLoader::checkCallImplicitClose()  Line 1160	C++  chrome.dll!WebCore::FrameLoader::checkCompleted()  Line 1109	C++  chrome.dll!WebCore::FrameLoader::loadDone()  Line 1060	C++  chrome.dll!WebCore::DocLoader::setLoadInProgress(bool load=false)  Line 330	C++  chrome.dll!WebCore::Loader::Host::didFinishLoading(WebCore::SubresourceLoader * loader=0x058b7c00)  Line 375	C++  chrome.dll!WebCore::SubresourceLoader::didFinishLoading()  Line 184 + 0x21 bytes	C++  chrome.dll!WebCore::ResourceLoader::didFinishLoading(WebCore::ResourceHandle * __formal=0x05992a20)  Line 403 + 0xf bytes	C++  chrome.dll!WebCore::ResourceHandleInternal::didFinishLoading(WebKit::WebURLLoader * __formal=0x076e8240)  Line 147 + 0x25 bytes	C++  chrome.dll!webkit_glue::WebURLLoaderImpl::Context::OnCompletedRequest(const URLRequestStatus &amp; status={...}  const std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &amp; security_info=&quot;&quot;)  Line 508 + 0x1e bytes	C++  chrome.dll!ResourceDispatcher::OnRequestComplete(int request_id=128  const URLRequestStatus &amp; status={...}  const std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &amp; security_info=&quot;&quot;)  Line 466 + 0x17 bytes	C++  chrome.dll!DispatchToMethod&lt;ResourceDispatcher void (__thiscall ResourceDispatcher::*)(int URLRequestStatus const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const   &amp;) int URLRequestStatus std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &gt;(ResourceDispatcher * obj=0x045eee10  void (int  const URLRequestStatus &amp;  const std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &amp;)*   method=0x54172700  const Tuple3&lt;int URLRequestStatus std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &gt; &amp; arg={...})  Line 435 + 0x1c bytes	C++  chrome.dll!IPC::MessageWithTuple&lt;Tuple3&lt;int URLRequestStatus std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &gt; &gt;::Dispatch&lt;ResourceDispatcher void (__thiscall ResourceDispatcher::*)(int URLRequestStatus const   &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp;)&gt;(const IPC::Message * msg=0x05c47728  ResourceDispatcher * obj=0x045eee10  void (int  const URLRequestStatus &amp;  const   std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &amp;)* func=0x54172700)  Line 999 + 0x11 bytes	C++  chrome.dll!ResourceDispatcher::DispatchMessageW(const IPC::Message &amp; message={...})  Line 538 + 0x12 bytes	C++  chrome.dll!ResourceDispatcher::OnMessageReceived(const IPC::Message &amp; message={...})  Line 319	C++  chrome.dll!ChildThread::OnMessageReceived(const IPC::Message &amp; msg={...})  Line 98 + 0x19 bytes	C++  chrome.dll!IPC::ChannelProxy::Context::OnDispatchMessage(const IPC::Message &amp; message={...})  Line 204 + 0x1b bytes	C++  chrome.dll!DispatchToMethod&lt;IPC::ChannelProxy::Context void (__thiscall IPC::ChannelProxy::Context::*)(IPC::Message const &amp;) IPC::Message&gt;(IPC::ChannelProxy::Context * obj=0x04b3e000  void (const IPC::Message &amp;)* method=0x533b04b0  const   Tuple1&lt;IPC::Message&gt; &amp; arg={...})  Line 422 + 0xf bytes	C++  chrome.dll!RunnableMethod&lt;IPC::ChannelProxy::Context void (__thiscall IPC::ChannelProxy::Context::*)(IPC::Message const &amp;) Tuple1&lt;IPC::Message&gt; &gt;::Run()  Line 277 + 0x1e bytes	C++  chrome.dll!MessageLoop::RunTask(Task * task=0x05c47700)  Line 320 + 0xf bytes	C++  chrome.dll!MessageLoop::DeferOrRunPendingTask(const MessageLoop::PendingTask &amp; pending_task={...})  Line 331	C++  chrome.dll!MessageLoop::DoWork()  Line 435 + 0xc bytes	C++  chrome.dll!base::MessagePumpForUI::DoRunLoop()  Line 209 + 0x1d bytes	C++  chrome.dll!base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate * delegate=0x04f3fc80  base::MessagePumpWin::Dispatcher * dispatcher=0x00000000)  Line 52 + 0xf bytes	C++  chrome.dll!base::MessagePumpWin::Run(base::MessagePump::Delegate * delegate=0x04f3fc80)  Line 78 + 0x1c bytes	C++  chrome.dll!MessageLoop::RunInternal()  Line 205 + 0x2a bytes	C++  chrome.dll!MessageLoop::RunHandler()  Line 178	C++  chrome.dll!MessageLoop::Run()  Line 156	C++  chrome.dll!base::Thread::Run(MessageLoop * message_loop=0x04f3fc80)  Line 133	C++  chrome.dll!base::Thread::ThreadMain()  Line 153 + 0x16 bytes	C++  chrome.dll!`anonymous namespace'::ThreadFunc(void * closure=0x045e7420)  Line 26 + 0xf bytes	C++  kernel32.dll!767e3677() 	  [Frames below may be incorrect and/or missing  no symbols loaded for kernel32.dll]	  ntdll.dll!776f9d72() 	  ntdll.dll!776f9d45() 	    Debug window shows:      #  # Fatal error in ....srcapi.cc  line 2278  # CHECK(!i::Top::external_caught_exception()) failed  #      ==== Stack trace ============================================    Security context: 04A01D2D &lt;JS Object&gt;#0#      1: loaded(this=0574E2F9 &lt;an Object&gt;&gt;#1#)      2: windowLoaded(this=0499CA99 &lt;JS Global Object&gt;#2#)      3: arguments adaptor frame: 1-&gt;0    ==== Details ================================================    [1]: loaded(this=0574E2F9 &lt;an Object&gt;&gt;#1#) {    // expression stack (top to bottom)    [01] : 0574E43D &lt;a DevToolsHost&gt;&gt;#3#    [00] : 0446AF65 &lt;String[6]: loaded&gt;  --------- s o u r c e   c o d e ---------  function () {?  devtools.tools = new devtools.ToolsAgent();?  devtools.tools.reset();??  Preferences.ignoreWhitespace = false;?  Preferences.samplingCPUProfiler = true;?  Preferences.heapProfilerPresent = true;?  oldLoaded.call(this);??  // Hide dock button   on Mac OS.?  // TODO(pfeldman): remove once Mac OS ...    -----------------------------------------  }    [2]: windowLoaded(this=0499CA99 &lt;JS Global Object&gt;#2#) {    // stack-allocated locals    var localizedStringsScriptElement = 031C0129 &lt;undefined&gt;    var localizedStringsURL = 031C0129 &lt;undefined&gt;    // expression stack (top to bottom)    [02] : 0446AF65 &lt;String[6]: loaded&gt;  --------- s o u r c e   c o d e ---------  function ()?{?    var localizedStringsURL = InspectorController.localizedStringsURL();?    if (localizedStringsURL) {?        var localizedStringsScriptElement = document.createElement(&quot;script&quot;);?          localizedStringsScriptElement.addEventListener(&quot;load&quot;  WebInspector.loaded.bind(WebInspector)  false);?  ...    -----------------------------------------  }    [3]: arguments adaptor frame: 1-&gt;0 {    // actual arguments    [00] : 080000CD &lt;an Event&gt;&gt;#4#  // not passed to callee  }    ==== Key         ============================================     #0# 04A01D2D: 04A01D2D &lt;JS Object&gt;   #1# 0574E2F9: 0574E2F9 &lt;an Object&gt;&gt;   #2# 0499CA99: 0499CA99 &lt;JS Global Object&gt;   #3# 0574E43D: 0574E43D &lt;a DevToolsHost&gt;&gt;   #4# 080000CD: 080000CD &lt;an Event&gt;&gt;  =====================    chrome.exe has triggered a breakpoint       </pre>