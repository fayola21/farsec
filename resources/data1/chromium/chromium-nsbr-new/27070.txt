<title>Issue 27070 -   chromium -    Stopped plugin process hangs tab opens / Excess CPU time by Flash - Project Hosting on Google Code</title>   1. Startup a number of tabs some of which include FLASH  2. Stop the &quot;plugin&quot; process (i.e. kill -s STOP   _the_PID_of_the_top_CPU_process_  3. Attempt to open tabs which may use more FLASH.  4. Tabs fail to open    The &quot;top CPU&quot; process in this case is typically the one which involves &quot;--  type=plugin&quot; and a --plugin-path involving &quot;libflashplayer.so&quot; -- this is   by and large the largest consumer of CPU time -- by a ratio of 4:3 over the   chrome parent master process and 44:1 over most other chrome processes.    Bottom line: FLASH must be controlled/limited!    Now  part of this problem is that it seems to require starting chrome with   something like --disable-javascript to turn off Javascript entirely.      1) It cannot be disabled in real-time (to stop all non-critical (e.g.   &quot;foreign&quot;) scripts from running).  2) It cannot be disabled on a case by case basis for specific pages (for   pages consuming excess CPU time.    In case it developers who do not understand this:  1) Running &quot;foreign&quot; programs that are allowed to go anywhere near the file   system on ones own CPU is a security risk.  I don't care what kind of   sandbox it is in -- it will NEVER (IMO) be 100% secure.  2) Allowances to &quot;run amok&quot; i.e. &quot;running FLASH&quot; allows programs to eat CPU   time (and potentially create other security hazards when one is dealing   with closed source FLASH rather that something like gnash.  3) Allowing FLASH to run randomly allows it to EAT your CPU time  battery   life  etc. and fails to recognize that its *MY* CPU time  my $ paying for   the electricity to pay for all of those fancy ads and displaying ads that   are not being viewed does nothing but contribute to global warming.  The problem is that if chrome processes are really &quot;asynchronous&quot; then        It should be possible to provide a completely functional browser without   &quot;hanging&quot; when one tries to open a page which includes flash (or other   video) applications.  Draw the &quot;static&quot; part of the page and label the   &quot;active&quot; part of the page as &quot;to-be-determined&quot;.    FLASH (and other plugin) CPU/power consumption should be constrained.  If   50+% of a common chrome instance is consumed by the flash plugin process   chromium developers should be worried a lot less about Javascript and a lot   more about Flash.        Plugin (Flash) process consumes 50+% of the aggregate CPU consumption of   all chrome processes.  It is impossible to have a functional browser when   one attempts to deal with this by using &quot;kill -s STOP&quot; that process.    One of the key advantages to chrome is the multi-process model and the   control that allows on systems like Linux.  That model should continue to   work even when Flash is involved.    <b>Please provide