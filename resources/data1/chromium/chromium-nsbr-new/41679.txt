<title>Issue 41679 -   chromium -    Mac keygen doesn't work with comodo.com - Project Hosting on Google Code</title> <pre> Mac Chrome isn't able to request a client certificate from comodo.com. The result of the form   post containing the &lt;keygen&gt; tag is a generic &quot;an error occurred&quot; message.    I'm working with Rob at Comodo on the problem. Here's his email:    ______________________________________________  Mike and I have managed to reproduce the same error you saw  and I have   captured the SPKAC that caused the problem.    It looks to me like your code that generates the SPKAC is buggy.    Here are the webserver logs for 2 attempts to submit the &lt;keygen&gt; form.    Mac Chrome Dev Channel (failed)  GET   /products/!CorporateSecureEmail_Apply?  emailAddress=michael.fowler%40comodo.com&amp;certificatePassword=yXVg5ti6ggJWMRlD&amp;spkac=  MIICPDCCASYwggEgMAsGCSqGSIb3DQEBAQOCAQ8AMIIBCgKCAQEA9e76MpEiHjecch%2FhQIFQtQ%  2FC20x5G6nLWjwjso%2BDQN2xdOiOSyUsjdm5xBLE3LBTzSse%2FrTyT7s0lapxdLF1S2LoN%2FaT4k  326J8HHPe1L%2FHujYelD%2FQ0tWyffBuhteYJFIyKJc2TIHcQ1QJLPxnKTY6AhdyxE%2Bu5AXZ1kxCwJI  Z7ogXqTNlrXq%2B%2B6PDPPBLAGksOiGrNIKnOUMAEF10A2mqmqWcQ6lz4zUd6dZdxh%2FjnaCUvr  BKN4M7CmMYfbrT2%2FNLw6A2YIDRgyXYskutPes1f%2BsnaCZTZYo31f4MFLfnYE5aWa2rwmCHdm  nRPvlFGqtdB4fn20Rh2Ic%2BCVvWOtwIDAQABFgEwCwYJKoZIhvcNAQEEA4IBAQBkjtqAzQ3gM0Sb4D  %2F38av6Pj4uQ4d%2FftT83k%2Bmvqa9sQgxGPUsqeo%2FhpaOjljWJaa57L9pbtMVzqdsfSre72FOxSp  kT5n5Qu0zaP91xv4c8HJtGhfq%2F5bIktX89pR8w9Fyoqv63zpYSibIW2GWc5cDAME2azGY%2BAPjBrA  ktT84V4QuKdBuOoyMUaALqu6VgKSf3H7bFUiZmPsM7zw4LqP7McFXZqMHLzrv5PRSkIyjO%2FzXBaf  41n78%2B%2FpDVyclK5f2uq4sBDUsp0hfTAP%2F640QpW1CRUYWDR7rRizWynDnpmDW5FhpEiRQe  WmW6sJG9ZvuyUQPtChqWPJz9x77Nng7&amp;submitButton=Request+My+Certificate+Now   HTTP/1.1&quot; 200 60    Linux Firefox 3.6.3 (successful)  GET   /products/!CorporateSecureEmail_Apply?  emailAddress=michael.fowler%40comodo.com&amp;certificatePassword=yXVg5ti6ggJWMRlD&amp;spkac=  MIICQDCCASgwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGiD8hCDlf%0D%0AA0V0ov  wzXRAJ9WGG0D7vH3RgNFo1B4K6f4egHv00FPxATKX1PBrc3MIuAbmB%2B6ao%0D%0AGmrag%2FriP  JIL1Bw54lonENTa90%2BcbPvrY33L4eOLsZTppXWdAe9pa0bg%2B01YcFZq%0D%0AqHGtnJZsUc%2FR  pAVhLECj6qT11CJGJnrNuO1JbeOO28yv1MUkfu9u3BNmgsSrRDzK%0D%0ACxysBDmjkBr5ZJCeq0s4  csw%2F2iWOjTmLXXTWvbv7uFP9eP0OOTdBFWcvaNbLdOo0%0D%0AqZwkM2Ljki2YUwEDChMuetPs  Qe2n%2BdJXhnK858%2B1CR9hVpVSQ21K9A8%2F75evMvcE%0D%0AW4zXCvw3etGrAgMBAAEWADA  NBgkqhkiG9w0BAQQFAAOCAQEAUENdyvXFddK5UXrQ%0D%0AftgnbCaeHAQW3cWJHXmVD39PUGU  SxIYppAqFRzwsz9bXTjRAaDya8nHBFAjM0TJ1%0D%0AxQ4Aglo3AU4%2B98s6WGOpnL0Q2ZNjdmV  wjZt8RGbgVebdvTbmdgqBThLlrPaAmaEF%0D%0AhPCfxDURufim%2BB3EttDFj1XoWG48nHuMiA9QK  AsWswlnl3dC4r2%2BQUYR3Enyo52t%0D%0Ah1%2FRVkRyRGGA%2Bmaqi5hCHIzoemexKrnJEeHG4jq  ijqytbPOS1sencDF52M%2FM%2FcG%2B%0D%0AzHKwnlDoMe6BwauQqWlwYD33k5eY7RFc5FzlB7uH  osQ2OnlHQjd3UAjfTieAn0Be%0D%0ASiHSGQ%3D%3D&amp;submitButton=Request+My+Certificate+No  w   HTTP/1.1&quot; 200 293    The first thing I notice is that Firefox includes CR/LF (%0D%0A) every 64   characters  but Chrome doesn't.  Our code doesn't care if CR/LF is present or   absent  but I can't speak for other CAs.    &quot;openssl asn1parse&quot; has no trouble parsing the Firefox SPKAC:     0:d=0  hl=4 l= 576 cons: SEQUENCE     4:d=1  hl=4 l= 296 cons:  SEQUENCE     8:d=2  hl=4 l= 290 cons:   SEQUENCE    12:d=3  hl=2 l=  13 cons:    SEQUENCE    14:d=4  hl=2 l=   9 prim:     OBJECT            :rsaEncryption    25:d=4  hl=2 l=   0 prim:     NULL    27:d=3  hl=4 l= 271 prim:    BIT STRING   302:d=2  hl=2 l=   0 prim:   IA5STRING         :   304:d=1  hl=2 l=  13 cons:  SEQUENCE   306:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption   317:d=2  hl=2 l=   0 prim:   NULL   319:d=1  hl=4 l= 257 prim:  BIT STRING    But &quot;openssl asn1parse&quot; doesn't like the Chrome SPKAC:     0:d=0  hl=4 l= 572 cons: SEQUENCE     4:d=1  hl=4 l= 294 cons:  SEQUENCE     8:d=2  hl=4 l= 288 cons:   SEQUENCE    12:d=3  hl=2 l=  11 cons:    SEQUENCE    14:d=4  hl=2 l=   9 prim:     OBJECT            :rsaEncryption    25:d=3  hl=4 l= 271 prim:    BIT STRING  Error in encoding  27029:error:0D07209B:asn1 encoding routines:ASN1_get_object:too   long:asn1_lib.c:142:    Adding &quot;-offset 30&quot; to look inside the BITSTRING shows that the public key   (SEQUENCE and 2 INTEGERS) is encoded ok  but after that it looks completely   mangled:     0:d=0  hl=4 l= 266 cons: SEQUENCE     4:d=1  hl=4 l= 257 prim:  INTEGER             :F5EEFA3291221E379C721FE1408150B50FC2DB4C791BA9CB5A3C23B28F8340DDB174E88E4B2  52C8DD9B9C412C4DCB053CD2B1EFEB4F24FBB3495AA7174B1754B62E837F693E24DF6E89F071  CF7B52FF1EE8D87A50FF434B56C9F7C1BA1B5E609148C8A25CD93207710D5024B3F19CA4D8E  8085DCB113EBB90176759310B024867BA205EA4CD96B5EAFBEE8F0CF3C12C01A4B0E886ACD2  0A9CE50C004175D00DA6AA6A96710EA5CF8CD477A75977187F8E768252FAC128DE0CEC298C  61F6EB4F6FCD2F0E80D98203460C9762C92EB4F7ACD5FFAC9DA0994D9628DF57F83052DF9D8  1396966B6AF09821DD9A744FBE5146AAD741E1F9F6D1187621CF8256F58EB7   265:d=1  hl=2 l=   3 prim:  INTEGER           :010001   270:d=0  hl=2 l=   1 prim: IA5STRING         :0   273:d=0  hl=2 l=   6 prim: &lt;ASN1 11&gt;   281:d=0  hl=2 l=   1 prim: &lt;ASN1 13&gt;   284:d=0  hl=2 l=   3 prim: OCTET STRING      [HEX DUMP]:820101   289:d=0  hl=2 l= 100 prim: EOC    The &quot;challenge&quot; IA5STRING is &quot;0&quot;  but since this character is 0x30  I think   it's actually meant to be the SEQUENCE header for the &quot;signatureAlgorithm&quot;.    Indeed  if I specify &quot;-offset 302&quot; I get:     0:d=0  hl=2 l=  11 cons: SEQUENCE     2:d=1  hl=2 l=   9 prim:  OBJECT            :md5WithRSAEncryption    13:d=0  hl=4 l= 257 prim: BIT STRING    When I change the length of the IA5STRING from 1 to 0 in a hex editor    &quot;openssl asn1parse&quot; stops complaining:     0:d=0  hl=4 l= 572 cons: SEQUENCE     4:d=1  hl=4 l= 294 cons:  SEQUENCE     8:d=2  hl=4 l= 288 cons:   SEQUENCE    12:d=3  hl=2 l=  11 cons:    SEQUENCE    14:d=4  hl=2 l=   9 prim:     OBJECT            :rsaEncryption    25:d=3  hl=4 l= 271 prim:    BIT STRING   300:d=2  hl=2 l=   0 prim:   IA5STRING         :   302:d=1  hl=2 l=  11 cons:  SEQUENCE   304:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption   315:d=1  hl=4 l= 257 prim:  BIT STRING    One other issue I would draw your attention to is the &quot;parameters&quot; part of the   &quot;signatureAlgorithm&quot;.  Firefox has the parameters present (the zero-length   NULL object)  but they're absent with Chrome.  Our code copes with both   present and absent parameters  but IIRC it's more correct (and hence more   interoperable) for the parameters to be present.    Below are the (URL-decoded) SPKACs I've been testing with.  I've added CR/LFs   to the one generated by Chrome for the benefit of &quot;openssl asn1parse&quot;.    Chrome:  MIICPDCCASYwggEgMAsGCSqGSIb3DQEBAQOCAQ8AMIIBCgKCAQEA9e76MpEiHjec  ch/hQIFQtQ/C20x5G6nLWjwjso+DQN2xdOiOSyUsjdm5xBLE3LBTzSse/rTyT7s0  lapxdLF1S2LoN/aT4k326J8HHPe1L/HujYelD/Q0tWyffBuhteYJFIyKJc2TIHcQ  1QJLPxnKTY6AhdyxE+u5AXZ1kxCwJIZ7ogXqTNlrXq++6PDPPBLAGksOiGrNIKnO  UMAEF10A2mqmqWcQ6lz4zUd6dZdxh/jnaCUvrBKN4M7CmMYfbrT2/NLw6A2YIDRg  yXYskutPes1f+snaCZTZYo31f4MFLfnYE5aWa2rwmCHdmnRPvlFGqtdB4fn20Rh2  Ic+CVvWOtwIDAQABFgEwCwYJKoZIhvcNAQEEA4IBAQBkjtqAzQ3gM0Sb4D/38av6  Pj4uQ4d/ftT83k+mvqa9sQgxGPUsqeo/hpaOjljWJaa57L9pbtMVzqdsfSre72FO  xSpkT5n5Qu0zaP91xv4c8HJtGhfq/5bIktX89pR8w9Fyoqv63zpYSibIW2GWc5cD  AME2azGY+APjBrAktT84V4QuKdBuOoyMUaALqu6VgKSf3H7bFUiZmPsM7zw4LqP7  McFXZqMHLzrv5PRSkIyjO/zXBaf41n78+/pDVyclK5f2uq4sBDUsp0hfTAP/640Q  pW1CRUYWDR7rRizWynDnpmDW5FhpEiRQeWmW6sJG9ZvuyUQPtChqWPJz9x77Nng7    Firefox:  MIICQDCCASgwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGiD8hCDlf  A0V0ovwzXRAJ9WGG0D7vH3RgNFo1B4K6f4egHv00FPxATKX1PBrc3MIuAbmB+6ao  Gmrag/riPJIL1Bw54lonENTa90+cbPvrY33L4eOLsZTppXWdAe9pa0bg+01YcFZq  qHGtnJZsUc/RpAVhLECj6qT11CJGJnrNuO1JbeOO28yv1MUkfu9u3BNmgsSrRDzK  CxysBDmjkBr5ZJCeq0s4csw/2iWOjTmLXXTWvbv7uFP9eP0OOTdBFWcvaNbLdOo0  qZwkM2Ljki2YUwEDChMuetPsQe2n+dJXhnK858+1CR9hVpVSQ21K9A8/75evMvcE  W4zXCvw3etGrAgMBAAEWADANBgkqhkiG9w0BAQQFAAOCAQEAUENdyvXFddK5UXrQ  ftgnbCaeHAQW3cWJHXmVD39PUGUSxIYppAqFRzwsz9bXTjRAaDya8nHBFAjM0TJ1  xQ4Aglo3AU4+98s6WGOpnL0Q2ZNjdmVwjZt8RGbgVebdvTbmdgqBThLlrPaAmaEF  hPCfxDURufim+B3EttDFj1XoWG48nHuMiA9QKAsWswlnl3dC4r2+QUYR3Enyo52t  h1/RVkRyRGGA+maqi5hCHIzoemexKrnJEeHG4jqijqytbPOS1sencDF52M/M/cG+  zHKwnlDoMe6BwauQqWlwYD33k5eY7RFc5FzlB7uHosQ2OnlHQjd3UAjfTieAn0Be  SiHSGQ==   </pre>