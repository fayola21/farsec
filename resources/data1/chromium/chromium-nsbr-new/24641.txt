<title>Issue 24641 -   chromium -    [compatibility] IPv6 addresses mess up proxy autoconfig scripts - Project Hosting on Google Code</title> <pre> There is a compatibility difference in how Chromium and Firefox handle IPv6 in PAC scripts   versus Internet Explorer.    This can cause scripts that work fine in IE to behave differently in Chromium/Firefox  resulting in   non-functional configuration.    For example  the &quot;myIpAddress()&quot; PAC library function may return an IPv6 address in   chromium/firefox. Whereas in in Internet Explorer it will only returns IPv4 addresses.    (Similarly for other functions with DNS resolving dependencies: dnsResolve()  isResolvable()    isInNet()).    Since existing scripts written for IE don't expect IPv6 addresses to be returned  when one is  it   may pass through the wrong codepath and things won't work.    This is a known issue in Firefox (try searching for &quot;ipv6 myIpAddress pac&quot;). Here is a thread   where users describe hitting it:    <a href="http://support.mozilla.com/tiki-view_forum_thread.php?">http://support.mozilla.com/tiki-view_forum_thread.php?</a>  locale=tr&amp;comments_parentId=259063&amp;forumId=1    Internet Explorer has worked around the problems with the PAC standard by defining the   existing functions to be IPv4-only  and adding extensions to support IPv6:    <a href="http://blogs.msdn.com/wndp/archive/2006/07/18/IPV6-WPAD-for-WinHttp-and-WinInet.aspx">http://blogs.msdn.com/wndp/archive/2006/07/18/IPV6-WPAD-for-WinHttp-and-WinInet.aspx</a>    I think that we should similarly to IE and define the old PAC functions to be IPv4 only  since there   are clearly users hitting this problem.    Currently the only workaround for Chrome users is to use the --winhttp-proxy-resolver flag.  (If we had a flag to disable IPv6 that would work too). </pre>