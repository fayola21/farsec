<title>Issue 25683 -   chromium -    visitedlinkmaster invalid read - Project Hosting on Google Code</title> <pre> found this when running valgrind locally    ==12410== Thread 1:  ==12410== Invalid read of size 4  ==12410==    at 0x6D5C54: VisitedLinkMaster::TryToAddURL(GURL const&amp;)   (visitedlink_master.cc:312)  ==12410==    by 0x6D5DA4: VisitedLinkMaster::AddURL(GURL const&amp;)   (visitedlink_master.cc:319)  ==12410==    by 0x52D35A: HistoryService::AddPage(GURL const&amp;  base::Time    void const*  int  GURL const&amp;  unsigned int  std::vector&lt;GURL    std::allocator&lt;GURL&gt; &gt; const&amp;  bool) (history.cc:337)  ==12410==    by 0x52D568: HistoryService::AddPage(GURL const&amp;  void const*    int  GURL const&amp;  unsigned int  std::vector&lt;GURL  std::allocator&lt;GURL&gt; &gt;   const&amp;  bool) (history.cc:314)  ==12410==    by 0x695A7B: TabContents::UpdateHistoryForNavigation(GURL   const&amp;  NavigationController::LoadCommittedDetails const&amp;    ViewHostMsg_FrameNavigate_Params const&amp;) (tab_contents.cc:1537)  ==12410==    by 0x698D30: TabContents::DidNavigate(RenderViewHost*    ViewHostMsg_FrameNavigate_Params const&amp;) (tab_contents.cc:2078)  ==12410==    by 0x5FC459: RenderViewHost::OnMsgNavigate(IPC::Message   const&amp;) (render_view_host.cc:952)  ==12410==    by 0x5FCBD2: RenderViewHost::OnMessageReceived(IPC::Message   const&amp;) (render_view_host.cc:729)  ==12410==    by 0x87701E:   BrowserRenderProcessHost::OnMessageReceived(IPC::Message const&amp;)   (browser_render_process_host.cc:826)  ==12410==    by 0x10C3449:   IPC::ChannelProxy::Context::OnDispatchMessage(IPC::Message const&amp;)   (ipc_channel_proxy.cc:204)  ==12410==    by 0x10C4648: void   DispatchToMethod&lt;IPC::ChannelProxy::Context  void   (IPC::ChannelProxy::Context::*)(IPC::Message const&amp;)    IPC::Message&gt;(IPC::ChannelProxy::Context*  void   (IPC::ChannelProxy::Context::*)(IPC::Message const&amp;)  Tuple1&lt;IPC::Message&gt;   const&amp;) (tuple.h:422)  ==12410==    by 0x10C4685: RunnableMethod&lt;IPC::ChannelProxy::Context  void   (IPC::ChannelProxy::Context::*)(IPC::Message const&amp;)  Tuple1&lt;IPC::Message&gt;   &gt;::Run() (task.h:277)  ==12410==  Address 0xd7ac0cc is 4 bytes before a block of size 40 alloc'd  ==12410==    at 0x5FFC8FC: operator new(unsigned long)   (vg_replace_malloc.c:219)  ==12410==    by 0x4DB48A: ExtensionsService::ExtensionsService(Profile*    CommandLine const*  PrefService*  FilePath const&amp;  MessageLoop*    MessageLoop*  bool) (extensions_service.cc:93)  ==12410==    by 0x5E1BC6: ProfileImpl::InitExtensions() (profile.cc:670)  ==12410==    by 0x45896C: BrowserMain(MainFunctionParams const&amp;)   (browser_main.cc:854)  ==12410==    by 0x401068: ChromeMain (chrome_dll_main.cc:601)  ==12410==    by 0x400413: main (chrome_exe_main_gtk.cc:33)      code in question is      // If the table is &quot;full&quot;  we don't add URLs and just drop them on the   floor.    // This can happen if we get thousands of new URLs and something causes    // the table resizing to fail. This check prevents a hang in that case.   Note    // that this is *not* the resize limit  this is just a sanity check.    if (used_items_ / 8 &gt; table_length_ / 10)      return null_hash_;  // Table is more than 80% full.    (the conditional is L312). Since used_items_ is always inited  it might be   complaining about table_length_  but I'd think that would make valgrind say   something about unitialized memory  not invalid memory. So this seems like   a use-after-free bug perhaps  although in that case I'd think valgrind   would have choked earlier in the function on a different member var...    anyway it is worth noting that table_length_ is not explicitly intialized   in InitMembers()  but it does seem to be a mistake to have gotten this far   without having called CreateURLTable()  where table_length_ is inited. </pre>