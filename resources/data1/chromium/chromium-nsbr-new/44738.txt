<title>Issue 44738 -   chromium -    Heap checker reports many Histogram-related leaks in net_unittests on Linux - Project Hosting on Google Code</title> <pre> see the bot log at  <a href="http://build.chromium.org/buildbot/memory/builders/Linux%20Heapcheck/builds/2620/steps/heapcheck%20test:%20net/logs/stdio">http://build.chromium.org/buildbot/memory/builders/Linux%20Heapcheck/builds/2620/steps/heapcheck%20test:%20net/logs/stdio</a>    A sample leak report:  Leak of 404 bytes in 1 objects allocated from:  	@ 602b5f __gnu_cxx::new_allocator::allocate  	@ 602b87 std::_Vector_base::_M_allocate  	@ 84b63e _Vector_base  	@ 84b69d vector  	@ 847080 Histogram  	@ 8471e6 Histogram::FactoryGet  	@ 84742c Histogram::FactoryGet  	@ 7a9372 ClientSocketPoolHistograms  	@ 75b112 HttpNetworkSession  	@ 759ec0 net::HttpNetworkLayer::GetSession  	@ 75a133 net::HttpNetworkLayer::CreateTransaction  	@ 74f4f2 net::HttpCache::Transaction::DoSendRequest  	@ 7543cb net::HttpCache::Transaction::DoLoop  	@ 757b16 net::HttpCache::Transaction::Start  	@ 815204 URLRequestHttpJob::StartTransaction  	@ 815a47 URLRequestHttpJob::OnCanGetCookiesCompleted  	@ 815b55 URLRequestHttpJob::AddCookieHeaderAndStart  	@ 8171ba URLRequestHttpJob::Start  	@ 7e514a URLRequest::StartJob  	@ 7e632f URLRequest::Start  	@ 60a2ba HTTPTestServer::StartGETRequest  	@ 6078d1 void DispatchToFunction  	@ 607902 RunnableFunction::Run  	@ 84f45f MessageLoop::RunTask  	@ 84fb7c MessageLoop::DeferOrRunPendingTask  	@ 84fdcc MessageLoop::DoWork  	@ 82b620 base::MessagePumpLibevent::Run  	@ 850463 MessageLoop::RunInternal  	@ 850483 MessageLoop::RunHandler  	@ 850528 MessageLoop::Run  	@ 873571 base::Thread::Run  	@ 8739c2 base::Thread::ThreadMain    There also are several leak reports with broken stacks:    Leak of 9560 bytes in 1 objects allocated from:  	@ 2b1fa7861c4f ??  This stack may be broken due to omitted frame pointers. It is not  recommended to suppress it.  Leak of 5928 bytes in 1 objects allocated from:  	@ 2b1fa785d001 ??  This stack may be broken due to omitted frame pointers. It is not  recommended to suppress it.  Leak of 4096 bytes in 1 objects allocated from:  	@ 2b1fa785d095 deflateInit2_  This stack may be broken due to omitted frame pointers. It is not  recommended to suppress it.  Leak of 4096 bytes in 1 objects allocated from:  	@ 2b1fa785d081 ??  This stack may be broken due to omitted frame pointers. It is not  recommended to suppress it.  Leak of 512 bytes in 1 objects allocated from:  	@ 2b1fa785d0cc ??  This stack may be broken due to omitted frame pointers. It is not  recommended to suppress it.  Leak of 512 bytes in 1 objects allocated from:  	@ 2b1fa785d0a9 ??  This stack may be broken due to omitted frame pointers. It is not  recommended to suppress it. </pre>