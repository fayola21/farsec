<title>Issue 34731 -   chromium -    RemoveChars is not nul term safe  can read undefined memory and yield unpredictable result (+ valgrind warning?) - Project Hosting on Google Code</title> <pre>   1. Run base_unittests.exe --gtest_filter=StringUtilTest.RemoveChar -- --  gtest_break_on_failure --gtest_repeat=100000  2. Eventually may get lucky and see an error like:   <a href="http://build.chromium.org/buildbot/try-">http://build.chromium.org/buildbot/try-</a>  server/builders/win/builds/17570/steps/base_unittests/logs/RemoveChars  StringUtilTest.RemoveChars:  c:bslavewinbuildsrcbasestring_util_unittest.cc(1475): error: Value   of: input    Actual: &quot;Abc!&quot;  Expected: &quot;Abcd!&quot;  c:bslavewinbuildsrcbasestring_util_unittest.cc(1479): error: Value   of: input    Actual: &quot;Abc!&quot;  Expected: &quot;Abcd!&quot;      The problem is in the interface to ReplaceChars   bool RemoveChars(const std::string&amp; input                     const char remove_chars[]                     std::string* output);    There is no way to pass in the number of elements in remove_chars.  In the implementation remove_chars gets passed through to   std::string::find_first_of( const char* s  size_t pos = 0 )  this expects s to be a null-terminated string  and so will walk through the   array of remove_chars passed  and subsequent memory  until it eventually   finds nil.   If you get lucky  it may find other candidate remove characters (such as   'd' in the above linked error) or even a memory violation in the process.    Some ideas for fix:  turn the API to const char* remove_chars  to make it clearer it should be a   null-terminated string  and fixup all call sites to respect this (inc the   test code) OR if it is desired to allow passing in 'nil' as a candidate   character to remove  perhaps it could be passed a StringPiece? Or else pass   in an explicit length argument for the array (callers could typically use   arraysize(remove_chars))   </pre>