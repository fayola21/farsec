<title>Issue 42112 -   chromium -    NetTestSuite::InitializeTestThread seems to cause leaks some times on heapcheck - Project Hosting on Google Code</title> <pre> Seems like every second or third run of the heapcheck bot (<a href="http://build.chromium.org/buildbot/memory/waterfall?builder=Linux%20Heapcheck">http://build.chromium.org/buildbot/memory/waterfall?builder=Linux%20Heapcheck</a>) today includes leaks with   NetTestSuite::InitializeTestThread on the stack  the data always looks like:      Leak check _main_ detected leaks of 168152 bytes in 701 objects  The 101 largest leaks:  Leak of 56 bytes in 1 objects allocated from:  	@ a3d607 __gnu_cxx::new_allocator::allocate  	@ a3d62c std::_List_base::_M_get_node  	@ a3d648 std::list::_M_create_node  	@ a3d6a7 std::list::_M_insert  	@ a3d6e3 std::list::push_back  	@ a3c497 net::RuleBasedHostResolverProc::AddRuleForAddressFamily  	@ a3c4d4 net::RuleBasedHostResolverProc::AddRule  	@ 494abf NetTestSuite::InitializeTestThread  	@ 494b30 NetTestSuite::Initialize  	@ 495074 TestSuite::Run  	@ 494061 main  	@ 2ac9c34af1c4 __libc_start_main    Suppression:  {     &lt;insert_a_suppression_name_here&gt;     Heapcheck:Leak     fun:__gnu_cxx::new_allocator::allocate     fun:std::_List_base::_M_get_node     fun:std::list::_M_create_node     fun:std::list::_M_insert     fun:std::list::push_back     fun:net::RuleBasedHostResolverProc::AddRuleForAddressFamily     fun:net::RuleBasedHostResolverProc::AddRule     fun:NetTestSuite::InitializeTestThread     fun:NetTestSuite::Initialize     fun:TestSuite::Run     fun:main     fun:__libc_start_main  }        Leak of 40 bytes in 1 objects allocated from:  	@ 494a23 NetTestSuite::InitializeTestThread  	@ 494b30 NetTestSuite::Initialize  	@ 495074 TestSuite::Run  	@ 494061 main  	@ 2ac9c34af1c4 __libc_start_main    Suppression:  {     &lt;insert_a_suppression_name_here&gt;     Heapcheck:Leak     fun:NetTestSuite::InitializeTestThread     fun:NetTestSuite::Initialize     fun:TestSuite::Run     fun:main     fun:__libc_start_main  }        Leak of 34 bytes in 1 objects allocated from:  	@ 2ac9bf8ca997 __gnu_cxx::new_allocator::allocate  	@ 2ac9bf8caa90 std::string::_Rep::_S_create  	@ 2ac9bf8cd301 std::string::_S_construct  	@ 2ac9bf8cd3aa std::string::_S_construct_aux  	@ 2ac9bf8cd3d8 std::string::_S_construct  	@ 2ac9bf8cd4a0 basic_string  	@ 494a84 NetTestSuite::InitializeTestThread  	@ 494b30 NetTestSuite::Initialize  	@ 495074 TestSuite::Run  	@ 494061 main  	@ 2ac9c34af1c4 __libc_start_main    Suppression:  {     &lt;insert_a_suppression_name_here&gt;     Heapcheck:Leak     fun:__gnu_cxx::new_allocator::allocate     fun:std::string::_Rep::_S_create     fun:std::string::_S_construct     fun:std::string::_S_construct_aux     fun:std::string::_S_construct     fun:basic_string     fun:NetTestSuite::InitializeTestThread     fun:NetTestSuite::Initialize     fun:TestSuite::Run     fun:main     fun:__libc_start_main  }        Leak of 26 bytes in 1 objects allocated from:  	@ 2ac9bf8ca997 __gnu_cxx::new_allocator::allocate  	@ 2ac9bf8caa90 std::string::_Rep::_S_create  	@ 2ac9bf8cd301 std::string::_S_construct  	@ 2ac9bf8cd3aa std::string::_S_construct_aux  	@ 2ac9bf8cd3d8 std::string::_S_construct  	@ 2ac9bf8cd4a0 basic_string  	@ 494a9f NetTestSuite::InitializeTestThread  	@ 494b30 NetTestSuite::Initialize  	@ 495074 TestSuite::Run  	@ 494061 main  	@ 2ac9c34af1c4 __libc_start_main    Suppression:  {     &lt;insert_a_suppression_name_here&gt;     Heapcheck:Leak     fun:__gnu_cxx::new_allocator::allocate     fun:std::string::_Rep::_S_create     fun:std::string::_S_construct     fun:std::string::_S_construct_aux     fun:std::string::_S_construct     fun:basic_string     fun:NetTestSuite::InitializeTestThread     fun:NetTestSuite::Initialize     fun:TestSuite::Run     fun:main     fun:__libc_start_main  }    Since it doesn't happen every time  I'm guessing it has something to do with a race in the test shutdown  where cleanup may or may not happen in time.  it would be nice to get these always cleaned up so   the bot only turns read when something really shows up. </pre>