<title>Issue 32368 -   chromium -    Chrome has no concept of limited resource use - Project Hosting on Google Code</title> <pre> Chrome Version       : 4.0.266.0 (Developer Build 33992)  URLs (if applicable) : N/A  Other browsers tested: N/A      1. Create a very large browser session (hundreds of tabs)  2. Kill the session  3. Restore the session      The user should be able to specify what fraction of system resources are  available to the browser.        Browser uses all resources (CPU  network  memory) available to the  detriment of other programs.    The user has no ability to control the CPU  network or memory resources  used by the browser.    In particular  --single-process and --process-per-tab appear to be  unimplemented.  There are also no switches (or session control preferences)  to control (a) the amount of DNS lookup activity taking place (which some  ISP's appear to track); (b) the amount of network bandwidth being consumed;  (c) the number of web sites with open communications activity  simultaneously; (d) the size of the local Google cache; (e) The amount of  memory used (except by setting process memory size limits [1]); (f) the  load being placed on the CPU(s).    Chrome already has (via the task manager interfaces) to monitor many of  these aspects of system load (though the task manager interface needs its  own system load self-governor  but that is a separate issue).  But there is  no way to limit CPU use to 50% of the system load or network load to 50% of  the maximum network bandwidth  etc.    The problem with <a title="Restoring 600 tabs at once can make browser completely nonfunctional"  href="/p/chromium/issues/detail?id=32061">Issue #32061</a> and <a title="Spinner wastes CPU resources  is not green and need to be replaced." class=closed_ref href="/p/chromium/issues/detail?id=32165"> Issue #32165 </a> could be dealt with via a  simple &quot;--limit-sites:#&quot; switch.  This would likely solve both the CPU use  and the network bandwidth problem.  If chrome only got to talk to 1-2 sites  at a time one wouldn't have several hundred spinners  the CPU wouldn't be  maxed out and the network bandwidth would not be maxed out for 10 minutes.   Developers at Google may live in a world of nearly infinite resources --  but most of the rest of the users in the real world don't.    There are some &quot;power&quot; users who can run very large sessions (they have 3GB  of main memory and ~10 GB of swap space) and who tend to keep large  sessions running for weeks (so if they need to be restored there are going  to be short-term resource contention issues).  But they only have one set  of eyes and are probably only looking at 1 window at a time (very few  people can read 2 pages simultaneously).  What they care about is the  window in front of their face and the responsiveness of *THAT* window.  If  chrome activity on any other window is decreasing the performance of the  top (primary) window then the session design has problems.  Ensuring  limited resource use by the chrome session as a whole ensures that  resources are always available to the window in front of ones face [2].    1. I suspect if process memory limits are set and Chrome hits them it will  respond ungraciously -- Firefox has had a 2-3 year outstanding bug  regarding nasty failures that occur when memory is constrained.    2. For example  what happens to an incoming Skype call on a DSL line (or  worse yet a dial-up line) when one is in the middle of a 15-20 minute  Chrome session restore that has maxed the line bandwidth?  In theory TCP/IP  scheduling is supposed to deal with this -- but in practice I doubt that is  the case.  In practice  I find that both Music playing and Browser  performance (e.g. gmail) suffer whenever I run long system builds (emerges  in Gentoo terminology) -- even when I've taken steps to nice -19 or use  chrt to change the build priority to only use the idle cycles.  I'm sure  that chromium session restores would have similar effects.  Does chromium  have a way of shifting the chrome process state from &quot;idle&quot; scheduling (for  restoring windows/tabs or inactive (non-viewable) tabs/windows) to &quot;fifo&quot;  scheduling for the top window (tab)? </pre>