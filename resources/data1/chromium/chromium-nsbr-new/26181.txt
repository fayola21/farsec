<title>Issue 26181 -   chromium -    My friend Chow had trouble with auto-update today.  &quot;Update server not available.&quot; - Project Hosting on Google Code</title> <pre> Chow brought me his laptop to figure out what &quot;Update server not available   (error: 128)&quot; was all about during an update attempt from 4.0.223.8 to   4.0.223.11.  The update check was successful and he clicked the Update   Now button.  The update downloaded successfully and began installing.    The .keystone_install script failed because of an ownership problem in his   existing installation.    128 is an old constant from   chrome/browser/cocoa/about_window_controller.mm@28814.  This has   since been reorganized and if Chow attempted to update from a more   recent version  he would have seen &quot;Update server not available (error: 7)&quot;    7 from chrome/app/keystone_glue.h@30215.    The console log showed that Keystone was attempting an update and   exiting with exit code 6.  The .keystone_install script in question is   chrome/tools/build/mac/keystone_install.sh@29310.  He's on a user ticket   and the script was running as his own user.  This version of   keystone_install.sh exits 6 when the following command fails:    rsync -clprt --delete-after --exclude /Contents/Versions &quot;${SRC}/&quot;   &quot;${DEST}&quot;    Here's a simulation of what rsync experienced:    mark@anodizer bash$ rsync -clprt --delete-after --exclude   /Contents/Versions &quot;/Volumes/Google Chrome/Google Chrome.app/&quot;   &quot;/tmp/Google Chrome.app&quot;  rsync: failed to set times on &quot;/tmp/Google   Chrome.app/Contents/CodeResources&quot;: Permission denied (13)  rsync: failed to set times on &quot;/tmp/Google   Chrome.app/Contents/Resources/en.lproj&quot;: Permission denied (13)  rsync error: some files/attrs were not transferred (see previous errors)   (code 23) at main.c(1039) [sender=3.0.6]  mark@anodizer bash$ echo $?  23    And here's the problem:    mark@anodizer bash$ ls -l &quot;/tmp/Google   Chrome.app/Contents/CodeResources&quot; &quot;/tmp/Google   Chrome.app/Contents/Resources/en.lproj&quot;  lrwxr-xr-x  1 root  wheel  28 Oct 20 19:51 /tmp/Google   Chrome.app/Contents/CodeResources -&gt; _CodeSignature/CodeResources  lrwxr-xr-x  1 root  wheel  11 Oct 20 19:51 /tmp/Google   Chrome.app/Contents/Resources/en.lproj -&gt; en_US.lproj    Both of these symbolic links are mode 755 root:wheel.  Because of the   presence of -t  rsync attempts to update the time on the symbolic links by   calling lutimes.  It does not have permission to do so because the   permissions on the symbolic links deny it.  The rest of the rsync completed   without incident.    I don't know how Chow wound up with these two links owned by root.  His   user is an administrator and he simply dragged Chrome from the .dmg to   /Applications.  He was never asked to authenticate.  He's running 10.6.1.    The rest of the files and directories in Google Chrome.app/Contents were   owned by his user.  I didn't dig any deeper to check the ownership status of   the 4.0.223.8 versioned directory.    The cheap cop-out solution is to drop -t  but I like rsync -t.  I'd like to find   out more about how the ownership on these symbolic links got screwed   up.  I'd really like to find out how they got screwed up without trashing the   ownership on the rest of his files and directories.    I also have <a title="No more symbolic links in the .app (en.lproj -&gt; en_US.lproj)" class=closed_ref href="/p/chromium/issues/detail?id=25578"> bug 25578 </a> to get rid of the en.lproj symbolic link.  I don't know   about getting rid of CodeResources  but it seems that moving   _CodeSignature/CodeResources to CodeResources still placates codesign -  vv  so maybe that is a viable option. </pre>