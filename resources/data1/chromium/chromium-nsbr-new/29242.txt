<title>Issue 29242 -   chromium -    Chrome failing to update its cache  following an old and incorrect JS redirect  in some cases. - Project Hosting on Google Code</title> <pre> Chrome Version       : 4.0.249.21 (but observed for a good while in the dev   channel)  Behavior in Firefox 3.x: Works      1. Setup a hostname A which resolves to IP address X  serving a simple page   containing a JS redirect to a hostname B (which in fact resolves to the   same IP address X). It does not send the Expires header.  2. Connect to hostname A  download the page  be redirected and such. The   page is cached.  3. Update hostname A to point to another IP address Y  serving a similar   simple page containing a JS redirect to *a different* hostname C (which in   fact resolves to the new IP address Y). Touch this page to guarantee it has   a last modified time more recent than the DNS change.  4. Attempt to connect  using Chrome  to the hostname again.    Chrome will do  according to Wireshark  the following DNS and HTTP   requests:    - Resolve hostname A (A and AAAA records). Gets a response of the new IP   address Y and no IPv6 addresses.  - Resolve the hostname B the JS redirect from the old IP address X pointed   to.  - Connect to the old IP address X via HTTP  request the page previously   redirected to.    The notable part here is that it does not appear to connect to the address   Y it resolves first at all; it appears to simply take its previous cached   page. There is no traffic to or from this server at all. The reasoning for   even doing the DNS request is somewhat confusing.    It does not check its cache is valid  and thus ends up communicating with   entirely the wrong server. The only other details I can think of that might   explain curious handling of hostname A are:    - No Cache-Control header is sent. Is sending Cache-Control: must-revalidate   or even no-cache necessary? I could certainly see them working around the   matter in the case of the latter  at least.  - The DNS at one prior point contained both IP addresses  as a DNS RR.    Firefox appears to function as expected; it picks up on the update and goes   to the new server.    Is this expected behaviour? It does not appear to do it in other cases  in   which it sends a request with the Last-Modified-Since header  and receives   a 304. If so  or there are circumstances it is so  I would like to   understand what these are  so I can make my software behave as Chrome   requires.    The explanation for the curious behaviour of the redirect is in order to   turn the first hostname into a DNS roundrobin of the two servers  with a   given user's session being redirected to make them use a single one of them   for all requests they make that visit. </pre>