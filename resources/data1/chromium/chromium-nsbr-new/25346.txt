<title>Issue 25346 -   chromium -    AtomicFlagTest.DoubleSetDeathTest behaves strangely under x86_64 valgrind on linux - Project Hosting on Google Code</title> <pre> I started trying to use valgrind on 64 bit chromium base_unittests  today (since I was not close enough to my car to slam my fingers  in its door as I love to do).    Quite a few of the base tests actually pass fine.  This is the first  one that does something mysterious; it feels like a valgrind bug.  The valgrind I'm using is the one built by  tools/valgrind/build-valgrind-for-chromium.sh.    The warning about clone() is probably  <a href="https://bugs.kde.org/show_bug.cgi?id=117564">https://bugs.kde.org/show_bug.cgi?id=117564</a>  so the current report is about the &quot;no stack segment&quot; and SIGSEGV.    The command:    /usr/local/valgrind-10880-redzone/bin/valgrind ./base_unittests  --gtest_filter=AtomicFlagTest.DoubleSetDeathTest    The result:  ==9040== Memcheck  a memory error detector  ==9040== Copyright (C) 2002-2009  and GNU GPL'd  by Julian Seward et al.  ==9040== Using Valgrind-3.6.0.SVN and LibVEX; rerun with -h for copyright info  ==9040== Command: ./base_unittests  --gtest_filter=AtomicFlagTest.DoubleSetDeathTest  ==9040==   Note: Google Test filter = AtomicFlagTest.DoubleSetDeathTest  [==========] Running 1 test from 1 test case.  [----------] Global test environment set-up.  [----------] 1 test from AtomicFlagTest  [ RUN      ] AtomicFlagTest.DoubleSetDeathTest  ==9040== Syscall param clone(child_tidptr) contains uninitialised byte(s)  ==9040==    at 0x891AB11: clone (in /lib/libc-2.7.so)  ==9040==    by 0x55203F: testing::internal::ExecDeathTest::AssumeRole()  (gtest-death-test.cc:976)  ==9040==    by 0x402779: (anonymous  namespace)::AtomicFlagTest_DoubleSetDeathTest_Test::TestBody()  (atomic_flag_unittest.cc:62)  ...  ==9040==   ==9040== Memcheck  a memory error detector  ==9040== Copyright (C) 2002-2009  and GNU GPL'd  by Julian Seward et al.  ==9040== Using Valgrind-3.6.0.SVN and LibVEX; rerun with -h for copyright info  ==9040== Command: ./base_unittests  --gtest_filter=AtomicFlagTest.DoubleSetDeathTest  ==9040== Parent PID: 9040  ==9040==   ==9040== Warning: client switching stacks?  SP change: 0x7ff000078 --&gt; 0x0  ==9040==          to suppress  use: --max-stackframe=34342961272 or greater  ==9040== Can't extend stack to 0xfffffffffffff480 during signal delivery  for thread 1:  ==9040==   no stack segment  ==9040==   ==9040== Process terminating with default action of signal 11 (SIGSEGV)  ==9040==  Access not within mapped region at address 0xFFFFFFFFFFFFF480  ==9040==    at 0x551E22: testing::internal::ExecDeathTestFork(char* const*   int) (gtest-death-test.cc:932)  ==9040==  If you believe this happened as a result of a stack  ==9040==  overflow in your program's main thread (unlikely but  ==9040==  possible)  you can try to increase the size of the  ==9040==  main thread stack using the --main-stacksize= flag.  ==9040==  The main thread stack size used in this run was 8388608.  ==9040== Invalid write of size 8  ==9040==    at 0x4A1F50C: _vgnU_freeres (vg_preloaded.c:58)  ==9040==  Address 0xffffffffffffff78 is not stack'd  malloc'd or (recently)  free'd  ==9040==   ==9040==   ==9040== Process terminating with default action of signal 11 (SIGSEGV)  ==9040==  Access not within mapped region at address 0xFFFFFFFFFFFFFF78  ==9040==    at 0x4A1F50C: _vgnU_freeres (vg_preloaded.c:58)  ...  ==9040== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 5 from 5)  [       OK ] AtomicFlagTest.DoubleSetDeathTest (274 ms)   </pre>