<title>Issue 44476 -   chromium -    Bad interface for setting cookieable scheme in CookeMonster. - Project Hosting on Google Code</title> <pre> Chrome Version       : 6.0.402.0 (Developer Build 0)    Other browsers tested: None    As part of fixing <a title="Browser crash (CHECK failure) in net::CookieMonster::DeleteAnyEquivalentCookie(std::string const&amp;  net::CookieMonster::C..."  href="/p/chromium/issues/detail?id=43188">issue 43188</a> (CL 2131002) around CookieMonster locking  I was examining   the interfaces SetCookieableScheme() and HasCookieableScheme().  Based on my current   understanding  the design of the CookieMonster class requires the SetCookieableScheme()   only be called at construction time; after cookies start being stored in the CookieMonster  the   scheme should be fixed as it's used to determine what cookies are entered (SetCookie*)    deleted (DeleteCookie(url  cookie))  and retrieved (GetCookieWithOptions).  Intuitively  that   value shouldn't be changed for the lifetime of the instance.  Also  the locking in the class was   clearly written with the assumption that SetCookieableScheme() would only be called at   creation time.  This last issue is being fixed in CL 2131002  but at some performance cost.      A better design would be to officially make the setting of the cookieable scheme part of the   construction process.  This could be done in a number of ways  none of them ideal  which is   why I'm punting the problem to a new issue rather than trying to fix it as part of 43188.  The   ways I see currently are:  * Make the cookieable scheme part of the constructor  passing it in as a (char *[]  len) pair  or   as a vector&lt;string&gt;.  Neither of these provides an easy way to indicate that the default   cookieable scheme is desired; this could be solved by:  ** Providing two constructors  one for default  one for specifying the scheme.  This is   prohibited by the coding standards.  ** Forcing callers to pass in the default explicitly.  This requires callers to pass in two   constants (first signature) or somehow get a pre-constructed vector (second signature)  which   the coding standards prohibit constructing at program start time.  * Make the cookieable scheme part of the constructor  passing it in as a char ** with null   termination.  A null pointer passed in would indicate the default.  This doesn't fit well with   current scheme specifications (which are char *[]  len).  * Leaving the interface as it is  but putting comments and assertions around   SetCookieableScheme to make sure that it is not called except at construction (pre-multi-  threading) time.     </pre>