<title>Issue 39932 -   chromium -    Memory error in ~NetworkChangeNotifierLinux - Project Hosting on Google Code</title> <pre> After landing <a href="/p/chromium/source/detail?r=43127">r43127</a> which causes the MessageLoop destruction notification to preceded the thread's CleanUp()  it introduced an access to freed memory during shutdown:    <a href="http://build.chromium.org/buildbot/memory/builders/Linux%20Tests%20%28valgrind%29%282%29/builds/4584/">http://build.chromium.org/buildbot/memory/builders/Linux%20Tests%20%28valgrind%29%282%29/builds/4584/</a>    The problem is that FileDescriptorWatcher does not handle the case where it outlives the message loop.  And with my re-ordering  NetworkChangeNotifierLinux is now being destroyed after the libevent loop  so NetworkChangeNotiferLinux's call to FileDescriptorWatcher::StopWatchingFileDescriptor() in its destructor   accesses bad memory.    Invalid read of size 4    event_del (uilder/build/src/third_party/libevent/event.c:792)    base::MessagePumpLibevent::FileDescriptorWatcher::StopWatchingFileDescriptor() (uilder/build/src/base/message_pump_libevent.cc:83)    net::NetworkChangeNotifierLinux::~NetworkChangeNotifierLinux() (uilder/build/src/net/base/network_change_notifier_linux.cc:41)    scoped_ptr&lt;net::NetworkChangeNotifier&gt;::~scoped_ptr() (uilder/build/src/./base/scoped_ptr.h:72)    IOThread::Globals::~Globals() (uilder/build/src/./chrome/browser/io_thread.h:30)    IOThread::CleanUp() (uilder/build/src/chrome/browser/io_thread.cc:175)    base::Thread::ThreadMain() (uilder/build/src/base/thread.cc:163)    ThreadFunc(void*) (uilder/build/src/base/platform_thread_posix.cc:26)    start_thread (/lib/tls/i686/cmov/libpthread-2.7.so)  Address 0x50765a8 is 0 bytes inside a block of size 944 free'd    free (mp/vg-chr/scripts/valgrind-source/coregrind/m_replacemalloc/vg_replace_malloc.c:348)    event_base_free (uilder/build/src/third_party/libevent/event.c:263)    base::MessagePumpLibevent::~MessagePumpLibevent() (uilder/build/src/base/message_pump_libevent.cc:148)    base::RefCountedThreadSafe&lt;base::MessagePump  base::DefaultRefCountedThreadSafeTraits&lt;base::MessagePump&gt; &gt;::DeleteInternal(base::MessagePump*) (uilder/build/src/./base/ref_counted.h:146)    base::DefaultRefCountedThreadSafeTraits&lt;base::MessagePump&gt;::Destruct(base::MessagePump*) (uilder/build/src/./base/ref_counted.h:112)    base::RefCountedThreadSafe&lt;base::MessagePump  base::DefaultRefCountedThreadSafeTraits&lt;base::MessagePump&gt; &gt;::Release() (uilder/build/src/./base/ref_counted.h:140)    scoped_refptr&lt;base::MessagePump&gt;::~scoped_refptr() (uilder/build/src/./base/ref_counted.h:238)    MessageLoop::~MessageLoop() (uilder/build/src/base/message_loop.cc:141)    base::Thread::ThreadMain() (uilder/build/src/base/thread.cc:156)    ThreadFunc(void*) (uilder/build/src/base/platform_thread_posix.cc:26)    start_thread (/lib/tls/i686/cmov/libpthread-2.7.so)      It looks like this bug has already been known  since I see a disabled test that exercises it:       MessageLoopTest.DISABLED_FileDescriptorWatcherOutlivesMessageLoop()    As well as a TODO(dkegel) in message_pump_libevent.cc documenting this. </pre>