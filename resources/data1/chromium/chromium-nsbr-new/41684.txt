<title>Issue 41684 -   chromium -    Render crash when receiving junk HTTP header - Project Hosting on Google Code</title> <pre> In GMail  in an email containing images  clicking &quot;show images&quot; in GMail  crashes the renderer.  It seems one of the image  (<a href="http://a248.e.akamai.net/f/248/25855/14d/ig.rsys1.net/responsysimages/wls/Dynamic_CCR_Newsletter_Retention/ADEP_CCR_main_image_A/YYMMRWCCR01_2.jpg">http://a248.e.akamai.net/f/248/25855/14d/ig.rsys1.net/responsysimages/wls/Dynamic_CCR_Newsletter_Retention/ADEP_CCR_main_image_A/YYMMRWCCR01_2.jpg</a>)  in that case serves HTTP headers with a junk value (I give the name/value  bytes in hexa here):  0xa8 0xb6 0xd3 0x2b 0x55 : 0x20 0x04    The crasher happens because in weburlloader_impl.cc PopulateURLResponse()   we are not checking the return value of WebString::fromUTF8() before  calling response-&gt;addHTTPHeaderField()  so we can end up with NULL strings  in the response if the header is garbage and we fail to UTF8 decode it.    &gt;	chrome.dll!WebCore::StringImpl::length()  Line 164 + 0x11 bytes	C++   	chrome.dll!WebCore::CaseFoldingHash::hash(WebCore::StringImpl *  str=0x00000000)  Line 144 + 0x8 bytes	C++   	chrome.dll!WebCore::CaseFoldingHash::hash(const WebCore::AtomicString &amp;  key={...})  Line 220 + 0xe bytes	C++     chrome.dll!WTF::HashMapTranslator&lt;std::pair&lt;WebCore::AtomicString WebCore::String&gt; WTF::PairHashTraits&lt;WTF::HashTraits&lt;WebCore::AtomicString&gt; WTF::HashTraits&lt;WebCore::String&gt;  &gt; WebCore::CaseFoldingHash&gt;::hash(const WebCore::AtomicString &amp; key={...})   Line 120 + 0xc bytes	C++     chrome.dll!WTF::HashTable&lt;WebCore::AtomicString std::pair&lt;WebCore::AtomicString WebCore::String&gt; WTF::PairFirstExtractor&lt;std::pair&lt;WebCore::AtomicString WebCore::String&gt;  &gt; WebCore::CaseFoldingHash WTF::PairHashTraits&lt;WTF::HashTraits&lt;WebCore::AtomicString&gt; WTF::HashTraits&lt;WebCore::String&gt;  &gt; WTF::HashTraits&lt;WebCore::AtomicString&gt;  &gt;::add&lt;WebCore::AtomicString WebCore::String WTF::HashMapTranslator&lt;std::pair&lt;WebCore::AtomicString WebCore::String&gt; WTF::PairHashTraits&lt;WTF::HashTraits&lt;WebCore::AtomicString&gt; WTF::HashTraits&lt;WebCore::String&gt;  &gt; WebCore::CaseFoldingHash&gt; &gt;(const WebCore::AtomicString &amp; key={...}   const WebCore::String &amp; extra={...})  Line 643 + 0x9 bytes	C++     chrome.dll!WTF::HashMap&lt;WebCore::AtomicString WebCore::String WebCore::CaseFoldingHash WTF::HashTraits&lt;WebCore::AtomicString&gt; WTF::HashTraits&lt;WebCore::String&gt;  &gt;::inlineAdd(const WebCore::AtomicString &amp; key={...}  const WebCore::String  &amp; mapped={...})  Line 241 + 0x14 bytes	C++     chrome.dll!WTF::HashMap&lt;WebCore::AtomicString WebCore::String WebCore::CaseFoldingHash WTF::HashTraits&lt;WebCore::AtomicString&gt; WTF::HashTraits&lt;WebCore::String&gt;  &gt;::add(const WebCore::AtomicString &amp; key={...}  const WebCore::String &amp;  mapped={...})  Line 269 + 0x14 bytes	C++   	chrome.dll!WebCore::HTTPHeaderMap::add(const WebCore::AtomicString &amp;  name={...}  const WebCore::String &amp; value={...})  Line 56 + 0x14 bytes	C++   	chrome.dll!WebKit::WebURLResponse::addHTTPHeaderField(const  WebKit::WebString &amp; name={...}  const WebKit::WebString &amp; value={...})   Line 172 + 0x20 bytes	C++   	chrome.dll!webkit_glue::`anonymous namespace'::PopulateURLResponse(const  GURL &amp; url={...}  const webkit_glue::ResourceLoaderBridge::ResponseInfo &amp;  info={...}  WebKit::WebURLResponse * response=0x0712f498)  Line 195 +  0x30 bytes	C++     chrome.dll!webkit_glue::WebURLLoaderImpl::Context::OnReceivedResponse(const  webkit_glue::ResourceLoaderBridge::ResponseInfo &amp; info={...}  bool  content_filtered=false)  Line 461 + 0x34 bytes	C++   	chrome.dll!ResourceDispatcher::OnReceivedResponse(int request_id=91   const ResourceResponseHead &amp; response_head={...})  Line 367 + 0x15 bytes	C++   	chrome.dll!DispatchToMethod&lt;ResourceDispatcher void (__thiscall  ResourceDispatcher::*)(int ResourceResponseHead const  &amp;) int ResourceResponseHead&gt;(ResourceDispatcher * obj=0x06aa0f50  void  (int  const ResourceResponseHead &amp;)* method=0x525a5a80  const  Tuple2&lt;int ResourceResponseHead&gt; &amp; arg={...})  Line 429 + 0x15 bytes	C++   	chrome.dll!IPC::MessageWithTuple&lt;Tuple2&lt;int ResourceResponseHead&gt;  &gt;::Dispatch&lt;ResourceDispatcher void (__thiscall  ResourceDispatcher::*)(int ResourceResponseHead const &amp;)&gt;(const  IPC::Message * msg=0x0ad997a8  ResourceDispatcher * obj=0x06aa0f50  void  (int  const ResourceResponseHead &amp;)* func=0x525a5a80)  Line 991 + 0x14  bytes	C++   	chrome.dll!ResourceDispatcher::DispatchMessageW(const IPC::Message &amp;  message={...})  Line 537 + 0x12 bytes	C++   	chrome.dll!ResourceDispatcher::OnMessageReceived(const IPC::Message &amp;  message={...})  Line 303	C++   	chrome.dll!ChildThread::OnMessageReceived(const IPC::Message &amp; msg={...})   Line 124 + 0x19 bytes	C++   	chrome.dll!IPC::ChannelProxy::Context::OnDispatchMessage(const  IPC::Message &amp; message={...})  Line 204 + 0x19 bytes	C++   	chrome.dll!DispatchToMethod&lt;IPC::ChannelProxy::Context void (__thiscall  IPC::ChannelProxy::Context::*)(IPC::Message const  &amp;) IPC::Message&gt;(IPC::ChannelProxy::Context * obj=0x04696600  void (const  IPC::Message &amp;)* method=0x51376500  const Tuple1&lt;IPC::Message&gt; &amp; arg={...})   Line 422 + 0xf bytes	C++   	chrome.dll!RunnableMethod&lt;IPC::ChannelProxy::Context void (__thiscall  IPC::ChannelProxy::Context::*)(IPC::Message const &amp;) Tuple1&lt;IPC::Message&gt;  &gt;::Run()  Line 296 + 0x1e bytes	C++   	chrome.dll!MessageLoop::RunTask(Task * task=0x0ad99780)  Line 328 + 0xf  bytes	C++   	chrome.dll!MessageLoop::DeferOrRunPendingTask(const  MessageLoop::PendingTask &amp; pending_task={...})  Line 339	C++   	chrome.dll!MessageLoop::DoWork()  Line 443 + 0xc bytes	C++   	chrome.dll!base::MessagePumpForUI::DoRunLoop()  Line 209 + 0x1d bytes	C++     chrome.dll!base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate  * delegate=0x0712fdcc  base::MessagePumpWin::Dispatcher *  dispatcher=0x00000000)  Line 52 + 0xf bytes	C++   	chrome.dll!base::MessagePumpWin::Run(base::MessagePump::Delegate *  delegate=0x0712fdcc)  Line 78 + 0x1c bytes	C++   	chrome.dll!MessageLoop::RunInternal()  Line 204 + 0x2a bytes	C++   	chrome.dll!MessageLoop::RunHandler()  Line 177	C++   	chrome.dll!MessageLoop::Run()  Line 155	C++   	chrome.dll!base::Thread::Run(MessageLoop * message_loop=0x0712fdcc)   Line 134	C++   	chrome.dll!base::Thread::ThreadMain()  Line 156 + 0x16 bytes	C++   	chrome.dll!`anonymous namespace'::ThreadFunc(void * closure=0x046782a0)   Line 26 + 0xf bytes	C++   	kernel32.dll!@BaseThreadInitThunk@12()  + 0xe bytes	   	ntdll.dll!___RtlUserThreadStart@8()  + 0x23 bytes	   	ntdll.dll!__RtlUserThreadStart@8()  + 0x1b bytes	   </pre>