<title>Issue 42152 -   chromium -    Make syncapi mockable to help us test ModelAssociators and ChangeProcessors - Project Hosting on Google Code</title> <pre> Right now we don't really have true &quot;unit&quot; tests for all of our MAs and CPs.  What we've typically   been doing is following what the ProfileSyncServiceTest does (which is actually only a bookmarks test)   and bringing up the sync system with a data type enabled  and then synthesizing client side changes   and then verifying that the sync model matches what we expect.  This is sub optimal in a few ways:    - These test require a lot of scaffolding to create.  - The current tests generally only test changes from client -&gt; server  not server -&gt; client.  - They can't test the variety of error conditions that could cause model association failures or   unrecoverable errors during change processing.    We should be able to test each of these MAs and CPs in isolation  but this requires us to be able to   mock the classes they depend on.  We've been able to do this for the chrome side stuff (mocking the   WebDataService  etc)  but we currently can not mock the syncapi.    The syncapi is a little challenging to mock since its classes are generally created on the stack.    This makes it hard to substitute mock versions  so we are going to have to change the way they are instantiated.    Here is a possible plan of attack  separated into phases (each phase should translate into one more   more CLs):    1. Replace stack creation of syncapi classes with factory methods.  Today  this is typical:      sync_api::WriteTransaction trans(share_handle());    sync_api::ReadNode autofill_root(&amp;trans);    I suggest we rewrite this to look like:      scoped_ptr&lt;sync_api::WriteTransation&gt; trans(share_handle_-&gt;CreateWriteTransaction());    scoped_ptr&lt;sync_api::ReadNode&gt; autofill_root(trans-&gt;CreateReadNode());    This change implies a few things:   - UserShare (share_handle_ is a UserShare*) becomes a class (right now it is just a struct) and grows   a few factory methods for creating transactions.   - BaseTransaction also grows a few factory methods for creating read and write nodes (note that I'd   be perfectly happy for the implementation of ReadTransaction::CreateWriteNode() to crash  but I could   be convinced otherwise).    Note that this change will also require a lot of replacing &quot;.&quot; with &quot;-&gt;&quot;.    2. Rename classes we want to mock (UserShare  ReadTransaction  WriteTransaction  ReadNode  WriteNode)   to UserShareImpl  ReadTransationImpl  etc.  The source file should be renamed syncapi_impl.[h|cc].    3. Create a new syncapi.h that contains the interfaces for the classes we want to mock.    4. Create syncapi_mocks.h that contains mocks for all of these classes (there is a tool to generate   these that I can point you to).    5. Start writing real unit tests for each MA and CP.    Thoughts?   </pre>