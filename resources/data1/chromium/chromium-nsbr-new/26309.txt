<title>Issue 26309 -   chromium -    XMLHttpRequest() fails against a SSL website with an 'invalid' certificate - Project Hosting on Google Code</title> <pre> Chrome Version       : 3.0.195.27           Safari 4 (on Mac OS X) : OK    Firefox 3.x: OK           IE 7: OK           IE 8: OK        - Go to a web site whose SSL certificate is 'invalid' (ie: signed by an unknown CA or with a dname which do not   match). Let's call it <a href="https://badcert.google.com">https://badcert.google.com</a>    - Let's say that index.html on <a href="https://badcert.google.com">https://badcert.google.com</a> contains the following javascript code:     xmlRequest = new XMLHttpRequest();   xmlRequest.open(&quot;GET&quot;  &quot;<a href="https://badcert.google.com/someStuff.xml">https://badcert.google.com/someStuff.xml</a>&quot;  false);   xmlRequest.send(null);    This code will throw an exception  probably because the XMLHTTPRequest() engine realizes that it's about to   connect to a website with an invalid SSL certificate  and prefers to abort rather than continue.          XMLHTTPRequest() should succeed and accept to connect to this site  in spite of the SSL cert  since the end-user   has already accepted the 'bad' SSL certificate for his session. Once the user accepts the risk Chrome should get out   of the way and stop trying to decide what's best for the user.        An exception because Chrome gets in the way and decides it knows better than the end user.      Any other comment?    Just as a side note  bad SSL certificates do exist out there and are not going away. A lot of products out there have   embedded web servers with automatically generated SSL certificates. While everyone understands this does not   provide an adequate level of security  the fact is that one needs to be able to log into these products  if at least to   replace these certificates. This new habit of trying to &quot;punish&quot; a web user going to a &quot;bad&quot; web site breaks   functionality and in the long run will simply decrease security as all these products will switch to plain text HTTP   instead.   </pre>