<title>Issue 38082 -   chromium -    Implement RFC 5746: TLS Renegotiation Indication Extension - Project Hosting on Google Code</title> <pre> Chrome Version       : all versions  URLs (if applicable) : <a href="http://tools.ietf.org/html/rfc5746">http://tools.ietf.org/html/rfc5746</a>           Safari 4: FAIL    Firefox 3.x: FAIL           IE 7: FAIL           IE 8: FAIL    In 2009 an important security hole in TLS was discovered as explained by  <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3555">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3555</a>    [[  The TLS protocol  and the SSL protocol 3.0 and possibly earlier  as used in Microsoft Internet   Information Services (IIS) 7.0  mod_ssl in the Apache HTTP Server 2.2.14 and earlier  OpenSSL   before 0.9.8l  GnuTLS 2.8.5 and earlier  Mozilla Network Security Services (NSS) 3.12.4 and   earlier  multiple Cisco products  and other products  does not properly associate renegotiation   handshakes with an existing connection  which allows man-in-the-middle attackers to insert   data into HTTPS sessions  and possibly other types of sessions protected by TLS or SSL  by   sending an unauthenticated request that is processed retroactively by a server in a post-  renegotiation context  related to a &quot;plaintext injection&quot; attack  aka the &quot;Project Mogul&quot; issue.  ]]    RFC 5746 published recently explains what is needed to fix this     [[    Secure Socket Layer (SSL) and Transport Layer Security (TLS)     renegotiation are vulnerable to an attack in which the attacker forms     a TLS connection with the target server  injects content of his     choice  and then splices in a new TLS connection from a client.  The     server treats the client's initial TLS handshake as a renegotiation     and thus believes that the initial data transmitted by the attacker     is from the same entity as the subsequent client data.  This     specification defines a TLS extension to cryptographically tie     renegotiations to the TLS connections they are being performed over      thus preventing this attack.&quot;  ]]    see: <a href="http://tools.ietf.org/html/rfc5746">http://tools.ietf.org/html/rfc5746</a>    As Bruno Harbulot explained in <a title="[Mac] Ignoring optional client-cert requests from server" class=closed_ref href="/p/chromium/issues/detail?id=37765"> issue 37765 </a> there are two things needed    [[  having RFC 5746 supported in Apache Httpd  (OpenSSL 0.9.8m doesn't seem to have made its way into many distributions yet  not  sure how many may have backported the patch) and supported in Chrome.    <a href="http://lists.apple.com/archives/apple-cdsa/2010/Feb/msg00042.html">http://lists.apple.com/archives/apple-cdsa/2010/Feb/msg00042.html</a>    <a href="http://lists.apple.com/archives/apple-cdsa/2010/Feb/msg00044.html">http://lists.apple.com/archives/apple-cdsa/2010/Feb/msg00044.html</a>  ]]    My understanding of this is very limited. I'll leave it to the specialists to fill out the details in this   thread. </pre>