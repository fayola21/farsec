<title>Issue 38103 -   chromium -    SSLClientSocketTest.Read_FullDuplex times out on Ubuntu Karmic - Project Hosting on Google Code</title> <pre> mmoss reported that the SSLClientSocketTest.Read_FullDuplex unit test  often times out on Ubuntu Karmic.  He noted that the differences in SSL  traces between a passing Hardy run and a failing Karmic run are the  following:      The main  consistent difference seems to be that  when Karmic fails     [the ssl3_change_cipher_spec] packet comes from the server before the    client has a chance to write the GET request:    [... snipped]    On Hardy  [the ssl3_change_cipher_spec] frame seems to always comes    later in the exchange  after the client sends the GET request.    When the unit test times out  the sock-&gt;Write() call returns  net:: ERR_IO_PENDING  and we block forever in the  callback2.WaitForResult() call:      rv = sock-&gt;Write(request_buffer  request_text.size()  &amp;callback2);    EXPECT_TRUE(rv &gt;= 0 || rv == net::ERR_IO_PENDING);      if (rv == net::ERR_IO_PENDING)      rv = callback2.WaitForResult();    I found that sock-&gt;Write() returns net::ERR_IO_PENDING because  NSS's ssl_SecureSend function fails with PR_WOULD_BLOCK_ERROR   here in sslsecur.c:        /* If any of these is non-zero  the initial handshake is not done. */      if (!ss-&gt;firstHsDone) {          ssl_Get1stHandshakeLock(ss);          if (ss-&gt;handshake || ss-&gt;nextHandshake || ss-&gt;securityHandshake) {              rv = ssl_Do1stHandshake(ss);  &lt;=== HERE          }          ssl_Release1stHandshakeLock(ss);      }    So  the first issue to consider is that when SSL false start  is enabled  we still wait until we have received the server's  Finished message to set ss-&gt;firstHsDone to PR_TRUE  so we are  calling ssl_Do1stHandshake(ss) unnecessarily here.    This is compensated by the following code in ssl_Do1stHandshake:            if (ss-&gt;version &gt;= SSL_LIBRARY_VERSION_3_0 &amp;&amp;              (ss-&gt;ssl3.hs.ws == wait_change_cipher ||               ss-&gt;ssl3.hs.ws == wait_new_session_ticket) &amp;&amp;              ssl3_CanFalseStart(ss)) {              break;          }          rv = (*ss-&gt;handshake)(ss);    so that we don't call (*ss-&gt;handshake)(ss) when we're false  starting.    The bug is that if we have received the server's ChangeCipherSpec  but not Finished  ss-&gt;ssl3.hs.ws will be wait_finished  and in  that case we will incorrectly call (*ss-&gt;handshake)(ss).  Apparently (*ss-&gt;handshake)(ss) returns SECFailure with the  PR_WOULD_BLOCK_ERROR in that case.    An obvious fix is to add               ss-&gt;ssl3.hs.ws == wait_finished ||  to ssl_Do1stHandshake.  (A similar test in  ssl3_GatherCompleteHandshake should also be changed.)  But perhaps  ssl_SecureSend shouldn't call ssl_Do1stHandshake when we're false  starting.   </pre>