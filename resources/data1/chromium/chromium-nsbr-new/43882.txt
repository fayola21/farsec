<title>Issue 43882 -   chromium -    PatchNtdll( ) [wow_helper.cpp] fails to patch when wow_helper.exe is compiled with Visual Studio 2008 because WholeProgramOptimization violates function ordering assumptions - Project Hosting on Google Code</title> <pre> The logic to calculate the patch memory size in PatchNtdll() [wow_helper.cpp]       size_t size = reinterpret_cast&lt;char*&gt;(&amp;TargetEnd) -                  reinterpret_cast&lt;char*&gt;(&amp;TargetNtMapViewOfSection);    is based on the assumption that the order of functions  TargetNtMapViewOfSection and TargetEnd in the wow_helper.exe object will  match the order in the source text. This assumption is violated with  VS2008's optimizer.    Building the Release x64 target with Visual Studio 2005 (even with  WholeProgramOptimization=1) emits the object code in wow_helper.exe such  that the function TargetNtMapViewOfSection (at 0x000014d0) is immediately  followed by TargetEnd (at 0x00001560)  such that the disasm of to calculate  &quot;size&quot; looks like:    00000001`400016f7 488d1d62feffff  lea     rbx [wow_helper!TargetEnd  (00000001`40001560)]  00000001`400016fe 4c8d05cbfdffff  lea      <a href="/p/chromium/source/detail?r=8">r8</a> [wow_helper!TargetNtMapViewOfSection (00000001`400014d0)]  00000001`40001705 492bd8          sub     rbx <a href="/p/chromium/source/detail?r=8">r8</a>    However  the Release x64 target built with Visual Studio *2008* (with  WholeProgramOptimization=1; enabled in the wow_helper.vsproj) rearranges  the functions in wow_helper.exe such that the code for the function  TargetNtMapViewOfSection (at 0x00008df0) now appears *after* that for  TargetEnd (at 0x00008de0). The disasm now looks like:    00000001`4000979d 488d053cf6ffff  lea     rax [wow_helper!TargetEnd  (00000001`40008de0)]  00000001`400097a4 488d0d45f6ffff  lea      rcx [wow_helper!TargetNtMapViewOfSection (00000001`40008df0)]  00000001`400097ab 482bc1          sub     rax rcx    In this case  &quot;size&quot; becomes a very large positive value (0xFFFFF...) and  the subsequent WriteProcessMemory( ) with this size fails and the patching  process fails.    Disabling WholeProgramOptimization on VS2008 inhibits such function  rearrangement and gets wow_helper working correctly again.    </pre>