<title>Issue 30659 -   chromium -    Security: restrict sqlite functions in the function authorizer - Project Hosting on Google Code</title> <pre> As discussed over e-mail  we should use the function authorizer to deny   access to dangerous functions.    Ideally  we could use a whitelist and not a blacklist. A whitelist has two   benefits:  1) It protects us from any dangerous functions getting activated when we   pull in newer  more capable versions of sqlite.  2) It'll serve as a useful definitive list as to what functions we need to   keep supporting :)    Regarding the dangerous functions  at least the following must not be   allowed:  a) icu_load_collation() - explicitly called out in   third_party/sqlite/ext/icu/README.txt as being dangerous.  b) fts2_tokenizer() - currently already disabled via a #define. Needs to be   disabled in the authorizer so we can use raw upstream sqlite one day.  c) load_extension() - sounds dubious  d) random() / randomblob() - ideally we can disable these. It's not a huge   deal but we've had complaints in the past about exposing weak RNGs to   users  or tracking of browser instance via internal RNG state. </pre>