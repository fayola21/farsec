<title>Issue 11079 -   chromium -    Single threaded PAC resolution can kill performance of search - Project Hosting on Google Code</title> <pre> I debugged a slowness from a user's log where the combination of background requests + singled-  threaded PAC resolving + and slow DNS resolving for non-existent hosts became pretty bad.    ====================  Here is the symptom:  ====================    User types &quot;test2&quot; into omnibox and hits enter. On occasion it takes 16+ seconds to load the   google search results.    ====================  Here is what happened:  ====================    1. User types &quot;test2&quot; into the omnibox and hits enter.    2. Omnibox starts a background request [A] &lt;http://test2/ This is the request that will be used   to populate a &quot;Did you mean http://test2/ infobar if it succeeds.    ==&gt; While this request [A] is intended to be a background query  I will show how it actually ends   up blocking the load of the intended google search results. &lt;===    3. Omnibox starts a request for [B] &lt;<a href="http://www.google.com?q=test2">http://www.google.com?q=test2</a>&gt;. This is the load that the   user actually cares about.    4. We start to resolve the proxy for [A] &lt;http://test2/ . Since the user has a custom PAC   script  we kick it over to the solo proxy resolver thread to run in V8:    // User's PAC script:    function FindProxyForURL(url  host) {    if (isInNet(host  &quot;10.63.0.0&quot;  &quot;255.255.0.0&quot;))      return &quot;PROXY 129.184.137.55:80&quot;;      ...    &lt;Four more &quot;isInNet(host  XXX  YYY)&quot; tests here&gt;    ..      return &quot;DIRECT&quot;;  }    In particular  the javascript calls to isInNet(host  ...) will do blocking DNS resolves  since the   specified |host|  &quot;test2&quot;  is not an IP address. Unfortunatley dnsResolve(&quot;test2&quot;) is going to   take 16 seconds to complete (with a failure)  as there is no host &quot;test2&quot; on this user's network   (nor was that their intent anyway).    Meanwhile  the request [B] &lt;<a href="http://www.google.com?q=test2">http://www.google.com?q=test2</a>&gt; will be blocked waiting on its proxy   resolve step. Not because it takes a long time to run FindProxyForURL(&quot;<a href="http://www.google.com?">http://www.google.com?</a>  q=test&quot;)  but because the previous FindProxyForURL(&quot;http://test2/&quot; is holding up the V8 thread   until the DNS resolve completes.    ====================  Solutions:  ====================    Obviously the bottleneck here is that there is only a single thread running the PAC scripts. So if   one proxy resolve takes a long time (probably because it is doing DNS resolves)  we are hosed.    The obvious solution is to have a pool of threads running the v8 proxy resolvers  each with with   its own copy of the script's context.    The cons are going to be more memory usage  more complexity  and possibly break compatibility on   some scripts (i.e. for scripts stupid enough to rely on global state between runs; probably not   that many)      Is this a problem we want to address? </pre>