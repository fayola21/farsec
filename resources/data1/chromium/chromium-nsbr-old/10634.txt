<title>Issue 10634 -   chromium -    Randomize the data stored in bloom filters - Project Hosting on Google Code</title> <pre> The hash functions used in the SafeBrowsing bloom filters should be examined for   possible reductions in their false positive rate.    Our current implementation uses four hash functions on a filter of varying size. We   want to make sure that we don't increase the computational expense of the   functions  as they are in a code path that directly impacts the latency experienced   by the end user.    A possibility for a global reduction in the false positive rate is to use a random   seed in the hash functions so that users with the exact same SafeBrowsing data but   different seeds will not end up with the same bloom filter.    See <a href="http://crbug.com/10584">http://crbug.com/10584</a> for more details about the importance of keeping the   false positive rate the bloom filters as low as possible. </pre>