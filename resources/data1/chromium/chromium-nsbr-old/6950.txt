<title>Issue 6950 -   chromium -    DCHECK hit in RenderViewHost::SetNavigationsSuspended - Project Hosting on Google Code</title> <pre> I hit this when running UI tests in singleproc on my machine. SSLUITest.TestHTTPSExpiredCertAndDontProceed triggered it. suspend is false and navigations_suspended_ is also false  which triggers the DCHECK.    Here's the complete callstack:     	ntdll.dll!7c90e4f4() 	   	[Frames below may be incorrect and/or missing  no symbols loaded for   ntdll.dll]	   	ntdll.dll!7c90df3c() 	   	kernel32.dll!7c8025db() 	   	kernel32.dll!7c802542() 	   	chrome.dll!logging::DisplayDebugMessage(const   std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &amp;   str=&quot;[4212:5440:590345171:FATAL:render_view_host.cc(225)] Check failed:   navigations_suspended_ != suspend. &quot;)  Line 326 + 0x11 bytes	C++   	chrome.dll!logging::LogMessage::~LogMessage()  Line 506 + 0x18 bytes	C++  &gt;	chrome.dll!RenderViewHost::SetNavigationsSuspended(bool suspend=false)  Line   226	C++   	chrome.dll!RenderViewHostManager::ShouldClosePage(bool proceed=true)  Line   217	C++   	chrome.dll!WebContents::ShouldClosePage(bool proceed=true)  Line 306	C++   	chrome.dll!RenderViewHost::OnMsgShouldCloseACK(bool proceed=true)  Line 1257   + 0x1c bytes	C++   	chrome.dll!DispatchToMethod&lt;RenderViewHost void (__thiscall   RenderViewHost::*)(bool) bool&gt;(RenderViewHost * obj=0x04f915e0  void (bool)*   method=0x01591b10  const bool &amp; arg=true)  Line 388 + 0xe bytes	C++   	chrome.dll!IPC::MessageWithTuple&lt;bool&gt;::Dispatch&lt;RenderViewHost void   (__thiscall RenderViewHost::*)(bool)&gt;(const IPC::Message * msg=0x05d39e98    RenderViewHost * obj=0x04f915e0  void (bool)* func=0x01591b10)  Line 1040 + 0x11   bytes	C++   	chrome.dll!RenderViewHost::OnMessageReceived(const IPC::Message &amp; msg={...})    Line 726 + 0x12 bytes	C++   	chrome.dll!BrowserRenderProcessHost::OnMessageReceived(const IPC::Message &amp;   msg={...})  Line 616 + 0x13 bytes	C++   	chrome.dll!IPC::ChannelProxy::Context::OnDispatchMessage(const IPC::Message &amp;   message={...})  Line 182 + 0x1b bytes	C++   	chrome.dll!DispatchToMethod&lt;IPC::ChannelProxy::Context void (__thiscall   IPC::ChannelProxy::Context::*)(IPC::Message const   &amp;) IPC::Message&gt;(IPC::ChannelProxy::Context * obj=0x04fd78f8  void (const   IPC::Message &amp;)* method=0x01ae00f0  const Tuple1&lt;IPC::Message&gt; &amp; arg={...})  Line 393   + 0xf bytes	C++   	chrome.dll!RunnableMethod&lt;IPC::ChannelProxy::Context void (__thiscall   IPC::ChannelProxy::Context::*)(IPC::Message const &amp;) Tuple1&lt;IPC::Message&gt; &gt;::Run()    Line 312 + 0x1e bytes	C++   	chrome.dll!MessageLoop::RunTask(Task * task=0x05d39e70)  Line 308 + 0xf bytes	  C++   	chrome.dll!MessageLoop::DeferOrRunPendingTask(const MessageLoop::PendingTask   &amp; pending_task={...})  Line 319	C++   	chrome.dll!MessageLoop::DoWork()  Line 408 + 0xc bytes	C++   	chrome.dll!base::MessagePumpForUI::DoRunLoop()  Line 208 + 0x1d bytes	C++   	  chrome.dll!base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate *   delegate=0x0012f844  base::MessagePumpWin::Dispatcher * dispatcher=0x05bc77d0)  Line   52 + 0xf bytes	C++   	chrome.dll!MessageLoop::RunInternal()  Line 193	C++   	chrome.dll!MessageLoop::RunHandler()  Line 181	C++   	chrome.dll!MessageLoopForUI::Run(base::MessagePumpWin::Dispatcher *   dispatcher=0x05bc77d0)  Line 559	C++   	chrome.dll!BrowserMain(const MainFunctionParams &amp; parameters={...})  Line 551	  C++   	chrome.dll!ChromeMain(HINSTANCE__ * instance=0x00400000    sandbox::SandboxInterfaceInfo * sandbox_info=0x0012fe88  wchar_t *   command_line=0x0002092a)  Line 312 + 0xc bytes	C++   	chrome.exe!wWinMain(HINSTANCE__ * instance=0x00400000  HINSTANCE__ *   prev_instance=0x00000000  wchar_t * command_line=0x0002092a  int __formal=0)  Line 95   + 0x12 bytes	C++   	chrome.exe!__tmainCRTStartup()  Line 324 + 0x35 bytes	C   	chrome.exe!wWinMainCRTStartup()  Line 196	C   	kernel32.dll!7c817067() 	    I spoke with Jay and he suggested Charley and Ojan are most knowledgable.    I'm making this a 1 as it's leading to flakeyness in the UI Tests. </pre>