<title>Issue 12887 -   chromium -    Multiple instances of TestingAutomationProvider created in ui_test - Project Hosting on Google Code</title> <pre> To reduce the flakiness I tried to make a change (<a href="/p/chromium/source/detail?r=16903">r16903</a>) in ui_test so we   close multiple browser window synchronously during shutdown. The change   seemed to fix some issue in Linux UI test (see <a href="http://crbug.com/12334">http://crbug.com/12334</a>)  but   it causes new crashes on chromebot.    chrome_2610000!`anonymous namespace'::PureCall  chrome_2610000!_purecall  chrome_2610000!base::ObjectWatcher::StartWatching  chrome_2610000!NotificationService::Notify  chrome_2610000!BrowserList::RemoveBrowser  chrome_2610000!Browser::~Browser  chrome_2610000!Browser::`scalar deleting destructor'  chrome_2610000!BrowserView::~BrowserView  chrome_2610000!BrowserView::`scalar deleting destructor'  chrome_2610000!views::View::~View  chrome_2610000!views::NonClientView::`scalar deleting destructor'  chrome_2610000!views::View::DoRemoveChildView  chrome_2610000!views::View::RemoveAllChildViews  chrome_2610000!views::RootView::~RootView  chrome_2610000!BrowserRootView::`scalar deleting destructor'  chrome_2610000!views::WidgetWin::~WidgetWin  chrome_2610000!BrowserFrameWin::`scalar deleting destructor'  chrome_2610000!views::WidgetWin::OnFinalMessage  chrome_2610000!views::WindowWin::OnFinalMessage  chrome_2610000!views::WidgetWin::WndProc  user32!InternalCallWinProc  user32!UserCallWinProcCheckWow  user32!CallWindowProcAorW  user32!CallWindowProcW  chrome_2610000!views::FocusWindowCallback  user32!InternalCallWinProc  user32!UserCallWinProcCheckWow  user32!DispatchClientMessage  user32!__fnNCDESTROY  ntdll!KiUserCallbackDispatcher  chrome_2610000!views::WidgetWin::DestroyWindow  chrome_2610000!MessageLoop::RunTask  chrome_2610000!MessageLoop::DoWork  chrome_2610000!base::MessagePumpForUI::DoRunLoop  chrome_2610000!base::MessagePumpWin::RunWithDispatcher  chrome_2610000!MessageLoop::RunInternal  chrome_2610000!MessageLoop::RunHandler  chrome_2610000!MessageLoopForUI::Run  chrome_2610000!`anonymous namespace'::RunUIMessageLoop  chrome_2610000!BrowserMain  chrome_2610000!ChromeMain  chrome!wWinMain  chrome!__tmainCRTStartup  kernel32!BaseProcessStart    Looking at the dump file  I found there are two TestingAutomationProvider   are created and inserted to BrowserList::observers_    0:000&gt; dt /r chrome_2610000!BrowserList::observers_     +0x000 _Alval           : std::allocator&lt;BrowserList::Observer *&gt;     +0x004 _Myfirst         : 0x01fb0248  -&gt; 0x01fbe4e8   BrowserList::Observer        +0x000 __VFN_table : 0x03003848      +0x008 _Mylast          : 0x01fb0248  -&gt; 0x01fbe4e8   BrowserList::Observer        +0x000 __VFN_table : 0x03003848      +0x00c _Myend           : 0x01fb024c  -&gt; (null)     0:000&gt; ln 0x03003848  (03003848)   chrome_2610000!TestingAutomationProvider::`vftable'   |    (03003854)   chrome_2610000!TestingAutomationProvider::`vftable'  Exact matches:    We can also see that there are two AutomationProviders on AutomationProviderList.    0:000&gt; dt /r chrome_2610000!AutomationProviderList::instance_  0x01fb98d0      +0x000 automation_providers_ : std::vector&lt;AutomationProvider   * std::allocator&lt;AutomationProvider *&gt; &gt;        +0x000 _Alval           : std::allocator&lt;AutomationProvider *&gt;        +0x004 _Myfirst         : 0x01fb0200  -&gt; 0x01fbe460   AutomationProvider           +0x008 ref_count_       : 0           +0x000 __VFN_table : 0x0453f8c0            +0x004 __VFN_table : 0x0307b9d4            +0x00c channel_         : scoped_ptr&lt;IPC::ChannelProxy&gt;           +0x010 initial_load_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x014 new_tab_ui_load_observer_ :   scoped_ptr&lt;NotificationObserver&gt;           +0x018 find_in_page_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x01c dom_operation_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x020 dom_inspector_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x024 browser_tracker_ : scoped_ptr&lt;AutomationBrowserTracker&gt;           +0x028 tab_tracker_     : scoped_ptr&lt;AutomationTabTracker&gt;           +0x02c window_tracker_  : scoped_ptr&lt;AutomationWindowTracker&gt;           +0x030 cwindow_tracker_ :   scoped_ptr&lt;AutomationConstrainedWindowTracker&gt;           +0x034 autocomplete_edit_tracker_ :   scoped_ptr&lt;AutomationAutocompleteEditTracker&gt;           +0x038 restore_tracker_ :   scoped_ptr&lt;NavigationControllerRestoredObserver&gt;           +0x03c login_handler_map_ : std::map&lt;NavigationController   * LoginHandler * std::less&lt;NavigationController   *&gt; std::allocator&lt;std::pair&lt;NavigationController * const LoginHandler *&gt; &gt;   &gt;           +0x048 port_containers_ : std::map&lt;int ExtensionPortContainer   * std::less&lt;int&gt; std::allocator&lt;std::pair&lt;int const  ExtensionPortContainer   *&gt; &gt; &gt;           +0x054 notification_observer_list_ :   ObserverList&lt;NotificationObserver 0&gt;           +0x06c redirect_query_  : 0           +0x070 consumer_        : CancelableRequestConsumerT&lt;int 0&gt;           +0x080 profile_         : 0x01fce160 Profile           +0x084 reply_message_   : (null)         +0x008 _Mylast          : 0x01fb0200  -&gt; 0x01fbe460   AutomationProvider           +0x008 ref_count_       : 0           +0x000 __VFN_table : 0x0453f8c0            +0x004 __VFN_table : 0x0307b9d4            +0x00c channel_         : scoped_ptr&lt;IPC::ChannelProxy&gt;           +0x010 initial_load_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x014 new_tab_ui_load_observer_ :   scoped_ptr&lt;NotificationObserver&gt;           +0x018 find_in_page_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x01c dom_operation_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x020 dom_inspector_observer_ : scoped_ptr&lt;NotificationObserver&gt;           +0x024 browser_tracker_ : scoped_ptr&lt;AutomationBrowserTracker&gt;           +0x028 tab_tracker_     : scoped_ptr&lt;AutomationTabTracker&gt;           +0x02c window_tracker_  : scoped_ptr&lt;AutomationWindowTracker&gt;           +0x030 cwindow_tracker_ :   scoped_ptr&lt;AutomationConstrainedWindowTracker&gt;           +0x034 autocomplete_edit_tracker_ :   scoped_ptr&lt;AutomationAutocompleteEditTracker&gt;           +0x038 restore_tracker_ :   scoped_ptr&lt;NavigationControllerRestoredObserver&gt;           +0x03c login_handler_map_ : std::map&lt;NavigationController   * LoginHandler * std::less&lt;NavigationController   *&gt; std::allocator&lt;std::pair&lt;NavigationController * const LoginHandler *&gt; &gt;   &gt;           +0x048 port_containers_ : std::map&lt;int ExtensionPortContainer   * std::less&lt;int&gt; std::allocator&lt;std::pair&lt;int const  ExtensionPortContainer   *&gt; &gt; &gt;           +0x054 notification_observer_list_ :   ObserverList&lt;NotificationObserver 0&gt;           +0x06c redirect_query_  : 0           +0x070 consumer_        : CancelableRequestConsumerT&lt;int 0&gt;           +0x080 profile_         : 0x01fce160 Profile           +0x084 reply_message_   : (null)         +0x00c _Myend           : 0x01fb0204  -&gt; (null)      =03219a00 AutomationProviderList::instance_ : 0x01fb98d0   AutomationProviderList        +0x000 automation_providers_ : std::vector&lt;AutomationProvider   * std::allocator&lt;AutomationProvider *&gt; &gt;           +0x000 _Alval           : std::allocator&lt;AutomationProvider *&gt;           +0x004 _Myfirst         : 0x01fb0200  -&gt; 0x01fbe460   AutomationProvider           +0x008 _Mylast          : 0x01fb0200  -&gt; 0x01fbe460   AutomationProvider           +0x00c _Myend           : 0x01fb0204  -&gt; (null)         =03219a00 AutomationProviderList::instance_ : 0x01fb98d0   AutomationProviderList           +0x000 automation_providers_ : std::vector&lt;AutomationProvider   * std::allocator&lt;AutomationProvider *&gt; &gt;           =03219a00 AutomationProviderList::instance_ : 0x01fb98d0   AutomationProviderList    I don't know how we get into this stage. The plausible explanation is that   BrowserMain somehow gets called twice. (Maybe this also explain the flakiness we see on TabRestore?)      </pre>