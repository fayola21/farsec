<title>Issue 11588 -   chromium -    base/logging.cc uses localtime()  which is not thread-safe - Project Hosting on Google Code</title> <pre> Chrome Version       : 2.0.178.0 (Developer Build 15292)    LogMessage::Init defined in base/logging.cc contains a potential race  connected with using localtime()  which is not thread-safe (see man  localtime  the recommended solution is to use localtime_r())    To reproduce the race:  1. Install ThreadSanitizer:  <a href="http://code.google.com/p/data-race-test/wiki/ThreadSanitizer">http://code.google.com/p/data-race-test/wiki/ThreadSanitizer</a>    2. Run base unittests under ThreadSanitizer:  valgrind --tool=tsan --pure-happens-before --file-prefix-to-cut=/src/  ../sconsbuild/Debug/base_unittests  --gtest_filter=ObserverListThreadSafeTest.CrossThreadObserver    ==7545== WARNING: Possible data race during write of size 4 at 0x2882838C: {{{  ==7545==    T2 (locks held: {}):  ==7545==     #0  __offtime /lib32/libc-2.7.so  ==7545==     #1  __tz_convert /lib32/libc-2.7.so  ==7545==     #2  localtime /lib32/libc-2.7.so  ==7545==     #3  logging::LogMessage::Init(char const*  int)  base/logging.cc:404  ==7545==     #4  logging::LogMessage::LogMessage(char const*  int)  base/logging.cc:375  ==7545==     #5  (anonymous namespace)::AddRemoveThread::AddTask()  base/observer_list_unittest.cc:126  ==7545==     #6  void DispatchToMethod&lt;(anonymous  namespace)::AddRemoveThread  void ((anonymous  namespace)::AddRemoveThread::*)()&gt;((anonymous namespace)::AddRemoveThread*   void ((anonymous namespace)::AddRemoveThread::*)()  Tuple0 const&amp;)  base/tuple.h:383  ==7545==     #7  ScopedRunnableMethodFactory&lt;(anonymous  namespace)::AddRemoveThread&gt;::RunnableMethod&lt;void ((anonymous  namespace)::AddRemoveThread::*)()  Tuple0&gt;::Run() base/task.h:197  ==7545==     #8  ScopedTaskFactory&lt;ScopedRunnableMethodFactory&lt;(anonymous  namespace)::AddRemoveThread&gt;::RunnableMethod&lt;void ((anonymous  namespace)::AddRemoveThread::*)()  Tuple0&gt; &gt;::TaskWrapper::Run() base/task.h:92  ==7545==     #9  MessageLoop::RunTask(Task*) base/message_loop.cc:308  ==7545==     #10  MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&amp;)  base/message_loop.cc:316  ==7545==     #11 MessageLoop::DoWork() base/message_loop.cc:416  ==7545==   Concurrent write(s) happened at (OR AFTER) these points:  ==7545==    T1 (locks held: {}):  ==7545==     #0  __offtime /lib32/libc-2.7.so  ==7545==     #1  __tz_convert /lib32/libc-2.7.so  ==7545==     #2  localtime /lib32/libc-2.7.so  ==7545==     #3  logging::LogMessage::LogMessage(char const*  int)  base/logging.cc:375  ==7545==     #4  (anonymous namespace)::AddRemoveThread::AddTask()  base/observer_list_unittest.cc:126  ==7545==     #5  void DispatchToMethod&lt;(anonymous  namespace)::AddRemoveThread  void ((anonymous  namespace)::AddRemoveThread::*)()&gt;((anonymous namespace)::AddRemoveThread*   void ((anonymous namespace)::AddRemoveThread::*)()  Tuple0 const&amp;)  base/tuple.h:383  ==7545==     #6  ScopedRunnableMethodFactory&lt;(anonymous  namespace)::AddRemoveThread&gt;::RunnableMethod&lt;void ((anonymous  namespace)::AddRemoveThread::*)()  Tuple0&gt;::Run() base/task.h:197  ==7545==     #7  ScopedTaskFactory&lt;ScopedRunnableMethodFactory&lt;(anonymous  namespace)::AddRemoveThread&gt;::RunnableMethod&lt;void ((anonymous  namespace)::AddRemoveThread::*)()  Tuple0&gt; &gt;::TaskWrapper::Run() base/task.h:92  ==7545==     #8  MessageLoop::RunTask(Task*) base/message_loop.cc:308  ==7545==     #9   MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&amp;)  base/message_loop.cc:316  ==7545==   Concurrent read(s) happened at (OR AFTER) these points:  ==7545==    T1 (locks held: {}):  ==7545==     #0  logging::LogMessage::Init(char const*  int)  base/logging.cc:413  ==7545==     #1  logging::LogMessage::LogMessage(char const*  int)  base/logging.cc:375  ==7545==     #2  (anonymous namespace)::AddRemoveThread::AddTask()  base/observer_list_unittest.cc:126  ==7545==     #3  void DispatchToMethod&lt;(anonymous  namespace)::AddRemoveThread  void ((anonymous  namespace)::AddRemoveThread::*)()&gt;((anonymous namespace)::AddRemoveThread*   void ((anonymous namespace)::AddRemoveThread::*)()  Tuple0 const&amp;)  base/tuple.h:383  ==7545==     #4  ScopedRunnableMethodFactory&lt;(anonymous  namespace)::AddRemoveThread&gt;::RunnableMethod&lt;void ((anonymous  namespace)::AddRemoveThread::*)()  Tuple0&gt;::Run() base/task.h:197  ==7545==     #5  ScopedTaskFactory&lt;ScopedRunnableMethodFactory&lt;(anonymous  namespace)::AddRemoveThread&gt;::RunnableMethod&lt;void ((anonymous  namespace)::AddRemoveThread::*)()  Tuple0&gt; &gt;::TaskWrapper::Run() base/task.h:92  ==7545==     #6  MessageLoop::RunTask(Task*) base/message_loop.cc:308  ==7545==     #7   MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&amp;)  base/message_loop.cc:316  ==7545==     #8  MessageLoop::DoWork() base/message_loop.cc:416  ==7545==     #9   base::MessagePumpDefault::Run(base::MessagePump::Delegate*)  base/message_pump_default.cc:23  ==7545== }}}      Line 404 of base/logging.cc contains the racey call.   </pre>