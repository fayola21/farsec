<title>Issue 23135 -   chromium -    Remove the need for extension bindings to keep a list of registered contexts - Project Hosting on Google Code</title> <pre> From a thread with Adam Barth:    - Add a ScriptContext abstraction to the WebKit API  which wraps a   v8::Context. It should expose a way to get at the v8::Context it wraps  so   that I can use the v8 APIs to execute script and access hidden variables.   There should also be a way to get from a ScriptContext to the WebFrame it's   associated with. Ideally  it should also be possible to hang some metadata   off a ScriptContext  so we can tell what extension and RenderView it   belongs to. We might be able to do this through the V8 API  though.    - Have V8Proxy keep track of a list of &quot;active&quot; ScriptContexts  including   isolated worlds  and expose a WebKit API to access and iterate through this   list. A script context is &quot;inactive&quot; if it becomes detached from its   associated WebFrame  or if V8 GCs it  or if it's an isolated world and its   associated WebFrame detaches its script context.    - Keep the WebKit methods that inform embedders that a ScriptContext was   created or went inactive  but have them pass along the ScriptContext. The   methods should coincide with a ScriptContext being added or removed from   V8Proxy's &quot;active&quot; list. This will allow us to clean up per-context data we   create  and unregister that context for events and such. </pre>