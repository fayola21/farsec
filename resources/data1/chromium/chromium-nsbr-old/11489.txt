<title>Issue 11489 -   chromium -    Crash - tcmalloc::ThreadCache::FreeList::PopRange(int void * * void * *) - Project Hosting on Google Code</title> <pre> This crash was detected in 2.0.177.1 and appears to be a regression from 2.0.174.0. It is currently ranked #1 (based on the relative number of reports in the release).  There have been 548 reports from 345 clients. Search query: http://crash/search?query=Chrome+2.0.177.1+tcmalloc%3A%3AThreadCache%3A%3AFreeList%3A%3APopRange%28int%2Cvoid+*+*%2Cvoid+*+*%29 ---------------------------- *       Summary Data       * ---------------------------- Report Link: http://crash/reportdetail?reportid=3b039363eaf60a72 Mini Dump Link: http://crash/file?reportid=3b039363eaf60a72&amp;name=upload_file_minidump  Uptime: 407 sec User Comments: null OS: Windows 7  CPU Architecture: x86 CPU Info: GenuineIntel family 6 model 14 stepping 12 rept: null ptype: browser plat: Win32  ---------------------------- *      Loaded Modules      * ----------------------------     chrome.dll     chrome.exe     KERNELBASE.dll     kernel32.dll     ntdll.dll     ole32.dll     user32.dll  ---------------------------- *        Crash Trace       * ----------------------------               [thread_cache.h:222] - tcmalloc::ThreadCache::FreeList::PopRange(int void * * void * *)                  [ucnvmbcs.c:4480] - ucnv_SBCSFromUTF8              [thread_cache.cc:260] - tcmalloc::ThreadCache::Scavenge()               [thread_cache.h:382] - tcmalloc::ThreadCache::Deallocate(void * unsigned int)                  [tcmalloc.cc:686] - `anonymous namespace&amp;#39;::do_free_with_callback(void * void (*)(void *))                     [xstring:2074] - std::basic_string&amp;lt;char std::char_traits&amp;lt;char&amp;gt; std::allocator&amp;lt;char&amp;gt; &amp;gt;::_Tidy(bool unsigned int)            [chrome.dll+0x00044281] - net::CookieMonster::CanonicalCookie::~CanonicalCookie()            [cookie_monster.cc:532] - net::CookieMonster::InternalDeleteCookie(std::_Tree&amp;lt;std::_Tmap_traits&amp;lt;std::basic_string&amp;lt;char std::char_traits&amp;lt;char&amp;gt; std::allocator&amp;lt;char&amp;gt; &amp;gt; net::CookieMonster::CanonicalCookie * std::less&amp;lt;std::basic_string&amp;lt;char std::char_traits&amp;lt;char&amp;gt; std::allocator&amp;lt;char&amp;gt; &amp;gt; &amp;gt; std::allocator&amp;lt;std::pair&amp;lt;std::basic_string&amp;lt;char std::char_traits&amp;lt;char&amp;gt; std::allocator&amp;lt;char&amp;gt; &amp;gt; const  net::CookieMonster::CanonicalCookie *&amp;gt; &amp;gt; 1&amp;gt; &amp;gt;::iterator bool)            [cookie_monster.cc:655] - net::CookieMonster::DeleteAll(bool) [chrome_url_request_context.cc:323] - ChromeURLRequestContext::~ChromeURLRequestContext()            [chrome.dll+0x0012e81b] - ChromeURLRequestContext::`vector deleting destructor&amp;#39;(unsigned int)                [ref_counted.h:107] - base::RefCountedThreadSafe&amp;lt;URLRequestContext&amp;gt;::Release()            [chrome.dll+0x0012dfb4] - RunnableMethod&amp;lt;ChromeURLRequestContext void ( base::RefCountedThreadSafe&amp;lt;URLRequestContext&amp;gt;::*)(void) Tuple0&amp;gt;::`scalar deleting destructor&amp;#39;(unsigned int)              [message_loop.cc:309] - MessageLoop::RunTask(Task *)              [message_loop.cc:316] - MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const &amp;amp;)              [message_loop.cc:416] - MessageLoop::DoWork()          [message_pump_win.cc:469] - base::MessagePumpForIO::DoRunLoop()           [message_pump_win.cc:52] - base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate * base::MessagePumpWin::Dispatcher *)            [message_pump_win.h:78] - base::MessagePumpWin::Run(base::MessagePump::Delegate *)              [message_loop.cc:197] - MessageLoop::RunInternal()              [message_loop.cc:180] - MessageLoop::RunHandler()              [message_loop.cc:154] - MessageLoop::Run()                    [thread.cc:156] - base::Thread::ThreadMain()        [platform_thread_win.cc:26] - `anonymous namespace&amp;#39;::ThreadFunc(void *)          [kernel32.dll+0x000536d5] - BaseThreadInitThunk             [ntdll.dll+0x0004883b] - __RtlUserThreadStart             [ntdll.dll+0x0004880e] - _RtlUserThreadStart  </pre>