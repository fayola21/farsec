<title>Issue 21259 -   chromium -    ThreadSanitizer report on tracked_objects::ThreadData::status_ - Project Hosting on Google Code</title> <pre> Chrome Version       : <a href="/p/chromium/source/detail?r=25000">r25000</a>    Here's what I see in  <a href="http://build.chromium.org/buildbot/waterfall.fyi/builders/Modules%20Linux%20(tsan)/builds/130/steps/valgrind%20test%3A%20base/logs/stdio">http://build.chromium.org/buildbot/waterfall.fyi/builders/Modules%20Linux%20(tsan)/builds/130/steps/valgrind%20test%3A%20base/logs/stdio</a>    ==15288== INFO: T2 has been created by T0 at this point: {{{  ==15288==     ...  ==15288==     #3  (anonymous namespace)::CreateThread(unsigned int  bool   PlatformThread::Delegate*  unsigned long*) base/platform_thread_posix.cc:93  ==15288==     #4  PlatformThread::CreateNonJoinable(unsigned int   PlatformThread::Delegate*) base/platform_thread_posix.cc:113  ==15288==     #5  base::LinuxDynamicThreadPool::PostTask(Task*)  base/worker_pool_linux.cc:138  ==15288==     #6  (anonymous  namespace)::WorkerPoolImpl::PostTask(tracked_objects::Location const&amp;   Task*  bool) base/worker_pool_linux.cc:45  ==15288==     #7  WorkerPool::PostTask(tracked_objects::Location const&amp;   Task*  bool) base/worker_pool_linux.cc:90  ==15288==     #8  (anonymous  namespace)::WorkerPoolTest_PostTask_Test::TestBody()  base/worker_pool_unittest.cc:36  ==15288==     ...  ==15288== }}}  ==15288== INFO: T0 is program's main thread  ==15288== WARNING: Possible data race during write of size 4 at 0x8D3884C: {{{  ==15288==    T0 (locks held: {L12}):  ==15288==     #0  tracked_objects::ThreadData::StartTracking(bool)  base/tracked_objects.cc:327  ==15288==     #1   tracked_objects::TrackedObjectsTest_MinimalStartupShutdown_Test::TestBody()  base/tracked_objects_unittest.cc:21  ==15288==     ...  ==15288==   Concurrent read(s) happened at (OR AFTER) these points:  ==15288==    T2 (locks held: {}):  ==15288==     #0  tracked_objects::ThreadData::IsActive()  base/tracked_objects.cc:332  ==15288==     #1  tracked_objects::Tracked::~Tracked() base/tracked.cc:66  ==15288==     #2  Task::~Task() base/task.h:21  ==15288==     #3  (anonymous  namespace)::PostTaskTestTask::~PostTaskTestTask()  base/worker_pool_unittest.cc:17  ==15288==     #4  (anonymous namespace)::WorkerThread::ThreadMain()  base/worker_pool_linux.cc:79  ==15288==     #5  ThreadFunc(void*) base/platform_thread_posix.cc:26  ==15288==     #6  ThreadSanitizerStartThread  /home/timurrrr/valgrind-patches/valgrind-10695/tsan/ts_valgrind_intercepts.c:504  ==15288==   Address 0x8D3884C is 0 bytes inside data symbol  &quot;_ZN15tracked_objects10ThreadData7status_E&quot;  ==15288==   Locks involved in this report (reporting last lock sites): {L12}  ==15288==    L12  ==15288==     #0  pthread_mutex_lock  /home/timurrrr/valgrind-patches/valgrind-10695/tsan/ts_valgrind_intercepts.c:751  ==15288==     #1  LockImpl::Lock() base/lock_impl_posix.cc:41  ==15288==     #2  Lock::Acquire() base/lock.h:16  ==15288==     #3  AutoLock::AutoLock(Lock&amp;) base/lock.h:43  ==15288==     #4  tracked_objects::ThreadData::StartTracking(bool)  base/tracked_objects.cc:324  ==15288==     #5   tracked_objects::TrackedObjectsTest_MinimalStartupShutdown_Test::TestBody()  base/tracked_objects_unittest.cc:21  ==15288==     ...  ==15288== }}}    the report is on tracked_objects::ThreadData::status_    As far as I understand  it is accessed via IsActive() without any lock for  each WorkerThread (which are non-joinable!) each time the Task is deleted.  However  even if IsActive returns the wrong value  on base/tracked.cc:66  condition &quot;(!ThreadData::IsActive() || !tracked_births_)&quot; can still have  the right value  since tracked_births_ can only be set on base/tracked.cc:80 if &quot;IsActive()&quot;  was true.    Can this be harmful if tracked_objects::ThreadData::StartTracking() is  called somewhere in the middle?    Thank you   Timur Iskhodzhanov </pre>