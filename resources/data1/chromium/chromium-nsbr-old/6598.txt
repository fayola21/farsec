<title>Issue 6598 -   chromium -    Instead of looping to RLIMIT_NOFILE  find open FDs by looking at /proc/self/fd (Linux) or /dev/fd (Mac) - Project Hosting on Google Code</title> <pre> In base/process_util_posix.cc  we have int GetMaxFilesOpenInProcess()   which is used by LaunchApp in process_util_linux.cc and  process_util_mac.mm.  LaunchApp loops over all possible FDs starting at  STDERR_FILENO and going up to the value returned by  GetMaxFilesOpenInProcess to set FD_CLOEXEC.    GetMaxFilesOpenInProcess transforms an rlim_t into an int by clamping it to  the range of an int.  That's not really right.    I propose eliminating the GetMaxFilesOpenInProcess API (unless it's fixed  to return a more suitable type and not clamp its output).  Instead of using  a loop in LaunchApp  we should add a new function (to process_util_posix?)  that sets FD_CLOEXEC on all FDs other than stdout  stdin  and stderr.  It  can be called something like SetAllFDsToCloseOnExec.  We can implement this  as a loop around readdir_r on /proc/self/fd (Linux) or /dev/fd (Mac).    Also  skipping stdout  stdin  and sterr is probably valid if we never close  any of these streams.  Do we ever?  Hmm... </pre>