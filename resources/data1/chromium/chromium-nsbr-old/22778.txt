<title>Issue 22778 -   chromium -    Crash - HtmlDialogView::GetWindowTitle() - Project Hosting on Google Code</title> <pre> This crash was detected in 4.0.211.7 and appears to be a regression from 4.0.211.4. It is currently ranked #10 (based on the relative number of reports in the release).  There have been 15 reports from 10 clients. Search query: http://crash/search?query=Chrome+4.0.211.7+HtmlDialogView%3A%3AGetWindowTitle%28%29 ---------------------------- *       Summary Data       * ---------------------------- Report Link: http://crash/reportdetail?reportid=cedd80a3cc932783 Mini Dump Link: http://crash/file?reportid=cedd80a3cc932783&amp;name=upload_file_minidump  Uptime: 14 sec User Comments: null OS: Windows XP Service Pack 3 CPU Architecture: x86 CPU Info: GenuineIntel family 6 model 23 stepping 10 rept: null ptype: browser plat: Win32 crash type:(EXCEPTION_ACCESS_VIOLATION@0x00000000)  ---------------------------- *        Crash Trace       * ----------------------------            [html_dialog_view.cc:62] - HtmlDialogView::GetWindowTitle()          [custom_frame_view.cc:405] - views::CustomFrameView::PaintTitleBar(gfx::Canvas *)          [custom_frame_view.cc:218] - views::CustomFrameView::Paint(gfx::Canvas *)                       [view.cc:382] - views::View::ProcessPaint(gfx::Canvas *)                       [view.cc:346] - views::View::PaintChildren(gfx::Canvas *)                       [view.cc:391] - views::View::ProcessPaint(gfx::Canvas *)                       [view.cc:346] - views::View::PaintChildren(gfx::Canvas *)                       [view.cc:391] - views::View::ProcessPaint(gfx::Canvas *)                  [root_view.cc:187] - views::RootView::ProcessPaint(gfx::Canvas *)               [root_view_win.cc:32] - views::RootView::OnPaint(HWND__ *)                 [widget_win.cc:644] - views::WidgetWin::OnPaint(HDC__ *)                  [widget_win.h:165] - views::WidgetWin::_ProcessWindowMessage(HWND__ * unsigned int unsigned int long long &amp; unsigned long)                   [widget_win.h:96] - views::WidgetWin::ProcessWindowMessage(HWND__ * unsigned int unsigned int long long &amp; unsigned long)                 [widget_win.cc:924] - views::WidgetWin::OnWndProc(unsigned int unsigned int long)                [window_impl.cc:182] - base::WindowImpl::WndProc(HWND__ * unsigned int unsigned int long)             [user32.dll+0x00008733] - InternalCallWinProc             [user32.dll+0x00008815] - UserCallWinProcCheckWow             [user32.dll+0x00018e9f] - DispatchClientMessage             [user32.dll+0x00018eeb] - __fnDWORD              [ntdll.dll+0x0000e472] - KiUserCallbackDispatcher                [window_impl.cc:161] - base::WindowImpl::OnWndProc(unsigned int unsigned int long)                 [window_win.cc:685] - views::WindowWin::OnNCActivate(int)                  [widget_win.h:150] - views::WidgetWin::_ProcessWindowMessage(HWND__ * unsigned int unsigned int long long &amp; unsigned long)                   [widget_win.h:96] - views::WidgetWin::ProcessWindowMessage(HWND__ * unsigned int unsigned int long long &amp; unsigned long)                 [widget_win.cc:924] - views::WidgetWin::OnWndProc(unsigned int unsigned int long)                [window_impl.cc:182] - base::WindowImpl::WndProc(HWND__ * unsigned int unsigned int long)             [user32.dll+0x00008733] - InternalCallWinProc             [user32.dll+0x00008815] - UserCallWinProcCheckWow             [user32.dll+0x00018e9f] - DispatchClientMessage             [user32.dll+0x00018eeb] - __fnDWORD                      [dom_ui.cc:60] - DOMUI::ProcessDOMUIMessage(std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; int bool)          [render_view_host.cc:1212] - RenderViewHost::OnMsgDOMUISend(std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp;)           [ipc_message_utils.h:998] - IPC::MessageWithTuple&lt;Tuple2&lt;std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &gt; &gt;::Dispatch&lt;RenderViewHost void ( RenderViewHost::*)(std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp;)&gt;(IPC::Message const * RenderViewHost * void ( RenderViewHost::*)(std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp;))           [render_view_host.cc:786] - RenderViewHost::OnMessageReceived(IPC::Message const &amp;) [browser_render_process_host.cc:760] - BrowserRenderProcessHost::OnMessageReceived(IPC::Message const &amp;)                        [task.h:307] - RunnableMethod&lt;CancelableRequest&lt;CallbackRunner&lt;Tuple2&lt;int scoped_refptr&lt;BaseSessionService::InternalGetCommandsRequest&gt; &gt; &gt; &gt; void ( CancelableRequest&lt;CallbackRunner&lt;Tuple2&lt;int scoped_refptr&lt;BaseSessionService::InternalGetCommandsRequest&gt; &gt; &gt; &gt;::*)(Tuple2&lt;int scoped_refptr&lt;BaseSessionService::InternalGetCommandsRequest&gt; &gt; const &amp;) Tuple1&lt;Tuple2&lt;int scoped_refptr&lt;BaseSessionService::InternalGetCommandsRequest&gt; &gt; &gt; &gt;::Run()               [message_loop.cc:314] - MessageLoop::RunTask(Task *)               [message_loop.cc:322] - MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const &amp;)               [message_loop.cc:429] - MessageLoop::DoWork()           [message_pump_win.cc:209] - base::MessagePumpForUI::DoRunLoop()            [message_pump_win.cc:52] - base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate * base::MessagePumpWin::Dispatcher *)               [message_loop.cc:194] - MessageLoop::RunInternal()               [message_loop.cc:181] - MessageLoop::RunHandler()               [message_loop.cc:599] - MessageLoopForUI::Run(base::MessagePumpWin::Dispatcher *)               [browser_main.cc:186] - `anonymous namespace'::RunUIMessageLoop(BrowserProcess *)               [browser_main.cc:833] - BrowserMain(MainFunctionParams const &amp;)            [chrome_dll_main.cc:607] - ChromeMain        [google_update_client.cc:96] - google_update::GoogleUpdateClient::Launch(HINSTANCE__ * sandbox::SandboxInterfaceInfo * wchar_t * char const * int *)           [kernel32.dll+0x0002ffff] - CreateFiberEx  ---------------------------- *      Loaded Modules      * ----------------------------     zh-CN.dll     default.dll     chrome.dll     gears.dll     icudt42.dll     chrome.exe     comctl32.dll     MSCTF.dll     TrueTransparencyHook.dll     advapi32.dll     cryptdll.dll     dnsapi.dll     gdi32.dll     hnetcfg.dll     iertutil.dll     imm32.dll     iphlpapi.dll     kernel32.dll     lpk.dll     lz32.dll     msctfime.ime     msv1_0.dll     msvcp60.dll     msvcrt.dll     mswsock.dll     netapi32.dll     normaliz.dll     ntdll.dll     ntmarta.dll     ole32.dll     oleacc.dll     oleaut32.dll     psapi.dll     rasadhlp.dll     rasapi32.dll     rasman.dll     riched20.dll     rpcrt4.dll     rtutils.dll     samlib.dll     secur32.dll     shell32.dll     shlwapi.dll     sxs.dll     t2embed.dll     tapi32.dll     urlmon.dll     user32.dll     usp10.dll     uxtheme.dll     version.dll     winhttp.dll     wininet.dll     winmm.dll     wldap32.dll     ws2_32.dll     ws2help.dll     wshtcpip.dll     safemon.dll  </pre>