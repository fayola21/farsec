<title>Issue 13987 -   chromium -    Crash - RegOpenUserClassesRoot - Project Hosting on Google Code</title> <pre> This crash was detected in 3.0.187.1 and was seen in 3.0.183.1. It is currently ranked #21 (based on the relative number of reports in the release).  There have been 9 reports from 6 clients. Search query: http://crash/search?query=Chrome+3.0.187.1+RegOpenUserClassesRoot ---------------------------- *       Summary Data       * ---------------------------- Report Link: http://crash/reportdetail?reportid=2075160514c3c1ab Mini Dump Link: http://crash/file?reportid=2075160514c3c1ab&amp;name=upload_file_minidump  Uptime: 280 sec User Comments: null OS: Windows 7  CPU Architecture: x86 CPU Info: GenuineIntel family 6 model 23 stepping 6 rept: null ptype: browser plat: Win32 crash type:(EXCEPTION_ACCESS_VIOLATION@0x0839cf72)  ---------------------------- *      Loaded Modules      * ----------------------------     chrome.dll     chrome.exe     crypt32.dll     kernel32.dll     ntdll.dll     rasman.dll     user32.dll     wininet.dll  ---------------------------- *        Crash Trace       * ----------------------------      [kernel32.dll+0x000424a3] - RegOpenUserClassesRoot        [plugin_service.cc:141] - PluginService::FindOrStartPluginProcess(FilePath const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp;)        [plugin_service.cc:174] - PluginService::OpenChannelToPlugin(ResourceMessageFilter * GURL const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;wchar_t std::char_traits&lt;wchar_t&gt; std::allocator&lt;wchar_t&gt; &gt; const &amp; IPC::Message *) [resource_message_filter.cc:528] - ResourceMessageFilter::OnOpenChannelToPlugin(GURL const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; std::basic_string&lt;wchar_t std::char_traits&lt;wchar_t&gt; std::allocator&lt;wchar_t&gt; &gt; const &amp; IPC::Message *) [resource_message_filter.cc:258] - ResourceMessageFilter::OnMessageReceived(IPC::Message const &amp;)      [ipc_channel_proxy.cc:43] - IPC::ChannelProxy::Context::TryFilters(IPC::Message const &amp;)      [ipc_sync_channel.cc:277] - IPC::SyncChannel::SyncContext::OnMessageReceived(IPC::Message const &amp;)       [ipc_channel_win.cc:307] - IPC::Channel::ChannelImpl::ProcessIncomingMessages(base::MessagePumpForIO::IOContext * unsigned long)       [ipc_channel_win.cc:401] - IPC::Channel::ChannelImpl::OnIOCompleted(base::MessagePumpForIO::IOContext * unsigned long unsigned long)      [message_pump_win.cc:505] - base::MessagePumpForIO::WaitForIOCompletion(unsigned long base::MessagePumpForIO::IOHandler *)      [message_pump_win.cc:469] - base::MessagePumpForIO::DoRunLoop()       [message_pump_win.cc:52] - base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate * base::MessagePumpWin::Dispatcher *)        [message_pump_win.h:78] - base::MessagePumpWin::Run(base::MessagePump::Delegate *)          [message_loop.cc:198] - MessageLoop::RunInternal()          [message_loop.cc:181] - MessageLoop::RunHandler()          [message_loop.cc:155] - MessageLoop::Run()                [thread.cc:156] - base::Thread::ThreadMain()    [platform_thread_win.cc:26] - `anonymous namespace'::ThreadFunc(void *)      [kernel32.dll+0x000510db] - BaseThreadInitThunk         [ntdll.dll+0x00061e9d] -          [ntdll.dll+0x00061e70] -   </pre>