<title>Issue 13108 -   chromium -    base/pickle.cc should be cleaned up  and not depend on alignment of its read/write pointer and uint64 aligned boundaries - Project Hosting on Google Code</title> <pre> There were some bugs in and around pickle.cc  but I'm not completely sure they are all removed.    The code can be simplified by removing its dependence on having the iterator start all writes at 8 byte   boundaries.  I think the only reason for having this requirement is to facilitate reading of an int  or a   size_t value directly via a integer copy (rather than a char by char memcopy).  It might also be a   consequence of having a VariableLengthBuffer aligned in a pickle... but that structure is really not   needed.  The computation needed to get the current alignment probably swells the size of the pickle   notably  and removes any performance gains that might arrive from the direct integer read (we have to do a   ton of math before each integer read/write just to be sure we can get an optimized read).    If ever we transition to a port with a different big-endian vs little-ending byte architecture  our port   would fail with the current code (I left in the unmatched pair  where writing is done via memcpy()  and   reading is done via aligned integer copy  to be minimalist in my change as requested by Darin).    The cleanup would require reving the version of the persistent store.  As a result  this was much more than   I would want to take on for pre-beta.    I *think* the code is will be safe enough that it can wait for a cleanup.  ...but it is much harder to   modify as it currently stands.    Mike also suggested that this class often produced very short pickles  and the ton of little mallocs was   hurting performance (and was visible in larger profiles).    His suggestion was that a reasonable size buffer be included with each pickle object.  A malloced external   buffer should only be used after the internal buffer was going to overflow.    If we do profiling and verify this as a hotspot  then this fix will be very valuable. </pre>