<title>Issue 2143 -   chromium -    Chromium allocators prevent building in VC++2008 SP1 - Project Hosting on Google Code</title> <pre> A few minor issues preclude successful release mode building in VC++ 2008 SP1.    The requirements for C++ allocators are listed in section 20.1.5 of the standard.  In particular    there is a requirement that for an allocator A of type X&lt;T&gt;  it is possible to construct an allocator   B of type X&lt;U&gt; thus: X&lt;U&gt; b(a);    That is to say  allocators must have a templated copy constructor allowing the value_type to vary.    VC++2005 does not (seem to) do anything to enforce this requirement. Nor does VC++2008 in a debug   build.  However  in a release build  the library attempts to use the constructor in question  and duly   fails to find it.    The specific allocators with this issue are:  StackAllocator from basestack_container.h  PrivateHookAllocator from toolsmemory_watchermemory_hook.h    The fix in the latter case is simple; simply add the constructor.  The PrivateHookAllocator is   stateless  so the constructor does nothing  it merely allows suitable objects to be constructed.    The fix in the former case is more complex.  StackAllocator is stateful; it contains a pointer to a   Source object that contains the actual buffer.  When constructing a StackAllocator&lt;U&gt; from a   StackAllocator&lt;T&gt;  we cannot use the Source from the StackAllocator&lt;T&gt;  as it only contains enough   space for a given number of Ts; that is feasibly not enough even for a single U.    My solution is to allow the Source to be null  and in such situations revert to using the normal   std::allocator to allocate memory. The StackAllocator already uses std::allocator when its memory is   full  so I think this should be a safe thing to do  although it does mean sacrificing the performance   advantage of the stack allocation in such situations.    One possible refinement might be to share the Source if sizeof(T) &lt;= sizeof(U). However  it is not   obvious to me that this is worthwhile  not least because of the ugly cast that would be required.     </pre>