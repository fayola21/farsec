<title>Issue 10960 -   chromium -    Unsafe cross thread usage in libevent message loop. - Project Hosting on Google Code</title> <pre> Chrome Version       : 2.0.177.0 (Developer Build 14292)      ThreadSanitizer (data race detector) reports several data races when  running chromium unittests or chromium itself.     Reproduce:   1. Install ThreadSanitizer:  <a href="http://code.google.com/p/data-race-test/wiki/ThreadSanitizer">http://code.google.com/p/data-race-test/wiki/ThreadSanitizer</a>    2. Run the unittests or chromium itself under ThreadSanitizer    Examples:   $ valgrind --tool=tsan  --pure-happens-before --file-prefix-to-cut=/src/  src/sconsbuild/Debug/net_unittests  --gtest_filter=ProxyServiceTest.PerProtocolProxyTests    ==19384== WARNING: Possible data race during write of size 4 at 0x8F14B60: {{{  ==19384==    T1 (locks held: {}):  ==19384==     #0  event_base_loop third_party/libevent/event.c:476  ==19384==     #1   base::MessagePumpLibevent::Run(base::MessagePump::Delegate*)  base/message_pump_libevent.cc:244  ==19384==     #2  MessageLoop::RunInternal() base/message_loop.cc:201  ==19384==     #3  MessageLoop::RunHandler() base/message_loop.cc:184  ==19384==     #4  MessageLoop::Run() base/message_loop.cc:158  ==19384==     #5  base::Thread::ThreadMain() base/thread.cc:156  ==19384==     #6  ThreadFunc(void*) base/platform_thread_posix.cc:26  ==19384==     #7  ThreadSanitizerStartThread  /tmp/vg/tsan/ts_valgrind_intercepts.c:424  ==19384==   Concurrent write(s) happened at (OR AFTER) these points:  ==19384==    T2 (locks held: {}):  ==19384==     #0  event_base_loop third_party/libevent/event.c:468  ==19384==     #1   base::MessagePumpLibevent::Run(base::MessagePump::Delegate*)  base/message_pump_libevent.cc:244  ==19384==     #2  MessageLoop::RunInternal() base/message_loop.cc:201  ==19384==     #3  MessageLoop::RunHandler() base/message_loop.cc:184  ==19384==     #4  MessageLoop::Run() base/message_loop.cc:158  ==19384==     #5  base::Thread::ThreadMain() base/thread.cc:156  ==19384==     #6  ThreadFunc(void*) base/platform_thread_posix.cc:26  ==19384==     #7  ThreadSanitizerStartThread  /tmp/vg/tsan/ts_valgrind_intercepts.c:424  ==19384==   Address 0x8F14B60 is 0 bytes inside data symbol &quot;evsignal_base&quot;  ==19384== }}}    In this case  a non-thread-safe library is used from multiple threads.   The comment at third_party/libevent/event.c:458 says: /* not thread safe */      Another example:   $ valgrind --tool=tsan  --pure-happens-before --file-prefix-to-cut=/src/  src/sconsbuild/Debug/net_unittests  --gtest_filter=URLRequestTest.FileDirCancelTest   ==20222== WARNING: Possible data race during write of size 1 at 0x8FB4DAC: {{{  ==20222==    T0 (locks held: {}):  ==20222==     #0  net::DirectoryLister::Cancel()  net/base/directory_lister.cc:69  ==20222==     #1  URLRequestFileDirJob::Kill()  net/url_request/url_request_file_dir_job.cc:67  ==20222==     #2  URLRequestJob::FollowRedirect(GURL const&amp;  int)  net/url_request/url_request_job.cc:509  ==20222==     #3  URLRequestJob::NotifyHeadersComplete()  net/url_request/url_request_job.cc:349  ==20222==     #4  URLRequestFileDirJob::StartAsync()  net/url_request/url_request_file_dir_job.cc:54  ==20222==     #5  void DispatchToMethod&lt;URLRequestFileDirJob  void  (URLRequestFileDirJob::*)()&gt;(URLRequestFileDirJob*  void  (URLRequestFileDirJob::*)()  Tuple0 const&amp;) base/tuple.h:383  ==20222==     #6  RunnableMethod&lt;URLRequestFileDirJob  void  (URLRequestFileDirJob::*)()  Tuple0&gt;::Run() base/task.h:307  ==20222==     #7  MessageLoop::RunTask(Task*) base/message_loop.cc:312  ==20222==     #8   MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&amp;)  base/message_loop.cc:320  ==20222==     #9  MessageLoop::DoWork() base/message_loop.cc:420  ==20222==     #10  base::MessagePumpLibevent::Run(base::MessagePump::Delegate*)  base/message_pump_libevent.cc:223  ==20222==     #11 MessageLoop::RunInternal() base/message_loop.cc:201  ==20222==   Concurrent read(s) happened at (OR AFTER) these points:  ==20222==    T1 (locks held: {}):  ==20222==     #0  net::DirectoryLister::ThreadMain()  net/base/directory_lister.cc:90  ==20222==     #1  ThreadFunc(void*) base/platform_thread_posix.cc:26  ==20222==     #2  ThreadSanitizerStartThread  /tmp/vg/tsan/ts_valgrind_intercepts.c:424  ==20222==   Location 0x8FB4DAC is 28 bytes inside a block starting at  0x8FB4D90 of size 32 allocated by T0 from heap:  ==20222==     #0  malloc /tmp/vg/tsan/ts_valgrind_intercepts.c:290  ==20222==     #1  operator new(unsigned int) /usr/lib32/libstdc++.so.6.0.9  ==20222==     #2  URLRequestFileDirJob::StartAsync()  net/url_request/url_request_file_dir_job.cc:51  ==20222==     #3  void DispatchToMethod&lt;URLRequestFileDirJob  void  (URLRequestFileDirJob::*)()&gt;(URLRequestFileDirJob*  void  (URLRequestFileDirJob::*)()  Tuple0 const&amp;) base/tuple.h:383  ==20222==     #4  RunnableMethod&lt;URLRequestFileDirJob  void  (URLRequestFileDirJob::*)()  Tuple0&gt;::Run() base/task.h:307  ==20222==     #5  MessageLoop::RunTask(Task*) base/message_loop.cc:312  ==20222==     #6   MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const&amp;)  base/message_loop.cc:320  ==20222==     #7  MessageLoop::DoWork() base/message_loop.cc:420  ==20222==     #8   base::MessagePumpLibevent::Run(base::MessagePump::Delegate*)  base/message_pump_libevent.cc:223  ==20222==     #9  MessageLoop::RunInternal() base/message_loop.cc:201  ==20222==     #10 MessageLoop::RunHandler() base/message_loop.cc:184  ==20222==     #11 MessageLoop::Run() base/message_loop.cc:158  ==20222== }}}    In this case  DirectoryLister::canceled_ is used as a notification between  threads  but there is no synchronization used.     There are more race reports on other unittests.   Please let me know if these reports are useful and if you would like to see  more bug reports about races.  </pre>