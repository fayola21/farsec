<title>Issue 4924 -   chromium -    Patch for CppBoundClass - Project Hosting on Google Code</title> <pre> After extending CppBoundClass to expose C++ APIs to Javascript  I found a  few limitations in it's design:    1) You can't (easily) expose a secondary instance of a CppBoundClass to  javascript as a member variable.  2) Retrieving attributes from passed-in Javascript objects is not pleasant  (who wants to use NPAPI? ;)  3) There's no way to expose a getter/setter with custom semantics (i.e..  being bounds to a Function pointer  not just a member field in the Class)    I've solved #1 and #2 by exposing a number of protected static function  helpers and exposing a two new instance methods: ToNPObject() (useful for  result-&gt;Set())  and CppVariantToCppBoundClass(variant) which you can cast  your specific CppBoundClass extension. Just an example of the things you  can do with this patch:    class JsObject : public CppBoundClass  {  public:    JsObject() {      BindMethod(&quot;hello&quot;  &amp;JsObject::hello);    }      void print(const CppArgumentList &amp;args  CppVariant *result) {      printf(&quot;[%s] %sn&quot;   		GetStringProperty(args[0]  &quot;time&quot;)   		GetStringProperty(args[0]  &quot;message&quot;));    }      void util() { }  };    class BindingExample : public CppBoundClass  {  public:    BindingExample() {      JsObject *jsObject = new JsObject;      object.Set(jsObject-&gt;ToNPObject());        BindProperty(&quot;object&quot; &amp;object);      BindMethod(&quot;util&quot;  &amp;BindingExample::util);    }      void util(const CppArgumentList &amp;args  CppVariant *result) {      JsObject *object =  static_cast&lt;JsObject*&gt;(CppVariantToCppBoundClass(args[0]));  	object-&gt;util();    }      CppVariant object;  };    // the instance of BindingExample is bound as &quot;example&quot;  example.object.print({time: new Date().toString()  message: &quot;Hello World&quot;});  example.util(example.object);    I still haven't solved #3 above  but I'm hoping this patch will get the  wheels rolling =) </pre>