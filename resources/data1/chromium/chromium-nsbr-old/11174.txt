<title>Issue 11174 -   chromium -    OSX: Fix race conditions/dependency issues in fd remapping/closing around LaunchApp - Project Hosting on Google Code</title> <pre> This bug is for porting the functionality in <a href="http://codereview.chromium.org/100127">http://codereview.chromium.org/100127</a> to OS X    from the CL description:    &quot;&quot;&quot;  POSIX: Add code for shuffling file descriptors.    When forking a child process  one often wants to move existing file  descriptors to well known locations (stdout  stderr etc). However   this is a process bedeviled with corner cases. Consider the case where  you open two file descriptors  get assigned fds 1 and 0 for them and  wish to shuffle them so that they end up in slots 0 and 1. Our current  code fails in this case.    We also have a problem where we're currently trying to mark file  descriptors as close-on-exec rather than closing them in the child  process. This is inherently broken in a multithreaded process where  another thread can open a file descriptor and race the loop which is  trying to mark them.    Thus  on Linux we switch to close-after-fork where we known that no  other threads exist in the process. On Mac  the code is sufficiently  different that this simple fix isn't applicable and one of the Mac  folks will need to take a look.  &quot;&quot;&quot;    Jeremy comments:  &quot;&quot;&quot;  On OS X we use the posix_spawn() call which provides some atomicity  around this type of operation  but still doesn't solve the issues you  raise in the CL description.    tvl: I know you had some thoughts about reworking this code.  Could we  solve the race condition by forking before calling posix_spawn?  Then  augment agl's code to build up the posix_spawn_file_actions_t correctly?  &quot;&quot;&quot;    tvl responds:  &quot;&quot;&quot;  The catch is you need to return the pid from the spawn to the caller  so the fork before would   solve the race  but you also need to message back to the other side of the fork the real pid.  It   also means everything is a double fork  so the parent won't be the process that spawned it.  That   could cause some problems for the cases where the code wants to wait to collect the exit status   (which is a the past thread about needing to clean those up  but most of it is in tests  and so we   decided not to take it on at this time).    My initial reaction is the cleaner thing to do will be to switch to using fork/exec and not use   spawn at all.    fyi - a quick reread of man page posix_spawn_file_actions_adddup2 doesn't really give a good   indicator on what happens in you wanted to swap to fds.  It probably requires creating the temp   fd in a prefilght and then having the the actions could do the final work  but to support that   case  we might be safer just using the new code with fork/exec.  &quot;&quot;&quot; </pre>