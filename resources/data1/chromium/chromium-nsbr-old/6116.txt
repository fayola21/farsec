<title>Issue 6116 -   chromium -    DCHECK in SafeBrowsing update - Project Hosting on Google Code</title> <pre> Wasn't using Chrome at the time  got back to my desk and saw a DCHECK.    [5080:5172:799192796:FATAL:safe_browsing_service.cc(499)] Check failed:  !update_in_progress_.      	ntdll.dll!7c90eb94() 	   	[Frames below may be incorrect and/or missing  no symbols loaded for  ntdll.dll]	   	ntdll.dll!7c90e9c0() 	   	kernel32.dll!7c8025cb() 	   	kernel32.dll!7c802532() 	  &gt;	chrome.dll!logging::DisplayDebugMessage(const  std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; &amp;  str=&quot;[5080:5172:799192796:FATAL:safe_browsing_service.cc(499)] Check  failed: !update_in_progress_. &quot;)  Line 325 + 0x11 bytes	C++   	chrome.dll!logging::LogMessage::~LogMessage()  Line 505 + 0x18 bytes	C++   	chrome.dll!SafeBrowsingService::UpdateStarted()  Line 500	C++   	chrome.dll!SafeBrowsingProtocolManager::IssueUpdateRequest()  Line 442	C++   	chrome.dll!SafeBrowsingProtocolManager::GetNextUpdate()  Line 145	C++   	chrome.dll!DispatchToMethod&lt;SafeBrowsingProtocolManager void (__thiscall  SafeBrowsingProtocolManager::*)(void)&gt;(SafeBrowsingProtocolManager *  obj=0x0519f0b8  void (void)* method=0x018a0710  const Tuple0 &amp; arg={...})   Line 383 + 0x8 bytes	C++     chrome.dll!base::BaseTimer&lt;SafeBrowsingProtocolManager 0&gt;::TimerTask::Run()   Line 154 + 0x1c bytes	C++   	chrome.dll!MessageLoop::RunTask(Task * task=0x073293e0)  Line 308 + 0xf  bytes	C++   	chrome.dll!MessageLoop::DeferOrRunPendingTask(const  MessageLoop::PendingTask &amp; pending_task={...})  Line 319	C++   	chrome.dll!MessageLoop::DoDelayedWork(base::Time *  next_delayed_work_time=0x050b5408)  Line 436	C++   	chrome.dll!base::MessagePumpForIO::DoRunLoop()  Line 454 + 0x24 bytes	C++     chrome.dll!base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate  * delegate=0x0557feb4  base::MessagePumpWin::Dispatcher *  dispatcher=0x00000000)  Line 52 + 0xf bytes	C++   	chrome.dll!base::MessagePumpWin::Run(base::MessagePump::Delegate *  delegate=0x0557feb4)  Line 78 + 0x1c bytes	C++   	chrome.dll!MessageLoop::RunInternal()  Line 197 + 0x2a bytes	C++   	chrome.dll!MessageLoop::RunHandler()  Line 181	C++   	chrome.dll!MessageLoop::Run()  Line 155	C++   	chrome.dll!base::Thread::ThreadMain()  Line 156	C++   	chrome.dll!`anonymous namespace'::ThreadFunc(void * closure=0x050b5138)   Line 26 + 0xf bytes	C++   	kernel32.dll!7c80b683() 	   	chrome.dll!StatisticsRecorder::Register(const Histogram &amp;  histogram={...})  Line 558 + 0x1c bytes	C++   	chrome.exe!_vsnwprintf_l(unsigned short * string=0x00000000  unsigned int  count=0  const wchar_t * format=0x00000000  localeinfo_struct *  plocinfo=0x00000000  char * ap=0x00000000)  Line 166 + 0x45 bytes	C      -		this	0x0519c2e8 {io_loop_=0x0557feb4 checks_=[0]()  gethash_requests_=[0]() ...}	SafeBrowsingService * const  +		base::RefCountedThreadSafe&lt;SafeBrowsingService&gt;	{...}  base::RefCountedThreadSafe&lt;SafeBrowsingService&gt;  +		base::SystemMonitor::PowerObserver	{...}	base::SystemMonitor::PowerObserver  +		io_loop_	0x0557feb4 {type_=TYPE_IO work_queue_=[0]()  delayed_work_queue_=[3]({task=0x07394790 delayed_run_time={...}  sequence_num=20276 ...} {task=0x0a56e6e0 delayed_run_time={...}  sequence_num=20272 ...} {task=0x07115708 delayed_run_time={...}  sequence_num=20246 ...}) ...}	MessageLoop *  		checks_	[0]()	std::set&lt;SafeBrowsingService::SafeBrowsingCheck  * std::less&lt;SafeBrowsingService::SafeBrowsingCheck  *&gt; std::allocator&lt;SafeBrowsingService::SafeBrowsingCheck *&gt; &gt;  		gethash_requests_	[0]()  stdext::hash_map&lt;int std::vector&lt;SafeBrowsingService::SafeBrowsingCheck  * std::allocator&lt;SafeBrowsingService::SafeBrowsingCheck *&gt;  &gt; stdext::hash_compare&lt;int std::less&lt;int&gt; &gt; std::allocator&lt;std::pair&lt;int  const  std::vector&lt;SafeBrowsingService::SafeBrowsingCheck  * std::allocator&lt;SafeBrowsingService::SafeBrowsingCheck *&gt; &gt; &gt; &gt; &gt;  -		database_	0x0519e898 {db_=0x070360f0 statement_cache_={...} init_=true  ...}	SafeBrowsingDatabase *  +		[SafeBrowsingDatabaseBloom]	{db_=0x070360f0 statement_cache_={...}  init_=true ...}	SafeBrowsingDatabaseBloom  +		__vfptr	0x035b66a8 const SafeBrowsingDatabaseBloom::`vftable'	*  +		hash_cache_	{ptr_=[0]() }  scoped_ptr&lt;stdext::hash_map&lt;int std::list&lt;SafeBrowsingDatabase::HashCacheEntry std::allocator&lt;SafeBrowsingDatabase::HashCacheEntry&gt;  &gt; stdext::hash_compare&lt;int std::less&lt;int&gt; &gt; std::allocator&lt;std::pair&lt;int  const   std::list&lt;SafeBrowsingDatabase::HashCacheEntry std::allocator&lt;SafeBrowsingDatabase::HashCacheEntry&gt;  &gt; &gt; &gt; &gt; &gt;  +		prefix_miss_cache_	[4](-253712559 850268976 850692168 2026131114)  std::set&lt;int std::less&lt;int&gt; std::allocator&lt;int&gt; &gt;  +		filename_	&quot;c:my_debug_profileSafe Browsing Bloom&quot;  std::basic_string&lt;wchar_t std::char_traits&lt;wchar_t&gt; std::allocator&lt;wchar_t&gt; &gt;  +		bloom_filter_filename_	&quot;c:my_debug_profileSafe Browsing Bloom Filter&quot;  std::basic_string&lt;wchar_t std::char_traits&lt;wchar_t&gt; std::allocator&lt;wchar_t&gt; &gt;  +		bloom_filter_	{ptr_=0x0519f2b8 }	scoped_refptr&lt;BloomFilter&gt;  -		protocol_manager_	0x0519f0b8 {sb_service_=0x0519c2e8 request_={...}  request_type_=UPDATE_REQUEST ...}	SafeBrowsingProtocolManager *  +		URLFetcher::Delegate	{...}	URLFetcher::Delegate  -		sb_service_	0x0519c2e8 {io_loop_=0x0557feb4 checks_=[0]()  gethash_requests_=[0]() ...}	SafeBrowsingService *  +		base::RefCountedThreadSafe&lt;SafeBrowsingService&gt;	{...}  base::RefCountedThreadSafe&lt;SafeBrowsingService&gt;  +		base::SystemMonitor::PowerObserver	{...}	base::SystemMonitor::PowerObserver  +		io_loop_	0x0557feb4 {type_=TYPE_IO work_queue_=[0]()  delayed_work_queue_=[3]({task=0x07394790 delayed_run_time={...}  sequence_num=20276 ...} {task=0x0a56e6e0 delayed_run_time={...}  sequence_num=20272 ...} {task=0x07115708 delayed_run_time={...}  sequence_num=20246 ...}) ...}	MessageLoop *  		checks_	[0]()	std::set&lt;SafeBrowsingService::SafeBrowsingCheck  * std::less&lt;SafeBrowsingService::SafeBrowsingCheck  *&gt; std::allocator&lt;SafeBrowsingService::SafeBrowsingCheck *&gt; &gt;  		gethash_requests_	[0]()  stdext::hash_map&lt;int std::vector&lt;SafeBrowsingService::SafeBrowsingCheck  * std::allocator&lt;SafeBrowsingService::SafeBrowsingCheck *&gt;  &gt; stdext::hash_compare&lt;int std::less&lt;int&gt; &gt; std::allocator&lt;std::pair&lt;int  const  std::vector&lt;SafeBrowsingService::SafeBrowsingCheck  * std::allocator&lt;SafeBrowsingService::SafeBrowsingCheck *&gt; &gt; &gt; &gt; &gt;  +		database_	0x0519e898 {db_=0x070360f0 statement_cache_={...} init_=true  ...}	SafeBrowsingDatabase *  +		protocol_manager_	0x0519f0b8 {sb_service_=0x0519c2e8 request_={...}  request_type_=UPDATE_REQUEST ...}	SafeBrowsingProtocolManager *  		white_listed_entries_	[0]()  std::vector&lt;SafeBrowsingService::WhiteListedEntry std::allocator&lt;SafeBrowsingService::WhiteListedEntry&gt;  &gt;  		enabled_	true	bool  +		db_thread_	{ptr_=0x0519c520 }	scoped_ptr&lt;base::Thread&gt;  		resetting_	false	bool  		new_safe_browsing_	true	bool  		database_loaded_	true	bool  		update_in_progress_	true	bool  		queued_checks_	[0]()  std::deque&lt;SafeBrowsingService::QueuedCheck std::allocator&lt;SafeBrowsingService::QueuedCheck&gt;  &gt;  +		request_	{ptr_=0x00000000 }	scoped_ptr&lt;URLFetcher&gt;  		request_type_	UPDATE_REQUEST  SafeBrowsingProtocolManager::SafeBrowsingRequestType  		update_error_count_	0	int  		gethash_error_count_	0	int  		update_back_off_mult_	1	int  		gethash_back_off_mult_	1	int  		back_off_fuzz_	0.16187766	float  +		list_name_	&quot;&quot;  std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;  		next_update_sec_	1906	int  +		update_timer_	{...}	base::OneShotTimer&lt;SafeBrowsingProtocolManager&gt;  		chunk_request_urls_	[0]()	std::deque&lt;ChunkUrl std::allocator&lt;ChunkUrl&gt; &gt;  		hash_requests_	[0]()	stdext::hash_map&lt;URLFetcher const  * SafeBrowsingService::SafeBrowsingCheck * stdext::hash_compare&lt;URLFetcher  const * std::less&lt;URLFetcher const *&gt; &gt; std::allocator&lt;std::pair&lt;URLFetcher  const * const SafeBrowsingService::SafeBrowsingCheck *&gt; &gt; &gt;  		update_state_	SECOND_REQUEST	SafeBrowsingProtocolManager::UpdateRequestState  		initial_request_	false	bool  		chunk_pending_to_write_	false	bool  +		notify_loop_	0x0012f868 {type_=TYPE_UI work_queue_=[0]()  delayed_work_queue_=[3]({task=0x0519ed38 delayed_run_time={...}  sequence_num=6488 ...} {task=0x07452988 delayed_run_time={...}  sequence_num=6487 ...} {task=0x073b2ac0 delayed_run_time={...}  sequence_num=6483 ...}) ...}	MessageLoop *  +		client_key_	&quot;Yi4dBbdnBlCUePRK-cIKlA==&quot;  std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;  +		wrapped_key_  &quot;AKEgNis70x3ILC0062CWMuMHjJCbMD7pnwY3YzU_JO5pW1ZJatf79FqwdYTxkLeYaYNDWbDibxVX1cvl5vXKCAG1LXHpNGyqSA==&quot;  std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;  -		last_update_	{kTimeTToMicrosecondsOffset=11644473600000000  us_=12875849724250230 }	base::Time  		kTimeTToMicrosecondsOffset	11644473600000000	const __int64  		us_	12875849724250230	__int64  -		next_gethash_time_	{kTimeTToMicrosecondsOffset=11644473600000000 us_=0  }	base::Time  		kTimeTToMicrosecondsOffset	11644473600000000	const __int64  		us_	0	__int64  +		version_	&quot;2.0.157.0&quot;  std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;  +		chunk_request_start_	{kTimeTToMicrosecondsOffset=11644473600000000  us_=0 }	base::Time  		update_size_	0	int  		white_listed_entries_	[0]()  std::vector&lt;SafeBrowsingService::WhiteListedEntry std::allocator&lt;SafeBrowsingService::WhiteListedEntry&gt;  &gt;  		enabled_	true	bool  +		db_thread_	{ptr_=0x0519c520 }	scoped_ptr&lt;base::Thread&gt;  		resetting_	false	bool  		new_safe_browsing_	true	bool  		database_loaded_	true	bool  		update_in_progress_	true	bool  		queued_checks_	[0]()  std::deque&lt;SafeBrowsingService::QueuedCheck std::allocator&lt;SafeBrowsingService::QueuedCheck&gt;  &gt;   </pre>