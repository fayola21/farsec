<title>Issue 16136 -   chromium -    Crash - tcmalloc::ThreadCache::FreeList::Pop() - Project Hosting on Google Code</title> <pre> This crash was detected in 3.0.191.3 and appears to be a regression from 3.0.191.3. It is currently ranked #7 (based on the relative number of reports in the release).  There have been 11 reports from 10 clients. Search query: http://crash/search?query=Chrome+3.0.191.3+tcmalloc%3A%3AThreadCache%3A%3AFreeList%3A%3APop%28%29 ---------------------------- *       Summary Data       * ---------------------------- Report Link: http://crash/reportdetail?reportid=7cc0ea3864d8ee2f Mini Dump Link: http://crash/file?reportid=7cc0ea3864d8ee2f&amp;name=upload_file_minidump  Uptime: 49 sec User Comments: null OS: Windows XP Service Pack 3 CPU Architecture: x86 CPU Info: AuthenticAMD family 15 model 12 stepping 0 rept: null ptype: plugin plat: Win32 crash type:(EXCEPTION_ACCESS_VIOLATION@0x2f6d6f63)  ---------------------------- *        Crash Trace       * ----------------------------            [thread_cache.h:213] - tcmalloc::ThreadCache::FreeList::Pop()            [thread_cache.h:364] - tcmalloc::ThreadCache::Allocate(unsigned int)               [tcmalloc.cc:793] - `anonymous namespace'::do_malloc(unsigned int)              [tcmalloc.cc:1059] - `anonymous namespace'::cpp_alloc(unsigned int bool)              [tcmalloc.cc:1159] - tc_new                    [xmemory:44] - std::_Allocate&lt;unsigned char&gt;(unsigned int unsigned char *)                  [xstring:2010] - std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;::_Copy(unsigned int unsigned int)                  [xstring:2040] - std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;::_Grow(unsigned int bool)                  [xstring:1060] - std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;::assign(char const * unsigned int)                  [xstring:1070] - std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;::assign(char const *)                   [xstring:652] - std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt;(char const *) [webplugin_delegate_impl.cc:1192] - WebPluginDelegateImpl::CreateResourceClient(int std::basic_string&lt;char std::char_traits&lt;char&gt; std::allocator&lt;char&gt; &gt; const &amp; bool int int) [webplugin_delegate_stub.cc:361] - WebPluginDelegateStub::OnHandleURLRequestReply(PluginMsg_URLRequestReply_Params const &amp;)      [ipc_message_utils.h:1337] - IPC::MessageWithReply&lt;Tuple1&lt;PluginMsg_URLRequestReply_Params&gt; Tuple0&gt;::Dispatch&lt;WebPluginDelegateStub void ( WebPluginDelegateStub::*)(PluginMsg_URLRequestReply_Params const &amp;)&gt;(IPC::Message const * WebPluginDelegateStub * void ( WebPluginDelegateStub::*)(PluginMsg_URLRequestReply_Params const &amp;)) [webplugin_delegate_stub.cc:102] - WebPluginDelegateStub::OnMessageReceived(IPC::Message const &amp;)          [message_router.cc:41] - MessageRouter::RouteMessage(IPC::Message const &amp;)    [plugin_channel_base.cc:111] - PluginChannelBase::OnMessageReceived(IPC::Message const &amp;)          [plugin_channel.cc:75] - PluginChannel::OnMessageReceived(IPC::Message const &amp;)       [ipc_sync_channel.cc:106] - IPC::SyncChannel::ReceivedSyncMsgQueue::DispatchMessages()           [message_loop.cc:309] - MessageLoop::RunTask(Task *)           [message_loop.cc:317] - MessageLoop::DeferOrRunPendingTask(MessageLoop::PendingTask const &amp;)           [message_loop.cc:423] - MessageLoop::DoWork()       [message_pump_win.cc:209] - base::MessagePumpForUI::DoRunLoop()        [message_pump_win.cc:52] - base::MessagePumpWin::RunWithDispatcher(base::MessagePump::Delegate * base::MessagePumpWin::Dispatcher *)         [message_pump_win.h:78] - base::MessagePumpWin::Run(base::MessagePump::Delegate *)           [message_loop.cc:198] - MessageLoop::RunInternal()           [message_loop.cc:174] - MessageLoop::RunHandler()           [message_loop.cc:155] - MessageLoop::Run()                 [thread.cc:156] - base::Thread::ThreadMain()     [platform_thread_win.cc:26] - `anonymous namespace'::ThreadFunc(void *)       [kernel32.dll+0x0000b728] - BaseThreadStart  ---------------------------- *      Loaded Modules      * ----------------------------     AhJsctNs.dll     pt-BR.dll     chrome.dll     icudt38.dll     chrome.exe     comctl32.dll     MSCTF.dll     NPSWF32.dll     advapi32.dll     clbcatq.dll     comdlg32.dll     comres.dll     crypt32.dll     gdi32.dll     imagehlp.dll     kernel32.dll     lz32.dll     midimap.dll     mlang.dll     msacm32.dll     msacm32.drv     msasn1.dll     mscms.dll     msvcp60.dll     msvcrt.dll     netapi32.dll     ntdll.dll     ole32.dll     oleacc.dll     oleaut32.dll     rpcrt4.dll     schannel.dll     secur32.dll     shell32.dll     shlwapi.dll     t2embed.dll     urlmon.dll     user32.dll     userenv.dll     usp10.dll     uxtheme.dll     version.dll     wdmaud.drv     wininet.dll     winmm.dll     winspool.drv     wintrust.dll     ws2_32.dll     ws2help.dll  </pre>