id,summary,security
12,open Modal Window without AjaxRequestTarget    Wicket 1.2.2 included a new Modal Window component. However  this component can only be used with a valid AjaxRequestTarget. It would be useful if Modal Windows could be opened programmatically at any time without an AjaxRequestTarget.   ,0
16,missing base64/ URL encoding    yesterday i showed the concept of omponents to a friend and stumled into something i dont understand and think it might be a bug. I have a small panelcompoment that holds a searchform (textfield + submit) nothing special here  the code behind looks like:  @Override public void onSubmit()  { String suchFeld = getSuchfeld(); if(suchFeld.length()&gt;0) { PageParameters params = new PageParameters(); params.add('finde' suchFeld); setResponsePage(Suche.class params); } else { setResponsePage(getPage().getClass()); }  }the component is put into a 'BasePage': public BasePage() { ....  add(bar); add(new SuchPanel('SuchPanel')); .....}wich is then extended by the real page:public class Foo extends BasePage{ /** Creates a new instance of Zigarren */ public Foo() { }wich works all fine  however if the class name contains non ascii letters(e.g: �_�__ �_�__ �_�__ etc.) it gives me a bug if nothing is entered into the search and the partpublic class Zubeh�_�__r extends BasePage{ /** Creates a new instance of Zubeh�_�__r */ public Zubeh�_�__r() { }'setResponsePage(getPage().getClass());' comes to action  the trouble is that the page might have the URL:?wicket:bookmarkablePage=:de.pages.Zubeh%C3%B6rbut the form tries to go to : wicket:bookmarkablePage=:de.pages.Zubeh%F6rwich results in a CODE 404 in the App Server   ,0
31,Wrong source paths in build.xml    The paths used in the ant build.xml don't match the actual file structure. In particular  the following changes should be made:The following lines should be changed &lt;property name='src.main.dir' value='src/java' /&gt; &lt;property name='src.test.dir' value='src/test' /&gt;into+ &lt;property name='src.main.dir' value='src/main/java' /&gt;+ &lt;property name='src.test.dir' value='src/test/java' /&gt;   ,0
38,WicketTester fails when calling clickLink on a ResourceLink to a mounted resource    Basics of the testcase are:// in WebApplicationapplication.getSharedResources().add('mountedResource'  new MountedResource());ResourceReference mountedResourceRef = new ResourceReference('mountedResource');application.mountSharedResource('/mountedLink'  mountedResourceRef.getSharedResourceKey());// in WebPageadd(new ResourceLink('mountedResourceLink'  new ResourceReference('mountedResource')));// in testcase itselftester.startPage(LinksPage.class);tester.clickLink('mountedResourceLink'); I've attached an Eclipse generated project  it has a build.xml which should work on the command line  and uses TestNG for the tests.The .war (which can be built using Eclipse) has working links.   ,0
81,Make debug settings session dependent    Currently  the debug settings are global. i.e. everyone gets to see the ajax debug link  or nobody. For production systems it is not acceptable to generate the debug link for all users  but it might be beneficial to quickly see what is going wrong on a site if you can enable the debug link programmatically for a single user.I can imagine that other settings also benefit from this.   ,0
82,Support case insensitive mount paths    http://www.nabble.com/Non-case-sensitive-nice-URL-tf2643746.htmlI use nice URL to mount some page in the usual way :mountBookmarkablePage('/Organization'  Organization.class);That is great  but it will make an error if a user enter the url by hand and decide to not use case sensitive. I mean  I can mount organization without the capital letter  but it would make the same error if the user use Capital after that.Is there a way of using Nice URL that is not case sensitive?ThanksMarc   ,0
85,FormTester does not set request parameters for unchanged form fields    When using the FormTester  the Form is correctly having its field values  but FormTester does not call setFormComponentValue() for every field. Thus  the request parameters are not set for the next request  when submit() is called.The workaround is to call setValue() for every field.The attached patch fixes the problem for AbstractTextComponent. It also adds a new method getTextComponentValue() as a shortcut to access a field value.   ,0
88,NPE in Check.java    The Forms examples fails with an NPE in Check.java if (group.hasRawInput()) { String[] inputs = group.getInputAsArray(); for (String input : inputs) &lt;&lt;&lt;&lt;&lt;&lt; NPE { if (value.equals(input)) { tag.put('checked'  'checked'); } } }Juergen   ,0
91,Russian Application.properties       ,0
100,extract IPageMap interface from PageMap    If we extract a IPageMap interface from PageMap  it will make it easier for clients to provide wrapped/ proxied implementions and gives them more options for implementing custom ISessionStores.   ,0
101,Lazy-registration fails for mounted resources.    If you mount a CSS resource which has background image url() links  the lazy-resolution code in SharedResourceRequestTarget doesn't search class aliases when it tries to locate the image  which is rather annoying.   ,0
105,Remove RequiredTextField from 2.0    To cut down on our API and remove some ultra-convenience stuff  Ipropose to remove RequiredTextField from our API. Requiredness iseasily achieved using 'setRequired(true)'  and therefore removes theneed for a special field.Vote was: 3 binding for removal only in 2.0   ,0
142,NullPointerException after deserialize wicket.util.concurrent.CopyOnWriteArrayList    wicket.feedback.FeedbackMessages by default using wicket.util.concurrent.CopyOnWriteArrayList for storage. however CopyOnWriteArrayList internally use a transient Object[] array_ without checking null and lazy initialization. This may cause NullPointerException after session replication or the like. Below is stack trace while testing terracotta session clustering :WicketMessage: unable to get object  model: Model:classname=&#91;wicket.feedback.FeedbackMessagesModel&#93;:attached=true  called with component [MarkupContainer &#91;Component id = messages  page = ngc.wicket.pages.MainPage   path = 7:globalFeedback:feedbackul:messages.FeedbackPanel$MessageListView  isVisible = true  isVersioned = false&#93;]Root cause:java.lang.NullPointerExceptionat wicket.util.concurrent.CopyOnWriteArrayList.size (CopyOnWriteArrayList.java:152)at wicket.feedback.FeedbackMessages.messages(FeedbackMessages.java:258)at wicket.feedback.FeedbackMessagesModel.onGetObject(FeedbackMessagesModel.java:101)at wicket.model.AbstractDetachableModel.getObject (AbstractDetachableModel.java:104)at wicket.Component.getModelObject(Component.java:990)at wicket.markup.html.panel.FeedbackPanel.updateFeedback(FeedbackPanel.java:234)at wicket.Page$2.component (Page.java:372)at wicket.MarkupContainer.visitChildren(MarkupContainer.java:744)at wicket.Page.renderPage(Page.java:368)   ,0
144,wrong handling of exceptions for Resource#respond and ComponentResourceRequestTarget#respond    Resource's exception handling is too fragile. Currently (before fix) it looks like this: private final void respond(final IResourceStream resourceStream  final Response response) { try { final OutputStream out = response.getOutputStream(); try { Streams.copy(resourceStream.getInputStream()  out); } finally { resourceStream.close(); out.flush(); } } catch (Exception e) { Throwable throwable = e; boolean ignoreException = false; while (throwable != null) { if (throwable instanceof SocketException) { String message = throwable.getMessage(); ignoreException = message != null &amp;&amp; (message.indexOf('Connection reset by peer') != -1 || message .indexOf('Software caused connection abort') != -1); } else { ignoreException = throwable.getClass().getName() .indexOf('ClientAbortException') &gt;= 0; if (ignoreException) { if (log.isDebugEnabled()) { log.debug('Socket exception ignored for sending Resource ' + 'response to client (ClientAbort)'  e); } break; } } throwable = throwable.getCause(); } if (!ignoreException) { throw new WicketRuntimeException('Unable to render resource stream ' + resourceStream  e); } } }and ComponentResourceRequestTarget re-threw this exception  resulting in Wicket trying to render an error page. One problem with the above code is that it is simply does not cover all appservers/versions/os-ses  nor it that something we should want to support. For instance  an aborted request in Jetty on Linux/ OSX results in an IOException (or more concrete EofException).Besides the fact that this can get you weird behavior in general  handling the exception like we did there is never a good idea. We should never try to render an error page for any exception during a resource request but instead set an appropriate status code. I propose status code 500 (INTERNAL_SERVER_ERROR) for this and put that in ComponentResourceRequestTarget  and alter Resource so that it always re-throws any exception.   ,0
149,mounted URLs fail if filterPath is blank    The path in RequestParameters needs to begin with a '/' or it will not be found when checking against mounted paths. The slash is prefixed in WicketFilter line 545 when checking isWicketRequest()  but it is not prefixed later when looking for the request target. Proposed fix in patch (to be attached) performs this operation in ServletWebRequest.getPath(); I'm not sure if that is the ideal spot  but I've confirmed that it fixes the problem.   ,0
151,set session locale when constructing session object    Currently  we create the session objects like this:WebApplication#getSession:if (session == null){ // Create session using session factory session = getSessionFactory().newSession(request); // Set the client Locale for this session session.setLocale(request.getLocale());What I propose is to change the constructor from Session/ WebSession to take in a Locale parameter as well. That would make it possible for custom session classes to fix the locale by setting it in the constructor. Now that is only possible by overriding Session#getLocale   ,0
154,Access to init parameters through getServletContext.getInitParameter() not working    The command WebApplication.get().getServletContext.getInitParameter('param'); always returns null.The init parameters can only be accessed with the WicketFilter class. A getter in the WebApplication class on the wicketFilter field could work. The previous command could then be replaced with:WebApplication.get().getWicketFilter().getFilterConfig().getInitParameter('param');   ,0
155,Extend cases where the exception can be ignored due to an aborted request    We should either find more specific catches in Resource#respond or come up with some other way to ensure we can recognize a client abortion. For instance  Jetty 6 on unix-like platforms (tested here on OpenBSD/ OSX) throws EofExceptions which extend IOExceptions and thus are not marked as ignorable. The problem then is that a stack trace will be printed in ComponentResourceRequestTarget  and as many production systems will have some trigger installed that sends an error message/ SMS/ ... that can be quite annoying.Can't we instead of looking at the exception somehow look at the request/ response itself to figure out that a request was aborted? If that is possible  that seems like a much more robust way of solving this.   ,0
159,Default code for popups should always try to bring the popped up window to the top (focus)    The default implementation of popups (the script generated by PopupSettings) should always try to focus on the popped up window.   ,0
165,While testing with FormTester: onSelectionChanged is not being invoked if DropDownChoice is enabled for notifications    Method DropDownChoice.onSelectionChanged is never called when testing a drop down by calling formTester.select('dropDownChoiceNotified'  0);In my page: form.add(new DropDownChoice('dropDownChoiceNotified'  candidateChoices  bookChoiceRenderer) { private static final long serialVersionUID = 1L; protected boolean wantOnSelectionChangedNotifications() { return true; } protected void onSelectionChanged(Object arg0) { super.onSelectionChanged(arg0); throw new RuntimeException('notification '+arg0); } });In my unit Test I do: formTester.select('dropDownChoiceNotified'  0);and the drop down component is not being notified.It works fine when testing in a container though.   ,0
171,table background='foo' url prefixing    For the src attribute of img tags in the html  the url is automatically prefixed by wicket.It would be nice if that happened for the background property of tables  too.   ,0
172,Component reAttach and versioning    I'm reAttaching a component doing something like: MyFooPanel p1 = new MyFooPanel(this  'panel'; MyBarPanel p2 = new MyBarPanel(this  'panel'); p1.reAttach(); When I try to restore to the initial page version I found that the component with id 'panel' is not a children component of the page. I have investigated it and I think it is because when the component is reAttached the order in which the changes are added to the ChangesList is:  Add p2. Remove p1.When the initial version is restored the undo functionality is done in reverse mode like   Add p1. Remove p2.The problem is p1 and p2 have the same id  so when p2 is removed what is removing is p1 that has just added. Oscar.   ,0
178,Uncaught exception guesing urls using CryptedUrlWebRequestCodingStrategy    When used the CryptedUrlWebRequestCodingStrategy strategy in my wicket application I get an uncaught exception when trying to hack urls in the browser address bar.Configuration: @Override protected IRequestCycleProcessor newRequestCycleProcessor() { return new CompoundRequestCycleProcessor(new CryptedUrlWebRequestCodingStrategy( new WebRequestCodingStrategy())  null  null  null  null); } // newRequestCycleProcessor Exception:java.lang.ArrayIndexOutOfBoundsException: 81 at wicket.util.crypt.Base64UrlSafe.decodeBase64(Base64UrlSafe.java:367) at wicket.util.crypt.AbstractCrypt.decryptUrlSafe(AbstractCrypt.java:87) at wicket.protocol.http.request.CryptedUrlWebRequestCodingStrategy.decodeURL(CryptedUrlWebRequestCodingStrategy.java:256) at wicket.protocol.http.request.CryptedUrlWebRequestCodingStrategy.decode(CryptedUrlWebRequestCodingStrategy.java:91) at wicket.Request.getRequestParameters(Request.java:163) at wicket.RequestCycle.step(RequestCycle.java:992) at wicket.RequestCycle.steps(RequestCycle.java:1084) at wicket.RequestCycle.request(RequestCycle.java:454) at wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:219) at javax.servlet.http.HttpServlet.service(HttpServlet.java:697) at javax.servlet.http.HttpServlet.service(HttpServlet.java:810) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:202) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178) at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:175) at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:74) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105) at org.jboss.web.tomcat.tc5.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:156) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869) at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664) at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527) at org.apache.tomcat.util.net.MasterSlaveWorkerThread.run(MasterSlaveWorkerThread.java:112) at java.lang.Thread.run(Thread.java:595)I'd except that this exception would be caught an a user is taken to a user friendly error page  possibly the default error page.   ,0
215,creating a mountBookmarkablePage with PageMap    from wicket-user@lists.sourceforge.net:On 1/18/07  Igor Vaynberg &lt;igor.vaynberg@gmail.com&gt; wrote:lol  yesi think someone got a bit overzealous with typesafety. please create a jira issue for it and we will change PageMap pageMap to String pageMapName-igorOn 1/17/07  Kadir Sener GUMUS &lt;chaoticknight@gmail.com&gt; wrote:Hi i want to mount a bookmarkablePage with custom pagemap parameter in Application.init() but as a normal result i am experiencing with no session error. Because PageMap.forName('') requires a session. so can i ask you what the method 'mountBookmarkablePage(String path  PageMap pageMap  Class bookmarkablePageClass)' is for? where do i have to define that? i couldnt find any usage description for the method. Thanks.Kadir   ,0
218,Removing comments from markup can fail    Markup with comments in it sometimes causes Wicket to crash with a nasty StringIndexOutOfBoundsException.   ,0
240,NPE in RequestLogger?    java.lang.NullPointerException at java.util.LinkedList.writeObject(LinkedList.java:755) at sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:917) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1339) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at wicket.util.lang.Objects.sizeof(Objects.java:1058) at wicket.Session.getSizeInBytes(Session.java:627) at wicket.protocol.http.RequestLogger.requestTime(RequestLogger.java:215) at wicket.RequestCycle.detach(RequestCycle.java:882) at wicket.RequestCycle.steps(RequestCycle.java:1118) at wicket.RequestCycle.request(RequestCycle.java:454) at wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:243) at wicket.protocol.http.WicketServlet.doGet(WicketServlet.java:136) at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)   ,0
245,WicketServlet deprecation and WicketFilter    Hi I'm one of the maintainer of ops4j-pax-wicket. Atm  I'm trying tomigrate pax-wicket to wicket-2.0 that can be found at(https://scm.ops4j.org/repos/ops4j/branches/pax/wicket-2.0).One of the problem that I found during migration is the fact thatWicketFilter uses reflection to instantiate application factory byusing the FilterConfig.getInitParam( 'applicationFactoryClassName' ).Since this is not advisable in OSGi (Due to problem of ensuringwhoever export the wicket bundle must have it's classloader be able toload the application factory) and HttpService does not support Filter.It would be better if the old pattern of WicketServlet is supported.&lt;code&gt;public class WicketServlet{ protected WicketFilter newWicketFilter() { return new WicketFilter(); } public void init() { wicketFilter = newWicketFilter(); filter.init(new FilterConfig() { ... }); }}&lt;/code&gt;This way  I would be able to override the instantiation ofWicketFilter without having to reimplement my FilterConfig.For example  my wicket servlet will look like like:&lt;code&gt;final class MyWicketServlet extends WicketServlet{ private final IWebApplicationFactory m_appFactory; MyWicketServlet( IWebApplicationFactory factory ) { m_appFactory = factory; } protected final WicketFilter newWicketFilter() { return new WicketFilter() { protected IWebApplicationFactory getApplicationFactory() { return MyWicketServlet.this.m_appFactory; } }; }}&lt;/code&gt;This way  reflection will not be used anymore in both instantiatingWebApplication (bypassing ContextParamWebApplicationFactory class) andIWebApplicationFactory.Regards Edward YakopNote:Can we please remove the log.info part to mark WicketServlet is deprecated.&lt;code&gt;public WicketServlet(){ // log warning log.info('********************************************'); log.info('DEPRECATED! Please use WicketFilter instead.'); log.info('********************************************');}&lt;/code&gt;Reply from Johan Compagner (jcompagner@gmail.com)We will remove the warnings about the deprication when we will release 1.3/2.0for now we want to point people as much as possible to the wicket filter.The wicket servlet will still be there.So you just want a factory method in wicket servlet where you can make the wicket filter?can you add a RFE for this:https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;mode=hide&amp;pid=12310561&amp;sorter/order=DESC&amp;sorter/field=priority&amp;resolution=-1&amp;component=12311420then i will add the factory method asap.johan   ,0
250,Support  src attribute by Link (TextTemplateLink)    The Link class has support for the href proper elements and elements for generating an onclick handler. For the TextTemplateLInk this is not enough  as binding it to a &lt;script&gt; tag results in an onclick handler. As in the &lt;head&gt; tag it is impossible to click on anything  this doesn't work.   ,0
254,Allow to set field values before submitting a form with Ajax in WicketTester    I have code to validate {{TextField}}s one by one with ajax. While the code works  I wasn't able to assert it working with WicketTester.The attached quickstart can be used to reproduce the problem on a 2.0 snapshot. The code works in a browser (validity gets toggled true / false when changing the input length)  but WicketTester fails. With WicketTester  the ajax event gets triggered (and it calls validate on the field)  but isValid always returns true.   ,0
255,pallete: ' is missing in HTML    Index: Palette.html===================================================================&#8212; Palette.html (revision 503672)+++ Palette.html (working copy)@@ -37 7 +37 7 @@ &lt;td class='buttons'&gt; &lt;button type='button' wicket:id='addButton' class='button add'&gt;&lt;img wicket:id='image' src='add.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;button type='button' wicket:id='removeButton' class='button remove'&gt;&lt;img wicket:id='image' src='remove.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;button type='button' wicket:id='moveUpButton' class button up'&gt;&lt;img wicket:id='image' src='up.gif'/&gt;&lt;/button&gt;&lt;br/&gt;+ &lt;button type='button' wicket:id='moveUpButton' class='button up'&gt;&lt;img wicket:id='image' src='up.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;button type='button' wicket:id='moveDownButton' class='button down'&gt;&lt;img wicket:id='image' src='down.gif'/&gt;&lt;/button&gt;&lt;br/&gt; &lt;/td&gt; &lt;td class='pane selection'&gt;   ,0
269,Calls to enabled and visibleInHierarchy should not be done in component resolving.    Currently  the check(s) on whether a component may receive a call is done too early  namely during resolving the request target. This is a problem when components depend on things being initialized in the page or component using detachement. There is also some code duplication. The proper place for this check is in RequestListenerInterface#invoke.   ,0
277,EmailAddressPatternValidator does not correctly identify TLDs with more than 3 letters    The following is already fixed in wicket-1.2  but doesn't seem to have made it into 2.0 yet. The following looks like a valid regex for this:^&#91;_A-Za-z0-9-&#93;(//.&#91;_A-Za-z0-9-&#93;)@&#91;A-Za-z0-9-&#93;(//.&#91;A-Za-z0-9-&#93;)((.&#91;A-Za-z&#93;{2 }){1}$)   ,0
292,Remove IRequestTarget.getLock and the synchronize blocks using it    Synchronization is now done in Session#getPage  which is a better place and makes IRequestTarget#getLock redundant. We should remove that method and the code that depends on it.   ,0
293,PackageRequestTargetUrlCodingStrategy should interrupts the cycle and sends a 404 when a page/class cannot be found.    Using PackageRequestTargetUrlCodingStrategy and manually hacking the url in the browser will throw up a RuntimeException if it cannot load a corresponding page class. Same could happen if the bookmarkable page does not exist anymore  etc... see stacktrace below.The expected behavior is to interrupt the cycle and sends a 404.wicket.WicketRuntimeException: Unable to load class with name: com.mycompany.wicket.pages.xyzw at wicket.application.DefaultClassResolver.resolveClass(DefaultClassResolver.java:70) at wicket.request.target.coding.PackageRequestTargetUrlCodingStrategy.decode(PackageRequestTargetUrlCodingStrategy.java:80) at wicket.protocol.http.request.WebRequestCodingStrategy.targetForRequest(WebRequestCodingStrategy.java:363) at wicket.protocol.http.request.CryptedUrlWebRequestCodingStrategy.targetForRequest(CryptedUrlWebRequestCodingStrategy.java:154) at wicket.request.compound.DefaultRequestTargetResolverStrategy.resolve(DefaultRequestTargetResolverStrategy.java:84) at wicket.request.compound.AbstractCompoundRequestCycleProcessor.resolve(AbstractCompoundRequestCycleProcessor.java:47) at wicket.RequestCycle.step(RequestCycle.java:1008) at wicket.RequestCycle.steps(RequestCycle.java:1100) at wicket.RequestCycle.request(RequestCycle.java:454) at wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:243) at wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:122)   ,0
301,Translation for Czech language    Hi  here is translation of Application properties for Czech language (for wicket-1.2.5)  file name Application_cs.properties.   ,0
323,AjaxEditableLabel on setModel does not update the labels model only the editors    The AjaxEditableLabel when you perform a setModel() it will go ahead and update the underlying model of the editor however  it does not update the underlying model of the Label   ,0
327,Download link does not set Content-Type and Content-Length headers    When using a wicket download link  response headers Content-Type and Content-Length headers are not set.   ,0
330,CheckBox incorrectly converts its model value when a custom Boolean converter is installed    When I use a custom localized Boolean converter (using my custom IConverterLocator) that converts 'Ano' to true and 'Ne' to false (Czech words for 'yes' and 'no') the CheckBox with 'true' getModelObject() will render unchecked. The problem is that CheckBox uses Strings.isTrue() to convert a value returned by getModelObjectAsString() which uses converters. The result is that true is incorrectly converted to false...true -&gt; convertToString() -&gt; 'Ano' -&gt; Strings.isTrue() -&gt; false   ,0
336,Inheritable model cannot be a wrap model    In the code of Component:initModel()  when it comes accross an IWrapModel  it always gets its nested model  not considering if this model itself might be an IInheritableModel. for (Component current = getParent(); current != null; current = current.getParent()) { // Get model IModel model = current.getModel(); if (model instanceof IWrapModel) { model = ((IWrapModel)model).getNestedModel(); } if (model instanceof IInheritableModel) { .... } }Would it be correct do make the following correction ? if (model instanceof IWrapModel &amp;&amp; !(model instanceof IInheritableModel)) { model = ((IWrapModel)model).getNestedModel(); }   ,0
344,clock component doesn't display seconds in some Locales    The Clock component used in ajax Clock and WorldClock examples do not show the seconds with some locales (at least with french locale). This make the example less easy to see in action (updated only once a minute).Replacing:df = DateFormat.getDateTimeInstance(DateFormat.FULL  DateFormat.FULL);by:df = DateFormat.getDateTimeInstance(DateFormat.FULL  DateFormat.FULL  Locale.US);would make it behave the same whatever the default locale is.   ,0
345,BookmarkablePageLink only sets the target attribute when it exists in the markup    BookmarkablePageLink adds an attribute modifier to itself when setPageMap is called. However  it creates the attribute modifier in such a fashion that it is only applied when the target attribute is already in the markup. The initial goal to implement it like that was to make the change unobtrusive. I'm backtracking on that now though  as I now think it is actually half baked. I'd like to change the behavior so that it /always/ sets the target when you call setPageMap on it. This would mean that you'll popup another window if you try to link to a different page map in the same screen  but you shouldn't do that anyway.See http://www.nabble.com/Re%3A-Extending-wicket.markup.html.tree.Tree-p9273422.html for a problem this would fix.   ,0
362,Add ability to manage disabled items from subclasses of AbstractChoice    AbstractChoice does almost everything but disabled items. This patch adds that ability.This is my first patch to Wicket. I had some question about whether to include a default implementation for isDisabled()  but that would have required a Map to be supplied. Then I started wondering about whether four more ctors should be provided to pass in the map. Then I decided it was better managed by the subclass. It can always be improved later.   ,0
371,@SpringBean support of non-singleton beans    Two fixes:In wicket-spring: SpringBeanLocator got a new property called singletonBean  which is true if the bean is a singleton(the property is set in the constructor)In wicket-spring-annot:AnnotProxyFieldValueFactory is modified that if the bean is a non-singleton  then bypass the cache   ,0
373,Some components miss localization (NavigatorLabel  Palette)    wicket.extensions.markup.html.repeater.data.table.NavigatorLabel should be localized. Now there's hard coded string Showing xxx to yyy of zzzwicket.extensions.markup.html.form.palette.Palette - method newAvailableHeader and newSelectedHeader. It think it should be better to use localized model instead of hardcoded strings 'Available' and 'Selected'   ,0
382,Converter misusage/mangling in RadioChoice    1.x RadioChoice:433 is doing conversion. I don't think it should be.I think the default ChoiceRenderer should be doing the conversion  and that if you supply your own  no conversion should be done.   ,0
394,[Patch] do not serialize choices and select in palette.    It takes a long useless time   ,0
396,Wicket.Focus code utterly breaks AjaxEditableLabel    The Wicket.Focus javascript is nice and clever  but isn't clever enough - we've overlooked the use case where people want to set the focus in their AJAX callback to another component.This is particularly bad for the AjaxEditableLabel case  because onblur() on the text field that it pops up causes it to submit the value back to the server and finish the editing process and go away. So the text field pops up  and then wicket moves the focus somewhere else  so it goes away again immediately. Maybe a good stab at fixing 90% of the problem would be to see if the JS in the response has the word 'focus' in it  and not do the focusing if it does?Looking at the user list  I think Johan is the Wicket.Focus man  so I'm assigning this to him. Johan - if this isn't really your domain  obviously feel free to unassign and accept my apologies.   ,0
397,DropDownChoice  empty Model wrong default encoding of special chars    Iv the DDChoice is empty at first  you get a 'Bitte Ausw�_�__hlen' wich is wrongly decoded as 'Bitte Ausw?%len' - so the encoding needs to be checked that it gets correctly encoded according to HTML like &auml;   ,0
404,Using Borders with Markup Inheritance causes component resolution failures    If a Border is used by the BasePage in a markup inheritance implementation  Wicket is unable to resolve any of the components in the child page.I will attach a simple testcase for this.   ,0
416,Handle / servlet mapping or fail consistenly    See WICKET-395We should either handle the / mapping  or if it's too difficult  throw an exception in WicketFilter when / is met in web.xml.   ,0
417,Be able to add string arrays to configuration of DatePicker    As it stands the DatePicker doesn�_��_�t allow the user to configure anything but simple values as configuration for the YUI Calendar. This is problematic if you want to change the weekdays / month labels etc...   ,0
418,Ajax requests don't detach component models    After ajax request the component models are not detached. Page onDetach should detach those models  but since the page itself is not attached  the onDetach method is not called.It's necessary to always call page.detachModels after request. And we should only call page.detach from the request target. The ajax request target should not page.detach  as the behaviorrequesttarget should do that.   ,0
429,NullPointerException in MarkupFragmentFinder.find()    If ID of any component in MarkupStream is null (for example in ends with tags)  the method MarkupFragmentFinder.find() may crash. See patch...   ,0
433,improved reporting on locked page maps    It would be cool if we could log some more information on which request is locking another request when it times out. Currently  we get an error like:exception: After 1 minute the Pagemap null is still locked by: Thread&#91;Jetty thread-105 5 main&#93;  giving up trying to get the page for path: 0:1but Thread&#91;Jetty thread-105 5 main&#93; is hardly useful in a log. More useful would be e.g. the request target.   ,0
455,mvn jetty:run; maven-jetty-plugin not configured    maven-jetty-plugin not configured for wicket-quickstart.   ,0
464,Add global override to disable gzip compression (SAP double-compresses).    It should be possible to deactivate gzip compression. Sometimes gzip is already handled by a proxy server or gzip raises problems (like I experienced on SAP J2EE Enterprise Server).Default should be 'on'.It's always good to have an option.   ,0
467,Feedback is not cleaned up upon AJAX-requests    When doing validation with AjaxFormComponentUpdatingBehavior once an error message is attached to a component it gets sticky and is not refreshed upon new ajax requests. It seems as if feedback is not cleaned up so onEvent always takes the hasError branch  independently of validation results.   ,0
499,Investigate whether we can use component meta data for the storage of feedback messages    Investigate this. See also http://www.nabble.com/Re%3A-svn-commit%3A-r530991---in--incubator-wicket-trunk-jdk-1.4-wicket-src-main-java-org-apache-wicket%3A-Session.java-feedback-FeedbackMessages.java-p10119808.htmlAdvantages of doing this: it is a one-one mapping of the concept that you set a message on a component; you'll never have to worry about cleanup up; just clean up rendered messages  and leave unrendered for whenever they are request or until the component is garbage collected.Disadvantages: no central storage place  making it harder to track. probably less efficient in both storage and processing.   ,0
501,JavaScript comment stripping doesn't handle regexps    The following line is crippled when using javascript comment stripping(from jquery.js) // Handle the common XPath // expression if ( !t.indexOf('//') ) {it will be result in if ( !t.indexOf('the // inside the string quotes are taken as a comment instead of as a string...   ,0
518,Change name of IFormProcessingListener    See http://www.nabble.com/what-is-the-use-case-for-IFormProcessingListener-tf3635720.html#a10152501   ,0
536,ModalWindow does not function under Opera    Initial ModalWindow appears  but with the title: 'Blank Page'. The window remains unpopulated.   ,0
541,Better error message for problematic configuration    Useful when for example build fails to set up configuration.   ,0
549,HeaderContributions are missing if  is a Component.    &#8212; issue copy-pasted from mailing list &#8212;On 5/9/07  Peter Ertl &lt;peter.ertl@gmx.net&gt; wrote:Hi folks I try to setup a multi-language website like that:&lt;? xml version= '1.0' encoding ='UTF-8' ?&gt;&lt;! DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;html wicket:id='html' xmlns:wicket xmlns=' http://www.w3.org/1999/xhtml'xmlns:lang=&#91;current language&#93; lang=&#91;current language&#93;&gt;....However  accessing &lt;html&gt; using a wicket:id will fail:org.apache.wicket.WicketRuntimeException: Programmingerror: 'parent' should be a Page or a Border.changing the tag using a MarkupFilter will also fail as it requires tovalue of the current locale of WebSessionbut the markup filter seems to allow no access to it.It would be straightforward to just access html using a wicket:id...imho this would be a great enhancement!Can somebody think of a better solution?On 5/9/07  Johan Compagner &lt;jcompagner@gmail.com&gt; wrote:hmm this is because of the HtmlHeaderContainer that container wants a pageto be its parent.So you can't attach a wicket container to the html because then youencapsulate the complete page.i dont know immediantly how to solve this   ,0
550,Use WebRequestEncoder everywhere a query string is constructed       ,0
559,LocalizedImageResource escapes ampersands twice (regression)    urlFor returns escaped ampersands (apparently  a change) so LocalizedImageResource should not do it a second time.   ,0
566,tests should be test    In pom.xml for extension  the following is a typo: &lt;dependency&gt; &lt;groupId&gt;org.apache.wicket&lt;/groupId&gt; &lt;artifactId&gt;wicket&lt;/artifactId&gt; &lt;classifier&gt;tests&lt;/classifier&gt; &lt;scope&gt;tests&lt;/scope&gt;&lt;------------ should be &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;Now when using mvn eclipse:eclipse and mvn war I get an extra unnecessary test jar   ,0
574,WicketTester does not bind created Session to SessionStore    The WicketTester constructor  via a call to MockWebApplication.createRequestCycle()  creates a new session but fails to bind it: this.wicketSession = (WebSession) Session.findOrCreate();This means that the session subsequently gets over-written by a new one created in a later call to WicketTester.startPage(). This causes problems for any unit tests which want to set up session data after instantiating a WicketTester  but before calling WicketTester.startPage().The MockWebApplication.createRequestCycle() should probably bind the session immediately after creating it: this.wicketSession = (WebSession) Session.findOrCreate(); getApplication().getSessionStore().bind(getWicketRequest()  wicketSession);Then subsequent calls to startPage() will use this session rather than create a new one.   ,0
595,TimeOfDay.next(Calendar) can return time on same day rather than next day    Currently code does: calendar.add(Calendar.DATE  1); return Time.valueOf(calendar  this);Because Time.valueOf(Calendar  TimeOfDay) always returns the time on the same day  the add is ignored. Instead this code should be the time of day today plus one day like this: return Time.valueOf(calendar  this).add(Duration.ONE_DAY);   ,0
606,AbstractTextComponent#setConvertEmptyInputStringToNull(true) does not work with IObjectClassAwareModels (affects TextField  etc.)    The unit tests ought to cover this  but apparently don't. A TextField should convert empty strings to nulls if you call setConvertEmptyInputStringToNull(true) on it (which the constructors do by default).However  this doesn't currently work: AbstractTextComponent#getConvertEmptyInputStringToNull() is only called from AbstractTextComponent#convertValue(String[]). AbstractTextComponent#convertValue(String[]) is called from FormComponent#convert()  but only if the component doesn't have a type assigned to it. As soon as you use a PropertyModel (which implements IObjectClassAwareModel)  this means empty strings are no longer converted to nulls.This is obviously a great big blocker and needs fixing ASAP.   ,0
612,HeaderContributor forces relative URL    I consider this a bug  and was wondering if you do as well... If so  I will open a JIRA and attach a patch for it. Just let me know.In my 1.2.6 app  I have the following line:add(HeaderContributor.forCss('/resources/styles/global.css'));which generates this in the markup (correctly):&lt;link rel ='stylesheet' type='text/css' href='/resources/css/global.css' &gt;&lt;/link&gt;In 1.3  it generates this in the markup (incorrectly):&lt;link rel ='stylesheet' type='text/css' href='../../..//resources/styles/global.css' &gt;&lt;/link&gt;This is because of the change to have everything with relative URLs  I am assuming. But  I don't want a relative URL  I want an absolute one. I'm thinking that the following change would be appropriate:HeaderContributor.java (26)if (location.startsWith('http://') || location.startsWith('https://'))changed to:if (location.startsWith('http://') || location.startsWith('https://') || location.startsWith('/'))   ,0
613,Prototype scoped Spring beans    I copied the following text from my discussion on wicket-user  and was asked to open an issue  so here it is:http://www.nabble.com/Prototype-scoped-Spring-beans-tf3849285.htmlFor a more complex form I wanted to use a 'stateful' Springbean  to which I applied scope='prototype'. The idea is to have one bean instance for every Form instance. I would access the bean with PropertyModels and direct method calls during construction (i.e. setting initial state from input parameters) and during events  which would alter the state. I inject the bean into the Form with @SpringBean annotation.This works somehow  but sometimes  especially after using the backbutton  I had the problem that the internal state was reset. So I analyzed the stack in the constructor of the bean implementation  and found out that it was called twice during construction of the Form. First  during the super() call  and then again in the next line during a method call on that bean. I appended both stacktraces below. The proxy itself does not change.This happens again after going back and e.g. submitting again. This results in a NPE  because the internal state is reset.I understand from reading the mailing list that the Wicket-Proxy does nothing but a lookup in the Application context  and does not know or care about spring scope.And here I'm a little stuck. I am already considering to put the state into the Form  and make the Bean a singleton without any internal state. As that would mean some heavy refactoring  I would prefer a way where the Spring acces would work as I want. Or is this a wrong way altogether?   ,0
628,WicketFilter tries to call setClassLoader() even if it's not changing the default - doesn't work on strict SecurityManagers.    As summary. Solution is to avoid setting the classloader if it's not actually changed.   ,0
631,Resource.getParameters() empty when resource is mounted    After migrating my application from 1.2.6 to 1.3.0-incubating-SNAPSHOT mounted shared resources (rss feeds  uploaded images) stopped working.DynamicWebResource.getParameters().getXXX() returns with null if the resource is mounted via Application.mountSharedResource but it works fine when the resource is not mounted.   ,0
637,wicket-examples grey-on-white colour scheme is very hard to read    The current wicket-examples colour scheme is light grey text on a white background. This is very low in contrast  and difficult to read.In the source code views  which unlike the rest  use a smaller serif font  this is especially noticeable.Even something as simple as switching to plain black on white would be an immediate benefit.   ,0
638,wicket-examples source code view is not resizable    The wicket-examples source code view is not resizable  and is rather small on larger screens.   ,0
661,fire onchange event of associated component after date selection    sometimes it's desirable to be notified after a date was selected.therefore the change event (onchange() method) of the associated component should be fired.to not break existing code  a second constructor should be added to specify whether the event should be fired  whereas the default behavior is to not fire the event.   ,0
663,enhance ichoicerenderer with id->choice object lookup    add object idtochoice(string id) to ichoicerenderer and add class choicerenderer implements ichoicerenderer that encapsulate the default linear searchthen we can remove method added in WICKET-348 to support a custom lookup   ,0
667,[PATCH] remove XX in firefox and palette    I know it is a firefox bug but we can workaround (at least into palette) this with the attach patch   ,0
669,AjaxEditableLabel needs Model for adding a IValidator    If you add a IValidator to a AjaxEditableLabel which has no model yet  one gets the following Exception:java.lang.IllegalStateException: No model found for this component  either pass one explicitly or make sure an inheritable model is available. This component is not added to a parent yet  so if this component is supposed to use the model of the parent (e.g. when it uses a compound property model)  add it first before further configuring the component calling methods like e.g. setType and addValidator. at org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel.getParentModel(AjaxEditableLabel.java:450) at org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel.getEditor(AjaxEditableLabel.java:310) at org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel.add(AjaxEditableLabel.java:194)The error message is very clear. There should be a small hint in the JavaDoc for add(IValidator):/** Adds a validator to this form component. A model must be available for this component before Validators can be added. Either add this Component to its parent (already having a Model)  or provide one directly before this call via constructor {@link #AjaxEditableLabel(String IModel)} or {@link #setModel(IModel)}.  @param validator The validator @return This */   ,0
672,DateTextField is too session-heavy    org.apache.wicket.extensions.markup.html.form.DateTextField seems too heavy for http session - it holds SimpleDateFormat instance which in turn holds DateFormatSymbols instance which in turn has several arrays inside.   ,0
685,ReloadingWicketFilter not working with markup inheritance    This is happening for latest snapshot (2007-06-22). Last time I refreshed from Maven was 2007-06-06 when things were working fine.Problem occurs when I use the ReloadingWicketFilter  does not matter if in Wicket development mode or not.My login page is not using markup inheritance  it works fine. But after login success  next page (home page) causes this error:=========2007-06-22 22:46:15 531 &#91;btpool0-6&#93; DEBUG &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - clzLocation=/E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/BasePage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; INFO &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - Watching changes of class E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/BasePage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; DEBUG &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - clzLocation=/E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/DashboardPage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; INFO &#91;org.apache.wicket.application.ReloadingClassLoader&#93; - Watching changes of class E:/peter/jtrac-trunk/jtrac/target/jtrac/WEB-INF/classes/info/jtrac/wicket/DashboardPage.class2007-06-22 22:46:15 562 &#91;btpool0-6&#93; ERROR &#91;org.apache.wicket.RequestCycle&#93; - Markup of type 'html' for component 'info.jtrac.wicket.DashboardPage' not found. Enable debug messages for org.apache.wicket.util.resource to get a list of all filenames tried:&#91;Page class = info.jtrac.wicket.DashboardPage  id = 1  version = 0&#93;org.apache.wicket.markup.MarkupNotFoundException: Markup of type 'html' for component 'info.jtrac.wicket.DashboardPage' not found. Enable debug messages for org.apache.wicket.util.resource to get a list of all filenames tried:&#91;Page class = info.jtrac.wicket.DashboardPage  id = 1  version = 0&#93; at org.apache.wicket.MarkupContainer.getAssociatedMarkupStream(MarkupContainer.java:342) at org.apache.wicket.markup.html.WebPage.onBeforeRender(WebPage.java:363) at org.apache.wicket.Component.beforeRender(Component.java:846) at org.apache.wicket.Page.renderPage(Page.java:885) at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:225)============Root cause:org.apache.wicket.WicketRuntimeException: Parameter clazz must be instance of containerat org.apache.wicket.markup.MarkupCache.getMarkup(MarkupCache.java:244)at org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader.checkForMarkupInheritance(InheritedMarkupMarkupLoader.java:99)at org.apache.wicket.markup.loader.InheritedMarkupMarkupLoader.loadMarkup(InheritedMarkupMarkupLoader.java:65)at org.apache.wicket.markup.loader.DefaultMarkupLoader.loadMarkup(DefaultMarkupLoader.java:56)at org.apache.wicket.markup.MarkupCache.loadMarkup(MarkupCache.java:389)at org.apache.wicket.markup.MarkupCache.loadMarkupAndWatchForChanges(MarkupCache.java:462)at org.apache.wicket.markup.MarkupCache.getMarkup(MarkupCache.java:282)at org.apache.wicket.markup.MarkupCache.getMarkupStream(MarkupCache.java:188)at org.apache.wicket.MarkupContainer.getAssociatedMarkupStream(MarkupContainer.java:331)at org.apache.wicket.markup.html.WebPage.onBeforeRender(WebPage.java:363)at org.apache.wicket.Component.beforeRender(Component.java:846)at org.apache.wicket.Page.renderPage(Page.java:885)at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:225)===========Couple of other points  if I now type in the URL of another page which is bookmarkable  that works and from there if I go to the home page things are fine. Looks like now the class + markup gets cached etc.Another thing is if in my extension of ReloadingWicketFilter I exclude the class that is the base page for markup inheritance  things start working but I get a different class conflict error somewhere deep in the navigation and component hierarchy  let me know if you need me to send the lof for this also.If this is of any relevance  I am using a custom AuthorizationStrategy - so that is how the login page comes up in the first place: throw new RestartResponseAtInterceptPageException(LoginPage.class) - and then from Login page I do continueToOriginalDestination() - maybe this has something to do with it?   ,0
695,Border.resolve() should not attempt to render contents if bodyVisible is false    Border.resolve() should not attempt to render its nested components if setBorderBodyVisible(false) has been called. This way the behavior would be similar to Component.setVisible() - when the contents are not visible  wicket would not raise an exception if there are no corresponding components for the border's markup.   ,0
698,If the model is List  PropertyResolver doesn't try to find fields.       ,0
703,AjaxEditableChoiceLabel doesn't work    AjaxEditableChoiceLabel doesn't init properly - it always creates DropDownChoice with null in the choices field. The newEditor() method is called from the AjaxEditableLabel constructor and at that time AjaxEditableChoiceLabel.choices is not initialized yet.   ,0
707,Invoking a request listener on a page returns an Expired Error page    The Page object being a Component should support the Wicket request listener mechanism. But invoking a request listener on page defined listener object it results in a 'Page Expired' error page. To reproduce it try the following code:public interface IHelloListener extends IRequestListener{ public static final RequestListenerInterface INTERFACE = new RequestListenerInterface(IHelloListener.class); void onHello();}public class HelloWorld extends WebPage implements IHelloListener{ public HelloWorld() { add(new Label('message'  'Hello World!')); WebMarkupContainer link = new WebMarkupContainer('link'); link.add(new SimpleAttributeModifier('href'  RequestCycle.get().urlFor(this  IHelloListener.INTERFACE))); add(link); } public void onHello() { RequestCycle.get().setRequestTarget(new IRequestTarget() { public void detach(RequestCycle requestCycle) { } public void respond(RequestCycle requestCycle) { requestCycle.getResponse().write('&lt;html&gt;&lt;body&gt;HELLO!&lt;/body&gt;&lt;/html&gt;'); } public Object getLock(RequestCycle requestCycle) { return null; } }); }}   ,0
709,Unable to remove an IFormValidator from a Form    It seems that there is no way to remove an IFormValidator from a Form. Because the fields in my Form are inside Panels (only one of which is present at any given time)  the Form fields are not necessarily children of the Form. When one of the Form's IFormValidators receives a getDependentFormComponents call  it (correctly  I believe) returns the form components that it validates. An exception occurs when getParent is called on these components (in attempt to find the Form somewhere up the hierarchy) up the call stack. Since the change in the Panel that's present is made via an Ajax update  the same update would be able to remove the offending IFormValidator when its Panel is removed. (That is  if there was a method in Form to remove an IFormValidator.) For now  I've hacked it so that my IFormValidator checks whether all its Form Components all have parents before any of its methods return non-null values. (I'm not just changing the Panel visibility because then the hidden Panels would still get validated  and I don't want that to happen.)   ,0
716,make getConvertedInput final again and remove final from convert  which should be renamed to convertInput    See http://www.nabble.com/Re%3A-Use-getConverterInput-rather-than-updateModel-in-FormComponentPanel-p11399356.html   ,0
726,make default maximum upload size an application setting    Current  the default maximum upload size is defined in Form as: /** Maximum size of an upload in bytes */ private Bytes maxSize = Bytes.MAX;It would be better to make this an application setting.   ,0
727,WicketTester cause SerializableChecker$WicketNotSerializableException    When turn on logger level to info  testing with wicketTester see lots of SerializableChecker$WicketNotSerializableException stacktrace:ERROR - Objects - Error serializing object class org.apache.wicket.util.tester.DummyHomePage [object=&#91;Page class = org.apache.wicket.util.tester.DummyHomePage  id = 0  version = 0&#93;]org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.wicket.util.tester.WicketTesterTestField hierarchy is: 0 &#91;class=org.apache.wicket.util.tester.DummyHomePage  path=0&#93; private org.apache.wicket.util.tester.ITestPageSource org.apache.wicket.util.tester.DummyHomePage.testPageSource &#91;class=org.apache.wicket.util.tester.WicketTesterTest$1&#93; final org.apache.wicket.util.tester.WicketTesterTest org.apache.wicket.util.tester.WicketTesterTest$1.this$0 &#91;class=org.apache.wicket.util.tester.WicketTesterTest&#93; &lt;----- field that is not serializable at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:347) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:615)The cause of error is annoymous inner class ITestPageSource:tester.startPage(new ITestPageSource(){ private static final long serialVersionUID = 1L; public Page getTestPage() { Book mockBook = new Book('xxId'  'xxName'); return new ViewBook(mockBook); }});annonymous ITestPageSource instance reference to TestCase and TestCase is not serializable.To avoid serialize TestCase  we can make ITestPageSource field of DummyHomePage transient:public class DummyHomePage extends WebPage{ private transient ITestPageSource testPageSource;....}   ,0
728,WicketTester could not handle Multipart form without upload    When testing the form that contains FileUploadField without upload  wicketTester throw exception with message: 'ServletRequest does not contain multipart content'// ex:public class FormTesterTest extends WicketTestCase{ /** Test that formTester deal with Multipart form correctly when no actual upload */ public void testSubmitWithoutUploadFile() { tester.startPage(MockFormFileUploadPage.class); MockFormFileUploadPage page = (MockFormFileUploadPage)tester.getLastRenderedPage(); Session.get().setLocale(Locale.US); FormTester formTester = tester.newFormTester('form'); // without file upload formTester.submit(); assertNull(page.getFileUpload()); tester.assertErrorMessages(new String[] { 'Field 'file' is required.' }); }}The cause is that Form contains FileUploadField is considered as multipart. But MockHttpServletRequest only generate Multipart contentType and contentLength when there is any upload file added via formTester.setFile(...). Thus without any file upload while testing  MultipartServletWebRequest throw exception.To solve this  I try to introduce a flag useMultiPartContentType in MockHttpServletRequest  so FormTester can change MockHttpServletRequest to generate correct contentType.attachment is patch   ,0
729,OnChangeAjaxBehavior does not work with  when using Safari    With the latest 1.3.0-SNAPSHOT  the following does not work with Safari 2.0.4. The handler is never invoked and the AJAX debug console shows absolutely no activity. The exact same code works with Firefox 2.0.0.4.import java.io.Serializable;import org.apache.wicket.ajax.AjaxRequestTarget;import org.apache.wicket.ajax.form.OnChangeAjaxBehavior;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.TextArea;import org.apache.wicket.model.Model;import org.apache.wicket.model.PropertyModel;public class WicketBugPage extends WebPage { public WicketBugPage() { super(new Model(new Item())); Form form = new Form('form'); add(form); TextArea description = new TextArea('description'  new PropertyModel(getModel()  'description')); description.add(new OnChangeAjaxBehavior() { @Override protected void onUpdate(AjaxRequestTarget target) { Item item = (Item) getModelObject(); System.out.println(item.getDescription()); } }); form.add(description); } public static class Item implements Serializable { private String description; public void setDescription(String description) { this.description = description; } public String getDescription() { return description; } }}&lt;html&gt;&lt;body&gt; &lt;form wicket:id='form'&gt; &lt;textarea wicket:id='description'&gt;&lt;/textarea&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;   ,0
732,Qualified resource key should take priority over unqualified one    Currently an unqualified resource key should take priority over a qualified one? eg  in a properties file:Required=The ${label} is missing!form.username.Required=You must provide your name!The first entry will take priority  while common intuition is that the first one is the default and the second one is overriding it.Please consider reversing it. Thanks!   ,0
738,setVisible(false) on Page throws NPE    Found this by accident while looking for a bug involving misplaced parenthesis add(..).setVisible(false) instead of add(.. .setVisible(false) );public class MyPage extends Page { MyPage() { ... setVisible(false); }...}GivesUnexpected RuntimeExceptionRoot cause:java.lang.NullPointerExceptionat org.apache.wicket.Component.render(Component.java:1977)at org.apache.wicket.Page.renderPage(Page.java:927)at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:225)at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:103)at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1037)at org.apache.wicket.RequestCycle.step(RequestCycle.java:1107)at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1176)at org.apache.wicket.RequestCycle.request(RequestCycle.java:499)at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:257)at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:127)at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)at org.mortbay.jetty.Server.handle(Server.java:285)at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:502)at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:821)at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:513)at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:208)at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:378)at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:226)at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442)   ,0
748,ServletWebRequest.getRelativePathPrefixToContextRoot generates wrong relative path if current page has URL-encoding in the params.    Actually  this is against 1.3.0-SNAPSHOT revision: 554607I have been trying to find a very annoying  seeminly sporadic  glitch where my images that are relative to the context wouldn't 'find' the image file. Looking at the source  they would have 11 sets of '..' versus the 5 sets that the other resources would have. Here is how I was trying to display the image:&lt;img src='images/find.png'/&gt; I was finally able to produce a scenario in a quickstart to prove the problem exists. It seems that getPath() and getServletPath() don't work the same way  in that I mean  getPath() had the '{' encoded as '%7B' whereas getServletPath() was not encoded.Therefore  this test fails and the path is not properly handled! if (servletPath.endsWith(path))   ,0
754,add support for localization    currently  the default language (english) of YUI calendar is used. this makes the datepicker in nonenglish applications quite unusable.i will soon submit a patch with a .properties-file approach.   ,0
761,Disable line-precise exceptions for component use check    vote here:http://www.nabble.com/-VOTE--disable-line-precise-error-reporting-by-default-tf4037146.html#a11469624while looking in the code i noticed that line-precise information is collected under the same setting as component-use-check. i think the exception part should be factored out into a separate setting. component use check is still very valuable without line-precise information and has no perceptible slow down like the line-precise exceptions.   ,0
765,default pagemap name of null is not always properly encoded into the url    when pagemap name happens to be the last url parameter and coding strategy is /param1/value1/ the url ends up looking like:/param1/value1/wicket:pageMapName/which when split on '/' produces{param1 value1 wicket:pageMapName}which causesjava.lang.IllegalStateException: URL fragment has unmatched key/value   ,0
782,Select doesn't validate 'Required'    The Select-Component doesn't validate 'Required' if current user-selection points to an empty value in drop-down-mode.   ,0
795,Easy access to final rendered page source    I'd like a way to run pages through Wicket so that I can grab the final HTML and use it elsewhere (as an email body  for instance). I've been working on it and I've got a working solution  but there is still a snag.Spawned from this thread:http://www.nabble.com/How-to-get-HTML-source-code-from-a-wicket-page-tf3968790.html#a11265339Chunk of working code:http://www.nabble.com/How-to-get-HTML-source-code-from-a-wicket-page-tf3968790.html#a11548230Current existing hurdle:http://www.nabble.com/RequestCycle-goes-null-after-using-WicketTester-within-Wicket-page-tf4153591.htmlOnce I can get this simple bit to work  I'll add parameters and what not...   ,0
796,setresponsepage() does not properly redirect from ajax requests    if you are on a mounted page with parameters  lets say/context/page/param1/param2/and you call setresponsepage() from an NORMAL link on that page you will land on/context/?wicket:interface=...which is correct  however if you do it from an ajax link like so: onclick(ajaxrequesttarget target) { setresponsepage(new mypage()); } you will land on /context/page/param1/param2/?wicket:interface=...which is INCORRECTl. notice that the mount and params were not stripped. also now because wicket thinks url depth is 0 urls will break  for example a resource requested from that page will be:/context/page/param1/param2/resources/..... woopsiewhy this happens:when setresponsepage is called the ?wicket:interface:foo::: url is constructed and passed to webresponse.redirect(url) which in turn calls httpServletResponse.sendRedirect(url); for normal responses or httpServletResponse.addHeader('Ajax-Location'  url); for ajax responses. the big difference is how servletresponse handles this  and from the javadoc: This method can accept relative URLs; the servlet container will convert the relative URL to an absolute URL before sending the response to the client. so what needs to be done is that httpServletResponse.addHeader('Ajax-Location'  url); also needs to mangle the url and make it absolute.since you are the proxy guy and i dont know how this will play into that i am assigning it to you   ,0
805,upgrade to SLF4J to version 1.4.2    SLF4J 1.4.2 was released in July 2007. Can we upgrade SLF4J in the Maven pom?   ,0
807,MockHttpServletRequest.addFile does not work with binary files    http://www.nabble.com/Uploading-binary-files-via-MockHttpServletRequest-tf4192893.html#a11934991As stated in the thread  I can upload text (xml) files just fine but binary data does not work. I suspect there are some encoding issues which cause the binary data to be corrupted. buildRequest() looks like it is corrupting the binary data when it pushes the data into String format. I don't think this is right - you should treat the request as a byte array  not a String. I think the MIME or HTTP RFCs might have more info on how binary data is supposed to be packaged within an HTTP request.   ,0
823,Empty content inserted into Border - throws ugly exceptions    This can be easily reproduced wirth wicket-examples/template/templating using border.Please open: org.apache.wicket.examples.template.border.Page1ant cut ALL the contents inside span  wicket:id='border'It should look like this: &lt;span wicket:id='border'&gt;&lt;/span&gt;After this  the page renders nicely.But if you change it to look like this: &lt;span wicket:id='border' /&gt;there are tons of exceptions that do not say anything useful.I have spent 1 full day fighting with this before I found the reason in my little app.   ,0
824,Session id encoding problem in cookie-less mode    If I disable session cookies  the URL-encoding does not work. The problem appears in displaying 'page expired' when I click through 'wicket-exmples' . I discovered that HttpServletResponse.encodeUrl() called by WebRequestCodingStrategy.encode() does not encode the session id  if it is called with a relative URL like '?wicket:interface=:0:inputForm:IFormSubmitListener::'. i.e.. starting with '?'.   ,0
826,No scrolling behaviour of source code viewer in IE 6    The source code viewer does not display scroll bars in IE 6.   ,0
827,Ajax refresh fails when a fragment is included in the target    Attached there is a package to drop into a quickstart project. If contains a panel that is a fragment provider and which also includes an ajax link to refresh the fragment contents. The main page just shows this panel and the provided fragment. Following the link raises the following exception:WicketMessage: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: &#91;Component id = fragmentContent  page = web.fragment.Consumer  path = 0:container:fragment:fragmentContent.Label  isVisible = true  isVersioned = true&#93;Root cause:org.apache.wicket.WicketRuntimeException: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: &#91;Component id = fragmentContent  page = web.fragment.Consumer  path = 0:container:fragment:fragmentContent.Label  isVisible = true  isVersioned = true&#93;at org.apache.wicket.MarkupFragmentFinder.find(MarkupFragmentFinder.java:111)at org.apache.wicket.Component.locateMarkupStream(Component.java:3274)   ,0
837,Use -DpackageName if it is specified    Hi Wicket's archetype (http://svn.apache.org/repos/asf/wicket/trunk/archetypes) uses 'groupId' as a placeholder for the package name. If someone specifies Maven's option -DpackageName then this option will be neglected and the produced project will not compile.The attached patch resolves this problem. It works either when -DpackageName is not specified (then -DgroupId is being used).P.S. I put this issue at wicket-quickstart component since there is no such for the archetype.Kind regardsMartin   ,0
838,AjaxFormChoiceComponentUpdatingBehavior not working    I think this is because of its own component field that is hiding that of AbstractAjaxBehavior. Try to run the attached example and you will get:WicketMessage: Exception in rendering component: [MarkupContainer &#91;Component id = _header_  page = com.livra.web.user.RegistrationPage  path = 12:_header_.HtmlHeaderContainer  isVisible = true  isVersioned = true&#93;]Root cause:java.lang.NullPointerExceptionat org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior.renderHead(AjaxFormChoiceComponentUpdatingBehavior.java:71)at org.apache.wicket.Component.renderHead(Component.java:2266)at org.apache.wicket.markup.html.internal.HtmlHeaderContainer$1.component(HtmlHeaderContainer.java:209)at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:843)at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:858)at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:883)   ,0
841,More problems with ajax and transparent containers    Attached is my attempt to get a list that is ajax refreshed just at the tail. It's implemented as a sort of linked list. There are two versions. 'list' implements each node as a Panel  having contents (a number) and a next container which is made visible and ajax refreshed when one new element is added to the list. 'list2' does the same but using a Fragment instead of a Panel. You guessed  panels works just fine  but for the fragments version I get the usual transparent containers exception when trying to append an element:WicketMessage: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: [MarkupContainer &#91;Component id = nextContainer  page = web.list2.ListPage  path = 0:first:nextContainer.WebMarkupContainer  isVisible = true  isVersioned = true&#93;]Root cause:org.apache.wicket.WicketRuntimeException: Unable to find the markup for the component. That may be due to transparent containers or components implementing IComponentResolver: [MarkupContainer &#91;Component id = nextContainer  page = web.list2.ListPage  path = 0:first:nextContainer.WebMarkupContainer  isVisible = true  isVersioned = true&#93;]at org.apache.wicket.MarkupFragmentFinder.find(MarkupFragmentFinder.java:111)at org.apache.wicket.Component.locateMarkupStream(Component.java:3274)at org.apache.wicket.Component.renderComponent(Component.java:2087)at org.apache.wicket.ajax.AjaxRequestTarget.respondComponent(AjaxRequestTarget.java:772)at org.apache.wicket.ajax.AjaxRequestTarget.respondComponents(AjaxRequestTarget.java:672)at org.apache.wicket.ajax.AjaxRequestTarget.respond(AjaxRequestTarget.java:522)at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:103)at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1038)   ,0
846,Javadocs for AbstractDefaultAjaxBehaviorPrecondition#getSuccessScript() and #getPreconditionScript() are swapped    Precondition and success description are swapped: /** @return javascript that will run when the ajax call finishes successfully */ protected CharSequence getPreconditionScript() { return null; } /** * @return an optional javacript expression that determines whether the request * will actually execute (in form of return XXX; */ protected CharSequence getSuccessScript() { return null; }   ,0
859,DateField's/ DateTimeField's factory methods should pass in ids    A very stupid mistake  but factory method:protected DateTextField newDateTextField(PropertyModel dateFieldModel)should of course pass in the id that the child component should use:protected DateTextField newDateTextField(String id  PropertyModel dateFieldModel)   ,0
861,NumberFormatException with UrlCompressingWebRequestProcessor in WicketTester    In my Application I use UrlCompressingWebRequestProcessor. Now I have a JUnit test case with WicketTester and that Application like this:tester.startPage(new ITestPageSource() { public Page getTestPage() { PageParameters params = new PageParameters(); params.add('0'  'param'); return new MyPage(params); }});I get an Exception:java.lang.NumberFormatException: For input string: 'testPage' at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48) at java.lang.Integer.parseInt(Integer.java:447) at java.lang.Integer.parseInt(Integer.java:497) at org.apache.wicket.protocol.http.request.urlcompressing.UrlCompressor.getComponentAndInterfaceForUID(UrlCompressor.java:124) at org.apache.wicket.protocol.http.request.urlcompressing.UrlCompressingWebRequestProcessor.resolveListenerInterfaceTarget(UrlCompressingWebRequestProcessor.java:81) at org.apache.wicket.request.AbstractRequestCycleProcessor.resolveRenderedPage(AbstractRequestCycleProcessor.java:440) at org.apache.wicket.protocol.http.WebRequestCycleProcessor.resolve(WebRequestCycleProcessor.java:139) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1091) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1177) at org.apache.wicket.RequestCycle.request(RequestCycle.java:500) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:381) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:368) at org.apache.wicket.util.tester.BaseWicketTester.executeListener(BaseWicketTester.java:239) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:224)I could work around this by using WebRequestCycleProcessor for my testing-application.   ,0
864,HttpServletResponse.encodeRedirectURL() missing in WicketFilter    In class org.apache.wicket.protocol.http.WicketFilter in method doGet a redirect URL is not encoded with HttpServletResponse.encodeRedirectUrl(): 168 // Special-case for home page - we redirect to add a trailing slash. if (relativePath.length() == 0 &amp;&amp; !Strings.stripJSessionId(servletRequest.getRequestURI()).endsWith('/')) { final String redirectUrl = servletRequest.getRequestURI() + '/';--------&gt; servletResponse.sendRedirect(redirectUrl); return; }From Wicket's perspective this seems to be not necessary here to support cookie-less mode. But notice that an application may depend on a session outside the wicket scope e.g. by including a ServletFilter in front of WicketFilter  which handles data in session scope.   ,0
871,Markup hirarchy gets messed up when value of  attribute 'background' is a relative path    $ svn diff -r HEADIndex: src/main/java/org/apache/wicket/quickstart/Index.java===================================================================&#8212; src/main/java/org/apache/wicket/quickstart/Index.java (Revision 568574)+++ src/main/java/org/apache/wicket/quickstart/Index.java (Arbeitskopie)@@ -17 6 +17 7 @@ package org.apache.wicket.quickstart; import org.apache.wicket.PageParameters;+import org.apache.wicket.markup.html.basic.Label; /** Basic bookmarkable index page.@@ -35 5 +36 6 @@ */ public Index(final PageParameters parameters) {+ this.add(new Label('myname'  'Whishing that this is not a bug.')); } }Index: src/main/java/org/apache/wicket/quickstart/Index.html===================================================================    src/main/java/org/apache/wicket/quickstart/Index.html (Revision 568574)+++ src/main/java/org/apache/wicket/quickstart/Index.html (Arbeitskopie)@@ -5 6 +5 9 @@ &lt;body&gt; &lt;h1&gt;QuickStart&lt;/h1&gt; &lt;p&gt;This is your first Wicket application.&lt;/p&gt;+ &lt;span background='images/bg.jpg'&gt;+ &lt;p wicket:id='myname'&gt;Hello&lt;/p&gt;+ &lt;/span&gt; &lt;/body&gt; &lt;/html&gt;   ,0
872,Typo in org.apache.wicket.markup.html.tree.res.tree.js causes AJAX tree node addition failures    There is a typo in the tree javascript which can sometimes cause node addition failures. Here is the patch:Index: tree.js===================================================================&#8212; tree.js (revision 568693)+++ tree.js (working copy)@@ -46 7 +46 7 @@ Wicket.Tree.createElement = function(elementId  afterId) { var existing = Wicket.$(elementId); if (typeof(existing) != 'undefined' &amp;&amp; exiting != null) {+ if (typeof(existing) != 'undefined' &amp;&amp; existing != null) { Wicket.Tree.askForReload(); }   ,0
880,Option to align DatePicker to the left of icon    wicket-1.3.0-SNAPSHOTI'm using the wicket YUI DatePicker on a DateTextField in my application  and it works quite nicely. The problem is that my date field is on the far right-hand side of the page. When set to align with icon  the DatePicker appears so that the left edge of the calendar is lined up with the left edge of the icon. When I open the DatePicker  the calendar appears mostly offscreen  and the user has to scroll horizontally to interact with it.I wanted my DatePicker to line up the other way - with the calendar's right edge aligned with the right edge of the icon - so the user doesn't have to scroll. I made a RightAlignedDatePicker that does this  but it's not good enough to be a patch  since it duplicates a lot of code unnecessarily. I would like to see this as a standard setting on the wicket DatePicker if possible!I created RightAlignedDatePicker.java only so I could replace DatePicker.js with RightAlignedDatePicker.js. The rest of the code from renderHead() is copied from DatePicker directly. Similarly  I replaced RightAlignedDatePicker.js so that I could replace the showCalendar() method  and introduce my Wicket.DateTime.positionRelativeToLeft() method. The important code that had to be changed was:function showCalendar() { Wicket.DateTime.positionRelativeToLeft = function(subject  target) { targetPos = YAHOO.util.Dom.getXY(target); targetHeight = YAHOO.util.Dom.get(target).offsetHeight; targetWidth = YAHOO.util.Dom.get(target).offsetWidth; var calWidth = YAHOO.util.Dom.get(subject).offsetWidth; YAHOO.util.Dom.setX(subject  targetPos[0] + targetWidth - calWidth); YAHOO.util.Dom.setY(subject  targetPos[1] + targetHeight + 1); } Wicket.DateTime.showCalendar(YAHOO.wicket.${widgetId}DpJs  YAHOO.util.Dom.get('${componentId}').value  '${datePattern}');// if (${alignWithIcon}) Wicket.DateTime.positionRelativeTo(YAHOO.wicket.${widgetId}DpJs.oDomContainer  '${widgetId}Icon'); if (${alignWithIcon}) Wicket.DateTime.positionRelativeToLeft(YAHOO.wicket.${widgetId}DpJs.oDomContainer  '${widgetId}Icon'); }I tried introducing the positionRelativeToLeft method elsewhere  but I started running into javascript errors  so I left it here. There could be an extra (optional) parameter added to Wicket.DateTime.positionRelativeTo() instead.Hope this seems like a helpful addition. I think it won't be too bad to implement.-Russ   ,0
884,Add class or id to AjaxFallbackDefaultDataTable elements (NavigationToolbar  etc.) to facilitate CSS styling    It would be nice to have a CSS class or id assigned to various HTML elements of the more complex pre-fab components such as the AjaxFallbackDefaultDataTable. This would facilitate styling via CSS and increase re-usability.Link to mailing list archive here:http://www.nabble.com/forum/ViewPost.jtp?post=12321602&amp;framed=y   ,0
886,InlineFrame with null PageMap raises exception    This constructor public InlineFrame(final String id  final Page page) { this(id  null  new IPageLink()is calling this other public InlineFrame(final String id  final IPageMap pageMap  IPageLink pageLink) { super(id); this.pageMapName = pageMap.getName();which of course raises a null pointer exception at 'pageMap.getName();'   ,0
887,Unable to find InlineFrames when inside ListViews    There is a simple example attached. Even if the list is reusing items (and even with a RefreshingView with reuseifmodelequal strategy) the problem persists.   ,0
895,If a form includes a DataTable with AjaxEditableLabels and the form should be refresh an exception occurs when a user switches between a changed label to another    A normal Form includes a DataTable which includes some AjaxEditableLabels.If the user changes the contens of a label and the label has an effect of the whole DataTable the complete from has to be refreshed. But if the user switches between one label to another  an exception occurs.UseCase:click on label and change the valueto leave the label click another labe in the DataTabel--&gt; an exception should occur   ,0
903,WicketServlet no longer sets application on current thread    The last changes made to WicketFilter (move Application.set(webApplication) from doGet() to doFilter()) have a side effect: if working with WicketServlet (due to OSGI)  the application is no longer set on the current thread  because it was moved to doFilter().Possible fixes: move Application.set() in WicketFilter back to doGet()  at the start if that's early enough expose the webApplication property  and add an extra Application.set() in the doGet() of WicketServlet   ,0
908,There is no way to specify what exceptions to log in RequestCycle    RequestCycle  line 1135 logs all exceptions except for PageExpiredException. This is not a wanted behavior for us (for example  it also logs AuthorizationException which is not a error).So we need some way to specify which exceptions should be treated as errors and which ones are just need to be handled by RequestCycleProcessor#respond(RuntimeException  RequestCycle).Maybe there is some way to globally catch application exceptions other than writing a custom RequestCycleProcessor. If so then tell me please.The possible solution is to move exception logging to RequestCycleProcessor#respond(RuntimeException  RequestCycle) because it can be overriden.   ,0
909,onBeforeRender not called on ModalWindow contents    ModalWindow.onBeforeRender contains the following code: super.onBeforeRender(); getContent().setOutputMarkupId(true); getContent().setVisible(shown);This has the consequence that the content of the modal windows is still invisible when its onBeforeRender() method is called. The default implementation of onBeforeRender delegates to the window's children beforeRender() method. However  the contents beforeRender() method first checks if the component is visible  which is not the case  so the onBeforeRender() call is not propagated down the component tree. This is a problem if the content of the modal window is something like a table  which populates itself in the onBeforeRender call.   ,0
914,Tree not 'redrawn' when resetting root node    I have a tree that I reset the root node when a user selects on another component (Component A). However  the tree is not 'redrawn' until I click on the tree (the previous tree contents are shown).Have called Tree.invalidateAll() andDefaultTreeModel.nodeStructureChanged(tnode )DefaultTreeModel.nodeChanged( tnode )DefaultTreeModel.reload()   ,0
916,inconsistent state after setting AjaxDebugModeEnabled to true in an AjaxRequest    when the application debugsetting AjaxDebugModeEnabled is changed from false to true in an AjaxRequest (e.g. via JMX)  the following two statements in AbstractDefaultAjaxBehavior#renderHead are executed:response.renderJavascript('wicketAjaxDebugEnable=true;'  'wicket-ajax-debug-enable');response.renderJavascriptReference(JAVASCRIPT_DEBUG);as soon as the client recieves the response  the first javascript statement is executed and code in wicket-ajax.js 'thinks' that ajax debug is enabled.well it is  but wicket-ajax-debug.js has not arrived (or at least has not been processed) yet  and thus Wicket.Log.info() and Wicket.Log.error() will fail  because these methods access an object which is defined in wicket-ajax-debug.js.This problem seems to be solved by changing the order of the statements in AbstractDefaultAjaxBehavior#renderHead  so that the ResourceReference JAVASCRIPT_DEBUG is rendered before wicketAjaxDebugEnable is set to true.   ,0
917,Minor patch in polish translation    The current PL translation is nice  just minor change to null value to give it universal meaning in some cases   ,0
925,embedded jetty configuration stops working on beta3    When using beta3 with embedded configuration  which means there is no web.xml  but wicket servlet instance is injected in jetty server context. During the startup application generates NPE in (DiskPageStore.java:486) which means that wicket servlet cannot retrieve temp dir... Adding the following line before string the application resolves the question:serverContext.setAttribute('javax.servlet.context.tempdir'  new File('.'));I am not sure if this is just treating effect and not the cause which can be related to recent WicketFilter/WicketServlet 'thread' questions ?Attached simple hello world application reproduce this...   ,0
932,BaseWicketTester support for SubmitLink    When the SubmitLink is used instead of the submit for forms  BaseWicketTester does not run through the onSubmit() code of the link.I have stepped through the debug of the test that's actually not getting called. All my validators on the text field are getting called as expected and in fact the form works as expected when deployed so I'm thinking that it might be a WicketTester issue or the more likely scenario that I'm doing something wrong?Things I've tried: debugging as mentioned  but this just shows me it's not getting called trying to call the link directly but I just get the below exception which I'm not really surpised about....   ,0
946,WebRequestCodingStrategy is not synchronized    The WebRequestCodingStrategy class uses a TreeMap to store mounted pages however there is no synchronization done. This will cause problems if pages are being mounted/unmounted by one thread while web requests are being served from a different one. It could also cause problems if two threads try to mount/unmount pages at the same time.I'll include a patch to fix this as well as a new version of the java file that you can use if you wantKeep up the good work   ,0
954,Default button does not provide button name    When the default button is set in a form  the name property should be rendered too  so that the right button is executed rather than just the form's onsubmit method.   ,0
960,FilteredAbstractColumn unary constructor expects Model instead of IModel    We have this now:public FilteredAbstractColumn(Model displayModel) { super(displayModel); }Here's the super constructor it delegates to:public AbstractColumn(IModel displayModel) { this(displayModel  null); }So I really don't see why the FilteredAbstractColumn would need Model descendants specifically.   ,0
977,Static Pages -> Passing URI to a Wicket page == 404 Error    Broken url   ,0
986,Wicket Javadoc Standardization: org.apache.wicket.util.value    Javadoc for the util.value package.   ,0
991,StringIndexOutOfBoundsException in ServletWebRequest.getRelativePathPrefixToWicketHandler    Request attribute 'javax.servlet.forward.servlet_path' may be equals to empty string.See patch...   ,0
1007,[PATCH] Javascript error in IE7 when selecting a date    When selecting a date in IE7 I get a javascript error on line 227 in wicket-date.js. In this line there is the following check:if (typeof(field.onchange) != 'undefined' ) field.onchange();in IE7 this gives a warning due to field.onchange being null (which is user defined instead of undefined). Changing the check as follows solves this problem for me:if (typeof(field.onchange) != 'undefined' &amp;&amp; field.onchange != null) field.onchange();   ,0
1037,Text not visible in Wicket Ajax Debug window    The Wicket Ajax Debug (WAD) window has a background color set to white but the font color is not set (in wicket-ajax-debug.js) - it uses the base page defaults. So when I have in css for my page setting like this: body color: Color value is invalid  the text in WAD is not visible.Suggested solution: maybe add somewhere in wicket-ajax-debug.js setting: 'color: black;'   ,0
1040,setEnabled() does not work on YUI DateField    Calling setEnabled(false) on a YUI DateField component doesn't seem to have any effect. The date field remains editable and the changes get propagated to the underlying model on submit.   ,0
1041,Fix a TODO for 1.3 at AjaxFormSubmitBehavior.onError()    There is the following TODO at org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.onError(): /**  Listener method invoked when the form has been processed and errors occured  @param target  TODO 1.3: make abstract to be consistent with onsubmit()  */ protected void onError(AjaxRequestTarget target) {  } Should this be done for 1.3 or it will stay like it is now for the next major release ?   ,0
1043,javadoc typos    I collected some javadoc typos I came across. See patch for simple ones. These are some other problems in javadocs: broken link in WebRequestCodingStrategy: @see org.apache.wicket.request.IRequestCodingStrategy#encode(java.lang.CharSequence) Application#getSessionStore: object for working getting/ storing session didn't find such classes RequestLogger: InspectorBug  InspectorPage  LiveSessionPage IWrapModel: model will be called detach on when the component is detached when the wrap model javadoc seems to be copied from another flag Component#FLAG_INHERITABLE_MODEL: /** Flag for escaping HTML in model strings */ Model does not implement AbstractModel anymore org.apache.wicket.model.Model: Model is the basic implementation of an AbstractModel   ,0
1046,FeedbackMessages don't get cleaned up in an AJAX request when renderstrategy is REDIRECT_TO_RENDER    the following check in Session#cleanupFeedbackMessages always fails for AjaxRequests when the renderstrategy REDIRECT_TO_RENDER is used.this leads to FeedbackMessages not being removed from the session.if (Application.get().getRequestCycleSettings().getRenderStrategy() != IRequestCycleSettings.REDIRECT_TO_RENDER || (!RequestCycle.get().isRedirect()))RequestCycle.get().isRedirect() in case of a WebRequestCycle returns true for Ajax requests.fix:mark Session#cleanupFeedbackMessages as abstract and implement it in WebSession with an additional check '|| ((WebRequest)RequestCycle.get().getResponse).isAjax()'   ,0
1051,StyleSheetReference doesn't take style/locale into account    StyleSheetReference (in essence PackagedResourceReference) doesn't take the style and locale into account as is common for resource loaders.Changing PackagedResourceReference line 102 from ResourceReference ref = new ResourceReference(referer  f);to ResourceReference ref = new ResourceReference(referer  f  getLocale()  getStyle());fixes this issue   ,0
1052,Wicket Javadoc Standardization: org.apache.wicket.util.thread    org.apache.wicket.util.thread Javadoc   ,0
1053,Wicket Javadoc Standardization: org.apache.wicket.util.tester    org.apache.wicket.util.tester Javadoc   ,0
1057,Remove final from WebRequestCodingStrategy. urlCodingStrategyForPath    I am trying to use my own encoding that does not depend on mounted paths. I want normal mounted paths and the default wicket paths to work as usual and for my strategy to be used after they have been tried.For encoding URLs with my strategy I can override WebRequestCodingStrategy .getMountEncoder(IRequestTarget) which allows the normal mounts to be tried first and then return my strategy if non are found.The default decoding works OK but WebRequestCycleProcessor will call WebRequestCodingStrategy .targetForRequest() after the default handling fails and I cannot return my own strategy because I cannot override urlCodingStrategyForPath() because it is final.I have removed this locally and it works as I expected.It seems like the only option at the moment is to use a subclass or WebRequestCodingStrategy AND create an adaptor (wrapper) for WebRequestCodingStrategy which detects when targetForRequest() returns null and returns my own strategy.If the final is removed from rlCodingStrategyForPath(String path) life would be a lot easier!   ,0
1067,Correct javadoc for Fragment    The Fragment constructors without markupProvider argument have been deprecated but the example in the class javadoc's is still using it.   ,0
1070,Missing img alt attribute in WicketAjaxIndicatorAppender       ,0
1086,Extending PagingNavigator for stateless pages    I am extending PagingNavigator to use stateless links but have found that the underlying PagingNavigation factory method newPagingNavigationLink() does not let me return a subclass of Link. I have tested the change below and it seems to work OK on my stateless pages.Index: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java===================================================================&#8212; /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java (revision 585875)+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/navigation/paging/PagingNavigation.java (working copy)@@ -17 6 +17 7 @@ package org.apache.wicket.markup.html.navigation.paging; import org.apache.wicket.markup.html.basic.Label;+import org.apache.wicket.markup.html.link.Link; import org.apache.wicket.markup.html.list.Loop; import org.apache.wicket.version.undo.Change;@@ -302 7 +303 7 @@ final int pageIndex = getStartIndex() + loopItem.getIteration(); // Add a page link pointing to the page final PagingNavigationLink link = newPagingNavigationLink('pageLink'  pageable  pageIndex);+ final Link link = newPagingNavigationLink('pageLink'  pageable  pageIndex); loopItem.add(link); // Add a page number label to the list which is enclosed by the link@@ -329 8 +330 7 @@ the page index the link points to @return the page navigation link. */ protected PagingNavigationLink newPagingNavigationLink(String id  IPageable pageable  int pageIndex)+ protected Link newPagingNavigationLink(String id  IPageable pageable  int pageIndex) { return new PagingNavigationLink(id  pageable  pageIndex); }   ,0
1118,DateTextField.setEnabled() is not propagated to attached DatePicker    DatePicker stays enabled even if the DateTextField it is attached to is disabled.It is even able to change the DateTextField's shown value.Instead the DatePicker should be disabled to  or maybe not shown at all.Attached is a Quickstart-patch showing the effect.   ,0
1120,Problem closing a ModalWindow when used through an IFrame    I'm doing some POC testing to find out how a wicket application could be used through an IFrame and noticed that closing of a ModalWindow fails.My setup:Application A: -a dummy html page that has an IFrame-the contents of the IFrame is requested from Application B&lt;iframe src='http://localhost:8080/mywicketapp/app/' width='100%' height='500'&gt;&lt;/iframe&gt;Application B:-a Wicket application that uses a ModalWindow-deployed to tomcat: http://localhost:8080/mywicketapp/Problem:The ModalWindow is not closed when OK ( or Cancel ) button is clicked when Application B is used throug IFrame of Application A.OK button performs the actual action (in my case deletes an item from a list) but is not closed after the execution of the action.Closing of the ModalWindow works normally when Application B is not used through an IFrame.Reproducing the problem:You can test this by creating a html page with this source:&lt;html&gt;&lt;body&gt;&lt;iframe src='http://www.wicket-library.com/wicket-examples/ajax/modal-window.1' width='100%' height='100%'&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;And then open 'Show modal dialog with panel' and try to close the dialog.   ,0
1131,AjaxEditableLabel: defaultNullLabel() should really be a defaultNullorEmptyLabel()    defaultNullLabel() only inserts '...' when the model is NULL  not when the model contains an empty String.So right now it's impossible to get empty Strings edited with this component.   ,0
1135,XHTML validation failure for DatePicker    org.apache.wicket.extensions.yui.calendar.DatePicker code generates an img tag that is missing the alt tag  which breaks XHTML validation.   ,0
1136,Change log in Form.handleMultiPart() from error to warn    If the upload fails in Form.handleMultipart  perhaps the error should be logged as a warning instead of an error  since the user is being informed that the upload failed.   ,0
1148,AbstractTree utilizes Collections.EMPTY_LIST for a node's children container which causes errors when adding children    AbstractTree utilizes Collections.EMPTY_LIST for a node's children container. This assumes that this node will never have children during its lifecycle as EMPTY_LIST will always be empty since it does not support add(int  Object)To fix  change item = Collections.EMPTY_LIST with item = new ArrayList(0);private final void buildItemChildren(TreeItem item) { List items; // if the node is expanded if (isNodeExpanded((TreeNode)item.getModelObject())) { // build the items for children of the items' treenode. items = buildTreeItems(nodeChildren((TreeNode)item.getModelObject())  item.getLevel() + 1); } else { // it's not expanded  just set children to an empty list //items = Collections.EMPTY_LIST; items = new ArrayList(0); } item.setChildren(items); }   ,0
1166,add sanity check on form submit for request method    When refreshing a frameset that includes an already POST submitted Wicket form in a frame  using the redirect to render strategy  Safari erroneously requests the form's original target by GET  rather than the location that was eventually redirected to. Therefore none of the form values are available in the request object and NPEs will occur trying to access them in places like AbstractConverter.java:55.Because Form allows for a particular request method to be specified  I think it should also confirm that the expected method was used instead of waiting for an NPE in validation. The outcome is the same  but the cause of the error (the client) would be more evident in server logs  etc. Patch to come...   ,0
1171,Tolerate malformed If-Modified-Since header    Some kind of RSS aggregator is hitting an rc1 site of mine regularly with dates that don't follow the HTTP spec. Correct to the servlet spec  Jetty throws an exception in this instance which causes Wicket to abort processing the request and log an error. I think it would be better to log the exception as a warning and proceed as if the header had not been present.Example exception:ERROR btpool0-703 org.mortbay.log - /resources/com.typeturner.Typeturner/eat-rssjava.lang.IllegalArgumentException: Cannot convert date: 1194673976 at org.mortbay.jetty.HttpFields.getDateField(HttpFields.java:827) at org.mortbay.jetty.Request.getDateHeader(Request.java:460) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:197)   ,0
1175,IDataProvider-Overflow with size()    Hi I get an Integer-overflow with my Dataprovider (yeah  there are a couple of entries in the database). Is there a reason why size() and iterator( first  count ) are limited to Integer?Regards  &#8212; Jan.   ,1
1176,AjaxEditableLabel and AjaxMultiLineEditableLabel do not honour enabled status    On AjaxEditableLabel and subclasses  setEnabled(false) has no effect.It should prevent the component from being editable (i.e. it should behave like a normal Label).   ,0
1186,Ajax Memory Leak in IE    Memory Leak in IE6 (IE7?) when using a DataView with AjaxPagingNavigator and each entry of the DataView table contains an AjaxLink. Memory increases by more than 500KB when displaying 100 items per page. AjaxDebugMode is disabled. Configuration is set to deployment. Version 1.2.6 is working fine.   ,0
1193,i18n: Translation of resource files in Korean    I'd like to upload a patch for Korean resource files.   ,0
1198,NPE in IndexedHybridUrlCodingStrategy during encoding    java.lang.NullPointerException at org.apache.wicket.request.target.coding.IndexedHybridUrlCodingStrategy.appendParameters(IndexedHybridUrlCodingStrategy.java:51) at org.apache.wicket.request.target.coding.HybridUrlCodingStrategy.encode(HybridUrlCodingStrategy.java:409) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.pathForTarget(WebRequestCodingStrategy.java:459) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.encode(WebRequestCodingStrategy.java:236) at org.apache.wicket.RequestCycle.encodeUrlFor(RequestCycle.java:744) at org.apache.wicket.RequestCycle.urlFor(RequestCycle.java:847) at org.apache.wicket.Component.urlFor(Component.java:3086) at org.apache.wicket.protocol.http.WebRequestCycle.redirectTo(WebRequestCycle.java:144) at org.apache.wicket.request.target.component.PageRequestTarget.respond(PageRequestTarget.java:58) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:103) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1100) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1169) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1248) at org.apache.wicket.RequestCycle.request(RequestCycle.java:489) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:343) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:193)   ,0
1199,false positive or wrong unit tests unit tests when ajax is involved    MockWebApplication#setupRequestAndResponse always sets up a non ajax requestcycle.this method is also used to setup the requestcycle for ajax related functionality (eg. BaseWicketTester#clickLink).the consequence are:a) the markup for expected ajax responses contains wicket tags and wicket attributes  although these are never rendered in ajax responses.b) some unit tests (eg. AjaxTimerBehaviorTest#testAddToAjaxUpdate  ComponentBorderTest#testHideableBorder) succeed  when the same code in non-unit-test environment doesn't work  because there is no ajax request during testing  while there is one during normal execution.   ,0
1204,Use X-Forwarded-For header for getting the IP address of the client in WebClientInfo    When using Apache HTTP Server's ProxyPass to forward to other HTTP Servers  such as Jetty  the client's ip address defaults to the server that forwarded the request  usually being 127...   ,0
1208,upgrade to YUI 2.4.0    YUI should be updated to version 2.4.0along with this release  there have been significant changes to YUI Calendar (CalendarNavigator) and YUI Loader.CalendarNavigator will replace the current customized  self-maintained month/year selection.   ,0
1215,WicketTester recreates session after setting attributes on it    The following test for internationalization doesn't work  as rendering the page will create a new session. WicketTester tester = new WicketTester(); tester.getWicketSession().setLocale(Locale.FRENCH); tester.startPage(HelloWorld.class); tester.assertLabel('message'  'Bonjour tout le monde!');But setting up the response and request first works around recreating the session WicketTester tester = new WicketTester(); tester.setupRequestAndResponse(); tester.getWicketSession().setLocale(Locale.FRENCH); tester.startPage(HelloWorld.class); tester.assertLabel('message'  'Bonjour tout le monde!');   ,0
1229,Inside a html tag wicket:message's attribute cannot contain colon : in it  it uses the first colon and tokenizes the rest to be the resource_identifier. Need some way to use colon in the attribute name.    I am trying to use wicket:message inside a tag in the following format wicket:message='attribute:resource_identifier'The attribute:resource_identifier passed as a value to the wicket:message uses the colon to tokenize the attribute and the resource_identifier. Now  The attribute which I am using is a custom attribute 'ric:title' (without quotes) which also has a colon in it. Currently  I have a tag with a custom attribute ric:title and the resource_identifier for it is page.title &lt;div wicket:message='ric:title:page.title' /&gt;  the problem is wicket takes the first colon which is part of my attribute and takes the rest as the resource_identifier and looks for it in the property file and then throws an error.How can I tell wicket to ignore the colon in the attribute name...? and I've tried using slash in front of the colon and it didn't work  I've tried using ascii html entity encoding for colon  which is &#58; and didn't work.So  please make a way to use colon in the attribute.Something like the following would be nice &lt;div wicket:message=' 'ric:title' : page.title'&gt;  which allows the user to set the attribute name in the markup within single quoutes. I am hoping to see this fixed.Thanks   ,0
1230,Temporary files not deleting when multipart upload fails with IO error    I just want to delete temporary files when upload fails (user cancelled or IO error occured)  this is really important when uploading files about 500Mb  and this bug makes security hole (anyone can eating my server's disk space by posting incomplete large files).I can't find simple workaround  and I think that fix by developers will more easy.For example you can handle IO error in class org.apache.wicket.util.upload.FileUploadBase  method parseRequest  when IO error occured  just delete all created temporary files  and only after deleting files throw your FileUploadException.I hope you will fix it soon.Thanks.   ,1
1239,java.lang.IllegalAccessError when changing AjaxEditableLabel    When changing AjaxEditableLabel system throws:java.lang.IllegalAccessError: tried to access methodorg.apache.wicket.Component.onModelChanging()V from classorg.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel$1 atorg.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel$1.onModelChanging(AjaxEditableLabel.java:273) at org.apache.wicket.Component.modelChanging(Component.java:2058) at org.apache.wicket.Component.setModelObject(Component.java:2823) at org.apache.wicket.markup.html.form.FormComponent.updateModel(FormComponent.java:992) at org.apache.wicket.markup.html.form.FormComponent.processInput(FormComponent.java:874) &#91;...&#93;The probem is in methd: protected FormComponent newEditor(MarkupContainer parent  String componentId  IModel model) { TextField editor = new TextField(componentId  model) { private static final long serialVersionUID = 1L; protected void onModelChanged() { super.onModelChanged(); AjaxEditableLabel.this.onModelChanged(); //here is a bug } protected void onModelChanging() { super.onModelChanging(); AjaxEditableLabel.this.onModelChanging(); //here is a bug } }; editor.setOutputMarkupId(true); editor.setVisible(false); editor.add(new EditorAjaxBehavior()); return editor; } AjaxEditableLabel.this.XXXXXX is not visible.Artur   ,0
1264,assertComponentOnAjaxResponse does not work with WicketTester.clickLink    assertComponentOnAjaxResponse does not work with clickLink. Workaround are to call wickettester..executeAjaxEvent(ajaxLink 'onclick'); instead.Reason why this fails has something todo with that clickLink creates a servlet response which are empty hence this will always fail: // Get the AJAX response String ajaxResponse = getServletResponse().getDocument(); // Test that the previous response was actually a AJAX response failMessage = 'The Previous response was not an AJAX response. ' + 'You need to execute an AJAX event  using clickLink  before using this assert'; boolean isAjaxResponse = ajaxResponse.startsWith('&lt;?xml version=/'1.0/' encoding=/'UTF-8/'?&gt;&lt;ajax-response&gt;');proposed fix are to rewrite wicketTester.clicklink(string path boolean ajax) to call executeAjaxEvent instead if possible?   ,0
1270,NPE in ListMultipleChoice.updateModel()    I noticed a NullPointerException when I cleared a Form with a ListMultipleChoice to its original state.In updateModel() following statement causes a NPE when something was selected in the multiple select but in the original state nothing was selected:selectedValues.addAll((Collection)getConvertedInput());getConvertedInput() is null  so ArrayList.addAll() operates on the null value and throws the NPE.   ,0
1271,Script in RenderHead method of AjaxFormChoiceComponentUpdatingBehavior needs fixing    The script in the renderHead method of AjaxFormChoiceComponentUpdatingBehavior assumes that the Radio Component will be the immediate child of the RadioGroup Component  But in some or in most of the cases that is not correct.That is not the case even in the Wicket Examples  in examples the hierarchy is RadioGroup/ListView/Radio.I have maodied the rendered script to work for RadioGroup/ListView/Radio hierarchy. And the Patch is attached.RegardsDipu   ,0
1283,Allow to query component markup id without creating one       ,0
1284,Report last focused element id on ajax request       ,0
1288,Make Cookie-Detection possible without JavaScript    getClientInfo().getProperties().isCookiesEnabled() returns always false  when JavaScript is disabled.It is possible to detect the availibility of cookies by just testing for JSESSIONID in the current Request. Unfortunately  this cookie is not yet set by the first Redirecting Response that sends the user�_��_�s browser to the HomePage.   ,0
1291,WicketTester Doesn't Support setDefaultFormProcessing(false)    I was trying to use the WicketTester to click the button for an AjaxFallbackButton that has setDefaultFormProcessing(false). So I wanted to execute the onclick for the component  like this:tester.executeAjaxEvent('meetingForm:inputForm:rootViewPanel:addOrganization'  'onclick');What seems to happen is that the pages tries to update all the form fields and perform validation. This is incorrect in the context for the setDefaultFormProcessing(false) behavior.I was looking at the source for BaseWicketTester and noticed that in executeAjaxEvent()  it always tries to submit the form if the behavior is a AjaxFormSubmitBehavior. This wouldn't be correct in the case of when you set setDefaultFormProcessing(false) on the button. I think it needs to check for setDefaultFormProcessing at that point.   ,0
1293,Improve SelectOptions: allow customization of created SelectOption objects    I've created a patch that makes SelectOptions more flexible  as it now allows customization ofthe created SelectOption objects (e.g. adding an AjaxEventBehavior).The patch also extends the javadoc of Select  I've added an example on how to use Select  SelectOptions and SelectOption   ,0
1299,HybridUrlCodingStrategy should throw a PageExpiredException if a RequestListenerInterface is targeted on a non-existent page-id/version    let's assume MyPage.class is mounted on /page and at some point the user is on /page.1.3if a click on a Link on that page  which results in a relative url '?wicket:interface...' but is ultimately sent to '/page.1.3?wicket:interface...'  is clicked after a session timeout the request is silently redirected to '/page.0' and the link callback is not processed.fix:before creating a new instance of a HybridBookmarkableRequestTarget  HybridUrlCodingStrategy should check if a RequestListenerInterface is present on the last request and throw a PageExpiredException if this is the case.   ,0
1302,Make substitutePropertyExpressions() in Localizer overridable    I want to extend Localizer.substitutePropertyExpressions(final Component component  final String string  final IModel model) to add a special behaviour when the model for substitution is instance of a Interface which has the Method getMessage(Locale locale).In this case I want to use a custom PropertyVariableInterpolator.So please make the method protected.   ,0
1305,AbstractTextComponent requires itself to be rendered before conversion happens    The bug is reproduced as follows:1. Use StatelessForm.2. Use compound model  eg CompoundPropertyModel. In this case  form components are not initially aware of their model types.3. Use any text component inside  eg TextFieldWhat happens:1. In StatelessForm  form processing occurs BEFORE components were actually rendered.2. BUT AbstractTextComponent guesses its model type ONLY in onBeforeRender().3. onBeforeRender() never gets called  so text component doesn't know its actual type and cannot convert properly.4. Everything crashes because of incorrect type (validators and form submission is working wrong).Obviously  this processing sequence needs to be fixed (eg retrieve model type early or check for stateless forms explicitly).   ,0
1314,DateTimeField does not correct the timezone properly    The DateTimeField has a DateTextField which uses a styledateconverter with timezone correction set to true which is not needed since the DateTimeField accounts for the TimeZone correction. Another problem is that the DateTimeField only sets the timezone of the date (from local-&gt;client)  causing the date to be corrected to the local time. This should instead cause the local time to reflect that of the clients time.   ,0
1321,Javadoc error in QueryStringUrlCodingStrategy    The javadoc uses this as an example:mount(new QueryStringRequestTargetUrlCodingStrategy('/admin/productmanagement'  admin.ProductManagement.class));This does not work. It should say this instead:mount(new QueryStringUrlCodingStrategy('/admin/productmanagement'  admin.ProductManagement.class));   ,0
1323,AbstractPageableView has transient cachedItemCount  but doesn't set it to -1 on deserialization.    AbstractPageableView declares:private transient int cachedItemCount;When this is deserialized  cachedItemCount gets set to 0. This means that the method isItemCountCached() will return true on a deserialized AbstractPageableView. This  in turn  causes getCurrentPage() to return 0  even when the user is not navigating the first page.For me  this is causing huge problems with the paging navigator.My current workaround is this is to add this method to my DataView implementation:private Object readResolve() throws ObjectStreamException { final Class&lt;?&gt; myClass = getClass(); final Class&lt;?&gt; dataView = myClass.getSuperclass(); final Class&lt;?&gt; dataViewBase = dataView.getSuperclass(); final Class&lt;?&gt; abstractPagableView = dataViewBase.getSuperclass(); try { final Field field; field = abstractPagableView.getDeclaredField('cachedItemCount'); field.setAccessible(true); field.setInt(this  -1); } catch (Exception e) { throw new RuntimeException(e); } return this;}Obviously it would be better if the AbstractPagingView could take care of this itself.   ,0
1332,AjaxFormChoiceComponentUpdatingBehavior just updates the group 'grandchildren'    Up to 1.3.0  there was a bug in that AjaxFormChoiceComponentUpdatingBehavior updated just the group's direct children. Now it generates the header script quoted below  that iterates over the direct children and then over the children of these  triggering the event for the input grandchildren only. So the situation is even worse. I think that attachChoiceHandlers should descend recursively and search for input elements along all the group descendants  not just one arbitrarily chosen level.function attachChoiceHandlers(markupid  callbackscript) { var choiceElementGroup = document.getElementById(markupid); for( var x = 0; x &lt; choiceElementGroup.childNodes.length; x++ ) { var choiceElementList = choiceElementGroup.childNodes&#91;x&#93;; for( var y = 0; y &lt; choiceElementList.childNodes.length; y++ ) { if (choiceElementList.childNodes&#91;y&#93; &amp;&amp; choiceElementList.childNodes&#91;y&#93;.tagName) { var tag = choiceElementList.childNodes&#91;y&#93;.tagName.toLowerCase(); if (tag == 'input') { Wicket.Event.add(choiceElementList.childNodes[y] 'click'  callbackscript); } } } }}   ,0
1343,HybridUrlCodingStrategy and StatelessForm ( or StatelessLink ) results in invalid parameter encoding    I put a header component on one of my pages which contains a statelessform ( or stateless link ) . I mounted the page with a HybridUrlCodingStrategy . When you request the page like thishttp://localhost:9696/mountpath/param1/param1value  stateless form attaches another parameter which shows the forms IFormListener target. The new url is like this :http://localhost:9696/mountpath/param1/param1value/wicket:interface/%3A0%3Aheader%3AloggedOutView%3AloginForm%3A%3AIFormSubmitListener%3A%3A/.0I haven't covered all the source code for now but i think the form changes the page parameters object so i think HybridUrlCodingStrategy must clone initial page parameters before putting it to page metadata. But not sure that this will cause any other problems   ,0
1344,BigDecimalConverter is not precise    Currently  if we use the BigDecimalConverter class  it converts the values by first letting the NumberFormat to parse the value into a Double  which the BigDecimalConverter class in turn turns into a BigDecimal.Unfortunately such an implementation loses precision  for example if we enter '123.45' in a form  it can be converted to '123.45000000000001' or '123.44999999999999999' thanks to the conversion to a Double.Fixing the issue is rather simple: check if the NumberFormat you get is a DecimalFormat  and if yes  simply call format.setParseBigDecimal(true) and the NumberFormat will interpret the values correctly.   ,0
1350,AutoCompleteTextField's *scrollable* suggestion list disappeared when a mouse pointing to the scroll bar in IE6/7    if we define the following CCS to fix the height of the suggestion list  the list will become to be scrollable when it is overflow  for example  there are 100 suggestions should be shown.div.wicket-aa { height: 200px; overflow: auto;}if a user moves his mouse to the scroll bar  the suggestion list will disappear immediately in IE6/7 but in FF. The reason is that the onblur event of the text field is triggered in IE but in FF. At the moment the mouse pointing to the scroll bar  Wicket.AutoComplete.mouseactive is 0  therefore  hideAutoComplete() was called. That's why the suggestion list disappeared in IE6/7.   ,0
1361,Localizer doesn't honor style when caching property lookups    In Wicket 1.2.6  we created some properties files like:Foo.propertiesFoo_style1.propertiesFoo_style2.propertiesand used StringResourceModel to look up property values. This worked correctly as in 1.2.6  Localizer didn't cache the property lookups and respected the style. However  in 1.3  Localizer now caches the lookups but doesn't respect the style when creating the cache key (though it does append the locale to the end of the cache key).The side-effects of this are that whatever style is in use when a property is first looked up  that property value will be returned for all subsequent lookups regardless of style.   ,0
1365,Having instance variables referencing pages causes memory leaks  StackOverflowErrors and ClassCastExceptions    Having references (instance variables)  in objects reachable from the component hierarchy  to pages other than the 'current' page  causes memory leaks StackOverflowErrors and sometimes ClassCastExceptions.This seems to be due to the special serialization code implemented in Page  even if I haven't been able to pinpoint exactly where the problem lies. Standard serialization handles cycles between objects if the deserialization or serialization is done using the same ObjectInputStream or ObjectOutputStream  but here each Page is being deserialized in different ObjectInputStreams.Looking at the stack traces from the StackOverflowErrors it's easy to see that it's the deserialization that goes over the same pages over and over again (although it's new instances).The ClassCastExceptions where because the Page.numericId was zero when serializing them in Page.writeObject  causing the wrong Page to be deserialized in readObject. By looking at the code I can't really understand how the numericId can become zero  except for in the first page. The only thing I can think of is if it's being serialized by another thread before it's initialized.Our application is 'AJAX only' with a main page built up of quite a lot of components in a quite deep hierarchy. When discovering this problem  there was one panel with seven different AjaxLinks that opened ModalWindows  where some of the ModalWindows had fields referencing the contained iframe pages. Clicking around on the links soon made the memory and CPU consumption rise and after a while one of the mentioned errors occurred.Even if I thought that it would  neither turning off page versioning nor setting ISessionSettings.setPageIdUniquePerSession(true) seemed to have any effect.After redesigning the code a bit  removing all the field references to Pages  it seems to work fine again. I realize that having such references isn't a very good design even without this problem. Perhaps it shouldn't be supported at all. It might be  though  that some users have done this and don't know it's a problem (yet).Although in the above case it was only AJAX  I've made an example application that also shows that the same problems occurs using normal links  and pages with references between them. I'll attach that example in a couple of minutes.   ,0
1367,Not all of SignInPanel is properly localized    When logging in without typing a password on the SignInPanel I get the message: veld 'password' is verplicht.instead of veld 'wachtwoord' is verplicht.Furthermore  when logging in fails  I get the message: Sign in failedinstead of 'Inloggen mislukt' or something like that. Maybe there should be properties files included?   ,0
1370,MarkupCache can 'leak' memory    Currently markup cache uses a cache without any capacity upper bound :| normally this would be ok  holding markup of an entire application doesnt require THAT much memory. However  suppose we have Index page with markup Index.html. the page is requested with local en_us and we cache contents of index.html in the cache. now Index is requested with locale en_gb and we cache it AGAIN. Now we have two entries in the cache caching the exact same thing. the more locales users request (we pull the locale from the user's browser) the more copies of the same thing we cache.Thomas Singer reported his application running out of memory  attached memory snapshot contained a MarkupCache instance of over 48MB retained size (the internal map had allocated 4096 keys). He has an application with about 64 pages  and they only support one locale. When I browsed the snapshot I noticed a lot of different locales in the markup cache keys....An ideal solution would be to have two caches. One for &#91;container.class locale style variation&#93;&gt;&#91;resource.name&#93; lookup  and the other for &#91;resource.name&#93;&gt;&#91;resource.contents&#93; lookup.A suboptimal solution would be to place an upper bound on the cache. See attached patch which contains a 1000 item lru cache. if looks ok we can roll it in as a solution for 1.3.2 branch - since it doesnt require any interfaces breakages.   ,0
1372,Input field with autocomplete behavior does not submit the form via enter key in some cases    This is related to WICKET-2 but wasn't fixed in that bug:When you enter nothing in an input field with autocomplete and press enter  type something that doesn't give results or press escape when the autocomplete box has appeared  you have to press enter twice to submit the form.The solution is quite simple: remove line 219 from wicket-autocomplete.js:hidingAutocomplete=1;This variable was introduced to keep enter from submitting  but by setting it here always to 1  enter is blocked in the above cases.   ,0
1377,AbstractCalendar use the wrong resources path    I extends the AbstractCalendar  and want to show the calendar directly. But I got an 'YAHOO is not defined' javascript error  because the javascripts' url it generated are not correct.I find that the contributeDependencies methods in AbstractCalendar don't add the resources correctly. For example  the add(HeaderContributor.forJavaScript(YuiLib.class  'yahoo.js'));should be add(HeaderContributor.forJavaScript(YuiLib.class  'yahoo/yahoo.js'));and add(HeaderContributor.forJavaScript(YuiLib.class  'event.js')); should beadd(HeaderContributor.forJavaScript(YuiLib.class  'event/event.js'));and other resources.   ,0
1383,MiniMap IndexOutOfBoundsException when empty    findKey() assumes that there is at least one entry in the mapThis checks first:Index: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/collections/MiniMap.java===================================================================&#8212; /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/collections/MiniMap.java (revision 614519)+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/util/collections/MiniMap.java (working copy)@@ -118 13 +118 16 @@ */ public Object get(final Object key) { // Search for key final int index = findKey(key);- if (index != -1)+ if (size &gt; 0) { // Return value return values&#91;index&#93;;+ // Search for key+ final int index = findKey(key);++ if (index != -1)+ {+ // Return value+ return values[index];+ } } // Failed to find key   ,0
1388,'charset=UTF-8' is appended to Content-Type of  DynamicWebResources    After upgrading from wicket 1.2.6 to 1.3.1 we now have a big problem when opening PDF files inside the IE browser window. Instead the PDF file is now loaded as a separate window  leaving the Browser window empty.I traced the problem down wicket always appending ';charset=UTF-8' to the Content-Type  and this can be viewed by using a http debugger:Wicket 1.2.6: Works Content-Type: application/pdf Wicket 1.3.1: PDF opened outside the browser.Content-Type: application/pdf; charset=UTF-8 The ';charset=UTF-8' is appended in ResourceStreamRequestTarget  and I can't see a way to override it. Please make it possible to have the Content-Type as set by the DynamicWebResource   ,0
1391,bug: setObject(null) called for excplicitly invisible fields in a non-visible enclosure    It seems that the value for fields that are made invisible because a surrounding enclosure is actually lost on submit of the form.Consider the following code:public class HomePage extends WebPage { private MyObject myObject; public HomePage(final PageParameters parameters) { myObject = new MyObject(); myObject.setField1('field1Value'); myObject.setField2('field2Value'); Form f = new Form('f'  new CompoundPropertyModel(myObject)); add(f); f.add(new TextField('field1').setVisible(false)); f.add(new TextField('field2')); f.add(new Button('submit') { @Override public void onSubmit() { System.out.println('Field 2 value should be 'field2Value' but is : ' + myObject.getField2()); } }); } class MyObject implements Serializable { private String field1; private String field2; public String getField1() { return field1; } public void setField1(String field1) { this.field1 = field1; } public String getField2() { return field2; } public void setField2(String field2) { this.field2 = field2; } }}With the following markup:&lt;form wicket:id='f'&gt; &lt;wicket:enclosure child='field1'&gt; &lt;input type='text' wicket:id='field1'/&gt; &lt;input type='text' wicket:id='field2'/&gt; &lt;/wicket:enclosure&gt; &lt;input type='submit' wicket:id='submit'/&gt;&lt;/form&gt;Field1 keeps it's value onSubmit  but the value for field2 is lost  and my model object has null in field2. If I implicitly call setVisible(false) on the TextField for field2  the value is kept onSubmit.Igor put better like this I guess:when the page renders none of the fields are shown. after submit however  myobject.getfield1() is still 'field1value' butmyobject.getfield2() is null - which implies that textfield2 is stillprocessed even though it is inside an enclosure that has been hidden.   ,0
1397,AjaxSubmitLink doesn't always find enclosing form properly    If the AjaxSubmitLink constructor that doesn't take in a form is called  it calls the constructor that does take in a form with null for the form. This seems correct  and it passes the form argument into the constructor of the AjaxFormSubmitBehavior as also seems correct. AjaxFormSubmitBehavior has a private getForm() method that  if the form is null  sensibly searches through the component hierarchy to find a form that contains the component. This is also good. The bit that seems wrong is that the overridden onSubmit(AjaxRequestTarget) and onError(AjaxRequestTarget) methods in AjaxSubmitLink's version of AjaxFormSubmitBehavior call AjaxSubmitLink's onSubmit and onError with the form argument that was originally passed into the constructor. This means that if you originally called the one-argument constructor for AjaxSubmitLink  the onSubmit and onError methods will be called with a null form  rather than the actual form that was submitted.As far as I can see  an easy fix for this would be to make getForm() in AjaxFormSubmitBehavior protected rather than private  and then to call getForm() in the overridden onSubmit and onError in AjaxSubmitLink's version of AjaxFormSubmitBehavior. That way the AjaxSubmitLink's onSubmit and onError would always be called with the actual form that was submitted.   ,0
1399,Escaping DiskPageStore SessionFolder needed    When sessionId=8y4bxNcyiScVVV6QtVp9lg**.node1 Wicket can't create the temp directory because the name contains invalid character (at least on windows).So a FileNotFoundException is thrown.The use case happens when tomcat is configured as (in order to work with apache module mod_jk) &lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt; &lt;Connector port='8009' address='${jboss.bind.address}' protocol='AJP/1.3' emptySessionPath='true' enableLookups='false' redirectPort='8443' /&gt; &lt;Engine name='jboss.web' defaultHost='localhost' jvmRoute='node1'&gt;My very temp solution (to let things go) is  private File getSessionFolder(String sessionId  boolean create) { File storeFolder = getStoreFolder(); File sessionFolder = new File(storeFolder  sessionId.replace('*' '_')); if (create &amp;&amp; sessionFolder.exists() == false) { mkdirs(sessionFolder); } return sessionFolder; }I think that a global solution is needed to fix the problem.   ,0
1400,FormComponent.error(ivalidationerror) error needs to show tried resource keys    Please see the following discussion from Wicket forum http://www.nabble.com/Having-problems-with-resource-keys-in-a-form-which-has-two-panels-of-the-same-kind-td15881597.html   ,0
1401,StyleDateConverter does not use the components Locale when formatting.    The StyleDateConverter class does not use .withLocale(getLocale()) in the getFormat() method.This means that any 'LL' formatted dates do not have the correct translations present when outputting words (eg  month).protected DateTimeFormatter getFormat() { DateTimeFormatter dtf = DateTimeFormat.forPattern(getDatePattern()).withPivotYear(2000); return dtf;}should beprotected DateTimeFormatter getFormat() { DateTimeFormatter dtf = DateTimeFormat.forPattern(getDatePattern()).withLocale(getLocale()).withPivotYear(2000); return dtf;}   ,0
1402,External JAvascript references not included    When using IHeaderResponse to include an external Javascript file  it is not included because of this bug:Index: /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java===================================================================&#8212; /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java (revision 614519)+++ /Users/John/Development/wicket/trunk/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java (working copy)@@ -177 7 +177 7 @@ { List token1 = Arrays.asList(new Object[] { 'javascript'  url }); List token2 = Arrays.asList(new Object[] { 'javascript'  id }); if (wasRendered(token1) == false &amp;&amp; wasRendered(token2))+ if (wasRendered(token1) == false &amp;&amp; wasRendered(token2) == false) { JavascriptUtils.writeJavascriptUrl(getResponse()  url  id); markRendered(token1);@@ -258 8 +258 7 @@ { if (!closed) { List token = Arrays .asList(new Object[] { 'javascript-event'  target  event  javascript });+ List token = Arrays.asList(new Object[] { 'javascript-event'  target  event  javascript }); if (wasRendered(token) == false) { renderJavascriptReference(WicketEventReference.INSTANCE);@@ -264 7 +263 7 @@ { renderJavascriptReference(WicketEventReference.INSTANCE); JavascriptUtils.writeJavascript(getResponse()  'Wicket.Event.add(' + target + '  /'' + event + '/'  function() { ' + javascript + ';});');+ '  /'' + event + '/'  function() { ' + javascript + ';});'); markRendered(token); } }@@ -275 7 +274 7 @@ */ public void close() {- this.closed = true;+ closed = true; } /**   ,0
1406,CheckGroupSelector should implement ILabelProvider    The CheckGroupSelector component (used to check all Checks within a Checkgroup) should implement ILabelProvider (or extend LabeledWebMarkupContainer) as currently no &lt;label&gt; can be bound to a CheckGroupSelector.   ,0
1420,Allow to change charset in StringRequestTarget    It's impossible to access the created StringBufferResourceStream charset without overriding the entire respond method.   ,0
1422,request to make RadioChoice getPrefix() and getSuffix() non-final    I'm working on a project where we have subclassed RadioChoice  and would like to override the methods getPrefix() and getSuffix(). However these methods are declared as final. Please change them to be non-final  unless there is some particular reason for them to remain final.Thanks!   ,0
1423,AuthenticatedWebApplication uses deprecated constructor of AuthenticatedWebSession    In changing from 1.3.1 to 1.3.2 the AuthenticatedWebSession(AuthenticatedWebApplication  Request) method became deprecated  but AuthenticatedWebApplication#newSession still searches for this one.Simply a matter of changing lines 114-116 of AuthenticatedWebApplication.java from:return webSessionClassRef.get().getDeclaredConstructor( AuthenticatedWebApplication.class  Request.class).newInstance( AuthenticatedWebApplication.this  request);to:return webSessionClassRef.get().getDeclaredConstructor( Request.class).newInstance( request);   ,0
1427,make setAfter/BeforeDisabledLink return 'this' for chaining    Is it possible to make setAfterDisabledLink on AbstractLink return 'this' so that chaining is possible. Now I have somthing similar to the following: fragment.add(new BookmarkablePageLink('season2Link'  ProgramsPage.class  new PageParameters('0=2008')) { { setAfterDisabledLink(''); setBeforeDisabledLink(''); } @Override public boolean isEnabled() { return '2008'.equals(season); } });But it would be nice if I could do: fragment.add(new BookmarkablePageLink('season2Link'  ProgramsPage.class  new PageParameters('0=2008')) { @Override public boolean isEnabled() { return '2008'.equals(season); } }.setBeforeDisabledLink('').setAfterDisabledLink(''));   ,0
1431,Make the Source Code pages for examples stateless    Page expiry is very frustrating  especially when you tab back to the source code to see how something is achieved.Can we make the code pages either static or stateless  so we can bookmark them  send them to colleagues  or come back 30mins later and click a link without it saying 'page expired'?   ,0
1434,WicketTester.startPage(Class) does not trigger WebRequestCycle.onBeginRequest    While using WicketTester to test my WebApplication that is using a custom WebRequestCycle and WebRequestCycleProcessor I noticed that WicketTester does not follow the same RequestCycle as it would do when running in a real live environment resulting in MyWebRequestCycle.onBeginRequest not being called.Using startPage(Page) will call MyWebRequestCycle.onBeginRequest but then the IRequestTarget that is resolved from the Request indicates the Request comes from the DummyHomePage.testPage link. Can startPage be implemented that it really resembles the real live environment? After some research and testing I came up with this implementation  maybe it can be used:public Page startPage(Class pageClass) { WebRequestCycle requestCycle = super.setupRequestAndResponse(); requestCycle.getRequest().getRequestParameters().setBookmarkablePageClass(pageClass.getName()); super.processRequestCycle(requestCycle); return super.getLastRenderedPage();}   ,0
1435,WicketTester.clickLink(String) only triggers the WebRequestCycle.onEndRequest    This issue is somewhat related to WICKET-1434.The WebRequestCycle.onBeginRequest is called in a real live environment.I created an implementation for WicketTester for clicking AjaxLink's that triggers the onBeginRequest but I can't really asses if it breaks something. Maybe it can be used as example or something:class MyWicketTester extends WicketTester { public void clickAjaxLink(String linkPath) { WebRequestCycle cycle = super.setupRequestAndResponse(); cycle.getRequest().getRequestParameters().setInterfaceName(IBehaviorListener.class.getSimpleName()); cycle.getRequest().getRequestParameters().setBehaviorId('0'); cycle.getRequest().getRequestParameters().setComponentPath(getComponentFromLastRenderedPage(linkPath).getPath()); super.processRequestCycle(cycle); }}   ,0
1436,Unable to use properties file when generating XML files    Please refer to this thread: http://www.nabble.com/Unable-to-use-wicket:message-when-generating-XML-files-td15779276.html   ,0
1438,detach behavior    This was originally posted as a ConcurrentModificationException during detach on the wicket user list (http://markmail.org/message/xnrot5hm4wvow7dq) but later investigations show that there is something else not right.Let me begin by restating the original problem:A couple of days ago Warren came to me with a problem. If he attacheda behavior to a component which potentially throws aRestartResponseAtInterceptPageException aConcurrentModificationException would bubble all the way into tomcatcode.Now you probably are going to say: 'Then don't do that'  but thefact that an exception escapes wicket is imo reason to investigate.So i did some digging. The situation is as follows:In the renderHead method of an IHeaderContributor a check is performedfor an authenticated user  if none is found a RRAIPE is thrown.One of the places that executes renderHead is the onDetach of WebPage.Now suppose we have a Page A which has a component decorated with thisheader contributor  the page also contains a Button to log off users.The onsubmit for this button is as simple as log user off andsetResponsePage(class).This page is usually only accessible if an authenticated user isavailable so everything works fine if that is the case.But then the user decides to log off  the onsubmit is triggered andexits normally. the request continues and reaches the point where theRequestCycle is detaching all RequestTargets (at that point there are2 targets  1 for the current page and 1 set during the onsubmit).During the detach the renderHead method is executed along with thecheck for an authenticated user. Since there isn't one anymore aRRAIPE is thrown  adding a 3rd target to the stack of RequestTargets.The RRAIPE bubbles up to RequestCycle.detach() and is caught andlogged there. Then wicket attempts to detach the next RequestTargetbut since an iterator is used to loop through all targets  theiterator detects the stack has been changed and throws aConcurrentModificationException. Ultimately resulting in a tomcaterror page.I tried changing the iterator loop to a regular for(int i=0;i &lt; .....)loop and this seems to fix the problem  even if later on morerequesttargets are added wicket happily executes them and comes upwith the desire page.There is one disadvantage i see with this solution: the requesttargetthrowing the RRAIPE is not fully detached. Perhaps the RRAIPE can beswallowed after it has added a RequestTarget and only in the case of adetach phase. That way the rest of the page could be normallydetached.Here is where it gets interesting:Johan noticed that WebPage.detach should not call renderHead during detach.In fact the only reason it does so is during development when it does not detect a header element. It then checks if there indeed should not be a header by visiting the behaviors and comparing the output to what it currently has. However as the code comments point out it then does nothing with that information because the code that should handle it does not work yet.So the question became why does the page does not have a header element. At first i thought this is because in this case a setResponsePage is done which would suppress any rendering of the current page.However this is not the case as renderhead is also called during detach in a normal page render. It does not matter if the markupfile contains a header element or not. As it turns out the presence of a header element is checked by getting a wicket component with id header This always returns null as there is no such child component. There is however a child component with an id like _header_0   ,0
1442,nested forms inside a multipart form can't be submitted via ajax    nested forms can't be submitted via ajax if any of the parent forms contain a fileuploadfield (which makes the root form a multipart).fix: skip changing the request to a multipart request in Form#handleMultiPart  if it's an ajax request.these two types of requests mutually exclude each other anyway.   ,0
1445,StreamCorruptedException/PageStore/Serialization broken because ObjectOutputStream was not flushed    The Objects.objectToByteArray() method incorrectly forgets to flush/close the ObjectOutputStream it uses. This can create corrupt object streams.   ,0
1462,Problem with ajax form submission inside model window in IE and Safari       ,0
1468,Add downloadSources option to quickstart page    would be cool to have a checkbox or a radio&#91;yes/no&#93; that will control -DdownloadSources=true param at http://wicket.apache.org/quickstart.html   ,0
1473,BaseWicketTester.isComponentOnAjaxResponse() test is too strong    Using 1.3.0 but still present in 1.3.2 source.The response i got from the ajax request was :&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;ajax-response&gt;&lt;header-contribution encoding='wicket1' &gt;&lt;![CDATA[&lt;head xmlns:wicket='http://wicket.apache.org'&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.markup.html.WicketEventReference/wicket-event.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/wicket-ajax-debug.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' id='wicket-ajax-debug-enable'&gt;&lt;Unable to render embedded object: File (--/*--&gt;&lt;) not found.[CDATA[/&gt;&lt;!--/wicketAjaxDebugEnable=true;/--&gt;]]&gt;/&lt;/script&gt;&lt;script type='text/javascript' src='resources/org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior/wicket-autocomplete.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='resources/com.amdm.ajf.wicket.component.autocomplete.ImprovedAutoCompleteBehavior/improved-autocomplete.js'&gt;&lt;/script&gt;&lt;/head&gt;]]&gt;&lt;/header-contribution&gt;&lt;component id='ville9' encoding='wicket1' &gt;&lt;![CDATA[&lt;input value='TOULOUSE' autocomplete='off' maxlength='26' type='text' onfocus='this.className='focus';' size='28' name='view:adresse:adresseInner:villeFrancaiseDiv:ville' onchange='wicketThrottler.throttle( 'th1'  200  function() { var wcall=wicketAjaxPost('?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:ville::IBehaviorListener:3:-1'  wicketSerialize(Wicket.$('ville9')) null null  function() {return Wicket.$('ville9') != null;}.bind(this));});' id='ville9' onblur='this.className='normal';'/&gt;&lt;script type='text/javascript'&gt;&lt;Unable to render embedded object: File (--/*--&gt;&lt;) not found.[CDATA[/&gt;&lt;!--/new Wicket.AutoComplete('ville9' '?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:ville::IActivePageBehaviorListener:1:-1&amp;wicket:ignoreIfNotActive=true' false);/--&gt;]]&gt;/&lt;/script&gt;]]&gt;&lt;/component&gt;&lt;component id='codePostalBinde8' encoding='wicket1' &gt;&lt;![CDATA[&lt;input value='34200' autocomplete='off' maxlength='5' type='text' onfocus='this.className='focus';' size='5' name='view:adresse:adresseInner:villeFrancaiseDiv:codePostalBinde' onchange='wicketThrottler.throttle( 'th2'  200  function() { var wcall=wicketAjaxPost('?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:codePostalBinde::IBehaviorListener:3:-1'  wicketSerialize(Wicket.$('codePostalBinde8')) null null  function() {return Wicket.$('codePostalBinde8') != null;}.bind(this));});' id='codePostalBinde8' onblur='this.className='normal';'/&gt;&lt;script type='text/javascript'&gt;&lt;Unable to render embedded object: File (--/*--&gt;&lt;) not found.[CDATA[/&gt;&lt;!--/new Wicket.AutoComplete('codePostalBinde8' '?wicket:interface=:0:updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:codePostalBinde::IActivePageBehaviorListener:1:-1&amp;wicket:ignoreIfNotActive=true' false);/--&gt;]]&gt;/&lt;/script&gt;]]&gt;&lt;/component&gt;&lt;/ajax-response&gt;And my test is :tester.assertComponentOnAjaxResponse('updateExpertWizard:form:view:adresse:adresseInner:villeFrancaiseDiv:ville');It fails in BaseWicketTester.isComponentOnAjaxResponse() :// Look for that the component is on the response  using the markup id boolean isComponentInAjaxResponse = ajaxResponse.matches('(?s).*&lt;component id=/'' + markupId + '/' ?&gt;.*'); failMessage = 'Component wasn't found in the AJAX response';because of the attribut { encoding='wicket1' } present in the component tag. The regex must be sweeter like (for example):'(?s).&lt;component id=/'' + markupId + '/' . ?&gt;.*' (or much much better   ,0
1483,Unusual ClassCastException (SimpleAttributeModifier to IBehaviorListener) processing onError.    Build the application from the four class files and one html file below. Run class Start as an application. Go to your browser  to this URL:http://localhost:4280/behaviorbug/Type some text into the text field. After six characters  it will throw a ClassCastException.Source:package com.bugs.behaviorBug;import org.apache.wicket.ajax.AjaxRequestTarget;import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;import org.apache.wicket.behavior.SimpleAttributeModifier;import org.apache.wicket.markup.html.form.TextField;import org.apache.wicket.model.IModel;public class BehaviorBug extends TextField { public BehaviorBug(String id  IModel model) { super( id  model ); init(); } private int kc = 0; private int cc = 0; private final SimpleAttributeModifier blackBorder = new SimpleAttributeModifier( 'border-color'  'black' ); private final SimpleAttributeModifier redBorder = new SimpleAttributeModifier( 'border-color'  'red' ); private SimpleAttributeModifier currentBorder = null; private void init() { setBorder( this.blackBorder ); AjaxFormComponentUpdatingBehavior changeWarningBehavior = new AjaxFormComponentUpdatingBehavior( 'onchange' ) { @Override protected void onUpdate(AjaxRequestTarget target) { System.err.println( 'WarningTextField onUpdate onChange ' + BehaviorBug.this.cc++ ); reColor(); } }; // I'm trying to do something tricky here. I want it to validate after every // keystroke  so the user can get instant feedback on when the data is good. AjaxFormComponentUpdatingBehavior keyUpWarningBehavior = new AjaxFormComponentUpdatingBehavior( 'onkeyup' ) { @Override protected void onUpdate(AjaxRequestTarget target) { System.err.println( 'WarningTextField onUpdate onKeyUp ' + BehaviorBug.this.kc++ ); reColor(); // Thread.dumpStack(); } // The implementation of AjaxFormComponentUpdatingBehavior only calls // onUpdate // when the field is valid. Since it won't update when the field is // invalid  I // can't get my instant feedback unless I call onUpdate() when there's an // error. // Since I can't override onEvent() (It's final)  I override onError to // force // an update even when the field is invalid. This should be safe  since // onError() // is only called on invalid data with a null exception  in which case it // does // nothing. // This  however  seems to be what causes the bug. I have no idea why this // would cause the bug. @Override protected void onError(AjaxRequestTarget target  RuntimeException e) { // Called on validation error with a null e. super.onError( target  e ); // Throws e  if it's not null. Does nothing // otherwise. onUpdate( target ); } }; add( changeWarningBehavior ); add( keyUpWarningBehavior ); } private void reColor() { if ( isValid() ) { setBorder( BehaviorBug.this.blackBorder ); } else { setBorder( BehaviorBug.this.redBorder ); } } private void setBorder(SimpleAttributeModifier border) { if ( this.currentBorder != null &amp;&amp; this.currentBorder != border ) { remove( this.currentBorder ); } this.currentBorder = border; add( this.currentBorder ); }}package com.bugs.behaviorBug;import org.apache.wicket.Application;import org.apache.wicket.Page;import org.apache.wicket.Request;import org.apache.wicket.Response;import org.apache.wicket.Session;import org.apache.wicket.protocol.http.WebApplication;import org.apache.wicket.protocol.http.WebSession;/**  @author Miguel Mu�_�_�oz @version $Id$  */public class BehaviorBugApplication extends WebApplication { /** Constructor */ public BehaviorBugApplication() { // empty } @Override protected void init() { // empty } @Override public Class&lt;? extends Page&gt; getHomePage() { return Index.class; } /* (non-Javadoc)  @see org.apache.wicket.protocol.http.WebApplication#newSession(org.apache.wicket.Request  org.apache.wicket.Response) */ @Override public Session newSession(Request request  Response response) { return new BugSession( this  request ); } public class BugSession extends WebSession { public BugSession(Application application  Request request) { super(request); setApplication( application ); } }}package com.bugs.behaviorBug;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.TextField;import org.apache.wicket.model.Model;import org.apache.wicket.validation.IValidator;import org.apache.wicket.validation.validator.StringValidator;/**  @author Miguel Mu�_�_�oz @version $Id$  */public class Index extends WebPage { /**  */ public Index() { Form form = new Form('form'); TextField textField = new BehaviorBug('testfield'  new Model()); IValidator lengthValidator = new StringValidator.MaximumLengthValidator(4); textField.add( lengthValidator ); form.add( textField ); add(form); }}package com.bugs.behaviorBug;import org.mortbay.jetty.Connector;import org.mortbay.jetty.Server;import org.mortbay.jetty.nio.SelectChannelConnector;import org.mortbay.jetty.webapp.WebAppContext;/**  @author Miguel Mu�_�_�oz @version $Id$  */public class Start { private static final int defaultPort = 4280; /**  @param args */ public static void main(String[] args) { int port = defaultPort; if (args.length != 0) Unknown macro: { try { port = Integer.valueOf( args[0] ); } catch ( NumberFormatException e ) { System.err.println('Unable to parse port parameter /'' + args[0] + '/' as an integer.'); System.err.println('Using default value of x ' + defaultPort); } }  Server server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector.setPort( port ); server.setConnectors( new Connector[] { connector } ); WebAppContext web = new WebAppContext();// web.setContextPath( '/workspace/WicketTutorial' ); web.setContextPath( '/behaviorbug' ); System.out.println( 'CP: ' + web.getContextPath() ); web.setWar( 'src/main/webapp' + port ); server.addHandler( web ); try { server.start(); // Who was the bozo who declared this to throw Exception? server.join(); } catch ( Exception e ) { e.printStackTrace(); System.exit( 1 ); } }}&lt;html&gt;&lt;head&gt;&lt;title&gt;Behavior Bug&lt;/title&gt;&lt;link href='style.css' rel='stylesheet' /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id='container'&gt; &lt;div id='header'&gt;Behavior Bug&lt;/div&gt; &lt;div id='content'&gt; Type some text into the field below. After six characters  you'll get a stack trace. &lt;form wicket:id='form'&gt; &lt;input type='text' wicket:id='testfield' name='txt' width='35' size='25' /&gt;&lt;p&gt; submit: &lt;input type='submit' value='That's all  Folks!'/&gt;&lt;/p&gt; &lt;/form&gt; End of form. &lt;/div&gt;&lt;/div&gt;Test of Build Process.&lt;/body&gt;&lt;/html&gt;   ,0
1492,Allow form to specify prefix for formcomponent names       ,0
1496,DataTable.html does not validate (HTML 4.01/XHTML-Strict)    According to http://www.w3.org/TR/html401/struct/tables.html#h-11.2.3  &lt;tfoot&gt;..&lt;/tfoot&gt; must come before the start of &lt;tbody&gt;. The has not changed for XHTML.Proposed fix: just move &lt;tfoot&gt; up after &lt;thead&gt; and before &lt;tbody&gt;.   ,0
1499,AjaxEditableMultiLineLabel + race condition /    There are two issues concerning AjaxEditableMultiLineLabel:a) Race condition cancel editingUsing 'Esc' to cancel editing might lead to two events to be fired: first onKeypress is executed - which leads to bluring the component in Opera. This results in the onblur-event firing and the input is submitted!Changing the code in onComponentTag to protected void onComponentTag(ComponentTag tag) {  super.onComponentTag(tag); final String saveCall = '{wicketAjaxGet('' + getCallbackUrl() + '&amp;save=true&amp;'+this.name+'='+wicketEncode(this.value)); return false;}'; final String cancelCall = '{wicketAjaxGet('' + getCallbackUrl() + '&amp;save=false'); this.onblur=''; return false;}'; final String keypress = 'var kc=wicketKeyCode(event); if (kc==27) ' + cancelCall + '; '; tag.put('onblur'  saveCall); tag.put('onkeypress'  keypress); }stops onblur being fired.This might also apply for AjaxEditableLabel - though I haven't seen this happening there yet.b) Displaying defaultNullLabel on empty String Model:Should behave like AjaxEditableLabel  i.e.: protected void onComponentTagBody(MarkupStream markupStream  ComponentTag openTag) { Object modelObject = getModelObject(); if (modelObject == null || ''.equals(modelObject)) { replaceComponentTagBody(markupStream  openTag  defaultNullLabel()); } else { super.onComponentTagBody(markupStream  openTag); } }   ,0
1501,MarkupCache.putIntoCache doesn't behave correctly!!    'putIntoCache' checks for the locationString not to be null instead of the cacheKey!This way you always get old markup returned instead of the freshly supplied markup which shouldn't be cached at all.   ,0
1504,AutoCompleteTextField - javascript error 'type mismatch' in line 227 in IE    I just swithed from 1.3.2 to 1.3.3 and that resultet in a javascript error 'type mismatch' in line 227  wich is this line in wicket-autocomplete.js:  menu.style.zIndex=index=='auto'?index:Number(index)+1;Only in IE (6.0) - firefox works fine.   ,0
1507,MarkupCache style/variation/locale support broken    We're running into a problem with the change made for this issue: WICKET-1370Basically  if you have a situation like this where the Login page extends DefaultPage and uses &lt;wicket:extend&gt;:Login.htmlDefaultPage.htmlDefaultPage_style1.htmlDefaultPage_style2.htmlThe markup for DefaultPage will always be based on the first style the site is hit with. This is because the location string ('Login.html') hasn't changed with the style change.   ,0
1512,Widen Generics for Lists/Iteratos    It is important to widen the generics for collections.For example it is better (and sometimes necessary) to change the signature of org.apache.wicket.markup.repeater.data.IDataProvider#iterator to:Iterator&lt;? extends T&gt; iterator(int first  int count);I will create and add a patch later.   ,0
1538,WicketAjaxIndicatorAppender rename to AjaxIndicatorAppender    Just a tiny niggle really... but other ajax components start with Ajax.... and I always forget this one! Perhaps rename and keep a deprecated subclass with the old name?   ,0
1583,NPE in EnclosureResolver    if you put a single wicket:container in a wicket:enclosure  it will NPE looking for a 'child' attribute. you can work around by either changing the container to a div (in which case it will correctly default to the single child) or by adding a child='name' attribute to the enclosure to explicitly specify the single child.Caused by: java.lang.NullPointerException at org.apache.wicket.markup.resolver.EnclosureResolver.resolve(EnclosureResolver.java:59) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1324) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1476) at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:639) at org.apache.wicket.markup.html.panel.Panel.onComponentTagBody(Panel.java:112) at org.apache.wicket.Component.renderComponent(Component.java:2478) ... 47 common frames omitted   ,0
1607,addDomReadyEvent unreliable for Safari    Because Safari doesn't support an onDomReady event  wicket-event.js emulates that behavior using timeouts when that browser is detected. However  the timeout is only set once  for 10ms; window.setTimeout() does not produce a repeating timeout. If the document object is not ready at that point  the registered functions are never called. Often it is ready  so the bug is masked.I discovered this problem in a page that uses the DateTimeField component  which uses onDomReady for its initialization. Sometimes the component works fine  other times nothing happens when you click. It's a fairly complicated page that apparently Safari may spend more than 10ms building.   ,0
1608,make AutoCompleteBehavior's configuration more flexible    add AutoCompleteSettings which encapsulates all needed configuration options  so we don't need hundreds of constructors just to have every combination of configuration options available.   ,0
1618,Localizer API should be enhanced so that the cache implementation can be overwritten    /** Create a new cache  override this method if you want a different map to store the cache keys  for example a map that hold only the last X number of elements..  By default it uses the {@link ConcurrentHashMap}  @return cache */ protected Map newCache() { return new ConcurrentHashMap(); }   ,0
1642,Fix default localizations    The english localizations for DateValidato are as follows:DateValidator.minimum='${input}' is less than the minimum of ${minimum}.DateValidator.maximum='${input}' is larger than the maximum of ${maximum}.However the finnish ones instruct that the value must be one-off its minimum or maximum. This is definitely confuses the user/developer.Here is the proposed translation:DateValidator.maximum='${input}' ei voi olla suurempi kuin ${maximum}.DateValidator.minimum='${input}' ei voi olla pienempi kuin ${minimum}.Instead of (Application_fi.properties):DateValidator.minimum='${input}' tulee olla j/u00E4lkeen ${minimum}.DateValidator.maximum='${input}' tulee olla ennen ${maximum}.   ,0
1643,Bookmarkable / Stateless form submit bug    A stateless bookmarkable form submission isn't working correctly for submissions after reboot or session expiration. This may be due to the use of MixedParamUrlCodingStrategy: believe I've tracked down the problem to this code in BookmarkablePageRequestTargetUrlCodingStrategy:  // do some extra work for checking whether this is a normal request to a  // bookmarkable page  or a request to a stateless page (in which case a  // wicket:interface parameter should be available  final String interfaceParameter = (String)parameters  .remove(WebRequestCodingStrategy.INTERFACE_PARAMETER_NAME);  if (interfaceParameter != null)  { WebRequestCodingStrategy.addInterfaceParameters(interfaceParameter  requestParameters); return new BookmarkableListenerInterfaceRequestTarget(pageMapName  (Class)bookmarkablePageClassRef.get()  parameters  requestParameters .getComponentPath()  requestParameters.getInterfaceName()  requestParameters.getVersionNumber()); } The issue is that the 'parameters' will never contain the INTERFACE_PARAMETER_NAME because it would have been removed in WebRequestCodingStrategy:decode:215 which as far as I can tell is always called first (from RequestCycle.step.RESOLVE_TARGET:1233). The 'requestParameters' should already have the interface parameters  so it isn't clear why the addInterfaceParameters() logic is being called again (it is already called in WebRequestCodingStrategy:decode:200). I've got a patch forthcoming.   ,0
1645,Syntactic errors in the manifest OSGi headers    Hello  Not exactly sure about the error location  but upon deployment on a OSGi container (SpringSource Application Context  based on Equinox)  I get the following trace:&#91;2008-05-19 19:39:26.041&#93; fs-watcher &lt;SPOP0004W&gt; The bundle '/home/djo/Java/servers/springsource-ap-1.0.0.beta3/repository/bundles/usr/wicket-datetime-1.4-m2.jar' could not be provisioned is its manifest is malformed. The error encountered whilst parsing the manifest was: The manifest identified by Name 'Wicket Date/Time'  Symbolic Name 'org.apache.wicket.wicket-datetime'  and Version '1.4.0.m2' has the following errors [org.antlr.runtime.NoViableAltException on 'Package Header &#91;Import&#93;' at Char: 768 org.antlr.runtime.NoViableAltException on 'Package Header &#91;Export&#93;' at Char: 101]   ,0
1648,AbstractRequestTargetUrlCodingStrategy(line 174) throws confusing exception. It would be better redirect to 404-page in this case.    Steps to reproduce: When user manually types incorrect URL  this confusing exception will be thrown.SEVERE: Internal error for /eshop/profile/pjava.lang.IllegalStateException: URL fragment has unmatched key/value pair: p at org.apache.wicket.request.target.coding.AbstractRequestTargetUrlCodingStrategy.decodeParameters(AbstractRequestTargetUrlCodingStrategy.java:174) at org.apache.wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy.decode(BookmarkablePageRequestTargetUrlCodingStrategy.java:76) at org.apache.wicket.protocol.http.request.WebRequestCodingStrategy.targetForRequest(WebRequestCodingStrategy.java:476) at org.apache.wicket.protocol.http.WebRequestCycleProcessor.resolve(WebRequestCycleProcessor.java:175)   ,0
1667,Memory leak in Localizer    I noticed recently (and told on IRC) a problem with the Localizer and the way the getCacheKey() method works.I uses the component id of all component in the path to the component to create the key. But each page generation has a different id. This has been fixed recently by breaking outside of the loop which creates the key if the component's parent is a Page instance. This partially solves the always increasing cache. But it still has some issues: with the page completely outside of the path  it could introduce some rare bugs when searching for keys defined in the page properties file (it shouldn't break but skip the 'buffer.append(':').append(cursor.getId())' when the cursor is on a Page instance). there is still a bunch of ids generated when you loop over a repeater (the component of type Item has a new id for every item in the list). this is mitigated by the fact that when doing a normal refresh of the view  the starting id restarts at 1  but if you have an Ajax paging view  it's not restarted and starts again to fill the cache with unwanted keys.there are multiple options: never include the id in the key (I'm not convinced it is necessary; is it really used in the String loader?) don't include the id in the key if the cursor is on a component of type Page or Item don't include the id if it's numeric (is this costly?)In the meantime  I'll make a small fix in my local checkout of Wicket  not including the id if the cursor is on Page or Item   ,0
1669,TimeFrame.equals(Object)  does not work as expected    the equals() method should be implemented for the TimeFrame class   ,0
1679,Memory leak in DiskPageStore    No entries are removed from DiskPageStore.sessionIdToEntryMap. I guess  this should be added to the DiskPageStore.unbind(String sessionId) method: public void unbind(String sessionId) { // FIX: replace get() with remove() SessionEntry entry = (SessionEntry)sessionIdToEntryMap.get(sessionId); if (entry != null) { if (isSynchronous()) { entry.unbind(); } else { List pages = getPagesToSaveList(sessionId); synchronized (pages) { flushPagesToSaveList(sessionId  pages); entry.unbind(); } pagesToSaveAll.remove(sessionId); } } }   ,0
1682,HtmlHandler can't handle tags not requiring closed tags if the tag names are uppercase    In HtmlHandler.java  the requiresCloseTag() method only looks the tag name in the Map  without considering the char case: public static boolean requiresCloseTag(final String name) { return doesNotRequireCloseTag.get(name) == null; }Because the keys are all lower case: static { // Tags which are allowed not be closed in HTML doesNotRequireCloseTag.put('p'  Boolean.TRUE); doesNotRequireCloseTag.put('br'  Boolean.TRUE); doesNotRequireCloseTag.put('img'  Boolean.TRUE); doesNotRequireCloseTag.put('input'  Boolean.TRUE); doesNotRequireCloseTag.put('hr'  Boolean.TRUE); doesNotRequireCloseTag.put('link'  Boolean.TRUE); doesNotRequireCloseTag.put('meta'  Boolean.TRUE); }it will fail if uppercase tag names are used in the markup.I've verified that it dies with the following simple markup:&lt;html&gt;&lt;body&gt;&lt;BR&gt;&lt;/body&gt;&lt;/html&gt;   ,0
1684,FileUploadField should return FileUpload as its converted input    FileUploadField should return FileUpload as its converted input so the file can be validated.Eg @Overrideprotected void convertInput() { setConvertedInput(getFileUpload());}Apparently MultiFileUploadField handles this (I've checked  it appears to be in the convertValue method).For more context see http://www.nabble.com/Best-way-of-validating-FileUploadField-td17662018.html   ,0
1694,wicket complains that ValueMap$NullSafeKeyComparator is not serializable    wicket complains that ValueMap$NullSafeKeyComparator is not serializable:2070 ERROR &#91;btpool0-19&#93; org.apache.wicket.util.lang.Objects - Error serializing object class testapp.pages.ContactPage [object=&#91;Page class = testapp.pages.ContactPage  id = 0  version = 0&#93;]org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.wicket.util.value.ValueMap$NullSafeKeyComparatorField hierarchy is: 0 &#91;class=testapp.pages.ContactPage  path=0&#93; java.lang.Object org.apache.wicket.Component.data [class=&#91;Lorg.apache.wicket.MetaDataEntry;&#93; java.lang.Object org.apache.wicket.Component.data&#91;0&#93; &#91;class=org.apache.wicket.MetaDataEntry&#93; java.lang.Object org.apache.wicket.MetaDataEntry.object &#91;class=org.apache.wicket.PageParameters&#93; private java.util.Comparator java.util.TreeMap.comparator &#91;class=org.apache.wicket.util.value.ValueMap$NullSafeKeyComparator&#93; &lt;----- field that is not serializable at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:349) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:618) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:541) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:618) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:541) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:395) at org.apache.wicket.util.io.SerializableChecker.checkFields(SerializableChecker.java:618) at org.apache.wicket.util.io.SerializableChecker.check(SerializableChecker.java:541) at org.apache.wicket.util.io.SerializableChecker.writeObjectOverride(SerializableChecker.java:687) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:298) at org.apache.wicket.util.io.IObjectStreamFactory$DefaultObjectStreamFactory$2.writeObjectOverride(IObjectStreamFactory.java:127) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:298) at org.apache.wicket.util.lang.Objects.objectToByteArray(Objects.java:1100) at org.apache.wicket.protocol.http.pagestore.AbstractPageStore.serializePage(AbstractPageStore.java:200) at org.apache.wicket.protocol.http.pagestore.DiskPageStore.storePage(DiskPageStore.java:814) at org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.put(SecondLevelCacheSessionStore.java:327) at org.apache.wicket.Session.requestDetached(Session.java:1391) at org.apache.wicket.RequestCycle.detach(RequestCycle.java:1113) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1384) at org.apache.wicket.RequestCycle.request(RequestCycle.java:499) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:199) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1084) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:360) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:828) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:514) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:395) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450)Caused by: java.io.NotSerializableException: org.apache.wicket.util.value.ValueMap$NullSafeKeyComparator at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:391) at java.util.TreeMap.writeObject(TreeMap.java:1466) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:917) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1339) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1251) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1075) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375) at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:391) at org.apache.wicket.protocol.http.pagestore.AbstractPageStore$PageSerializer.serializePage(AbstractPageStore.java:319) at org.apache.wicket.Page.writePageObject(Page.java:1335) at org.apache.wicket.Component.writeObject(Component.java:4303) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:917) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1339) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302) at org.apache.wicket.util.io.IObjectStreamFactory$DefaultObjectStreamFactory$2.writeObjectOverride(IObjectStreamFactory.java:119) ... 24 more   ,0
1700,Make functionality of ContextImage a behavior so that other types of components can utilize its functionality    It would be better if ContextImage was a behavior rather than an actual component. For instance  if you have an html input of type=image (or a link for that matter) you can still utilize the behavior whereas a component you cannot.   ,0
1705,GuiceComponentInjector mishandles static fields    GuiceComponentInjector mistakenly wraps static fields with serializable proxies. These CGLIB proxies impose limitations (must have default constructor  may not have final methods  etc) on fields which are not strictly necessary. The new implementation allows the use of Binder.requestStaticInjection() which is more flexible.   ,0
1706,org.apache.wicket.util.lang.Objects.convertValue returns null if it cannot convert the value    In the javadoc comment of the method it says that this method should return the value given as parameter if the value cannot be converted to the given type  but actually it returns null if it cannot convert the value. I had a problem with a TextField which had a model value of type java.io.Serializable and I had unfortunately not defined a special converter for the text field so it used org.apache.wicket.util.convert.ConverterLocator.DefaultConverter.convertToObject to convert to the object type. convertToObject uses Objects.convertValue so whenever model object was updated it was set to null. When retrieved from the model  model object was properly shown in the TextField so I had no idea why the value could not be properly setted but only getted.In many cases it would probably help if the Objects.convertValue did what it promises in javadoc (returns the value unconverted)  but how about throwing exception (at some method) if the converter does not know how to convert some kind of objects? This would make it a lot easier to spot the kind of mistakes I had made.   ,0
1709,Allow configuration of the guice Stage for GuiceWebApplicationFactory    I would like to be able to use a init parameter to configure what Stage guice will use simillar to the way that WebApplication get it's configuration type from the wicket.configuration parameter. The parameter name could be wicket-guice.stage to keep with the pattern used by wicket core.   ,0
1711,Improve Locale fallback in BundleStringResourceLoader    While https://issues.apache.org/jira/browse/WICKET-1415 fixed the NPE in BundleStringResourceLoader Locale.getDefault() is a bad choice to get the locale from  as it is determined by the default locale of the jvmrunning the servlet container. I think it's a big coincidence if the jvm default locale is actually the one the user wantsto see in the webapp - Session#getLocale() would probably be a better default.Attached is a patch against current trunk (1.4)   ,0
1714,PackagedTextTemplate does not load resource from application resource stream locator    Here is my post to the dev list...file a jira issue-igorOn Wed  Jun 25  2008 at 11:23 AM  Ritz123 &lt;ritesh.trivedi@...&gt; wrote:&gt;&gt; I did some investigation and seems like there is a bug.&gt;&gt; PackagedTextTemplate @line:92 is creating a new ResourceStreamLocator()&gt; instead of using the one from the application. This is causing resources to&gt; be not found if you have custom resource stream loader registered with the&gt; application.&gt;&gt; line 92: private static final IResourceStreamLocator streamLocator = new&gt; ResourceStreamLocator();&gt;&gt; Can Wicket dev confirm?&gt;&gt;&gt; Ritz123 wrote:&gt;&gt;&gt;&gt; Hi &gt;&gt;&gt;&gt; I am trying to use PackagedTextTemplate to load the template  but seems&gt;&gt; like its not looking for the resource in the application registered&gt;&gt; resource stream locator. I get resource not found exception.&gt;&gt;&gt;&gt; HeaderContributor.forCss and forJavascript has worked fine and has found&gt;&gt; resource in the folders for application stream location without any&gt;&gt; issues.&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#8211;&gt; View this message in context: http://www.nabble.com/Re%3A-PackagedTextTemplate-does-not-load-resource-from-application-resource-stream-locator----BUG---tp18116540p18116540.html&gt; Sent from the Wicket - Dev mailing list archive at Nabble.com.&gt;   ,0
1719,StringResourceModel may fail to format numbers using MessageFormat    StringResourceModel API seems to suggest it's possible to use it without a Component reference using the following approach:m = new StringResourceModel('key'  null  new Model(...)  new Object[] {p1  p2  ...});m.setLocalizer(xxxApplication.get().getResourceSettings().getLocalizer());return m.toString()Unfortunately the above will fail with an exception if the message uses the MessageFormat approach and one of the parametersis a number  since the locale field in StringResourceModel won't be initialized  and will then be passed as null to new MessageFormat(value  locale) at line 514 of StringResourceFormat.I'm using the following crude workaround:StringResourceModel rm = new StringResourceModel(key  null  model  params) { @Override public void setLocalizer(Localizer localizer) { super.setLocalizer(localizer); // crude hack to force into the StringResoruceLoader to grab a locale  // which is needed to format numbers with the MessageFormat approach load(); } }; rm.setLocalizer(GeoServerApplication.get().getResourceSettings().getLocalizer()); return rm.getString();but boy  this looks ugly... Creating a custom subclass that does locale loading in theconstructor would look better  but still quite ugly...   ,0
1730,RfcCompliantEmailAddressValidator accepts whitespace and tab    The RfcCompliantEmailAddressValidator in the org.apache.wicket.extensions.validation.validator package accepts whitespace and tab characters as it uses the regex provided on http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html which '..will only validate addresses that have had any comments stripped and replaced with whitespace'.   ,0
1750,Inconsisting Handling of id mismatch on wicket:container    Given this simple case:public class Home extends WebPage { public Home() { add(new EmptyPanel('test')); }}and the following HTML page:&lt;span wicket:id='test2'/&gt;Please notice that the ids do not match.Executing this app will give the following Exception:WicketMessage: Unable to find component with id 'test2' in [Page class =com.myapp.wicket.Home  id = 0  version = 0]. This means that you declaredwicket:id=test2 in your markup  but that you either did not add thecomponent to your page at all  or that the hierarchy does not match.Whereas when using a wicket:container instead of a HTML tag  like this:&lt;wicket:container wicket:id='test2'/&gt;And when the ids doesn't match  Wicket throws the following exception:WicketMessage: Failed to handle: &lt;wicket:container wicket:id='test2'/&gt;Which is quite cryptic at the first glance.Original: http://mail-archives.apache.org/mod_mbox/wicket-dev/200803.mbox/%3c15908468.post@talk.nabble.com%3eWe ran across same problem too.   ,0
1754,form action URLs in non-Wicket forms not rewritten    Wicket's RelativePathPrefixHandler rewrites 'href'  'src'  and 'background'URLs in non-Wicket markup but does not rewrite 'action' URLs in forms.There are workarounds but it would be cleaner if Wicket handled this caseby default.Discussion at:http://www.nabble.com/RelativePathPrefixHandler-and-form-'action'-attributes-tt18537680.htmlhttp://www.nabble.com/RelativePathPrefixHandler-and-form-'action'-attributes-tt18536692.html   ,0
1755,In html Include component isAbsolute method returns false for an absolute path in unix-like systems    In isAbsolute method  if colon position is -1 then this url MAY STILL be an absolute url. In unix systems there may not be colon in absolute paths. For example: /home/someuser.somefile.htmlSo  in order to fix this  a leading / (slash) may be checked to exist like:int colonPos = url.indexOf(':');int slashPos = url.indexOf('/');if (colonPos == -1 &amp;&amp; slashPos == -1) {return false; //Relative} else if (colonPos == -1 &amp;&amp; slashPos == 0) {return true; //Absolute}//Original Code//org.apache.wicket.markup.html.include.Include.javaprotected final boolean isAbsolute(String url) { if (url == null) { return false; } // do a fast  simple check first int colonPos; if ((colonPos = url.indexOf(':')) == -1) { return false; /*PROBLEM IS HERE*/ }...   ,0
1756,Generify PropertyColumn    PropertyColumn overrides populateItem incorrectly. PropertyColumn has:public void populateItem(Item item  String componentId  IModel model)whereas ICellPopulator has: void populateItem(final Item&lt;ICellPopulator&lt;T&gt;&gt; cellItem  final String componentId  final IModel&lt;T&gt; rowModel);This makes it hard to extend PropertyColumn.   ,0
1777,Overflow when setting Expires header in WebResource    problematic code:response.setDateHeader('Expires'  System.currentTimeMillis() + (getCacheDuration() * 1000));getCacheDuration() * 1000 is an integer operation causing an overflow if getCacheDuration() is set to be &gt; MAX_INT/1000 seconds (approx. 25 days) which is by far less than the w3c recommendation for 'never expires': 'To mark a response as 'never expires ' an origin server sends an Expires date approximately one year from the time the response is sent. HTTP/1.1 servers SHOULD NOT send Expires dates more than one year in the future.'http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21changing getCacheDuration() to return long or forcing a long operation fixes the problem:response.setDateHeader('Expires'  System.currentTimeMillis() + getCacheDuration() * 1000L);   ,0
1780,NPE in feedback panel    WicketMessage: Error attaching this container for rendering: [MarkupContainer &#91;Component id = feedbackul  page = nl.topicus.tripleapoc.web.pages.deelnemer.intake.IntakeStap1Personalia  path = 11:layLeft:feedback:feedbackul.FeedbackPanel$2  isVisible = true  isVersioned = false&#93;]Root cause:java.lang.NullPointerException at org.apache.wicket.markup.html.panel.FeedbackPanel.newMessageDisplayComponent(FeedbackPanel.java:324) at org.apache.wicket.markup.html.panel.FeedbackPanel$MessageListView.populateItem(FeedbackPanel.java:88) at org.apache.wicket.markup.html.list.ListView.onPopulate(ListView.java:573) at org.apache.wicket.markup.repeater.AbstractRepeater.onBeforeRender(AbstractRepeater.java:127) at org.apache.wicket.Component.internalBeforeRender(Component.java:1003) at org.apache.wicket.Component.beforeRender(Component.java:1035) at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1589) at org.apache.wicket.Component.onBeforeRender(Component.java:3684) at org.apache.wicket.Component.internalBeforeRender(Component.java:1003) at org.apache.wicket.Component.beforeRender(Component.java:1035) at org.apache.wicket.MarkupContainer.onBeforeRenderChildren(MarkupContainer.java:1589) at org.apache.wicket.Component.onBeforeRender(Component.java:3684) at org.apache.wicket.Component.internalBeforeRender(Component.java:1003) at org.apache.wicket.Component.prepareForRender(Component.java:2168) at org.apache.wicket.ajax.AjaxRequestTarget.respondComponent(AjaxRequestTarget.java:747) at org.apache.wicket.ajax.AjaxRequestTarget.respondComponents(AjaxRequestTarget.java:649) at org.apache.wicket.ajax.AjaxRequestTarget.respond(AjaxRequestTarget.java:564) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1177) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1248) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1349) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:199)   ,0
1788,'Invalid procedure call or argument' on AJAX call with IE7    I have a Button that shows a JS alert and then executes an AJAX call.It works fine under Firefox 2  but fails under IE7.. The alert appears  I click 'ok' and then I get the 'Initiating Ajax GET request...' inside 'WICKET AJAX DEBUG'  but it doesn't reach my serverside handler.After clicking 'ok'  in the bottom-left corner of the window appears a javascript error: 'Invalid procedure call or argument'  line 849  code 0.Original discussion: http://www.nabble.com/Button-with-confirmation-with-IE7-td18944137.htmlI'll add a quickstart and a patch in a moment.   ,0
1794,WicketTester.clickLink and IndexedParamUrlCodingStrategy don't work together    IndexedParamUrlCodingStrategy.appendParameters expects String-&gt;String map:.... while (parameters.containsKey(String.valueOf)) { String value = (String)parameters.get(String.valueOf);...but BaseWicketTester.clickLink converts page params to String-&gt;String[] map:.... PageParameters parameters = (PageParameters)getParametersMethod.invoke( bookmarkablePageLink  (Object[])null); setParametersForNextRequest(parameters.toRequestParameters());...And as result we have type cast exception.   ,0
1806,JavascriptStripper ignores context when looking for multiline comments    org.apache.wicket.util.string.JavascriptStripper#stripCommentsAndWhitespace doesn't check the context when looking for multiline comments. In my case  it interprets the default accept header in the jQuery source code as a multiline comment:accepts: { xml: 'application/xml  text/xml'  html: 'text/html'  script: 'text/javascript  application/javascript'  json: 'application/json  text/javascript'  text: 'text/plain'  _default: '/'}The culprit being this string: '/'I don't have a patch and I wouldn't try to write my own JS parser. Maybe replacing the current implementation with a Rhino-based one is an option. Its available via Maven:&lt;dependency&gt; &lt;groupId&gt;rhino&lt;/groupId&gt; &lt;artifactId&gt;js&lt;/artifactId&gt; &lt;version&gt;1.7R1&lt;/version&gt;&lt;/dependency&gt;   ,0
1816,Wicket 1.3.4 violates servlet standard  Glassfish spews warnings    WicketFilter.java line 194 invokes getLastModified() which invokes 'request.getParameterMap()' on line 962. Later on in that same request  WicketFilter.java line 222 invokes doGet() which invokes response.setCharacterEncoding() on line 376.This is just one case where this problem occurs but I believe others might exist. Whenever Wicket violates the standard Glassfish spews out this warning:PWC4011: Unable to set request character encoding to UTF-8 from context &lt;context-path&gt;  because request parameters have already been read  or ServletRequest.getReader() has already been called... you literally end up with tens of these warnings per request  and supposedly  the wrong behavior  Glassfish's FAQ discusses this in more detail: http://wiki.glassfish.java.net/Wiki.jsp?page=FaqWebAppUnableToSetRequestCharEncoding   ,0
1845,WicketRuntimeException when using wicket-auth-roles in a frameset    Hi All I seem to have a very strange exception when using wicket-auth-roles in a frameset.Let me try and sketch out the setup:1) Application home page is called FramesetPage.java &#8211; it extends org.apache.wicket.markup.html.WebPage &#8211; corresponding HTML contains simple frameset with 2 rows2) Top row of frameset contains TopFramePage.java &#8211; it extends org.apache.wicket.markup.html.WebPage &#8211; corresponding HTML contains only an image component as follows: &#8211; add(new Image('bannerImage'  'logo.png'));3) Bottom row of frameset contains BottomFramePage.java &#8211; it extends org.apache.wicket.markup.html.WebPage &#8211; it requires authentication/authorization using wicket-auth-roles (as is  straight out of the jar) &#8211; if not already authenticated/authorized then redirected to MySignInPage.java &#8211; it extends org.apache.wicket.authentication.pages.SignInPage &#8211; corresponding HTML contains standard &lt;span wicket:id='signInPanel'/&gt; tagHere's the strange part: After completing the 'Username' and 'Password' fields of thesignInPanel then the exception displayed in the attached stack trace is thrown. Further  if I replace the imagecomponent in TopFramePage with some CSS that loads the same image then no exception is thrown.Any thoughts on what is causing this problem?Thanks Steve   ,0
1855,Using an AjaxSubmitLink outside of a Form does not set the form property    When constructing an AjaxSubmitLink outside of a form using the constructor:public AjaxSubmitLink(String id  final Form form)The form argument is not set in the link. This prevents the form from seeing the link as its submitting component  which in turn means that using thing like enableDefaultFormProcessing() on the link don't work.Changing the constructor of AjaxSubmitLink to:public AjaxSubmitLink(String id  final Form form){ super(id  form) /* was: super(id) */ ...}will probably fix the problem.A temporary workaround is to implement a getForm() method in the subclass of the submit link which answers the form of the link   ,0
1856,AbstractTree XHTML Strict validation    &#91;Notice: Adapted from http://markmail.org/message/afuxccwazkzwc7bz &#93;I have a rootless BaseTree and see it output &lt;table style='display:none' id='tree1f_0'&gt;&lt;/table&gt;&lt;table class='wicket-tree-content' id='tree1f_1'&gt;&lt;tr&gt;...which according to http://validator.w3.org is invalid strict XHTML. Looking at thecomment in the code  AbstractTree.onRender()  // is this root and tree is in rootless mode? if (this == rootItem &amp;&amp; isRootLess() == true) { // yes  write empty div with id // this is necessary for createElement js to work correctly String tagName = ((ComponentTag)markupStream.get()).getName(); getResponse().write( '&lt;' + tagName + ' style=/'display:none/' id=/'' + getMarkupId() + '/'&gt;&lt;/' + tagName + '&gt;'); markupStream.skipComponent(); }it appears from the comment that the indention was to output a div and not a table. Witha div  we would get valid markup: &lt;div style='display:none' id='tree1f_0'&gt;&lt;/div&gt;&lt;table class='wicket-tree-content' id='tree1f_1'&gt;&lt;tr&gt;...Is there a particular reason to fetch the tagName from the markupStream instead of just hardcodingit to 'div'?Thanks Kaspar   ,0
1857,Unfound markup information is not entirely cached even in deployment mode    Unfound markup information is not entirely cached even in deployment mode  which causes performance problems. The problem has a very broad effect  because checking for non-existent localised versions of markup causes a lot of cases of unfound markup. This showed up first in our load tests  and was later confirmed by profiling.If you don't have the localised version of your markup to your current locale  this markup is looked for but never found. This bug causes the lookup to repeat on every request when the component is repainted  which becomes a major problem in a case with a lot of ajax repaints.You can reproduce the problem with Wicket 1.3.3 easily  for example by putting the log4j.logger.org.apache.wicket.markup.MarkupCache=DEBUG setting in log4j.properties and running Wicket examples in deployment mode. I added several items to the Ajax todo list and this appeared in console repeatedlyDEBUG - MarkupCache - Load markup: cacheKey=org.apache.wicket.examples.ajax.builtin.TodoList$AddItemsContaineren_UShtmlDEBUG - MarkupCache - Markup not found: org.apache.wicket.examples.ajax.builtin.TodoList$AddItemsContaineren_UShtmlThis is caused by the bug that in MarkupCache  the unfound markup information is stored only in markupCache and not in markupKeyCache. I fixed this in the na�_�_�ve way but we should really refactor the cache handling so that it does not rely on the same calls being duplicated to markupCache and markupKeyCache .   ,0
1863,DateTimeField: small bugs    Hello  I found 2 different bugs that makes my applications react in the wrong way : onBeforeRender:378When the modelobject-date is null  the hours and minutes are not set to null to. Now only date is set to null. I use this object with ajax  and when the DateTimeField loads with a new modelobject  the hours- and minutesfield holds the old value. If not clear  I can make a quickstart. setDate:231This function adjusts the modelobject with the filled in date. But the hours and minutes aren't add.I have overridden the function so it would work correctly. My code:public void setDate(Date date) Unknown macro: { super.setDate(date); System.out.println(&quot;setDate [&quot; + date + &quot;]&quot;); MutableDateTime modelDate = new MutableDateTime(date); Integer hours = getHours(); Integer minutes = getMinutes(); boolean use12HourFormat = use12HourFormat(); if (hours != null) { modelDate.set(DateTimeFieldType.hourOfDay()  hours.intValue() % (use12HourFormat ? 12 : 24)); modelDate.setMinuteOfHour((minutes != null) ? minutes.intValue() : 0); } setDefaultModelObject(modelDate.toDate()); } Thanks a lot ! Marieke.   ,0
1868,i18n package resource resolving depends too much on available locale    Instead of just depending on the session's locale  our i18n resolving algorithm should look at the form of the file names as well. For instance  if we get a request for /web/resources/foo.Bar/test_en_US.css  it should recognize that test is the base form  and try en and en_US on top of that  regardless of the locale that is was set in the session.   ,0
1871,org.apache.wicket.util.string.Strings#stripJSessionId StringIndexOutOfBoundsException    input:http://abc.com/xx/yy.html?code=a%E2%8C%A9=en&amp;amp;section=DDD&amp;amp;d=173amp;passing the about input to methodorg.apache.wicket.util.string.Strings#stripJSessionIdwill introduce StringIndexOutOfBoundsExceptionbecause '?' appears before ';'   ,0
1886,WicketTester Cookie handling    While trying to test my SecureForm implementation (https://issues.apache.org/jira/browse/WICKET-1885) with WicketTester I ran into this issue: A cookie set in the response never shows up in the 'next' request  because both have their own lists of cookies that aren't shared.Afaik both should share the same List instance to handle cookies. That way its possible to set a cookie in the response and read it from the request.A simple testcase is attached.   ,0
1888,FormComponents (and subclasses) should be able to provide their own resource bundles    In order to fully support the idea to break down a large application into small reusable components it seems necessary that FormComponents provide their own resource bundles. We have a project that uses a customized subclass of Checkbox that needs to provide customized error messages. The ideal place for those error messages would be a resource bundle living next to the Checkbox subclass but this is not yet supported. Unfortunately the JavaDoc for ComponentStringResourceLoader indicates (see example: input1.properties =&gt; Required) that support for this already exists.A small change to FormComponent$MessageSource.getMessage(String key) could add support for this. Instead of using the formComponent.getParent() as the base for searching the resource string  simply use the formComponent itself.   ,0
1894,AjaxFallbackButton: inconsistent submit order    I just stumbled upon a problem with a Form containing a nested Form and two AjaxFallbackButtons (submit and preview). I need to implement different onSubmit() behavior of the nested Form depending on the clicked button.The order of onSubmit() calls is:without JS: AjaxFallbackButton.onSubmit(AjaxRequestTarget Form) OuterForm.onSubmit() // not used Inner Form.onSubmit()with JS: Inner Form.onSubmit() OuterForm.onSubmit() // not used AjaxFallbackButton.onSubmit(AjaxRequestTarget Form)With JS  it is therefore not possible to determine which button was clicked from inside a form's onSubmit() method. see also http://www.nabble.com/AjaxFallbackButton%3A-inconsistend-submit-order-td20131329.html   ,0
1897,StatelessForm submitted to the wrong page    I made a small application to reproduce the problem. You can download it from http://aditsu.net/wickettest.zip   I'll try to attach it too.Dependencies: jetty 6  wicket 1.4-m3  slf4j  log4jSteps to reproduce:1. Run the test.Start class2. Open http://localhost:8080 in a browser3. Open http://localhost:8080/page2 in a new tab4. Go to the first tab and click submitResult:WicketRuntimeException: unable to find component with path form on stateless page &#91;Page class = test.Page2  id = 0  version = 0&#93;It looks like the 2 pages are created with the same id in 2 different pagemaps  but when I submit the form  it goes to the second pagemap and finds the second page (with no form on it).   ,0
1898,WebRequestCycleProcessor.resolveHomePageTarget for empty path with enforceMounts=true provokes 403 - 'Direct access not allowed for mounted targets'    Scenario: WebApplication.getHomePage() returns a page that is also mounted to a non-empty path by WebApplication.mountBookmarkablePage(). Besides  we have getSecuritySettings().setEnforceMounts(true). Upon a request for the servlet's root URL (i.e.  with requestParameters.getPath()=='')  the methodWebRequestCycleProcessor.resolve will throw a AbortWithWebErrorCodeException(403) with error message 'Direct access not allowed for mounted targets'.This is because WebRequestCycleProcessor.resolveHomePageTarget correctly returns a non-null target  so that the else-branch starting in line 190 of file WebRequestCycleProcessor.java is reached. The comment says 'a target was found  but not by looking up a mount'  which is misleading  because the szenario should desirably work even though property enforceMounts has been set to true.The only (terrible) workaound I have found is to override WebRequestCycleProcessor.resolveHomePageTarget() to return null and establish a home-page-like thing by overriding WebRequestCodingStrategy.urlCodingStrategyForPath() for the empty path.   ,0
1903,RadioChoice disable certain choice bug    I want to disable certain values of a dropdown choice.But the isDisabled is never called only the isEnabled and i don't know the choice in here.   ,0
1904,CheckBox incorrectly converts its model value when a custom Boolean converter is installed - again    Hi I tried the last version of wicket (built from trunk svn) and there is one old bug again:see https://issues.apache.org/jira/browse/WICKET-330There was removed the default Boolean converter ... and the bug is again active.Thx for fixing H.   ,0
1915,wicket:message sometimes broken    The behavior described here: http://cwiki.apache.org/WICKET/wickets-xhtml-tags.html (use wicket:message as attribute) sometimes doesn't work  depending on the hierarchy and the tag where it applies.I've reproduced it using a repeater and applying wicket:message it to a &lt;td&gt; tag.Instead of correctly modifying the attribute  it throws the usual MarkupException 'WicketMessage: Unable to find component with id 'label' in [MarkupContainer'   ,0
1919,MarkupContainer.setEnabled() doesn't enable/disable child components    1. Create any components that is derived from MarkupContainer  for example  create Panel. 2. Put some components to the Panel  for example  TextInput  Label etc.3. Call panel.setEnabled(false) Result: all controls on panel are still enabled.Notes: after some investigation I found that MarkupContainer doesn't override setEnabled and therefore it cannot enable/disable components stored in the container. Workaround: manually disable all components that are displayed on the panel  for example:public void setEnabledForChildren(boolean enabled) { setEnabledRecursive(this  enabled); } private void setEnabledRecursive(MarkupContainer container  boolean enabled) { Iterator&lt;? extends Component&gt; iterator = container.iterator(); while (iterator.hasNext()) { Component component = iterator.next(); component.setEnabled(enabled); if (component instanceof MarkupContainer) { setEnabledRecursive((MarkupContainer) component  enabled); } } }I think that MarkupContainer must be responsible for disabling/enabling child components.   ,0
1930,FileUpload.writeToTempFile uses field Id as filename - Windows doesn't support some characters    The component FileUpload tries to create a temporary file using the multipart fieldname's id.That id has invalid characters - not supported on Windows environments  for example.   ,0
1941,Add getter and setter for data provider to  AjaxFallbackDefaultDataTable    Adding at least getter (and a setter too) for data provider would allow for a lot better handling of customized data providers. For example if data provider's results are dependant on external values like  say  boolean stating if table should contain only rows with some specific statistic ('show only items which are on sale' or anything like that) I'd rather do ((ShopDataProvider)table.getDataProvider()).setShowOnlyItemsOnSale(true); instead of recreating the object and replacing it on the page by doing something like get('table').replace(new AjaxFallbackDefaultDataTable('table'  columns  new ShopDataProvider(true)));   ,0
1946,Please make RequestLogger.log(RequestData  SessionData) protected    Could we please make the method above protected (rather than private). This makes it very simple to do something like this: @Override protected IRequestLogger newRequestLogger() { return new RequestLogger() { @Override protected void log(RequestData rd  SessionData sd) { // do my custom logging HERE } }; }ALSO - it would be real nice if at the same time you extract that creation of the AppendingStringBuffer to a method  so that the log method now looks like:protected void log(RequestData rd  SessionData sd){ if (log.isInfoEnabled()) { log.info(createStringBuffer(rd  sd  true); }}protected final void createStringBuffer(RequestData rd  SessionData sd  boolean includeRuntimeInfo) { ... all of the stuff that was taken out of log that creates the ASB if (includeRuntimeInfo) { Runtime runtime = Runtime.getRuntime(); long max = runtime.maxMemory() / 1000000; long total = runtime.totalMemory() / 1000000; long used = total - runtime.freeMemory() / 1000000; asb.append(' maxmem='); asb.append(max); asb.append('M total='); asb.append(total); asb.append('M used='); asb.append(used); asb.append('M'); } return asb;}   ,0
1947,rc1 generics - LabelTree    LabelTree.getNodeTextModel requires IModel&lt;Object&gt; and returns IModel&lt;Object&gt;. I was overriding it and returning a Model&lt;String&gt;  but I can't do that anymore. Why not just return IModel&lt;?&gt; ?   ,0
1954,Component.isVisibilityAllowed() not consulted before calling onBeforeRender()    I have a component whose parent does this:class Parent extends Panelprivate Component child;onBeforeRender(){child.setVisibilityAllowed(false);super.onBeforeRender();}I would expect child's onBeforeRender() to not be executed but it is  because Component.internalBeforeRender calls isVisible() rather than determineVisibility().Shouldn't the following line in Component.internalBeforeRender(): if ((isVisible() || callOnBeforeRenderIfNotVisible()) &amp;&amp; !getFlag(FLAG_RENDERING) &amp;&amp; !getFlag(FLAG_PREPARED_FOR_RENDER))be this: if ((determineVisibility() || callOnBeforeRenderIfNotVisible()) &amp;&amp; !getFlag(FLAG_RENDERING) &amp;&amp; !getFlag(FLAG_PREPARED_FOR_RENDER))   ,0
1960,AutoCompleteTextField - gives a type mismatch error on IE - version wicket-1.4-rc1    wicket-autocomplete.jsfunction function showAutoComplete()line 291 container.style.zIndex=(!isNaN(Number(index))?Number(index)+1:index);looks like IE doesn't like big i in zIndex  IE seem to be be happy with zindex not sure if that's the correct way to resolve the issue.   ,0
1962,setters on FeedbackPanel do not return self  which prevents chaining    The setters on FeedbackPanel do not return 'this'.This makes chaining impossible  i.e. add(new FeedbackPanel('id').setFilter(filter).setRenderBodyOnly(true));I think it would be more consistent with the rest of wicket  and useful  if the setters are changed to support chaining.   ,0
1985,AbstractTree breaks on multiple tree model events in the same request    When multiple events are fired by the treemodel  e.g. an expandNode and selectNode  unreachable treeitems end up times in the dirtyitems list.Their children will be added to the treeitemcontainer in ontargetrespond  leading to the situation where it has children that are not rendered.(in development  an 'unrendered component' exception is thrown)   ,0
1988,DatePicker is not thread-safe    DatePicker uses 2 SimpleDateFormats as static final fields. That causes random failures under load because SimpleDateFormat is not thread-safe. From its javadocs: 'Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently  it must be synchronized externally.'For example:18:34:06 214 (TP-Processor3) ERROR &#91;org.apache.wicket.RequestCycle&#93; - Exception in rendering component: [MarkupContainer &#91;Component id = _header_0&#93;]org.apache.wicket.WicketRuntimeException: Exception in rendering component: [MarkupContainer &#91;Component id = _header_0&#93;] at org.apache.wicket.Component.renderComponent(Component.java:2519) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1411) at org.apache.wicket.Component.render(Component.java:2317) at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:223) at org.apache.wicket.markup.resolver.HtmlHeaderResolver.resolve(HtmlHeaderResolver.java:78) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1324) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1427) at org.apache.wicket.Page.onRender(Page.java:1470) at org.apache.wicket.Component.render(Component.java:2317) at org.apache.wicket.Page.renderPage(Page.java:904) at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:231) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1181) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1252) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1353) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:355) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:200) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at com.huitale.marketplace.security.SessionHijackingFilter.doFilter(SessionHijackingFilter.java:51) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) at org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190) at org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:283) at org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:767) at org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:697) at org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:889) at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:690) at java.lang.Thread.run(Thread.java:619)Caused by: java.lang.ArrayIndexOutOfBoundsException: 14 at sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar.java:436) at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:2081) at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:1996) at java.util.Calendar.setTimeInMillis(Calendar.java:1104) at java.util.Calendar.setTime(Calendar.java:1070) at java.text.SimpleDateFormat.format(SimpleDateFormat.java:859) at java.text.SimpleDateFormat.format(SimpleDateFormat.java:852) at java.text.DateFormat.format(DateFormat.java:316) at org.apache.wicket.extensions.yui.calendar.DatePicker.configure(DatePicker.java:390) at org.apache.wicket.extensions.yui.calendar.DateTimeField$1.configure(DateTimeField.java:128) at org.apache.wicket.extensions.yui.calendar.DatePicker.renderHead(DatePicker.java:224) at org.apache.wicket.Component.renderHead(Component.java:2568) at org.apache.wicket.markup.html.internal.HtmlHeaderContainer$1.component(HtmlHeaderContainer.java:220) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:829) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:844) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:844) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:869) at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.renderHeaderSections(HtmlHeaderContainer.java:211) at org.apache.wicket.markup.html.internal.HtmlHeaderContainer.onComponentTagBody(HtmlHeaderContainer.java:136) at org.apache.wicket.Component.renderComponent(Component.java:2480) ... 35 morehappens because one internal SimpleDateFormat's field changes while the class is formatting a date.   ,0
2011,FormComponent cookie persistent issue    The FormComponent doesnt persistent the cookie correct when there is no context path and the cookie is created on a mounted page. The cookie is created by cannot be retrieved again from the formcomponent. Either the retrieval logic is wrong or the cookie is created wrongly.See this thread for more information:http://www.nabble.com/FormComponent-cookie-persistent-issue-td21197389.html   ,0
2015,Empty File Upload field breaks validation of other fields in WicketTester.    Submitting form with empty FileUpload -field break validations of other fields in WicketTester: TextField mandatority (field.setRequired(true)). TextField input length validation (field.add(StringValidator(lengthBetween(...)))). DropDownChoice validation does not 'see' selection.If File Upload -field is filled  then validations above work.Form submits manually without a problem in web browser.   ,0
2016,FormTester (BaseWicketTester.executeAjaxEvent[component event]) submits also buttons that are hidden (isVisible=false) resulting in exception    FormTester (BaseWicketTester.executeAjaxEvent&#91;component event&#93;) submits also buttons that are hidden (isVisible=false) resulting in exception.I am trying to ajax-click the visible button  but the formTester arranges even the hidden button to be submitted.. the form processing assumes the hidden button is now the submitting button.. and it is hidden  so an exception is thrown:org.apache.wicket.WicketRuntimeException: Submit Button hiddenButton (path=form:hiddenButton) is not visible at org.apache.wicket.markup.html.form.Form$2.component(Form.java:604) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:859) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:874) at org.apache.wicket.markup.html.form.Form.findSubmittingButton(Form.java:588) at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:852) at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:132) at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:166) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299) at org.apache.wicket.util.tester.BaseWicketTester.executeAjaxEvent(BaseWicketTester.java:1170) at org.apache.wicket.util.tester.BaseWicketTester.executeAjaxEvent(BaseWicketTester.java:1080) at com.mycompany.TestHomePage.testAjaxSubmitWhileAnotherButtonIsNotVisible(TestHomePage.java:33) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:164) at junit.framework.TestCase.runBare(TestCase.java:130) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at junit.framework.TestSuite.runTest(TestSuite.java:230) at junit.framework.TestSuite.run(TestSuite.java:225) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)I would assume this is an easy fix to the BaseWicketTester.executeAjaxEvent&#91;component event&#93;) method where it visits the form components...An invasive workaround: Just set your hidden button temporarily visible (from within your wickettest) while executing the ajax event   ,0
2019,Validation messages aren't cleared on success.    When triggering validation messages on a form component  they aren't cleared anymore when afterward we fix our validation problem.The following code demonstrates this issue by making a form with a single text field that is set as required. First  we submit the form without filling in the field. We expect that to cause an error. Which it does. Then  we set a value in the field  and submit again. We expect that to pass validation. It does not  however.Instead  we get this exception:junit.framework.AssertionFailedError: expect no error message  but contains Field 'field' is required. at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.assertTrue(Assert.java:20) at org.apache.wicket.util.tester.WicketTester.assertNoErrorMessage(WicketTester.java:493) at test.spike.net.link.safeonline.TinyTests.wicketTest(TinyTests.java:93)Code:package test.spike;import org.apache.wicket.Page;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.TextField;import org.apache.wicket.protocol.http.WebApplication;import org.apache.wicket.util.tester.FormTester;import org.apache.wicket.util.tester.WicketTester;import org.junit.Test;public class TinyTests { public static class MyApp extends WebApplication { @Override public Class&lt;? extends Page&gt; getHomePage() { return MyPage.class; } } public static class MyPage extends WebPage { public MyPage() { add(new MyForm('form')); } class MyForm extends Form&lt;String&gt; { private static final long serialVersionUID = 1L; public MyForm(String id) { super(id); TextField&lt;String&gt; f = new TextField&lt;String&gt;('field'); f.setRequired(true); add(f); } } } @Test public void wicketTest() { WicketTester wicket = new WicketTester(new MyApp()); wicket.processRequestCycle(); FormTester form = wicket.newFormTester('form'); form.submit(); wicket.assertErrorMessages(new String[] { 'Field 'field' is required.' }); form = wicket.newFormTester('form'); form.setValue('field'  'foo'); form.submit(); wicket.assertNoErrorMessage(); // &lt;- Exception line. }}&lt;html&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;input wicket:id='field' /&gt; &lt;input type='submit' /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;   ,0
2020,Callback after detaching the page but before the PageMap lock is released    Currently  it is not possible to perform any checks on a page after the request has been detached. In onEndRequest  the PageMap lock has already been cleared  making it unsafe to access the pages involved in the request. Would it be possible to add an extra callback method (ie. onAfterTargetDetach()) to RequestCycle directly after detaching the request targets? We need such a callback to check (in development mode) if all models are detached correctly.   ,0
2024,AutoComplete ShowListOnFocusGain not working    I noticed an issue with the Wicket-Extensions autocomplete behavior when the AutoCompleteSettings ShowListOnFocusGain flag is set to true. Basically  it works as expected in Firefox  but in (at least) Chrome  IE6 and IE7  it displays the list on focus gain  but you cannot use the mouse to select any of the items in the autocomplete list. The debug log showed that as soon as an item in the list was clicked on  the onblur event would fire for the field  which would then immediately fire a focus event  which would trigger reloading the list.This fix for this is trivial: adding one line to the top of obj.onfocus: if (mouseactive==1) return killEvent(event);.I'll post the patch.   ,0
2025,isVisible should not be called after detach    I think isVisible should not be called after detach to prevent model reloads.I found one call to isVisible after detach in method ComponentRequestTarget#respond(RequestCycle). That method initiates a detach and then calls page.endComponentRender. This leads to a call to Page#checkRendering which calls isVisibleInHierarchy() and from there isVisible(). Method checkRendering only does something when the debug setting 'componentUseCheck' is enabled (which according to the javadoc is true by default). Short term workaround: set debug setting 'componentUseCheck' to false.   ,0
2029,AutoComplete - KEY_TAB should work like KEY_ENTER    When selecting an item in a AutoComplete pulldown using the arrow keys and pressing the KEY_ENTER the current item is selected.Doing the same but pressing KEY_TAB instead  the focus shifts to to next input field  but current item is not selected.In a 'normal' pulldown menu KEY_TAB selects current item and shifts to next input.   ,0
2030,BaseWicketTester can't find the pageLink field using reflection when you override the PageLink class.    Currently  BaseWicketTester (line 524) does this: public &lt;C extends Page&gt; Result isPageLink(String path  Class&lt;C&gt; expectedPageClass) { PageLink&lt;?&gt; pageLink = (PageLink&lt;?&gt;)getComponentFromLastRenderedPage(path); try { Field iPageLinkField = pageLink.getClass().getDeclaredField('pageLink'); iPageLinkField.setAccessible(true); IPageLink iPageLink = (IPageLink)iPageLinkField.get(pageLink); return isEqual(expectedPageClass  iPageLink.getPageIdentity()); }The problem manifests when you want to customize a page link's onClick by overriding it like this:new PageLink&lt;AuthPage&gt;('pageLink'  AuthPage.class) { private static final long serialVersionUID = 1L; @Override public void onClick() { Foo.bar(); super.onClick(); }});As a result; the BaseWicketTester tries to look for the pageLink field in the anonymous class instead of the privately declared pageLink field in the PageLink class.BaseWicketTester should either go down the tree:for(Class type = pageLink.getClass(); type != Object.class; type = type.getSuperclass())Or a getter should be made for the pageLink field. (This is what Java wants you to do).   ,0
2045,FileUploadField.onDetach() causes IllegalStateException()    This was detected when using the example/sample Upload demo locally.ERROR - RequestCycle - there was an error cleaning up target org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget@20665159&#91;Page class = org.apache.wicket.examples.upload.UploadPage  id = 0  version = 0&#93;&gt;simpleUpload-&gt;interface org.apache.wicket.markup.html.form.IFormSubmitListener.IFormSubmitListener (request paramaters: &#91;RequestParameters componentPath=0:simpleUpload pageMapName=null versionNumber=0 interfaceName=IFormSubmitListener componentId=null behaviorId=null urlDepth=-1 parameters={} onlyProcessIfPathActive=false&#93;).java.lang.IllegalStateException: Attempt to set model object on null model of component: simpleUpload:fileInput at org.apache.wicket.Component.setDefaultModelObject(Component.java:2962) at org.apache.wicket.markup.html.form.FormComponent.setModelObject(FormComponent.java:1652) at org.apache.wicket.markup.html.form.upload.FileUploadField.onDetach(FileUploadField.java:175)Looking at the source indicates that unless onDetach() is over-ridden the default will always generate this exception. Here is the source for the FileUpLoadField.onDetach(). The line that creates the exception is noted by the '&lt;&lt;&lt;HERE' in the snippet below.FileUpLoadField.onDetach() snippet: /** Clean up at the end of the request. This means closing all inputstreams which might have been opened from the fileUpload.  @see org.apache.wicket.Component#onDetach() */ @Override protected void onDetach() Unknown macro: { if (fileUpload != null &amp;&amp; forceCloseStreamsOnDetach()) { fileUpload.closeStreams(); fileUpload = null; setModelObject(null); &lt;&lt;&lt;HERE } super.onDetach(); } Drilling further down  the setModelObject() calls FormComponent.setModelObject()  which in turns calls Component.setDefaultModelObject(). Inside setDefaultModelObject()  a check is done to see if the model object is null  if it is  it throws an exception: public final Component setDefaultModelObject(final Object object) { final IModel&lt;Object&gt; model = (IModel&lt;Object&gt;)getDefaultModel(); // Check whether anything can be set at all if (model == null) { throw new IllegalStateException( 'Attempt to set model object on null model of component: ' + getPageRelativePath()); } ...}   ,0
2048,HtmlProblemFinder documentation bug    In the javadoc of HtmlProblemFinder there is an example how to add additional IMarkupFIlters using Application.getAdditionalMarkupHandler()  this method is no longer available in Wicket 1.3  the documentation should be modified to show a valid example. The only way I can find by setting a new MarkupParserFactory which adds the filter.   ,0
2049,beforeRender not called for behaviour added to ComponentTag    When adding a IMarkupFilter and adding a behaviour to the ComponentTag  the beforeRender method is never called  only onComponentTag will be called  but by then it is too late to modify the component.Usecase: I would like to make components hidden if the markup contains wicket:hidden='hidden'. For this i need to modify the components visiblitiy depending on if the markup contains that attribute.The attached quickstart will never reach the System.out.println('beforeRender: should hide component'); in HiddenComponentMarkupFilter   ,0
2050,KittenCaptchaPanel generates a Ajax callback image url which potentially breaks when used in a Portlet    KittenCaptchaPanel generates the Ajax callback image url in its onclick event handler using: javascript.append('Wicket.$('' + image.getMarkupId() + '').src = ''); javascript.append(image.urlFor(IResourceListener.INTERFACE)); javascript.append('&amp;rand=' + Math.random()); javascript.append(''');Appending the rand parameter using '&amp;rand=' assumes the image url already contains (at least) one other parameter.Within a default (plain website) environment this most likely is true  however in a Portlet this really depends on how the portal encodes the generated image url in the resulting PortletURL.Jetspeed-2 for instance (can) encode this as path element  in which case appending '&amp;rand=' leads to an incorrect and invalid url.For further information  please see WICKET-649 in which I described how I fixed similar cases in several other locations within Wicket.I'll fix this issue likewise in a transparent way replacing the above with the following: javascript.append('Wicket.$('' + image.getMarkupId() + '').src = ''); CharSequence url = image.urlFor(IResourceListener.INTERFACE); javascript.append(url); javascript.append((url.toString().indexOf('?') &gt; -1 ? '&amp;' : '?') + 'rand=' + Math.random()); javascript.append(''');   ,0
2057,AjaxPreprocessingCallDecorator calls the delegate decorator before itself (same behavior as AjaxPostprocessingCallDecorator)    AjaxPreprocessingCallDecorator calls the delegate decorator before itself (same behavior as AjaxPostprocessingCallDecorator)  when it should call itself before the delegate.   ,0
2063,Wizard buttons (previous / finish) aren't enabled when they should be    When using the Wizard component in 1.4-SNAPSHOT (sometime after 1.4-RC1)  the previous and finish buttons don't enable when they should. I have found that this is because isEnabledInHierarchy is called multiple times  with the first time being during the POST process  before the wizard step is advanced to the next step. Since the step has not advanced when isEnabled is calculated  you get the following behavior:1 - click 'next' from first step to second - the 'previous' button should be enabled  but it's not2 - the 'finish' button never is enabled  even on the last step   ,0
2067,SmartLinkLabel does not handle ~ in urls    The SmartLinkLabel doesn't care with tilde (~) character  so if i have a link like this: http://localhost/~something than only the http://localhost/ will be a link  and the rest of it won't.The source of the problem is very likely in DefaultLinkParser.java: /** URL pattern */ private static final String urlPattern = '(&#91;a-zA-Z&#93;:////w//.//-//:///)//w//.://-/?&amp;=%*';It just needs to add ~ char to the regexp.   ,0
2069,KittenCaptcha filter declared twice in wicket-examples web.xml       ,0
2074,Should the QuickStart archetype generated HomePage.html inlude the Wicket namespace in the html tag?    For full history see http://www.nabble.com/What-is-the-best-way-to-handle-%22Undefined-attribute-name-%28wicket%3Aid%29%22--warnings-from-Eclipse-Ganymede--to21788889.html#a21818462Timo It's a very simple change to the archetype: just replace the html open tagwith html xmlns:wicket='http://wicket.apache.org/dtds.data/wicket-xhtml1.3-strict.dtd'in /archetype-resources/src/main/java/HomePage.htmlThe question is  is there any reason why we wouldn't want to do this? I've raised the Jira issue anyway.Regards - Cemal&lt;a href='http://www.jWeekend.co.uk'&gt;jWeekend&lt;/a&gt;   ,0
2077,SerializationChecker issue    When the static initialization of the SerializationChecker class fails (one of the methods is not available) it throws a runtime exception which marks the SerializationChecker class as unavailable in the JVM. Using the SerializationChecker class after that to check for SerializationChecker .isAvailable is pointless because it throws the ClassNotFound exception.   ,0
2079,Component Use Check always fails for visible components inside an invisible border body       ,0
2088,ApacheLicenceHeaderTests fail after projects' metadata created by Eclipse    Wicket and all it's accompanying projects when being worked on in Eclipse tend to fail several ApacheLicenceHeaderTest as it is an IDE that creates .settings directory containing several xml projects' metadata files. There are 6 solutions:1. don't use eclipse2. skip tests entirely (-Dmaven.test.skip=true passed on the CLI when invoking maven)3. skip running the tests (-DskipTests)4. compile &amp; run but ignore tests failures (-Dmaven.test.failure.ignore=true)5. Modify the ApacheLicenceHeaderTests so that the xml files in the .settings directories are ignoredIMHO  having considered all pros and cons  only 5. is a an option. As there already is an Eclipse originating .xml file that gets ignored I hope that you don't mind going this way. The patch to follow shortly.   ,0
2096,MultiFileUploadField.js can't find file input when serving pages as XHTML    When Wicket-based application serves web pages as XHTML (with the 'Content-type:application/xhtml+xml' header)  upload procedure using MultiFileUploadField.js won't work as it can't find file input even though it's properly added.This happens because @line 65 of MultiFileUploadField.js input tag name is expected to be 'input' (capitalized)  which in XHTML is actually 'input' (lowercase).   ,0
2101,PageLink is inherently non extendable    Due to the fact that there is no accessor provided for the private final IPageLink pageLink  there's no way of writing subclasses that would be aware of the pages they are linking to. My particular case is closely related to the annotation based authorization and an enhancement proposal http://issues.apache.org/jira/browse/WICKET-2089. Now  provided that this enhancement (that otherwise needs more look into) won't make it into wicket/wicket-auth-roles (though I am more than convinced that it should)  and I would have to put the proposed IAuthorisationStrategy implementation outside core wicket  I would also have to write (copy&amp;paste) my own PageLink that exposes its pageLink member in order to retrieve the page class it is referring to and substitute all occurernces of org.apache.wicket.markup.html.link.PageLink with it in my projects  so that my IAuthorisationStrategy implementation can retrieve the page class the the link is pointing to. Please note  that BokmarkablePageLink  which also is constructed with Page class does expose page class identity via public final Class&lt;? extends Page&gt; getPageClass().I suggest that for the sake of keeping the API clean and coherent the method with the same signature as in BookmarkablePageLink should be added to the PageLink. public Class&lt;? extends Page&gt; getPageClass() { return pageLink.getPageIdentity(); }Another question arises - why BookmarkablePageLink is not a subclass of PageLink and why class resolution for those classes differs so much. Wouldn't it be easier to keep the class reference in the BookmarkablePageClass rather than its textual representation and skip all this mumbo-jumbo class resolution. But this is quite another story and OT for this issue.   ,0
2107,Misplaced IllegalStateExceptions when accessing stateful URL with different session    partly copied from the mailing list (http://www.nabble.com/exception-handling-for-session-dependent-URLs-to22037821.html):I recently came across a link to one of my projects where a user linked to a session dependent URL such as /?wicket:interface=:0::IBehaviorListener:2:3when clicking on that URL  a PageExpiredException gets thrown and a redirect to the SessionExpiredPage takes place. So far so good - that's the way it should be.However this works only for the first request (as long as the user doesn't have a session). If the user has a session and clicks on that link different exceptions might get thrown. with the URL mentioned above I've seen either a IllegalStateException (when it couldn't find a IBehaviorListener with the corresponding ID) or a ClassCastException (when it tried to cast a HeaderContributor to an IBehaviorListener in BehaviorRequestTarget). Apart from the ClassCastException  which definitely shouldn't occur  I don't think that IllegalStateExceptions should be thrown in (all of) those cases  as clicking on a session dependent link with a wrong session isn't a far fetched scenario.   ,0
2114,WicketTester fails to execute AjaxBehavior (onclick) due to old requestCycle (this bug is caused by bugfix WICKET-254)    WicketTester fails to execute AjaxBehavior (onclick) due to old requestCycle. This bug results from bugfix WICKET-254 (http://issues.apache.org/jira/browse/WICKET-254)See attached QuickstartKnown workaround:// Add following line before your tester.executeAjaxEvent:tester.setupRequestAndResponse(true);@seehttp://issues.apache.org/jira/browse/WICKET-254   ,0
2115,Make Component. 'protected List getBehaviors(Class' public    actually making getbehaviors(class) public will also break codebecause any override already in place will then attempt to reduce thevisibility of the method.add a jira issue  most likely for 1.5 considering 1.4 is already in RC2.-igorOn Thu  Feb 19  2009 at 1:24 PM  Martin Funk &lt;mafulafunk@googlemail.com&gt; wrote:Hi why is Components public final List&lt;IBehavior&gt; getBehaviors()publicand why is protected List&lt;IBehavior&gt; getBehaviors(Class&lt;? extends IBehavior&gt;type)protected?For example for a Behavior I'd like it to be able to tell if an Behavior ofits type is already bound to that component.In its bind() method I'd like to do something like: if (component.getBehaviors(SomeBehavior.class).size() &gt; 1) { throw new Error('Ther may only be one'); }But I have to do something like: for (IBehavior behavior : component.getBehaviors()) { if (behavior instanceof SomeBehavior) { throw new Error('There may only be one'); } }So my whish would be to have em both public. I wouldn't mind seeing em bothfinal  but that might break existing code.mf   ,0
2117,Polish translations for wicket-extensions properties       ,0
2127,Javascript function Wicket.replaceAll is unbearably slow    I use AbstractAjaxTimerBehavior to update many different components on my pages periodically.After a while  the browser occupies 50% or more of the system resources.I used the javascript profiler in firebug and found that Wicket.replaceAll is responsible for 60+ percent of javascript processing time.The problem is that sequential string processing is used instead of much faster regular expressions   ,0
2128,StringValidator error messages erroneously mention input instead of label    Using a StringValidator.MaximumLengthValidator (or any flavor of the StringValidator class)  the reported errors are currently under the form:StringValidator.minimum='${input}' is shorter than the minimum of ${minimum} characters.which creates odd messages where the content of the field is mentionned instead of the field label.Example: 'Joe' is shorter than the minimum of 5 characters.should be The field 'Name' should be at least 5 characters longThis is specially important in password fields  where the StringValidator is not usable because it displays the input in clear text on the web page: 'x4eR4*z' is shorter than the minimum of 5 characters.should be The field 'Password' should be at least 5 characters long   ,0
2134,Conversion Exception Thrown for Submitting A Page with Multiple Forms within A Border    'org.apache.wicket.util.convert.ConversionException: Can't convert null value to a primitive class: int for setting it on' exception thrown when submitting a Page with multiple Forms within a Border. A 'Bordered' Page with a single Form would not have this problem manifests. Also  if the Page by itself (not contained in a Border) is alright too.   ,0
2140,FormComponentPanel should not add a name attribute    FormComponent adds a name attribute in onComponentTag. This behaviour is inherited by FormComponentPanel  but is not valid for the latter. Often a FormComponentPanel is a div or span  for which the name attribute is not allowed.   ,0
2151,WicketSessionFilter doesn't takes into account WebApplication#getSessionAttributePrefix(WebRequest)    WicketSessionFilter#init(FilterConfig)  line 139 constructs the 'sessionKey' without taking into account the return value of WebApplication#getSessionAttributePrefix(WebRequest).Patch:Index: protocol/http/servlet/WicketSessionFilter.java===================================================================&#8212; protocol/http/servlet/WicketSessionFilter.java (revisi�_�__n: 725053)+++ protocol/http/servlet/WicketSessionFilter.java (copia de trabajo)@@ -28 6 +28 7 @@ import javax.servlet.http.HttpSession; import org.apache.wicket.Session;+import org.apache.wicket.protocol.http.WebApplication; import org.slf4j.Logger; import org.slf4j.LoggerFactory;@@ -136 7 +137 8 @@ log.debug('filterName/ application key set to ' + filterName); } sessionKey = 'wicket:' + filterName + ':' + Session.SESSION_ATTRIBUTE_NAME;+ WebApplication application = WebApplication.get(filterName);+ sessionKey = application.getSessionAttributePrefix(null) + Session.SESSION_ATTRIBUTE_NAME; if (log.isDebugEnabled()) {   ,0
2153,TabbedPanel accepts only ITab(s)    TabbedPanel manages a List of ITab(s).This prevents instantiation of TabbedPanel(s) made of any custom ITab implementation.Every reference to List&lt;ITab&gt; should be converted to List&lt;? extends ITab&gt;.Alternatively  TabbedPanel should be declared as:public class TabbedPanel&lt;T extends ITab&gt; extends Panel{}depending on the preferred strategy.   ,0
2160,application_nl.properties is outdated    The application_nl.properties is a bit outdated. I have attached a patch file that contains the diff betweeen application.properties and application_nl.properties @ wicket 1.3.5.   ,0
2161,DropDownChoice NO_SELECTION_VALUE static field is final    Lets say I do this:List&lt;Option&gt; _options = getOptions();someRenderer = new ChoiceRenderer() {...}DropDownChoice _ddc = new DropDownChoice('dropDown'  new Model((Serializable) _option) options  someRenderer);The Option class looks like this:public class Option {private String display_name;private String id;gettersAndSetters...}If I select an Option from the DDC  and that Option has id = -1  the AbstractSingleSelectChoice#getDefaultChoice(final Object selected) will interpret my choice as the protected static final String NO_SELECTION_VALUE = '-1' in AbstractSingleSelectChoice.java.The result will be that the 'Choose one' option is visible in the DDC.Shouldn't the NO_SELECTION_VALUE be customizable?   ,0
2166,Invalid nested form tag name when the form is not visible and setoutputmarkupplaceholdertag(true) has been called    when the an innerform is invisible and you called setoutputmarkupplaceholdertag(true)  onComponentTag not processed and an invalid form tag name results: &lt;form wicket:id=rootform&gt; &lt;form wicket:id=nestedform style='display: none'&gt;&lt;/form&gt;&lt;/form&gt;Component.render(final MarkupStream markupStream) {...if (determineVisibility()) { // render -&gt; replace form with div} else if (markupStream != null){ if (getFlag(FLAG_PLACEHOLDER)) { final ComponentTag tag = markupStream.getTag(); renderPlaceholderTag(tag  getResponse()); ///////////////////////Here form does not replace 'form' with 'div'}markupStream.skipComponent();}   ,0
2173,quickstart archetype adds invalid maven-compiler-plugin configuration    the maven-compiler-plugin configuration created by the quickstart archetype contains an invalid tag: &lt;optimise&gt;this should be &lt;optimize&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;inherited&gt;true&lt;/inherited&gt; &lt;configuration&gt; &lt;source&gt;1.5&lt;/source&gt; &lt;target&gt;1.5&lt;/target&gt; &lt;optimise&gt;true&lt;/optimise&gt; &lt;debug&gt;true&lt;/debug&gt; &lt;/configuration&gt; &lt;/plugin&gt;   ,0
2174,Form#getMaxSize() -> no custom format    Hi I found problem with format of 'maxSize' property in component Form:final Map&lt;String  Object&gt; model = new HashMap&lt;String  Object&gt;();model.put('exception'  e);model.put('maxSize'  getMaxSize());... the main problem is if you want modify 'look and feel' of the Bytes format in error messages.Can you add e.g. new method String formatMaxSize() or something similar? The other solution is modification of toString of bean Bytes to get results look like 300kB (now there is 300K ... this is not good for common users). Or is there other simple way how to do this?Regards H.   ,0
2175,onBeforeRender() set visibility of NavigationToolbar prevents it from showing again    This code in NavigationToolbar: @Override protected void onBeforeRender() { setVisible(table.getPageCount() &gt; 1); super.onBeforeRender(); }makes impossible to show toolbar after it became hidden when using with Ajax (AjaxNavigationToolbar)Possible solution: @Override public boolean isVisible() { return table.getPageCount()&gt;1; }   ,0
2183,Fix API documentation for DataTable    The example in the DataTable javadoc does not even compile. It says:------------- snip ------------ DataTable table = new DataTable(&quot;datatable&quot;  columns  new UserProvider()  10); table.add(new NavigationToolbar(table)); table.add(new HeadersToolbar(table)); add(table);                        snip ------------                        It should rather be:------------- snip ------------ DataTable table = new DataTable(&quot;datatable&quot;  columns  new UserProvider()  10); table.addBottomToolbar(new NavigationToolbar(table)); table.addTopToolbar(new HeadersToolbar(table  null)); add(table);                        snip ------------   ,0
2186,PatternValidator could allow reverse matches    I need to define a pattern which is invalid as form field input. i.e. I have a user feed back from that receives a lot of spam but the names are normally something like 'xtrqkjitvxqoh'. Instead of having a capture I want to set names with 5 successive consonants as invalid.This patch does the trick...Index: src/main/java/org/apache/wicket/validation/validator/PatternValidator.java===================================================================&#8212; src/main/java/org/apache/wicket/validation/validator/PatternValidator.java (revision 749072)+++ src/main/java/org/apache/wicket/validation/validator/PatternValidator.java (working copy)@@ -64 6 +64 9 @@ /** the &lt;code&gt;java.util.regex.Pattern&lt;/code&gt; */ private final Pattern pattern;+ /** whether to exclude matching input **/+ private boolean reverse;+ /** Constructor that accepts a &lt;code&gt;String&lt;/code&gt; regular expression pattern. @@ -111 6 +114 15 @@ this(pattern.pattern()); }+ /**+ * If set to true then input that matches the pattern is considered invalid.+ * + * @param reverse+ */+ public void setReverse(boolean reverse)+ {+ this.reverse = reverse;+ } /** Gets the regexp pattern.@@ -155 7 +167 7 @@ protected void onValidate(IValidatable&lt;String&gt; validatable) { // Check value against pattern if (!pattern.matcher(validatable.getValue()).matches())+ if (pattern.matcher(validatable.getValue()).matches() == reverse) { error(validatable); }   ,0
2187,less dynamic or missing toString( ) methods in Component class    Several toString( ) methods in XXXChange inner classes of Component class are less dynamic or missing  less dynamic like:******************'ComponentModelChange&#91;component: &quot; + getPath() + &quot;&#93;'; as opposed to this.getClass().getSimpleName() + '&#91;component:&quot; + getPath() + &quot;&#93;' Furthermore  toString( ) method is missing altogether in ComponentBorderChange. Attaching simple modification patch for consideration.   ,0
2191,WebApplication is not thread-safe    Instance of class org.apache.wicket.protocol.http.WebApplication is not thread safe being shared among several sessions. Concurrent access to it leads to errors because of the following:1. bufferedResponses field is initialized with a simple HashMap which is not thread safe and can be corrupted when different threads call addBufferedResponse  popBufferedResponse or sessionDestroyed methods concurrently. Here is the stack trace:&#91;27.03.09 20:55:26:669 MSK&#93; 0000009c RequestCycle E org.apache.wicket.RequestCycle logRuntimeException &lt;Null Message&gt; java.util.ConcurrentModificationException at java.util.HashMap$AbstractMapIterator.checkConcurrentMod(Unknown Source) at java.util.HashMap$AbstractMapIterator.makeNext(Unknown Source) at java.util.HashMap$KeyIterator.next(Unknown Source) at java.util.HashMap.analyzeMap(Unknown Source) at java.util.HashMap.rehash(Unknown Source) at java.util.HashMap.rehash(Unknown Source) at java.util.HashMap.putImpl(Unknown Source) at java.util.HashMap.put(Unknown Source) at org.apache.wicket.protocol.http.WebApplication.addBufferedResponse(WebApplication.java:639) at org.apache.wicket.protocol.http.WebRequestCycle.redirectTo(WebRequestCycle.java:201) at org.apache.wicket.request.target.component.PageRequestTarget.respond(PageRequestTarget.java:58) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:104) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1181) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1252) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1353) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:355) at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:145) at javax.servlet.http.HttpServlet.service(HttpServlet.java:738) at javax.servlet.http.HttpServlet.service(HttpServlet.java:831) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1443) at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1384) at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:131)2. Class org.apache.wicket.util.collections.MostRecentlyUsedMap is not thread-safe and can be courrupted when different threads call addBufferedResponse  popBufferedResponse concurrently.   ,1
2202,Form gets submitted using AjaxSubmitBehavior when sub-form has error's    from http://www.nabble.com/Should-a-form-submit-when-sub-form-has-error%27s--tt22803314.htmlI have a main-form where I add a panel that contains another form.This sub-form contains a formvalidator that gives the error.However the main-form is submitted  but the feedbackpanel does show the error message set in the sub-form's validator.I'll attach 2 patches with testcases displaying the behavior in wicket 1.3 vs 1.4(As a side note  I had to rename the org.apache.wicket.markup.html.form.validation.TestHomePage to org.apache.wicket.markup.html.form.validation.HomePageTest to get the test to run when building wicket)   ,0
2203,WicketTester clickLink on submitLink fails with conversion error    When clicking with WicketTester a submitlink that is situated outside a Form  clickLink doesn't process the input correctly. It tries to set null on the inputs (which fails for int properties for obvious reasons).I've attached a quickstart that exhibits this behavior.   ,0
2205,typo in ApplicationContextMock.putBean() exception message:  'alredy'    There is a minor typo in ApplicationContextMock.putBean() that is fixed by the attached patch.   ,0
2212,Resource lookup/caching in OSGI environment spams errors for gone resources    I'd put together a simple dynamic menu example running on Modulefusion where the contributed menu items and pages come from another OSGI bundles. It works exactly as expected  eg. submenus appear/disappear automatically without restarts on submenu modules' deploys and undeploys  but after undeploying an already visited page's module  my server logs starts repeating messages like this:352322 &#91;ModificationWatcher Task&#93; ERROR org.apache.wicket.util.resource.UrlResourceStream - getLastModified for bundle://38.0:1/com/ftldev/wicket1/Boo.html failed: No bundle associated with resource: bundle://38.0:1/com/ftldev/wicket1/Boo.htmlI guess this has to do with resource caching. Is it possible to get this behaviour turn into a warning and/or get it stop after the first message? I guess once a resource has gone  it makes no good to keep looking for it forever anyway.. or is it another approach getting around this message? (again  appearently all my app keeps working fine meanwhile..)   ,0
2220,YUI library used by Wicket Extensions - DateTime isn't IE8 compatible    YUI library included with Wicket Extensions - DateTime (and potentially others) is the version 2.3.0 which has compatability issues with Internet Explorer 8. The recommended version of YUIlib which is IE8 compliant is 2.7.0.The specific issue I hit was DateTimeField causing block on loading almost random resources on my page  after a while IE8 reported the following error:------Webpage error detailsUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)Timestamp: Thu  9 Apr 2009 06:53:18 UTCMessage: Unknown runtime errorLine: 12Char: 1986Code: 0URI: &#91;hidden to protect the guilty&#93;.YuiLib/calendar/calendar-min.js------Related discussion: http://www.nabble.com/Layout-Manager-causing-IE-8-to-freeze.-td22381589.html   ,0
2230,Nested directory support for ZipResourceStream    It would be nice to have support for nested directories in ZipResourceStream.java   ,0
2242,java.sql.Timestamp converter bug    SqlTimestampConverter should produce a Date/Time as output  but it only produces a time. SqlTimeConverter prints a simple time as expected.Looking in the code SqlTimestampConverter::convertToString uses: DateFormat format = DateFormat.getTimeInstance(dateFormat  locale);when I think it should say: DateFormat format = DateFormat.getDateTimeInstance(DateFormat.SHORT  DateFormat.SHORT  locale);instead.convertToObject would need a corresponding change to: DateFormat format = DateFormat.getDateTimeInstance(DateFormat.SHORT  DateFormat.SHORT  locale);   ,0
2244,Allow overriding of the Validator default MessageKey    Currently there is no other way to change the default message key of any validator. Provide a protected non final method: getMessageKey() to allow overriding of the message key. For example for MinimumValidator:&#91;CODE&#93; public void validate(IValidatable&lt;Z&gt; validatable) { Z value = validatable.getValue(); if (value.compareTo(minimum) &lt; 0) { ValidationError error = new ValidationError(); error.addMessageKey(getMessageKey()); error.setVariable('minimum'  minimum); validatable.error(error); } } protected String getMessageKey() { return 'MinimumValidator'; }&#91;CODE&#93;   ,0
2245,PageParameters always non-empty    Say I mount MyBookmarkablePage like so:mount(new IndexedHybridUrlCodingStrategy('/my/bookmarkable' MyBookmarkablePage.class));where public MyBookmarkablePage() { (...) } public MyBookmarkablePage(PageParameters params) { (...) }When I call http://localhost:8080/app/my/bookmarkable (just that plainurl  no trailing nothing)  then I never get into the no-argsconstructor  always in the params one. This because the params objectcomes with '0'=''  which I feel is wrong.Consequently  params.containsKey('0') returns true - and here I haveto go and check if the value is not empty.Note I'm using IndexedHybridUrlCodingStrategy.   ,0
2247,IndexedHybridUrlCodingStrategy constructor should accept a redirectOnBookmarkableRequest boolan    HybridUrlCodingStrategy has a constructor which accepts a redirectOnBookmarkableRequest boolanIndexedHybridUrlCodingStrategy (which extends HybridUrlCodingStrategy) doesn't contain the same constructor  i think it should.   ,0
2259,The JavaDoc for IPageLink still holds a reference to PageLink which is deprecated    The JavaDoc for IPageLink still holds a reference to PageLink which is deprecated   ,0
2272,open/close div tags are rendered erroneously    Div tags are rendered erroneously if written as an open/close tag.&lt;div/&gt; is rendered as &lt;div&gt; with the closing tag appended at the end of page in wicket-1.4-rc4  while &lt;div&gt;&lt;/div&gt; is rendered correct. Div as open/close tag works fine in wicket-1.4-rc2 even though it gets rendered as separate open and close tags.   ,0
2276,isComponent in BaseWicketTester contains possible nullpointer exception    When attempting to verify if a component exists  attempting to unit test a panel  the tester.assertComponent() call fails due to a nullpointer.This occurs when isComponent() in BaseWicketTester is called and fails to find a component from the last rendered page. Then the component.getClass() in the following line will trigger the nullpointer exception.A very simple fix would be to add a null check before attempting to check the type of the component to be able to provide a better error message.   ,0
2277,Radio#onComponentTag uses Objects.equal instead of model comparator    Radio#onComponentTag uses Objects.equal instead of modelcomparator from RadioGroup. Because of that  it is impossible to use custom model comparator in RadioGroup asRadioGroup must contain values that pass equality check with values in Radios (otherwise  Radios aren't marked as checked in html).   ,0
2280,Remove IComponentBorder in favor of IBehavior    Yeah i think we can depricate IComponentBorder in 1.4 and point to IBehaviorbefore/afterand then remove it in 1.5 and maybe remote also **public final Component setComponentBorder(final IComponentBorder border)in component or make it*public final Component setComponentBorder(final IBehavior border)to make it more clear to people that a border can be set by using a behavior(else who knows..) Hide quoted text -On Sat  May 16  2009 at 12:21  Juergen Donnerstag &lt;juergen.donnerstag@gmail.com&gt; wrote:&gt; Hi &gt;&gt; question: looking at that code&gt;&gt; // Call implementation to render component&gt; final IComponentBorder border =&gt; getComponentBorder();&gt; if (border != null)&gt; {&gt; border.renderBefore(this);&gt; }&gt; notifyBehaviorsComponentBeforeRender();&gt; onRender(markupStream);&gt; notifyBehaviorsComponentRendered();&gt; if (border != null)&gt; {&gt; border.renderAfter(this);&gt; }&gt;&gt; IComponentBorder could be implemented via a behavior as well. Is there&gt; any reason why IComponentBorder needs this special treatment and why&gt; it is not implemented as a behavior?&gt;&gt; -Juergen&gt;-----------------&gt; Yeah i think we can depricate IComponentBorder in 1.4 and point to IBehavior&gt; before/afteri like the ComponentBorder stuff  because you can set it withoutinfluencing any beahavior or component stuff.. just render some contentbefore and after a component..i use it in debugging environmentmm------ Wait for some and give everybody a chance to comment   ,0
2301,When injecting more than one parm in a method  an ArrayIndexOutOfBoundsException is thrown    When using method injection that takes more than one parameter  an ArrayIndexOutOfBoundsException (-1) is thrown. I've isolated code to line 90 of org.apache.wicket.guice.GuiceProxyTargetLocator. parmTypes&#91;2 - i&#93; should read parmTypes&#91;i - 2&#93;. I will attach a (simple) patch with this.   ,0
2305,[devutils] Can only inspect pages in same pagemap as the inspector    The InspectorPage presents a list of pagemaps and pages contained within them  with links to inspect the contents of each page ID.However  when one of these is clicked it tries to resolve the page ID within the current pagemap of the inspector page itself  which is quite possibly not the case.Here is a patch which passes the pagemap name alongside the page ID and looks it up appropropriately.   ,0
2309,ClassCastException in SqlDateConverter    When converting a date string to a java.sql.Date you'll always get a ClassCastException like this one:java.lang.ClassCastException: java.util.Date cannot be cast to java.sql.Date at org.apache.wicket.util.convert.converters.SqlDateConverter.convertToObject(SqlDateConverter.java:43)Reason is DateFormat.parse() returns a java.util.Date  which is cast to java.sql.Date. One solution would bereturn new Date(((java.util.Date)parse(getDateFormat(locale)  value  locale)).getTime())See https://issues.apache.org/jira/browse/WICKET-735   ,0
2310,FormTester.setValue should throw exception if not FormComponent    Should throw exception if not formComponent: public void setValue(final String formComponentId  final String value) { checkClosed(); Component component = workingForm.get(formComponentId); if (component == null) { throw new IllegalArgumentException( 'Unable to set value. Couldn't find component with name: ' + formComponentId); } if (component instanceof IFormSubmittingComponent) { setFormSubmittingComponentValue((IFormSubmittingComponent)component  value); } else if (component instanceof FormComponent) { setFormComponentValue((FormComponent&lt;?&gt;)component  value); } }   ,0
2313,BaseWicketTester doesn't invoke Application.newAjaxRequestTarget for ajax request target    When the BaseWicketTester creates a new ajax request target  it does not invoke the application but creates one by itself. This makes it impossible to use the tester when application-specific ajax request target subclassing is used.   ,0
2316,Form generates invalid html in appendDefaultButtonField    The javascript added to the button contains several unescaped &amp;  such as 'b!=null&amp;&amp;b.onclick!=null&amp;&amp;typeof(b.onclick)'  these should be replaced with &amp;. This was already mentioned in ticket 2033  but that ticket is about another problem.   ,0
2325,IChoiceRenderer generic type parameters are wrong throughout the AbstractChoice class hierarchy    All the AbstractChoice components currently make use of an IChoiceRenderer&lt;T&gt;. They should more properly make use of an IChoiceRenderer&lt;? super T&gt;. The excessive strictness of the type parameter prevents users from defining a singleton choicerenderer that can be used for a variety of different choice components for different but related classes.Example use-case: Most of my persistent beans implement INamedPersistentObject  providing getName() and getPrimaryKey() methods. This is enough to implement an IChoiceRenderer&lt;INamedPersistentObject&gt;. I wish to declare a singleton instance of this and reuse it for various choice components on various concrete types  but currently can't without messy casts.I have set priority=blocker on this bug because it is an API issue which really needs consideration before 1.4 is released  as depending on how strict an API/ABI compatibility policy is used  it might be considered unfixable once 1.4 is released GA.   ,0
2328,WicketTester does not accurately simulate scenario where entire page is added to AjaxRequestTarget    If the entire page is added to an AjaxRequestTarget  Wicket treats this as a special case: the normal ajax flow is aborted and the browser is asked to refetch the page in a normal  non-ajax request.For example  if this code is used:public void onClick(AjaxRequestTarget tgt){ tgt.addComponent(getPage());}This causes the browser to reload the page (you can see the location bar in the browser changing).The problem is that WicketTester does not simulate this scenario correctly. If you use WicketTester to test the onClick() listener in the example above  the page is not re-rendered. You can verify this by instrumenting the onBeforeRender method for the page: it is never called.So to summarize:When the framework is run normally  AjaxRequestTarget.addComponent(Page) causes Wicket to start a completely new non-ajax request-response. However when the framework is run using WicketTester  a new request-response is not executed.   ,0
2334,DebugBar throws an java.lang.ExceptionInInitializerError when Tomcat is restarted    I have just added the DebugBar to our base page  and since then when Tomcat is restarted and session would be reloaded by this it throws this exception:1 ERROR org.apache.catalina.session.ManagerBase - Exception loading sessions from persistent storagejava.lang.ExceptionInInitializerError at sun.misc.Unsafe.ensureClassInitialized(Native Method) at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:25) at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:122) at java.lang.reflect.Field.acquireFieldAccessor(Field.java:918) at java.lang.reflect.Field.getFieldAccessor(Field.java:899) at java.lang.reflect.Field.getLong(Field.java:528) at java.io.ObjectStreamClass.getDeclaredSUID(ObjectStreamClass.java:1614) at java.io.ObjectStreamClass.access$700(ObjectStreamClass.java:52) at java.io.ObjectStreamClass$2.run(ObjectStreamClass.java:425) at java.security.AccessController.doPrivileged(Native Method) at java.io.ObjectStreamClass.&lt;init&gt;(ObjectStreamClass.java:413) at java.io.ObjectStreamClass.lookup(ObjectStreamClass.java:310) at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:547) at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1583) at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496) at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1583) at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1496) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1732) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1667) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:480) at org.apache.wicket.Component.readObject(Component.java:4469) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1667) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at java.util.concurrent.CopyOnWriteArrayList.readObject(CopyOnWriteArrayList.java:845) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1871) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1667) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1323) at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1947) at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:480) at org.apache.wicket.Page.readPageObject(Page.java:1349) at org.apache.wicket.Component.readObject(Component.java:4465) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at org.apache.wicket.protocol.http.SecondLevelCacheSessionStore$SecondLevelCachePageMap.readObject(SecondLevelCacheSessionStore.java:412) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974) at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1849) at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1753) at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1329) at java.io.ObjectInputStream.readObject(ObjectInputStream.java:351) at org.apache.catalina.session.StandardSession.readObject(StandardSession.java:1407) at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:931) at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:394) at org.apache.catalina.session.StandardManager.load(StandardManager.java:321) at org.apache.catalina.session.StandardManager.start(StandardManager.java:637) at org.apache.catalina.core.ContainerBase.setManager(ContainerBase.java:432) at org.apache.catalina.core.StandardContext.start(StandardContext.java:4160) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardHost.start(StandardHost.java:736) at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1014) at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:443) at org.apache.catalina.core.StandardService.start(StandardService.java:448) at org.apache.catalina.core.StandardServer.start(StandardServer.java:700) at org.apache.catalina.startup.Catalina.start(Catalina.java:552) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:295) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:433)Caused by: org.apache.wicket.WicketRuntimeException: There is no application attached to current thread main at org.apache.wicket.Application.get(Application.java:178) at org.apache.wicket.devutils.debugbar.DebugBar.getContributors(DebugBar.java:146) at org.apache.wicket.devutils.debugbar.DebugBar.registerContributor(DebugBar.java:140) at org.apache.wicket.devutils.debugbar.DebugBar.registerStandardContributors(DebugBar.java:152) at org.apache.wicket.devutils.debugbar.DebugBar.&lt;clinit&gt;(DebugBar.java:65) ... 109 more   ,0
2343,Link: PopupSettings - overriding getPopupSettings has no effect    The popup settings are ONLY considered for the resulting JavaScript code when you use the setter setPopupSettings (which is final).The method getPopupSettings is NOT final but it has no effect - internally Link always uses the private field - not the getter.Something like the following code works fine - but is not really clear / intuitive:public class TestLink extends Link { public TestLink(String id) { super(id); setPopupSettings(getPopupSettings()); } public PopupSettings getPopupSettings() { return new PopupSettings(PopupSettings.RESIZABLE).setWindowName('test'); }}I don't know which is the prefered way of Wicket core developers but I can think of two ways to improve on this: Make getPopupSettings final (less work) Use getPopupSettings() within Link instead of the field   ,0
2362,Update hungarian localization    The hungarian translation has some encoding-problem for a long time and there are missing keys from it (like pagingnavigator). I will attach soon a better  fixed localization file. Please accept it in the next release.   ,0
2364,CLONE -Make LoadableDetachableModel writable    To keep it compatible with current usage:public final void setObject(Object obj) { reload(obj); tempModelObject = obj;}protected void reload(Object obj) { throw new OperationNotSupportedException('Read only model');}Subclasses can now implement their own write logic. This is necessary for for instance stand alone dropdownchoice components that need to store their selection.e.g.MyPage { IModel&lt;SchoolYear&gt; selectedSchoolYear; public MyPage() { selectedSchoolYear = new HibernateModel&lt;SchoolYear&gt;(SchoolYear.current()); new SchoolYearDropDownChoice(this  'schoolyear'  selectedSchoolYear); }}If HibernateModel is not writeable then the selected SchoolYear instance would end up in the session.   ,0
2381,IModel parameters of StringResourceModel not getting detached    StringResourceModel supports IModels in the 'parameters' Object[] thatare properly handled in StringResourceModel#getString  meaning theycould get attached because of StringResourceModel. StringResourceModel should probably check the 'parameters' array for IModels(or even IDetachables?) and detach them from StringResourceModel#onDetach   ,0
2384,OutOfMemoryError occur for memory leak on FeedbackPanel & FeedbackMessages    When I uses component.info() method to display a message  my program stopped by OutOfMemoryError or StackOverflowError. I create a sample application to show this problem. Open attached tar.gz file(including a maven project) and run. check 'submit continuously' checkbox and click 'register' button. The program will display current session size continuously on console. the size will be increased  and finally program will be stopped with OutOfMemoryError or StackOverflowError. But if you changes only one line  this program will not be stopped. --original code--  private SubmitLink insertLink = new SubmitLink('insertLink') {  public void onSubmit() {  info('message');  setResponsePage(new Test(testFormBean));  Session session = Session.get();  long size = session.getSizeInBytes();  LOGGER.info('SESSION SIZE: {}'  size);  }  }; --------------------- --changed---------  private SubmitLink insertLink = new SubmitLink('insertLink') {  public void onSubmit() {  Session.get().info('message'); //CHANGED!!!  setResponsePage(new Test(testFormBean));  Session session = Session.get();  long size = session.getSizeInBytes();  LOGGER.info('SESSION SIZE: {}'  size);  }  }; --------------------  so component's info() method is the reason of this problem. If you commented out 'info()' line  this program never crashed. We found out the reason of this problem in a static inner class 'MessageListView' in FeedbackPanel. MessageListView uses annonimous inner class of Model (named ad 'replacementModel')  and it imports a FeedbackMessage object from enclosing instance. FeedbackPanel holds this annonimous inner class and the annonimous inner class holds a FeedbackMessage. When we use component's info() method  the component is assigned into FeedbackMessage object as a 'reporter' object. so  all of FeedbackMessage objects have a component instance inside of himself as 'reporter' (only one exception: if you use Session.get().info() method instead of component's info() method  'reporter' object become null). All already-displayed FeedbackMessages will be purged at 'detach' time from Session object. But FeedbackPanel holds FeedbackMessages. So when page is serialized  all FeedbackMessages  all 'reporter' components is serialized. This is the reason of this problem. We can solve this problem if we do not hold FeedbackMessage instance in the annnonimous inner class.change the code of FeedbackPanel as bellow (this code is based on FeedbackPanel class of wicket 1.4-rc7  line 70):---- original code -----@Overrideprotected void populateItem(final ListItem&lt;FeedbackMessage&gt; listItem){ final FeedbackMessage message = listItem.getModelObject(); message.markRendered(); final IModel&lt;String&gt; replacementModel = new Model&lt;String&gt;() { private static final long serialVersionUID = 1L; /** Returns feedbackPanel + the message level  eg 'feedbackPanelERROR'. This is used as the class of the li / span elements.  @see org.apache.wicket.model.IModel#getObject() */ @Override public String getObject() { return getCSSClass(message); } }; final Component label = newMessageDisplayComponent('message'  message); final AttributeModifier levelModifier = new AttributeModifier('class'  replacementModel); label.add(levelModifier); listItem.add(levelModifier); listItem.add(label);}------------------------ fixed code ----@Overrideprotected void populateItem(final ListItem&lt;FeedbackMessage&gt; listItem){ //FIXED message must not be 'final'. It must not be used in inner class. //If message could be used in inner class  the instance could be hold by //inner class tacitly and never cleared at detach time and will be serialized. FeedbackMessage message = listItem.getModelObject(); message.markRendered(); final IModel&lt;String&gt; replacementModel = new Model&lt;String&gt;() { private static final long serialVersionUID = 1L; /** Returns feedbackPanel + the message level  eg 'feedbackPanelERROR'. This is used as the class of the li / span elements.  @see org.apache.wicket.model.IModel#getObject() */ @Override public String getObject() Unknown macro: { //FIXED -- retrieve a FeedbackMessage object from ListView&#39;s Model. // never hold it. @SuppressWarnings(&quot;unchecked&quot;) List&lt;FeedbackMessage&gt; list = (List&lt;FeedbackMessage&gt;) MessageListView.this.getDefaultModelObject(); FeedbackMessage feedbackMessage = null; int index = listItem.getIndex(); if(index &lt; list.size()) { feedbackMessage = list.get(index); } if(feedbackMessage == null) return &quot;&quot;; return getCSSClass(feedbackMessage); //UNTIL HERE }  }; final Component label = newMessageDisplayComponent('message'  message); final AttributeModifier levelModifier = new AttributeModifier('class'  replacementModel); label.add(levelModifier); listItem.add(levelModifier); listItem.add(label);}--------------------   ,0
2386,JavaDoc: Some JavDoc examples still refer to WicketServlet    Some JavDoc examples still refer to WicketServlet  instead they should use WicketFilter.Most important candidate might be ./wicket-spring/src/main/java/org/apache/wicket/spring/SpringWebApplicationFactory.javagrep . -R --include '*.java' -e 'WicketServlet'indicates that others might be affected too.   ,0
2391,Tag ''has a mismatched close tag at ''    in the wicket-auth-roles-1.4-rc7.jar!/org/apache/wicket/authentication/panel/SignInPanel_ja.html tag '&lt;BODY&gt;'has a mismatched close tag at '&lt;/SPAN&gt;'   ,0
2392,MarkupComponentBorder fails to close stream (?)    MarkupComponentBorder  in findMarkupStream  creates a MarkupResourceStream but doesn't close it.Shouldn't this stream be closed after the call to Application.get().getMarkupSettings().getMarkupParserFactory().newMarkupParser(markupResourceStream).parse(); ?   ,0
2394,KittenCaptcha example broken    KittenCaptcha example brokenNullpointer thrownERROR - RequestCycle - java.lang.NullPointerException at org.apache.wicket.extensions.captcha.kittens.KittenCaptchaPanel$2.onEvent(KittenCaptchaPanel.java:183) at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:177) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299)Following diff does the trick. But maybe this is platform dependent as I currently can test undre linux environment.Index: src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java===================================================================&#8212; src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java (revision 796623)+++ src/main/java/org/apache/wicket/extensions/captcha/kittens/KittenCaptchaPanel.java (working copy)@@ -170 7 +170 7 @@ // ajax request passing in mouse co-ordinates return generateCallbackScript('showLoadingIndicator(); wicketAjaxGet('' + getCallbackUrl(onlyTargetActivePage) + '&amp;x=' + getEventX(this  event) + '&amp;y=' + getEventY(this  event)');+ '&amp;x=' + getEventX(this  event) + '&amp;y=' + getEventY(this  event)'); } @SuppressWarnings('unchecked')   ,0
2396,DateField.newDateTextField's parameters should be generified    protected DateTextField newDateTextField(String id  PropertyModel&lt;Date&gt; dateFieldModel) { return DateTextField.forShortStyle(id  dateFieldModel); }   ,0
2398,AjaxFormSubmitBehavior cannot be applied to Form    I need to apply the above behavior directly to a Form rather than to one of its children. This is so I can listen to the 'onsubmit' event of the form itself rather than attach it to a button.This patch allows you to do thisIndex: AjaxFormSubmitBehavior.java===================================================================&#8212; AjaxFormSubmitBehavior.java (revision 797714)+++ AjaxFormSubmitBehavior.java (working copy)@@ -86 13 +86 20 @@ { // try to find form in the hierarchy of owning component Component component = getComponent(); __form = component.findParent(Form.class); if (__form == null)+ if (component instanceof Form)+ {+ __form = (Form&lt;?&gt;)component;+ }+ else { throw new IllegalStateException( 'form was not specified in the constructor and cannot ' + 'be found in the hierarchy of the component this behavior ' + 'is attached to');+ __form = component.findParent(Form.class);+ if (__form == null)+ {+ throw new IllegalStateException(+ 'form was not specified in the constructor and cannot '+ + 'be found in the hierarchy of the component this behavior '+ + 'is attached to');+ } } } return __form;   ,0
2404,Quickstart for 1.4 uses 1.3 dtd in HomePage.html (with patch)    The generated HomePage.html contains the following header:&lt;html xmlns:wicket='http://wicket.apache.org/dtds.data/wicket-xhtml1.3-strict.dtd' &gt;That should be:&lt;html xmlns:wicket='http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd' &gt;   ,0
2409,Widen type-constraint on TextTemplate.interpolate(Map variables)    The parametrization of interpolate method of TextTemplate and implementors should imho be opened toMap&lt;String ?&gt; in order to be able to use it with Map&lt;String String&gt; or any other value-type.The current parametrization makes it quite clumsy to use.   ,0
2421,DefaultCssAutocompleteTextField should be renamed    DefaultCssAutocompleteTextField should be renamed to DefaultCssAutoCompleteTextField to match the naming of its superclass AutoCompleteTextField.   ,0
2422,DefaultDataTable hides NavigationToolbar once and forever    DefaultDataTable does not show NavigationToolbar if initial data does not require more than one page.DefaultDataTable hides and does not show NavigationToolbar again if data one time does not require more than one page .   ,0
2423,Not all 'domready' events are called when two wicket-event.js files are added to the page    When more than one wicket portlets run in a portal a page could get more than one wicket-event.js entry and more than one Wicket.Event.add(window  'domready'  function() {...});. In this case not all of these 'domready' functions are executed. It happens because Wicket.Event object is created every time browser reaches wicket-event.js entry declaration which in turn causes Wicket.Event.fireDomReadyHandlers function to execute not all functions (this function is called only once when the global variable 'window.loaded' is set to false).Attached patch fixes the problem by ensuring that Wicket.Event object is created only once.   ,0
2424,OnChangeAjaxBehavior + DatePicker do not work together    DatePicker fails to notify component update when OnChangeAjaxBehavior is used on the target input.It works well with AjaxFormComponentUpdatingBehavior.The root cause seems to be in the Wicket.ChangeHandler added by the OnChangeAjaxBehavior  which hides user handler while the DatePicker calls onchange handler directly (wicket-date.js:186):if (field.onchange != null &amp;&amp; typeof(field.onchange) != 'undefined') field.onchange(); Possible fix could be dispatching onchange Event instead of direct handler invocation. Yet I don't know what is purpose of Wicket.ChangeHandler here...   ,0
2426,'Couldn't resolve model type of Model' for PasswordTextField    When using PasswordTextField with CompoundPropertyModel mapped with the Map&lt;String  String&gt; I get the following warning:Couldn't resolve model type of Model:classname=&#91;org.apache.wicket.model.CompoundPropertyModel$AttachedCompoundPropertyModel&#93;:nestedModel=[Model:classname=&#91;org.apache.wicket.model.CompoundPropertyModel&#93;:nestedModel=&#91;org.apache.wicket.util.collections.MiniMap@115126e&#93;] for [MarkupContainer &#91;Component id = password&#93;]  please set the type yourself.This message is fixed if to set password field type manually: new PasswordTextField('').setType(String.class)I propose PasswordTextField to use String.class type by default   ,0
2433,Ajax support for multipart forms broken in a nested form    Ajax support for multipart forms broken in case of using a nested multipart form. The file does not get uploaded  uploadField.getFileUpload() returns null.   ,0
2434,RequestCycle urlFor ignores existing parameters when appending provided params    Link with listener and non empty parameters  built in the following fashion: getRequestCycle().urlFor(this  ILinkListener.INTERFACE  parameters) isn't formed correctly.at RequestCycle 947:AppendingStringBuffer buff = new AppendingStringBuffer(url);WebRequestEncoder encoder = new WebRequestEncoder(buff);This WebRequestEncoder doesn't check  if the parameters are already present in the url provided.In my case  the url from CharSequence url = encodeUrlFor(target); is already similar to: ?wicket:interface=:2:admin:container:tabbedPanel:panel:apartments:0:apartmentAddressEditLink:1:ILinkListener::What WebRequestEncoder does when appending parameters provided explicitly - it simply appends '?' mark and then the parameters list.So resulting url is incorrect and doesn't work:?wicket:interface=:2:admin:container:tabbedPanel:panel:apartments:0:apartmentAddressEditLink:1:ILinkListener::?height=300&amp;width=300(notice leading ?height=300&amp;width=300).   ,0
2439,Improve MixedParamUrlCodingStrategy  introduce Hybrid    The MixedParamUrlCodingStrategy can be improved.The current form has the following shortcomings: it just fails when something is added to the URL  solution: add the option to ignore the added parts (in fact I made this the default) when something is added to the URL  the message is not very clear  solution: rewrite message and add more information it does not accept non-String parameter values  solution: use String.valueOf(paramValue)In addition the patch adds a Hybrid variant.   ,0
2444,Internal Spring beans should be ignored    When looking up Spring beans by type (to inject into @SpringBean fields)  the injector should ignore internal beans  like the ones generated by the &lt;aop:scoped-proxy/&gt; element at the configuration. In this case  the generated name always starts with 'scopedTarget.'.Other cases can be identified by the method 'BeanFactoryUtils.isFactoryDereference(name)'.These beans are created by the container to be used internally  so  shouldn't be considered for injection. The problem is  they usually have a mirror bean (which is the really injected by the container)  so  when Wicket's injector tries to find it  it doesn't find unique beans of the type  forcing us to declare the bean name explicitly.   ,0
2447,AjaxEditableLabel: newPanel - use Component instead of WebComponent for easier subclassing    With the current implementation  subclasses are artifically limited to simple WebComponents.   ,0
2453,Form.findForm(Component c) bug. When form is part of Border and form component like TextField is inside another Border   component cannot resolve its form.    I have Border class which renders Form and some other elements for feedback messages. Class included in attachments. Into this border i am putting form component which is Panel and in that Panel is another Border. Borders form has body container added.When i submit form i get error 'Could not find Form parent for ...'It's because Form.findForm method search for Form.class just in nearest component Border and not in all Borders upper in hierarchy.   ,0
2454,IE8: be more verbose if ajax refresh fails    sometimes we write wrong html code  for example &lt;link rel='xxx'&gt;  instead of &lt;link rel='xxx'/&gt;if parts of the page are refreshed via Ajax on IE  the following code is called: wicket-ajax.js if (window.ActiveXObject) { xmldoc = new ActiveXObject('Microsoft.XMLDOM'); xmldoc.loadXML(text); } else {if loadXML fails there is no direct feedback  you only get a cryptic error message:Wicket.Ajax.Call.failure: Error while parsing response: Object required.if would be great if you write some logs in case of load error:if(!xmldoc.loadXML(text)) { this.failure('error while parsing text: '+text);}   ,0
2466,javadoc the CryptedUrlWebRequestCodingStrategy needs to be update/corrected to reflect the usage of session-id for encryption and hence URLs which were bookmarkable before will NOT remain bookmarkable.    The javadoc for CryptedUrlWebRequestCodingStrategy needs to be updated/corrected to reflect the usage of sessionId for encryption  which also entails that the urls which were bookmarkable before will NOT be remain bookmarkable any more.The javadoc currently state 'Because the algorithm is reversible  URLs which were bookmarkable before will remain bookmarkable. ' which is not true anymore.   ,0
2469,Allow using a different FileItemFactory by extracting a method in MultipartServletWebRequest class    Hi there:In MultipartServletWebRequest constructor we have:...(line 93) DiskFileItemFactory factory = new DiskFileItemFactory();...which inhibits anyone from reusing MultipartServletWebRequest with a different factory. The only solution is generate a new class that is a copy of this one  with that line changed.The suggestion is to extract this code into a protected method  so we could just extend this class when there's a need to use a different factory (as in GAE applications). A diff file is added.Thanks in advance Esteban   ,0
2477,AjaxEditableChoiceLabel does not detach choices model    The component org.apache.wicket.extensions.ajax.markup.html.AjaxEditableChoiceLabel never detaches its choices list model  thus keeping this model attached indefinitely. It should detach when the component's own detach method is called  like eg. this:@Overridepublic void detachModels() { choices.detach(); super.detachModels();}   ,0
2505,Button.onSubmit javadoc is misleading    The javadoc in org.apache.wicket.markup.html.form.Button.onSubmit() is misleading. It says 'Override this method to provide special submit handling in a multi-button form. It is called whenever the user clicks this particular button.' In reality  the method doesn't get called if the form's validation fails. Not sure if there are other cases as well when the method doesn't get called.   ,0
2506,Regression: 'Could not find child with id:  in the wicket:enclosure' for non-component tag    Attached testcase passes with wicket-1.4.1 but fails with 1.4.2 saying:org.apache.wicket.WicketRuntimeException: Could not find child with id: radio in the wicket:enclosure at org.apache.wicket.markup.html.internal.Enclosure.checkChildComponent(Enclosure.java:210) at org.apache.wicket.markup.html.internal.Enclosure.ensureAllChildrenPresent(Enclosure.java:249) at org.apache.wicket.markup.html.internal.Enclosure.onComponentTagBody(Enclosure.java:169) at org.apache.wicket.Component.renderComponent(Component.java:2626) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1512) at org.apache.wicket.Component.render(Component.java:2457) at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:229) at org.apache.wicket.markup.resolver.EnclosureResolver.resolve(EnclosureResolver.java:61) at org.apache.wicket.markup.resolver.ComponentResolvers.resolve(ComponentResolvers.java:81) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1418) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1577) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1501) at org.apache.wicket.Component.renderComponent(Component.java:2626) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1512) at org.apache.wicket.Component.render(Component.java:2457) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1414) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1528) at org.apache.wicket.Page.onRender(Page.java:1545) at org.apache.wicket.Component.render(Component.java:2457) at org.apache.wicket.Page.renderPage(Page.java:914) at org.apache.wicket.request.target.component.BookmarkablePageRequestTarget.respond(BookmarkablePageRequestTarget.java:262) at org.apache.wicket.request.AbstractRequestCycleProcessor.respond(AbstractRequestCycleProcessor.java:105) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1258) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1329) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:594) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:478) at org.apache.wicket.protocol.http.MockWebApplication.processRequestCycle(MockWebApplication.java:390) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:300) at org.apache.wicket.EnclosurePageTest.testRender(EnclosurePageTest.java:23) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at junit.framework.TestCase.runTest(TestCase.java:154) at junit.framework.TestCase.runBare(TestCase.java:127) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:118) at junit.framework.TestSuite.runTest(TestSuite.java:208) at junit.framework.TestSuite.run(TestSuite.java:203) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.junit.JUnitTestSet.execute(JUnitTestSet.java:213) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140) at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127) at org.apache.maven.surefire.Surefire.run(Surefire.java:177) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345) at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)   ,0
2508,NullPointerException in BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:96)    When had the following exception occurring in a production system  while running :java.lang.NullPointerException at org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:96) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1241) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1320) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1419) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:456) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:289) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at org.codesmell.jpsak.servlet.EntityManagerFilter.doFilter(EntityManagerFilter.java:40) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at com.softculture.services.errornotification.wicket.ENFilter.doFilter(ENFilter.java:45) at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87) at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187) at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:266) at com.caucho.server.hmux.HmuxRequest.handleRequest(HmuxRequest.java:452) at com.caucho.server.port.TcpConnection.handleConnection(TcpConnection.java:563) at com.caucho.server.port.TcpConnection$KeepaliveTask.run(TcpConnection.java:1177) at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:759) at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:681) at java.lang.Thread.run(Thread.java:619)At least checking for null when doing 'if (behaviors.size() &gt; idAsInt)' in BehaviorRequestTarget would be good  maybe more is to be done .   ,0
2511,Upgrade to SLF4J version 1.5.8    Please consider upgrading to SLF4J version 1.5.8 which should--+ be 100% compatible with SLF4J version 1.4.2 that you are currently using (in wicket 1.4.2). Compared to SLF4J version 1.4.2  the latest version  among many small improvements  supports serialization which should be helpful when a logger field is used within a wicket model.--+ I am being conservative when I say 'should'  'is' would have been more accurate.   ,0
2520,Use of Object instead of generic T in StringAutoCompleteRenderer    The method getTextValue is defined in org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteRenderer as: protected abstract String getTextValue(T object);...but overridden in StringAutoCompleteRenderer as: // @see AbstractAutoCompleteTextRenderer#getTextValue(Object) protected String getTextValue(Object object) { return object.toString(); }The Javadoc implies that the intention is to override the superclass' method. I think the parameter type should be changed from Object to T.I recommend that when using something like T  to name the parameter 'value' rather than 'object'. 'object' is misleading  as  by convention  it implies that its data type is Object.   ,0
2522,Easy fix suggestion: In BaseWicketTester 'IFormSubmitting' component should be the submitting component  not just a 'Button'    Line 'if (!((formComponent instanceof Button) &amp;&amp; (component instanceof Button)) ||'should be changed intoLine 'if (!((formComponent instanceof IFormSubmittingComponent) &amp;&amp; (component instanceof IFormSubmittingComponent)) ||'See attached quickstart.   ,0
2530,Class not found when using OSGI class loader    I am presently using Guice and OSGi. Our OSGi platform is used as a plugin platform for our web application. We load the OSGi framework and load it into Guice as a service provider. The plugins can be used to return panel or other wicket components that are then used in the pages.When one of the plugins components have a Guice injection  there is a class not found problem that is seen when trying to use injected stuff : org.apache.wicket.guice.GuiceProxyTargetLocator.locateProxyTarget(GuiceProxyTargetLocator.java:79)This class not found is because the Guice injector is trying to access the class directly by making a Class.forName. Since using an OSGi framework  the classloader is not capable of returning the class correctly.To solve this issue  the wicket-guice integration should use the wicket Classes.resolveClass static method that is using a class resolver that can be changed and check for class in other class loader.   ,0
2533,Behavior for accepted locales should fit the HTTP Specification    I try to filter the locales assignable to session on newSession(request  response) in application. The testcase is simple:If application supports locale accepted by user client (http-header 'accepted-language') then i assign it to session  otherwisei use the application default.But the behavior differs to production system. MockHttpRequest.getLocales returns only one locale. But the implementationused in production system (org.apache.catalina.connector.RequestFacade) provides all locales contained in header.So my testcase is working in production but not in test.As an extension to this it COULD be a simplification if application could support query to application supported languages.Normally this is a decision which is made at design time. So if you develop the application you know the supported languages.So it would be great if there would be a place where i can query these easily (extension to settings?).We had two discussions on that in mailing-list:http://www.nabble.com/Howto-accept-other-then-first-locale-in-HTTP-header-%22Accept-Language%22--to25922534.htmlhttp://www.nabble.com/Wickettester-change-locale-of-request-to25907133.htmlSpecification is herehttp://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4   ,0
2535,Improve consistency of ParseException error messages    Append the line and column number to all ParseException   ,0
2548,MetaDataKey does not meet hashCode() contract    The class MetaDataKey overrides equals() method but uses Object.hashCode(). So FindBugs warns on any use of this class in our Wicket application.   ,0
2554,WebRequestCodingStrategy assumes that a shared resource URL should always be relative to the Wicket handler    We use an absolute URL for the shared resources and as long as the page is directly under the Servlet context we have no problems  but for pages that have additional paths  then it is converted into a bad relative URL. For Example:/cjs/app/test.page - This page's shared resource URLs are not modified  so http://localhost:8080/crtv/css/cjs-3.3.1B.css is correct/cjs/app/orders/contentbuilder.page - This page's shared resource URLs are all modified causing them to be ../http://localhost:8080/crtv/css/cjs-3.3.1B.css  which is bad; and of course with JavaScript it causes us a lot of problemsI propose a simple fix in method: public final CharSequence encode(final RequestCycle requestCycle  final IRequestTarget requestTarget)Change the following line from:if (!sharedResourceURL &amp;&amp; portletRequest)To:if (url.toString().startsWith('http://') || url.toString().startsWith('https://') || (!sharedResourceURL &amp;&amp; portletRequest))Thanks!   ,0
2568,Unnecessary method calls in IDataProvider    Referring to the post on the mailinglist (http://old.nabble.com/Unnecessary-method-calls-in-IDataProvider--ts26266771.html)  here's a quick summary of the problem:If the size() method of an IDataProvider returns zero  the iterator(int int) method should not be called. Calling this method with value zero as second parameter (== count) always results in returning an empty iterator. Therefore a lot of unnecessary method calls (and thus a lot of unnecessary database hits) could be saved if an empty iterator would be used by the DataView whenever size() returns an int &lt;= 0.Please find a project attached with a junit test that illustrates the problem. I tested it with all major releases from 1.4.3. down to 1.3.0. with the same result.   ,0
2569,Inheritance layout excludes XML header from output    When using inheritance layout  if the superclass (Layout class) has an ?xml header at the top  it's excluded from the rendering of subclasses  if they have an associated html file. If the subclass has no .html file associated with it  the ?xml header is preserved in the rendering output.To reproduce: Create a SuperPage class extending WebPage. At the top of SuperPage.html  put '&lt;?xml version='1.0' encoding='utf-8'?&gt;' . Create two subclasses of SuperPage  one with an HTML file and one without. View the sub pages. Notice when the one with an HTML file is rendered  the xml header is excluded.Expected: The ?xml header should always be preserved in the rendered output as it's vital to the layout.   ,0
2571,o.a.wicket.ng.** Resource related classes don't take 'variation' into account    The Resource and ResourceReference related classes in o.a.wicket.ng package don't take into account the 'variation'. Several weeks ago Juergen splitted 'style' and 'variation' in 1.5-SNAPSHOT. It seems Matej have finished the new classes before that split.I'm attaching a patch which includes 'variation' into account.   ,0
2575,RepeatingView's Javadoc to include newChildId() and add()    A minor improvement of the Javadoc to  include newChildId() call  since most people will be using that rather than manual id input add(view) call so that its clear to novice that the components needs to be added typo: missing spaceSee the attached patch.   ,0
2580,Javadoc of Component#setOutputMarkupPlaceholderTag is wrong    The javadoc of Component#setOutputMarkupPlaceholderTag uses the term 'componentid' where it should use 'markupid'.Please update the javadoc from: The tag is of form: &lt;componenttag style='display:none;' id='componentid'/&gt;.to The tag is of form: &lt;componenttag style='display:none;' id='markupid'/&gt;.   ,0
2588,ExternalLink to take IModel instead of IModel for label    I just noticed that this constructor  public ExternalLink(final String id  final IModel&lt;String&gt; href  final IModel&lt;String&gt;* label) takes IModel&lt;String&gt; for label. This is somewhat limiting since the model could hold a number or a date for example. Actually passing a raw IModel with any object inside works just fine. It would be more appropriate if this constructor takes IModel&lt;?&gt; for the label as done in Label constructor. Unfortunately ExternalLink offers a public method getLabel() that returns the label as IModel&lt;String&gt;. So it seems changing it would break compatibility.   ,0
2591,Allow subclasses of AuthenticatedWebSession to set 'signedIn' field    My app implements 'remember me' service by setting cookie in authenticate method of custom session that subclasses AuthenticatedWebSession.In order to automatically login user if cookie present  i need to set 'signedIn' field to true when session is created  however it isn't possible since 'signedIn' is private and no way to set it is available.   ,0
2595,Ajax multipart fails for inner forms added via ajax    When using a file upload in a nested form (e.g. as required when using modal windows)  the file upload will always return null. This bug seems related to WICKET-2433 which was supposed to be fixed in wicket 1.4.2  but in wicket 1.4.3 this effect was observed by several people (see mailing list).   ,0
2598,Some components still escape non-ASCII symbols by default    With fix for WICKET-1054 Wicket (almost) stopped escaping non-ASCII symbols by default  it calls Strings.escapeMarkup(String) or Strings.escapeMarkup(String  false  false).However  there are still some places that also call Strings.escapeMarkup with different args.I used 'Strings.escapeMarkup&#40;.*  false  true&#41;' regex to find them:AbstractChoice.escapeOptionHtml CheckBoxMultipleChoice.onComponentTagBody (the reason i started to dig into this issue)RadioChoice.onComponentTagBodyThey should either call String.escapeMarkup(String) or even use Component.getDefaultModelObjectAsString   ,0
2609,EnumChoiceRenderer misbehaves with anonymous enum classes    Please find attached testcase reproducing the problem.Proper fix is to doreturn object.getDeclaringClass().getSimpleName() + '.' + object.name()instead ofreturn object.getClass().getSimpleName() + '.' + object.name()in EnumChoiceRenderer.resourceKey   ,0
2620,DataTable generates two    The tables generated by DataTable component in the current version of Wicket (1.4.3) do not contain &lt;thead&gt; in the output HTML.It was working correctly in wicket 1.4.0 but there were some changes to fix other issues - see WICKET-2436To replicate - launch the wicket-examples-1.4.3.war and look at the DataTable example:http://localhost:8081/wicket-examples-1.4.3/repeater/?wicket:bookmarkablePage=:org.apache.wicket.examples.repeater.DataTablePageIf you check the HTML source you will see it does not contain thead tag:{html}&lt;table class='dataview' cellspacing='0'&gt; &lt;tr class='navigation'&gt;{html}When you look at http://www.wicket-library.com/wicket-examples/repeater/?wicket:bookmarkablePage=:org.apache.wicket.examples.repeater.DataTablePageit shows:{html}&lt;table class='dataview' cellspacing='0'&gt;&lt;thead&gt; &lt;tr class='navigation'&gt;{html}Must be a previous version?   ,0
2621,Ajax buttons inside ModalWindows don't submit properly    I have a ModalWindow that contains an IndicatingAjaxButton. When I click the button  I get a big Java error complaining that the form submit wasn't multipart.Digging into the javascript in wicket-ajax.js  I found this from line 1102 in the method handleMultipartmultipart=multipart||form.enctype=='multipart/form-data';if (multipart==false) { // nothing to handle return false; }When this executed  multipart was false  and enctype was '' and therefore the submit aborted. This may be the cause.Here's the Java stacktracejava.lang.IllegalStateException: ServletRequest does not contain multipart content at org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest.&lt;init&gt;(MultipartServletWebRequest.java:113) at org.apache.wicket.protocol.http.servlet.MultipartServletWebRequest.&lt;init&gt;(MultipartServletWebRequest.java:83) at org.apache.wicket.extensions.ajax.markup.html.form.upload.MultipartRequest.&lt;init&gt;(MultipartRequest.java:41) at org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadWebRequest.newMultipartWebRequest(UploadWebRequest.java:66) at org.apache.wicket.markup.html.form.Form.handleMultiPart(Form.java:1651) at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:850) at org.apache.wicket.ajax.form.AjaxFormSubmitBehavior.onEvent(AjaxFormSubmitBehavior.java:135) at org.apache.wicket.ajax.AjaxEventBehavior.respond(AjaxEventBehavior.java:177) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:299) at org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:119) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1250) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1329) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:479) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:312) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)   ,0
2630,MockHttpServletResponse doesn't delete cookies    From Cookie.setMaxAge javadoc: @param expiry an integer specifying the maximum age of the cookie in seconds; if negative  means the cookie is not stored; if zero  deletes the cookieSo  if maxAge is zero  MockHttpServletResponse should remove cookie.   ,0
2635,Sucessfull login on SignInPanel causes HomePage to become stateful    Quickstart attached.Steps to reproduce1. Unpack attached quickstart2. mvn jetty:run3. Open http://localhost:8080/login4. Enter any credentialsExpected: StatelessHomePage opensActual: exception happends  StatelessHomePage isn't statelessProblem analysis:1. SignInForm manually creates page.2. AbstractListenerInterfaceRequestTarget.onProcessEvents calls requestCycle.setRedirect(true)3. RequestCycle.urlFor(final Component component  final RequestListenerInterface listener  ValueMap params) calls page.setPageStateless(Boolean.FALSE)4. StatelessChecker isn't happy.Fix is simple - SignInForm.onSignInSucceeded should be:if (!continueToOriginalDestination()){ setResponsePage(getApplication().getHomePage());}   ,1
2638,Form.isMultipart() doesn't check FormComponent.isMultipart() on nested components    Form.isMultipart() doesn't check FormComponent.isMultipart() on nested components. This breaks submitting of stateless forms with multipart FormComponent but no explicit Form.setMultipart(true) call.   ,0
2639,More pages missing xml prolog    InternalErrorPage.htmlExceptionErrorPage.html   ,0
2645,Resources aren't gziped by default    Wicket gzips its resources by default. The only exception is wicket-datetime module.I think it is worth to use the same policy within wicket subprojects  especially taking into account that usage of DatePicker adds more than 100 Kb of uncompressed java scripts.Here are an headers of request and response:Request headers:Host 127.0.0.1:8080User-Agent Mozilla/5.0 (X11; U; Linux x86_64; ru; rv:1.9.1.6) Gecko/20091215 Ubuntu/9.10 (karmic) Firefox/3.5.6Accept /Accept-Language ru en-us;q=0.7 en;q=0.3Accept-Encoding gzip deflateAccept-Charset windows-1251 utf-8;q=0.7 *;q=0.7Keep-Alive 300Connection keep-aliveReferer http://127.0.0.1:8080/?t=1Response headers:Server Apache-Coyote/1.1Last-Modified Mon  21 Dec 2009 07:26:23 GMTExpires Mon  28 Dec 2009 13:42:11 GMTCache-Control max-age=3600Content-Type text/javascript;charset=UTF-8Content-Length 68179Date Mon  28 Dec 2009 12:42:10 GMT   ,0
2650,Consistently create body for short tags.    When the Wicket HTML contains a tag such as &lt;a wicket:id='foo' /&gt; and the component bound to that tag uses replaceComponentTagBody to write a string to the tag's body  currently nothing happens.Either a text node should be added to the component tag and the body written to it;Or a warning/exception should occur if for some reason it is preferred to not let this method succeed when the component tag has no body yet.I don't see the use of the latter  so I recommend the former be implemented.For now it's just confusing and dangerous. If I give my HTML to a web designed and he changes a few empty HTML tags to short tags  I'll never be warned  but my output WILL be broken.   ,0
2653,Make GoAndClearFilter.defaultClearModel and GoFilter.defaultGoModel internationalizable    Please  change GoAndClearFilter.defaultClearModel and GoFilter.defaultGoModel to ResourceModel with default string (same way as it is done in NoRecordsToolbar.DEFAULT_MESSAGE_MODEL).That'll allow translating button labels without the need to pass custom models.   ,0
2655,WicketTester javadocs are referring in many places to a component's path but it's not documented anywhere    In many places in the WicketTester javadoc there are references to a path parameter explained in the following way: path - path to ComponentBut it's not explained anywhere what a path is  what does it contains  which separator is used there  what's the root of it and so on.Practically  it's impossible understanding how to use WicketTester from its javadoc because of that.   ,0
2656,Ability to add CSS style to table body in DataTable    Being able to dynamically adjust css styles in the table body &lt;tbody&gt; of the DataTable is essential for a lot of advanced functionality e.g. adding a scrollbar to the contents of a table (which also eliminates the need for pagination and enhances usability for certain use cases). Sure one can override DataTable.html and hardcode a css style in the body element  but that is not enough. It must be dynamic and that requires the DataTable.java code to be changed. In the event that a client just provides a complete implementation of DataTable.java   the Toolbar classes can no longer be used since they reference the DataTable concrete class instead of an interface. I provide a patch to fix this issue and augment the DataTable with an extra method: void setTableBodyCss(String cssStyle);   ,0
2657,Multipart forms fails on Chrome during Ajax submit    AjaxSubmitLink doesn't work with multipart forms on Google Chrome. AjaxSubmitLink calls wicketSubmitFormById in its onClick handler. When submiting multipart form this function creates hidden iframe and attaches handleMultipartComplete function to the onload event.handleMultipartComplete calls loadedCallback with envelope parameter. On Google Chrome envelope is undefined so loadedCallback craches ('Could not find root &lt;ajax-response&gt; element' is reported).I dig more and I found that handleMultipartComplete is called before server side callback completes  thats why 'envelope' is undefined....   ,0
2660,Wickettester executeAllTimerBehaviors executes stopped behaviors too    When attempting to test a page with two ajax timer behaviours the first behaviour is triggered correctly. Then that behaviour is stopped (using the stop function) and a second behaviour is started. If executeAllTimerBehaviors is called again both behaviours are triggered even though one is stopped.It would be good if the code in BaseWicketTester.executeAllTimerBehaviors(MarkupContainer container) could validate if the behaviour is stopped or not before trying to execute it.   ,0
2671,Enclosure causes Nullpointer exception    There is a bug in DirectChildTagIterator which causes a Nullpointer exception with the following stack trace:Caused by: java.lang.NullPointerException at org.apache.wicket.markup.html.internal.DirectChildTagIterator.findNext(DirectChildTagIterator.java:115) at org.apache.wicket.markup.html.internal.DirectChildTagIterator.next(DirectChildTagIterator.java:85) at org.apache.wicket.markup.html.internal.Enclosure.ensureAllChildrenPresent(Enclosure.java:236) at org.apache.wicket.markup.html.internal.Enclosure.onComponentTagBody(Enclosure.java:169) at org.apache.wicket.Component.renderComponent(Component.java:2619) ... 106 moreThe problem is in this code fragment:while (markupStream.hasMore()){ final MarkupElement cursor = markupStream.next(); if (cursor.closes(parent))markupStream.hasMore() checks if the currentindex is available to retrieve  while markupStream.next() doesn't retrieve the currentindex  but tries to retrieve the currentindex + 1 element. The right function to get the current element is markupStream.get(). To fix this  it should be like this:while (markupStream.hasMore()) { final MarkupElement cursor = markupStream.get(); markupStream.next(); if (cursor.closes(parent))The best fix is imo to make next() in MarkupStream a void method  which will prevent this in the future.   ,0
2675,CryptedUrlWebRequestCodingStrategy fails in form with method='get'    A form fails to submit when it has method='get' set in a wicket application which is using CryptedUrlWebRequestCodingStrategy.This happens because the form is constructed by wicket like this:&lt;form wicket:id='form2' method='get' id='form26' action=''&gt; &lt;div style='display:none'&gt; &lt;input type='hidden' name='form26_hf_0' id='form26_hf_0' /&gt; &lt;input type='hidden' name='x' value='vcH4-yiA7z1xdg19IZiML85IPOzB2CaoynoU6UPAVS9n2G2S2bamuw' /&gt; &lt;/div&gt; &lt;input type='text' wicket:id='text2' value='' name='text2'/&gt; &lt;input type='submit'/&gt;&lt;/form&gt;which can produce a query string in firefox like this:http://localhost:8080/crypt-bug/?form26_hf_0=&amp;x=YhsA9niKQasfMz8FBHuRP1lLAZXPdZy8s1XWlmYcu7WwhnsP*VusYw&amp;text2=test'x' is the second parameter in the query string  but CryptedUrlWebRequestCodingStrategy accesses this parameter as '?x=' where in this case it is '&amp;x='I am attaching the example quickstart app and a possible fix.   ,0
2702,update PropertyColumn Javadoc    hi i find the documentation of the gentrified type T of the org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn a bit misleading. I suggest the javadoc should state 'The Model object type' for &lt;T&gt; instead of 'The type of the property'.thanks pete.   ,0
2704,FormComponent.MessageSource.getMessage(String) and getValidatorKeyPrefix()    I tried to use the getValidatorKeyPrefix() feature to have a more suitable translation key for a RequiredTextField and the �_��_� required �_��__ message.But Wicket wasn't able to find my key : the debug log said that it couldn't find my key whereas it is well-formed (getValidatorKeyPrefix() + '.Required').So i debugged the getMessage(String) and I understood the problem. Arround the line 175 (in Wicket 1.4.5) we find :// If not found try a more general form &#91;prefix&#93;.&#91;key&#93;if (Strings.isEmpty(message)){resource = prefix(prefix  key);message = getString(localizer  key  formComponent);}The comment is good  but the code is wrong : the resource variable isn't used in the getString(...) ! (I think it's a kind of bad copy/paste from surrounding code)We should find :message = getString(localizer  resource  formComponent);I did it and it works.   ,0
2719,Extract lazy AbstractListDataProvider out of ListDataProvider.    ListDataProvider is handy for quickly providing a List as source for a DataView; but it forces you to pass a list object during construction and doesn't allow you to provide a new list.That means it becomes hard to update the elements in the DataView when the page is (re)rendered. It might be useful to provide an abstract superclass to ListDataProvider which provides an abstract method for obtaining the list allowing the developer to lazy-load the data he wants to show; making sure to always load up-to-date data when the view is being rendered rather than data he passed in during construction which may have become outdated.   ,0
2720,Panel throws MarkupException without passing MarkupStream    Panel throws a MarkupException without passing the MarkupStream while the MarkupStream is available. This makes debugging some errors harder. Code fragment: /**  @see org.apache.wicket.Component#onComponentTagBody(org.apache.wicket.markup.MarkupStream  org.apache.wicket.markup.ComponentTag) */ @Override protected void onComponentTagBody(final MarkupStream markupStream  final ComponentTag openTag) { // Render the associated markup renderAssociatedMarkup('panel'  'Markup for a panel component has to contain part '&lt;wicket:panel&gt;''); if (wasOpenCloseTag == false) { // Skip any raw markup in the body markupStream.skipRawMarkup(); if (markupStream.get().closes(openTag) == false) { throw new MarkupException('close tag not found for tag: ' + openTag.toString() + '. Component: ' + this.toString()); } } }   ,0
2744,AjaxFormChoiceComponentUpdatingBehavior cannot find the choice    AjaxFormChoiceComponentUpdatingBehavior tries to find the form components (the choices) by iterating the children elements with tagName 'input' and verifying some constraints. One of this constraints have been changed recently and now the children could not be found:Index: src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java===================================================================&#8212; src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java (revision 909983)+++ src/main/java/org/apache/wicket/ajax/form/AjaxFormChoiceComponentUpdatingBehavior.java (working copy)@@ -70 7 +70 7 @@ asb.append(' for (var i = 0 ; i &lt; inputNodes.length ; i ++) {/n'); asb.append(' var inputNode = inputNodes&#91;i&#93;;/n'); asb.append(' if (!inputNode.type) continue;/n'); asb.append(' if (!(inputNode.className.indexOf('wicket-'+markupId)===0)) continue;/n');+ asb.append(' if (!(inputNode.id.indexOf(markupId+'-')===0)) continue;/n'); asb.append(' var inputType = inputNode.type.toLowerCase();/n'); asb.append(' if (inputType == 'checkbox' || inputType == 'radio') {/n'); asb.append(' Wicket.Event.add(inputNode  'click'  callbackScript);/n');   ,0
2747,AjaxPagingNavigator Link factories should return AbstractLink    AjaxPagingNavigator doesn't submit forms. The mailinglists instruct the user to override the Link factory classes in order to return SubmitLinks. However  both SubmitLink and AjaxSubmitLink do not inherit from Link. It is my opinion that AjaxPagingNavigator.new*Link() functions should return AbstractLink.I am currently forced to fork the majority of AjaxPagingNavigator inorder to create a 'Sub'class.   ,0
2753,Javascript in Form.registerJavascriptNamespaces() fails in Firefox 3.5.8    The undefined comparisons fail for me with a message stating that the Wicket variable is undefined (which the code is actually meant to check)   ,0
2761,InjectorHolder.getInjector().inject(this) doesn't work with wicket-guice    Using Wicket-Guice integration for dependency injection does not provide the helper mechanism 'InjectorHolder.getInjector().inject(this)' for classes which do not extend o.a.w.Component.   ,0
2767,DatePicker Calendar: wrong year format when 4 digits are used (yyyy)  e.g. 2010 --> 0010    I found that there is still a bug in Wicket 1.4.7 in case that the datePattern is 'dd/MM/yyyy'.For example  if you use the DatePicker and select a date such as23/02/2010 from the calendar GUI  the date selected in the DateTextField is '23/02/0010'.This is the example Java code: // define the date text field for the data decorrenza DateTextField dataDecorrenzaDaTextField = new DateTextField('dataDecorrenzaDa'  new PropertyModel(this.accordo  'dataDecorrenzaDa')  new PatternDateConverter('dd/MM/yyyy'  true) ); // add the graphical calendar date picker dataDecorrenzaDaTextField.add(new DatePicker() { @Override protected boolean enableMonthYearSelection() { // enable month/year selection return true; } // end enableMonthYearSelection } // end DatePicker );I found that the bug is still in the 'wicket-date.js'  line 137.The wrong code is:if(datePattern.match(/yy+/)) year = Wicket.DateTime.padDateFragment(year % 100);This line also makes the module 100 on the year  when the year pattern is 'yyyy'.The fixed code is:if(datePattern.match(/yyyy+/)) { year = year;} else if(datePattern.match(/yy+/)) year = Wicket.DateTime.padDateFragment(year % 100);   ,0
2776,Enhancing RadioChoice input items with individual title and css class attributes    Wicket is a great framework based on an excellent idea. It is a joy to work with. There are several existing components and most of them are very usable and customizable as much as possible  however there are still a few places for improvement. One of those is org.apache.wicket.markup.html.form.RadioChoice  where it is currently not possible to set HTML title and class attributes for the individual input tags. This would be a great feature for some client-side javascript frameworks  and in my case the JQuery star-rating plugin is even hard to use without these. For this purpose I have created my own private alternative for this component  but it would be good to have it included in wicket  so that others can benefit too.See below the changes I have performed to enable this feature! Please note that all changes are made so that current behavior is not changed only new optional behavior is added.Changes in method onComponentTagBody(...) ... // Add radio tag String title = getTitle(index  choice); String cssClass = getCssClass(index  choice); buffer.append('&lt;input name=/'').append(getInputName()).append('/' type=/'radio/''); if (title != null) buffer.append(' title=/'').append(title).append('/''); if (cssClass != null) buffer.append(' class=/'').append(cssClass).append('/''); buffer.append((isSelected(choice  index  selected) ? ' checked=/'checked/'' : '')); buffer.append((enabled ? '' : ' disabled=/'disabled/'')); buffer.append(' value=/'').append(id).append('/' id=/'').append(idAttr) .append('/''); ...Added two new methods: /** Returns the title attribute to be output for the input tag with the given index and choice value. By default this returns null  and so the title attribute won't be set  but this can be overridden.  @param index @param choice @return title attribute to be used for the given input tag */ protected String getTitle(int index  T choice) { return null; } /** * Returns the CSS class attribute to be output for the input tag with the given index and * choice value. By default this returns null  and so the class attribute won't be set  but this * can be overridden. *  * @param index * @param choice * @return CSS class attribute to be used for the given input tag */ protected String getCssClass(int index  T choice) { return null; }   ,0
2778,Set Application ThreadLocal in WicketSessionFilter    WicketSessionFilter currently only sets the Session ThreadLocal  but not the Application ThreadLocale.This leads to WicketRuntimeException when trying to get the Application using Application#get or Session#getApplication.It would be handy if the Application ThreadLocal would also be set in WicketSessionFilter.see also:http://old.nabble.com/Application-get-in-WicketSessionFilter-ts27862681.html#a27862681   ,0
2790,Submitting a form with Ajax in WicketTester does not check if form is multiPart    While executing wicketTester.executeAjaxEvent(butooon  'onclick') i get ServletRequest does not contain multipart content. One possible solution is to explicitly call Form.setMultipart(true)  Wicket tries its best to auto-detect multipart forms but there are certain situation where it cannot.executeAjaxEvent method does not check if form is multiPart. To workaround this problem before executeAjaxEvent we can execute: MockHttpServletRequest servletRequest = wicketTester.getServletRequest(); servletRequest.setUseMultiPartContentType(true);But its annoying to set this flag again and again. Could you extend executeAjaxEvent to check if form is multiPart ? Similar checking is already done in FormTester.onSubmit().   ,0
2803,ListMultipleChoice's Constructors Should Accept IModel>    Currently  the constructors accept IModel&lt;Collection&lt;T&gt;&gt; for the 'model' of the ListMultipleChoice. Thus  you can't pass in an IModel&lt;Set&lt;T&gt;&gt;. The constructors should be modified to take IModel&lt;? extends Collection&lt;T&gt;&gt; instead.   ,0
2811,ListMultipleChoice: updateModel method looses the value submitted from the select control    ListMultipleChoice looses the value submitted from client in certain conditions. This is because the collection returned by getConvertedInput() is passed to model.setObject(); and later  when the model is modified  converted input is affected too. (see ListMultipleChoice.java  line 344 in svn revision 929271).Simple page reproducing this bug under wicket 1.4.6 is attached.Key points in the code  required to reproduce the problem:1. The Form component is wrapped by a Border component2. The model used flor ListMultipleChoice initially returns null from the getObject() method. To see the error open the attached page in browser  select something in the list  press Submit.Resulting message in the feedback panel will be: 'submitted values: []'  i.e. the the submit handler sees empty list in the model.Expected: submit handler must see list of the values selected in the list by user.The reason of the error:1. Method Form.internalUpdateFormComponentModels() in Wicket 1.4.6 calls  ListMultipleChoice.updateModel() two times when the form is wrapped by a border: private void internalUpdateFormComponentModels() { FormComponent.visitComponentsPostOrder(this  new FormModelUpdateVisitor(this)); MarkupContainer border = findParent(Border.class); if (border != null) { FormComponent.visitComponentsPostOrder(border  new FormModelUpdateVisitor(this)); } }2. On the first call of the ListMultipleChoice.updateModel the result of getConvertedInput()  is stored in the model (line 344). Now model and getConvertedInput() share the same collection. On the second call  the collection retrieved from model is cleared (line 326)  and  then getConvertedInput() is used again (but now it returns the empty collection) 314 public void updateModel()315 {316 Collection&lt;T&gt; selectedValues = getModelObject();317 if (selectedValues != null)318 {...326 selectedValues.clear();327 selectedValues.addAll(getConvertedInput());...340 }341 else342 {343 selectedValues = getConvertedInput();344 setDefaultModelObject(selectedValues);345 }346 }I would suggest to not share the collection between getConvertedInput() and the model:343 selectedValues = getConvertedInput(); selectedValues = new ArrayList&lt;T&gt;(selectedValues);344 setDefaultModelObject(selectedValues);   ,0
2812,Textarea ignores first line in case of blank line    When the content of a textarea starts with an empty line  this line disappears when it is placed in the html.This is a known problem with the html textarea element.&lt;textarea&gt;test&lt;/textarea&gt; will result in the same as:&lt;textarea&gt;test&lt;/textarea&gt;Meaning that the first newline in the textarea is ignored. In case of opening a page with a textarea with a leading blank line  this line will be removed when the form is submitted again.See for similar issues in the apache jira STR-1366 and BEEHIVE-1005A possible solution is to change the following method in org.apache.wicket.markup.html.form.TextArea in something like: protected final void onComponentTagBody(final MarkupStream markupStream  final ComponentTag openTag) { checkComponentTag(openTag  'textarea'); String value = getValue(); if (value != null &amp;&amp; value.startsWith('/n')) { value = '/n' + value; } else if (value != null &amp;&amp; value.startsWith('/r/n')) { value = '/r/n' + value; } else if (value != null &amp;&amp; value.startsWith('/r')) { value = '/r' + value; } replaceComponentTagBody(markupStream  openTag  value);}   ,0
2817,ChoiceGroup's Constructor Should Accept IModel>    This is very similar to ListMultipleChoice's constructor situation. Changing the constructor signature won't break any existing code  but it will make it easier to use (for times when you have a set-based property).   ,0
2821,More 'IModel<? extends Collection<' Fixes    I searched the code for all occurrences of 'IModel&lt;Collection&lt;' and replaced all that I thought could be replaced with 'IModel&lt;? extends Collection&lt;'.   ,0
2833,FileUpload#writeTo copies the stream / a possible rename would be faster    I used a FileUploadField as described in the wicket-examples (http://www.wicket-library.com/wicket-examples/upload/single) in my webapplication  in order to realise uploading a file and store this on the server. Furthermore I use the method FileUpload#writeTo(File file). This method is not the fastest solution  if you want to store the file  i think. Why don't you try to rename the file on the system first  before you use Streams.copy.There is the interface FileItem. The method FileItem#write(File file) first tries to rename the file. I recognized a great benefit in performance.Thats why i don't use the class FileUpload anymore  and receive such a FileItem from the request instead  like:final FileItem item = ((IMultipartWebRequest) getRequest()).getFile(fileUploadField.getInputName()); item.write(....   ,0
2852,Palette nested in a ListView results in a NPE when an error feedback is logged when submitting form    Reproducing steps:1. Put TestPage.html and TestPage.java into a wicket application  visit test page.2. Hit the save button and NullPointerException will be thrown indicating the 'ids' field of component Palette$Recorder is not initializedIf taken Palette outside of ListView  the code will work fine. TestPage.html:&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;html xmlns='http://www.w3.org/1999/xhtml'&gt; &lt;head&gt; &lt;meta http-equiv='Content-Type' content='text/html; charset=utf-8'/&gt; &lt;/head&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;div wicket:id='palettes'&gt; &lt;div wicket:id='palette'&gt;&lt;/div&gt; &lt;/div&gt; &lt;input type='submit' value='save'&gt;&lt;/input&gt; &lt;/form&gt; &lt;div wicket:id='feedback'&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;TestPage.java:import java.util.ArrayList;import java.util.List;import org.apache.wicket.extensions.markup.html.form.palette.Palette;import org.apache.wicket.feedback.ContainerFeedbackMessageFilter;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.IChoiceRenderer;import org.apache.wicket.markup.html.list.ListItem;import org.apache.wicket.markup.html.list.ListView;import org.apache.wicket.markup.html.panel.FeedbackPanel;import org.apache.wicket.model.AbstractReadOnlyModel;import org.apache.wicket.model.IModel;public class TestPage extends WebPage { @SuppressWarnings({ 'unchecked'  'serial' }) public TestPage() { Form form = new Form('form') { @Override protected void onSubmit() { error('Please select a value.'); } }; add(form); List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add('1'); form.add(new ListView('palettes'  list) { @Override protected void populateItem(ListItem item) { IChoiceRenderer renderer = new IChoiceRenderer() { public Object getDisplayValue(Object object) { return object; } public String getIdValue(Object object  int index) { return (String) object; } }; final List selected = new ArrayList(); IModel model = new IModel() { public Object getObject() { return selected; } public void setObject(Object object) { selected.clear(); selected.addAll((List) object); } public void detach() { } }; IModel choicesModel = new AbstractReadOnlyModel() { @Override public Object getObject() { final List&lt;String&gt; choices = new ArrayList&lt;String&gt;(); choices.add('1'); choices.add('2'); return choices; } }; item.add(new Palette('palette'  model  choicesModel  renderer  10  false)); } }); add(new FeedbackPanel('feedback'  new ContainerFeedbackMessageFilter(this))); }}   ,0
2860,Wrong name for swiss Application.properties    A 'Application_ch.properties' was generated due fixing Issue: WICKET-743 but the correct language-extension for German/Swiss is '_de_CH' and not '_ch' (witch stands for Chamorro).Fix: rename 'Application_ch.properties' to 'Application_de_CH.properties'.   ,0
2861,getConvertedInput() returns null and selectedValues.addAll tries adding it    Came across this bug when upgrading from wicket 1.3 to 1.4.7. It occurred when we were clearing a form. Add a null check toselectedValues.addAll(getConvertedInput());in ListMultipChoice:updateModel() because getConvertedInput() can conceivably be null in normal situations.   ,0
2869,RangeValidator should use getMinimum and getMaximum    Currently  the RangeValidator uses the fields directly  making it impossible to define a dynamic range by overriding getMinimum and getMaximum. Instead of using the fields directly  the validator should call these methods.   ,0
2891,Typo in IllegalStateException when there are multiple beans of the same type    I have a test where there are multiple beans of the same type  I received the following exceptionCaused by: java.lang.IllegalStateException: more then one bean of type &#91;MyClassName&#93; found  you have to specify the name of the bean (@SpringBean(name='foo')) in order to resolve this conflict. Matched beans: MyClassNamer$$EnhancerByMockitoWithCGLIB$$f5bd36c9 MyClassNamePlease note how it states 'then' rather than 'than' since the sentence is about multiple things  'than' is the only appropriate word to use.   ,0
2897,Javadoc for AbortWithHttpStatusException class constructor says 'true' when it should say 'false'    Javadoc for AbortWithHttpStatusException class constructor states: @param statusCodeOptional If true and http status could not be set  an IllegalStateException will be thrownBut the code does: if (!statusCodeOptional) { throw new IllegalStateException( 'This exception can only be thrown from within request processing cycle'); }Obviously  the exception is thrown only if the flag statusCodeOptional is set to false  not true.   ,0
2902,WicketSessionFilter still broken: you can only locate or create sessions in the context of a request cycle    Ever since 1.4.8 (see WICKET-2778 and WICKET-2858) WicketSessionFilter has been broken for me. This basically breaks my wicket application completely as I rely on servlets being able to access my wicket session. For that reason  I think Critical or Blocker is a fair priority for this issue.In 1.4.9 I get the following while reverting to 1.4.7 it works as expected:java.lang.IllegalStateException: you can only locate or create sessions in the context of a request cycle at org.apache.wicket.Session.findOrCreate(Session.java:208) at org.apache.wicket.Session.get(Session.java:252) at com.lyndir.lhunath.snaplog.webapp.SnaplogSession.get(SnaplogSession.java:78) at com.lyndir.lhunath.snaplog.webapp.servlet.ImageServlet.doGet(ImageServlet.java:117) at javax.servlet.http.HttpServlet.service(HttpServlet.java:707) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:216) at com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:141) at com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:93) at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:63) at org.apache.wicket.protocol.http.servlet.WicketSessionFilter.doFilter(WicketSessionFilter.java:150) at com.google.inject.servlet.FilterDefinition.doFilter(FilterDefinition.java:129) at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:59) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:363) at com.google.inject.servlet.FilterDefinition.doFilter(FilterDefinition.java:129) at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:59) at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:122) at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:110) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1139) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:378) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:417) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)   ,0
2918,Use Apache Nexus Maven Repository instead of self hosted maven repository on wicketstuff.org    As of June 15  2010 the wicketstuff.org maven repository was down. Instead of fixing the wicketstuff.org server I proposed that the org.apache.wicket artifacts be switched to deploy through the Apache Nexus Maven repository.See this discussion: http://apache-wicket.1842946.n4.nabble.com/proposal-Use-apache-nexus-repository-for-org-apache-wicket-release-and-snapshot-artifacts-tp2256728p2256728.htmlThis page has the registration details: http://www.apache.org/dev/repository-faq.htmlIt says to create a sub issue on this one: https://issues.apache.org/jira/browse/INFRA-1896I think the issue needs to be created by a org.apache.wicket committerThis migration will allow snapshots to be deployed from the apache hudson build cluster into the apache nexus maven repository.There is some kind of switchover that occurs for artifacts that are located through the people at apache method but since wicket artifacts that have been released are in central I see limited impact at this point.Future releases would deploy into this nexus repository which supports staging.I will attach diff's for the trunk 1.5-SNAPSHOT pom.xml and the 1.4.x branch 1.4-SNAPSHOT pom.xml that will create the two additional snapshot and release profiles that can be used for this purpose.   ,0
2919,inconsistency in property expression when using . for self reference    Let's consider this class :class Container { String string = 'foo'; List&lt;String&gt; strings = Arrays.asList(new String[]{'test'}); }This would work:new PropertyModel&lt;String&gt;(container  '.string').getObject()=&gt; returns 'foo'but this doesn't:new PropertyModel&lt;String&gt;(container  '.strings&#91;0&#93;').getObject()it fails withorg.apache.wicket.WicketRuntimeException: no get method defined for class: class org.demo.PropertyModelTest$Container expression: stringsSimilarly  this doesn't work:new PropertyModel&lt;Container&gt;(container  '.').getObject()exception is :java.lang.StringIndexOutOfBoundsException: String index out of range: 0In the end  should the dot being allowed for self reference ? It's already used as the property separator  so it would be quite misleading.I've attached some proper junit test for these points.   ,0
2932,Modal window titles need to be marked up as such  for accessibility    The modal windows are not accessible to screen readers. The titles of the window should be announced to give the contents of the window some context. This is as simple as changing the 'span' that contains the window title to a 'h3' and ensuring the styles are appropriate to match.   ,0
2933,Form.MULTIPART_HINT is not cleared correctly with nested forms    I have a page that looks like this Page  Form  Wizard (contains another Form)  StepOne - contains a FileUploadField StepTwo - has no FileUploadField      (The outer form is there because I have some controls outside the wizard that needed to submit the wizard too).Because I have been using Ajax ModalDialogs  it has been important to get Form.multipart set correctly (otherwise they don't submit back correctly). So I override Wizard.onActiveStepChanged and checked to see if the new wizard step contained a FileUploadField  and set Form.setMultiPart accordingly. However  this only clears Form.MULTIPART_HARD  Form.MULTIPART_HINT is left untouched.When I step from StepOne to StepTwo  the inner form still has MULTIPART_HINT set as it contained a FileUploadField last render. Then the outer form's onRender fires  which clears MULTIPART_HINT  then the outer form's onComponentTag fires. When it checks isMultiPart()  it evaluates to true as the nested Form still returns true from its MULTIPART_HINT  and therefore tag.put('enctype'  'multipart/form-data'); is executed. After that  the inner form's onRender fires which clears its MULTIPART_HINT.When I try to submit StepTwo  the html has enctype='multipart/form-data'  so it does a multipart submit. But wicket is not expecting a multipart submit so it doesn't find any of the submitted form data  and cannot determine which button is pressed  and loses all the form content.   ,0
2937,AbstractPropertyModel getObjectClass don't consider nested IObjectClassAwareModel targets    Currently if AbstractPropertyModel has an target that implements the IObjectClassAwareModel interface  the known class of that target is not used to infer the modeled property type. Requested improvement: use 'target type'+'property expression' to return the property type of the AbstractPropertyModel   ,0
2944,Application addRenderHeadListener causing error    when i try to use addrenderheaderlistener in application with header contributor using methods other than renderonloadjavascript and renderOnDomReadyJavascript i get the exception as ajaxrequesttarget expects  'Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascriptattaching a quickstart that shows the behavior where ajaxselfupdatingtimer is used. exception as follows :-Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascriptorg.apache.wicket.WicketRuntimeException: Only methods that can be called on IHeaderResponse outside renderHead() are renderOnLoadJavascript and renderOnDomReadyJavascript at org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.checkHeaderRendering(AjaxRequestTarget.java:872) at org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.renderJavascriptReference(AjaxRequestTarget.java:915) at com.mycompany.WicketApplication$1.renderHead(WicketApplication.java:28) at org.apache.wicket.Application.notifyRenderHeadListener(Application.java:1250) at org.apache.wicket.markup.html.internal.HeaderResponse.&lt;init&gt;(HeaderResponse.java:56) at org.apache.wicket.ajax.AjaxRequestTarget$AjaxHeaderResponse.&lt;init&gt;(AjaxRequestTarget.java:951) at org.apache.wicket.ajax.AjaxRequestTarget.getHeaderResponse(AjaxRequestTarget.java:1018) at org.apache.wicket.ajax.AbstractAjaxTimerBehavior.respond(AbstractAjaxTimerBehavior.java:163) at org.apache.wicket.ajax.AbstractDefaultAjaxBehavior.onRequest(AbstractDefaultAjaxBehavior.java:286) at org.apache.wicket.request.target.component.listener.BehaviorRequestTarget.processEvents(BehaviorRequestTarget.java:119) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:92) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1250) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1329) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1428) at org.apache.wicket.RequestCycle.request(RequestCycle.java:545) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:479) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:312) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:388) at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765) at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:418) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230) at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:326) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542) at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)   ,0
2951,Markup for AjaxLazyLoadPanel's is not valid HTML    The markup generated for the waiting image is not valid HTML as it lacks an ALT attribute.   ,0
2952,Exposes Application DebugSettings related functionality for JMX    I think it would be cool if the DebugSettingsMBean exposes every IDebugSettings properties for JMX  I'm sending an patch with the code. outputComponentPath outputMarkupContainerClassName linePreciseReportingOnAddComponentEnabled linePreciseReportingOnNewComponentEnabled developmentUtilitiesEnabled   ,0
2981,Remove HeaderContributor and friends in favor of IHeaderContributor       ,0
2983,Make Component and IBehavior directly implement IHeaderContributor to make things simpler       ,0
2993,ClassCastException when requesting for non-page class    org.apache.wicket.request.mapper.BookmarkableMapper tries to instantiate Page even for classes which are not Page.Requesting http://localhost:8080/wicket/bookmarkable/com.mycompany.Pojo fails with:ERROR - DefaultExceptionMapper - Unexpected error occurredjava.lang.ClassCastException: com.mycompany.Pojo at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:155) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:59) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:43) at org.apache.wicket.Application$2.newPageInstance(Application.java:1425) at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:259) at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:160) at org.apache.wicket.request.handler.render.WebPageRenderer.getPage(WebPageRenderer.java:59) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:131) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:232) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:147) at org.apache.wicket.request.RequestHandlerStack.executeRequestHandler(RequestHandlerStack.java:84) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:217) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:135) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:188) at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1157)  .....   ,0
2995,DateTime bug with a date pattern without separator    HI I am using wicket-datetime-1.3.7.jarWhen i use a datePattern with a separator dd/MM/yyyy  i get 01/01/2010  it's OK.But when i use the datePattern ddMMyyyy  i get 1110 and it's not correctThe bug is in the substituteDate() method of the wicket-date.js file.I have fixed it. I have attached the fixed method and an example of the problemThanks   ,0
3003,Form.delegateSubmit: invoke onSubmit() of nested Forms before onSubmit() of enclosing Form    As has been discussed on the mailing list:http://mail-archives.apache.org/mod_mbox/wicket-dev/201008.mbox/&lt;AANLkTikq2EgstYuoM0OtzNR5PAHfxi=f4djYVoNky-P0@mail.gmail.com&gt;It can be assumed that an enclosing Form in some way or another may depend on the state of an enclosed Form  but that an enclosed Form should never depend on the state of its enclosing Form.Therefore  Form.delegateSubmit should invoke onSubmit() of the nested Forms  depth first  before invoking onSubmit() of the enclosing Form. At the moment  this is the other way around.The attached patch rectifies this situation. Please review and apply if so desired.   ,0
3021,Add timestamp part to resource filenames for better caching    Even though we have getResourceSettings().setAddLastModifiedTimeToResourceReferenceUrl() this still is far from perfect. It will add a query parameter to resource filenames so caches should invalidate when the parameter changes. However if caching is very aggressive altering the query param might not be enough. Then there will be stale resources left in the cache of the browser or some intermediate proxy. Users will complain and you have to tell them to press F5  clear the cache  or whatever So I decided to implement support for adding the timestamp of the resource as part of the filename.When you have a resource link like &lt;link rel='stylesheet' type='text/css' href='wicket/resource/my.great.app.HomePage/css/style.css'/&gt;a timestamp (the last modified timestamp of the file) will be injected into the base name of the file &lt;link rel='stylesheet' type='text/css' href='wicket/resource/my.great.app.HomePage/css/style-ts1282376261000.css'/&gt;the format is &#91;path-component&#93;* / &#91;base-filename&#93; '-ts' &#91;timestamp-in-milliseconds&#93; (.extension)The prefix '-ts' (TS = timestamp) is to avoid naming conflicts with filenames that already got with a numeric part before the extension.Locales  style and variations are taken into consideration (e.g. style.css  style_de.css  style_en.css)When running your test cases the MockApplication which WicketTester provides in the default case has timestamps disabled so you can check you rendered markup against some predictable url.You can control and check timestamp behavior with getResourceSettings().setUseTimestampOnResources()and  getResourceSettings().getUseTimestampOnResources()Default behavior is 'enabled'You are now able to configure your resource caching for a very large lifetime (say 'infinite'  and get the best possible network performance and utilization of proxies.   ,0
3038,Return the possibility to create custom WebRequest/WebResponse per Application    In Wicket 1.4 there is org.apache.wicket.protocol.http.WebApplication.newWebRequest(HttpServletRequest) and org.apache.wicket.protocol.http.WebApplication.newWebResponse(HttpServletResponse). These are removed in current 1.5 code and there is no way to use org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadWebRequest for example.See wicket-examples &gt; upload.   ,0
3039,WicketServlet failes to initialise with NullPointerException in WebXmlFile.getFilterPath()    java.lang.NullPointerException: null at org.apache.wicket.util.file.WebXmlFile.getFilterPath(WebXmlFile.java:148) ~&#91;wicket-util-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.util.file.WebXmlFile.getFilterPath(WebXmlFile.java:77) ~&#91;wicket-util-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.util.file.WebXmlFile.getFilterPath(WebXmlFile.java:60) ~&#91;wicket-util-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.protocol.http.WicketFilter.init(WicketFilter.java:264) ~&#91;wicket-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at org.apache.wicket.protocol.http.WicketServlet.init(WicketServlet.java:254) ~&#91;wicket-1.5-SNAPSHOT.jar:1.5-SNAPSHOT&#93; at javax.servlet.GenericServlet.init(GenericServlet.java:241) ~&#91;servlet-api-2.5.jar:2.5&#93;WebXmlFile.getFilterPath tries to retrieve the url-pattern of filter-mapping/filter-name... but in the case of a servlet  filter-mapping does not exists... it should be serlvet-mapping/servlet-name.   ,0
3053,WicketTester does not preserve the form component values when submitting with AjaxSubmitLink    See this thread:http://apache-wicket.1842946.n4.nabble.com/Url-parameters-removed-onClick-wrong-url-encoding-td2541831.htmlAgain you can take a legup project (with Guice 2.0) and substitute the wicket versions -&gt; the test tester.assertModelValue('text'  'sayHello');will fail: expected:&lt;sayHello&gt; but was:&lt;Hello null&gt;   ,0
3067,The new mappers ignore single query parameter with empty value    Making request like http://host:port/?paramName= will result in empty PageParameters.The problem is in org.apache.wicket.request.mapper.AbstractMapper.extractPageParameters(Request  int  IPageParametersEncoder) because it skips the first parameter if its value is empty.This is made because most of the time this is the PageComponentInfo part of the URL.   ,0
3075,AJAX file upload fails in IE8 due to Wicket.Ajax.handleMultipart() sniffing wicket:body tags as an HTML body element when running Wicket in development mode    To reproduce:1. Run provided quickstart project2. Open in IE8. 3. Upload a file. Expected behaviour: File is uploaded  and some basic information about uploaded file is displayed.Observed behaviour:IllegalStateException is thrown.The IllegalStateException is being thrown because the form is being submitted as a normal form. This is because the JS in handleMultipart that traverses up the DOM looking for the actual form is checking tagnames  and in IE8  the tagName of a &lt;wicket:body&gt; is body  so as soon as it hits a wicket:body  it returns false. I've provided a patch that checks for identity against document.body - an alternative is to check that the form.tagUrn is empty  as it would be for a normal HTML element.   ,0
3083,Broken AbstarctCalendar dependency    org.apache.wicket.extensions.yui.calendar.AbstractCalendarmethod contributeDependenciesadd(HeaderContributor.forJavaScript(YuiLib.class  'yahoo-dom-event/yahoo-dom-event.js'));there is no yahoo-dom-event directory  just yahoodomeventso AbstractCalendar fails with js error onYAHOO.namespace('wicket');   ,0
3097,isTemporary behavior and ajax behavior together crashes with WicketRuntimeException: Couldn't find component behavior.    My scenario:1. Component has 2 behaviors: first is temporary and second is ajax behavior.2. Url for Ajax behavior contains behavior's index (e.g.../page?1-1.IBehaviorListener.1-form-text)2. Temporary behavior is removed in detachBehaviors method.3. Ajax request is invoking ListenerInterfaceRequestHandler and it'slooking for behavior on non-existing indexThis scenario causes error on wicket 1.5-M2.1   ,0
3101,No exceptionpage on exceptions during ajax    start the quickstart and wait to see error occuring in console  ajax just stops in browser (nothing is indicating the error)   ,0
3103,RequestCycle logs something  when its intended for servlet container    I have something where I reference an image directly in html  wicket has no idea what it should do with it so it passes the request to the servlet container.. It works as I wanted  but should it give an error message?html: &lt;img src='/images/icons/arrow_down_end.png'/&gt;Log:ERROR &#91;org.apache.wicket.request.cycle.RequestCycle&#93; - Unable to execute request. No suitable RequestHandler found. URL=images/icons/arrow_down_end.png   ,0
3125,Add IRequestListener interface to allow easier framework extension points    See http://apache-wicket.1842946.n4.nabble.com/Session-attach-tp3004389p3004681.htmlBasically  add an interface for onBeginRequest and onEndRequest that can be plugged into the WebRequestCycle. This allows framework extensions to plugin their listeners rather than extending WRC  and requiring that you then extend them.   ,0
3127,Adding node to a collapsed tree node should not cause it to expand    The fix for WICKET-3112 made a unwanted minor modification to the Tree behavior that was established in WICKET-2886.Adding a child to a tree node that already has children and that is currently collapsed now causes the parent node to expand so that all the children are displayed. Only adding the first child to a node should cause it to expand  in all other cases the state of the parent node should not change.   ,0
3134,Commons logging must die    In wicket 1.4 (and possibly 1.5) we still depend on commons-logging (and version 1.1 at that)  which not only includes strange logging dependencies from the long departed Avalon project  but also other stuff we really don't want to have. (looking at spring-all-2.5.6 as the main culprit here).   ,0
3143,No Exception page are rendered when using ajax    When using ajax no exception page are rendered if an exception occurs.Just start the quickstart here : https://issues.apache.org/jira/browse/WICKET-3142And select something ind the dropdown   ,0
3148,Dropped support for Servlet 2.5 inadvertently    Fixing 3146 in r1031086 resulted in introducing a dependency on javax.servlet.annotation.* thus rendering WicketFilter unusable in pre-3.0 servlet containers.If pruning the large base of 2.5-compatible containers was intentional then I'd also suggest switching to java 6 (Although servlet 3.0 specs does not explicitly indicate java 6 as a requirement  all 3.0 compliant containers that I'm aware of - namely Jetty 8  Websphere 8  tomcat 7  glassfish 3 - require java 6). Not to mention that this should be spoken out loud (https://cwiki.apache.org/WICKET/migration-to-wicket-15.html does not mention anything about container compliance)   ,0
3154,test for undefined in the  same manner throughtout the code.    testing whether a variable is undefined should be done in a similar manner throughout a file.   ,0
3161,Can not create cookies    Hi I'm migrating to wicket 1.5-M3 and I've encountered a problem. I can not create cookies (I presume that I can't delete them either).I've looked through the source code and this is what I found:I add the cookie to the response and I end up with a nice HeaderBufferingWebResponse which contains BufferedWebResponse$AddCookieAction.But then redirectTo(Url  RequestCycle) from WebPageRenderer class is called. Here is the method: private void redirectTo(Url url  RequestCycle requestCycle) { WebResponse response = (WebResponse)requestCycle.getResponse(); String relativeUrl = requestCycle.getUrlRenderer().renderUrl(url); response.reset(); response.sendRedirect(relativeUrl); }response.reset(); - removes all actions from the request.So after this method my request has got only BufferedWebResponse$SendRedirectAction.   ,0
3163,support building wicket offline by resolving DTD references locally    Wicket developers  please give me some comment on this:Some wicket test cases parse XML which refers to an external DTD. An example is org.apache.wicket.protocol.http.WicketFilterTestIt refers to org.apache.wicket.util.file.WebXmlFile will will parse a custom web.xml.The web.xml will make the parser to look up http://java.sun.com/dtd/web-app_2_3.dtdWhen building wicket offline this will cause a network error and the test will fail.I would like to add  org.apache.wicket.util.xml.LocalEntityResolverwhich may contain a set of local entitites to avoid hitting the network.As wicket 1.5 is getting close to final I would like to get some feedback first before putting that into trunk...By adding this like to WebXmlFile network lookup would be avoided. DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = factory.newDocumentBuilder(); builder.setEntityResolver(LocalEntityResolver.getDefault()); // no more network lookups Document document = builder.parse(is);----------------------------------------------------package org.apache.wicket.util.xml;import org.apache.wicket.util.lang.Args;import org.xml.sax.EntityResolver;import org.xml.sax.InputSource;import org.xml.sax.SAXException;import javax.servlet.Filter;import java.io.IOException;import java.io.InputStream;import java.util.HashMap;import java.util.Map;/** entity resolver that tries to locate a document type definition (DTD) using a set of custom entity resolvers * @author pete */public class LocalEntityResolver implements EntityResolver{ private final Map&lt;EntityKey  EntityLocator&gt; entities = new HashMap&lt;EntityKey  EntityLocator&gt;(3); public static LocalEntityResolver getDefault() { LocalEntityResolver resolver = new LocalEntityResolver(); // // look up servlet 2.3 web.xml DTD right from inside servlet-api.jar // resolver.put(new EntityKey('-//Sun Microsystems  Inc.//DTD Web Application 2.3//EN'  'http://java.sun.com/dtd/web-app_2_3.dtd')  new ServletApiEntityLocator('web-app_2_3.dtd')); return resolver; } public void put(EntityKey key  EntityLocator locator) { Args.notNull(key  'key'); Args.notNull(locator  'locator'); entities.put(key  locator); } public InputSource resolveEntity(String id  String url) throws SAXException  IOException { for (Map.Entry&lt;EntityKey  EntityLocator&gt; entry : entities.entrySet()) if (entry.getKey().id.equals(id) || entry.getKey().url.equals(url)) return entry.getValue().locateInputSource(); return null; } public static class EntityKey { private final String id; private final String url; private EntityKey(String id  String url) { Args.notEmpty(id  'id'); Args.notEmpty(url  'url'); this.id = id; this.url = url; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof EntityKey)) return false; EntityKey key = (EntityKey) o; if (!id.equals(key.id)) return false; return url.equals(key.url); } @Override public int hashCode() { int result = id.hashCode(); result = 31 * result + url.hashCode(); return result; } } public static interface EntityLocator { InputSource locateInputSource() throws SAXException  IOException; } public static class ServletApiEntityLocator implements EntityLocator { private final String name; private ServletApiEntityLocator(String name) { this.name = name; } public InputSource locateInputSource() { InputStream stream = Filter.class.getResourceAsStream('resources/' + name); if (stream == null) return null; return new InputSource(stream); } }}   ,0
3164,executeAjaxEvent in WicketTester works although Component is not enabled    When Component is disabled the executeAjaxEvent still works. Because it's not checking if Component is enabled.But the event attribute is not rendered to the component if it's disabled.   ,0
3167,Strange IResourceStream type hierarchy    Current type hierarchy looks likeIResourceStream IStringResourceStream AbstractResourceStream AbstractStringResourceStreamIt propobly should rather beIResourceStream AbstractResourceStream IStringResourceStream AbstractStringResourceStream   ,0
3169,Parametrize IFilterStateLocator    Interface org.apache.wicket.extensions.markup.html.repeater.data.table.filter.IFilterStateLocator contains methods which work with Object types. It may be a good improvement to parametrize this interface with type &lt;T&gt; much like the IModel &lt;T&gt;interface in order to introduce type-safety and avoid casting.   ,0
3177,Chunk.slice seq.subList(pos  pos) returns empty list so why bother    In the method Chuck.splice when count &lt;= 0 the following code is exectued:return new ArrayList&lt;T&gt;(seq.subList(pos  pos));Well  seq.subList(pos  pos) returns an empty list so you might want tochange the line to be something like:return new ArrayList&lt;T&gt;();   ,0
3178,Correctness of tests is order dependent  ThreadContext.detach not always called    I have my own build/test env for Wicket and the order in which tests are executed are not necessarily the same as the order that Maven drivesthe tests in the standard test env.If you can manage to run only the testsorg.apache.wicket.request.cycle.RequestCycleListenerTest testBasicOperationsfollowed by test org.apache.wicket.request.mapper.BasicResourceReferenceMapperTest testDecode1the BasicResourceReferenceMapperTest test will fail because itrequires that the ThreadContext have NO application  but theRequestCycleListenerTest does not have a tearDown methodthat calls ThreadContext.detach (nor does it use the BaseWicketTesterwith its tearDown method) so it leaves an application in the ThreadContext.Also  BasicResourceReferenceMapperTest does not use theBaseWicketTester which calls detach in its constructor.The solution is to add the following to BasicResourceReferenceMapperTestprotected void setUp() { org.apache.wicket.ThreadContext.detach(); }In my test env it is simply two lines in a property file to have only the abovetwo tests execute (and in the order specified). Don't know how to do that in Maven.   ,0
3194,IResourceSettings.setUseTimestampOnResources(true) and performance    Hello  I had a problem with slow loading of pages and response to ajax requests. After some debugging I traced the problem to be that wicket constantly tries: DEBUG - UrlResourceStream - cannot convert url: jar:file:/C:/Users/hok/.m2/repository/org/apache/wicket/wicket/1.5-M3/wicket-1.5-M3.jar!/org/apache/wicket/markup/html/wicket-event.js to file (URI is not hierarchical)  falling back to the inputstream for polling DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' on path [folders = []  webapppaths: []] DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' using classloader sun.misc.Launcher$AppClassLoader@cac268 and this happens because that by default (or at least I think so) wicket adds timestamp on the resources - ResourceSettings.setUseTimestampOnResources(true) and every resource is read from the jar files on every request. When a resource is in a jar file a java.lang.IllegalArgumentException: URI is not hierarchical is thrown in the UrlResourceStream constructor and a lot of attempts are made to load the jar file through different loaders. In my case this led to a slow response times. After disabling timestamp on resources (ResourceSettings.setUseTimestampOnResources(false)) the problem disappears and the performance is fine. However in the javadoc of setUseTimestampOnResources: Enabling timestamps on resources will inject the last modification time of the resource into the filename (the name will look something like 'style-ts1282915831000.css' where the large number is the last modified date in milliseconds and '-ts' is a prefix to avoid conflicts with filenames that already contain a number before their extension. * Since browsers and proxies use the filename of the resource as a cache key the changed filename will not hit the cache and the page gets rendered with the changed file.In this case this useful functionality is lost. Is it possible to have 'the best of both worlds'? Thanks.This issue is raised from the discussion:http://apache-wicket.1842946.n4.nabble.com/IResourceSettings-setUseTimestampOnResources-true-and-performance-td3057946.htmlTo observe the performance improvement  please changegetResourceSettings().setUseTimestampOnResources(true);togetResourceSettings().setUseTimestampOnResources(false);in TestApplication. It's most obvious when you press Refresh All link and observe the time for the refresh in both cases   ,0
3200,Form  containing FileUploadField and UploadProgressBar throws an exception when removed from the parent    There is a form which contains FileUploadField  UploadProgressBar and a submit button. The form is added to a WebMarkupContainer. When the form is removed from the WebMarkupContainer an exception is thrown: java.lang.IllegalStateException: Tried to remove a behavior that was not added to the component. Behavior: org.apache.wicket.extensions.ajax.markup.html.form.upload.UploadProgressBar$FormEnabler@1d433c1This can be observed in the attached quickstart.   ,0
3207,Localizer.substitutePropertyExpressions() is called twice when Localizer.getString() is called    When you call getString() on a component this component calls Localizer.getString(). This method then calls Localizer.getStringIgnoreSettings() which calls Localizer.substitutePropertyExpressions() for the first time. The return value of getStringIgnoreSettings() is then again passed to substitutePropertyExpressions().Actually I'm not sure if this is a bug or if this is desired behaviour  but it can lead to problems if you throw an Exception when a resource cannot be found and the value that is put into a string is  for whatever reason  in the format ${foobar}.   ,0
3212,WicketTester can't create new sessions    It looks like currently there is no way to create a new session (e.g. execute Application#newSession through WicketTester).My test case would be something like this: create a session set a configuration option with a form invalidate session create new session assert that the session#getStyle now returns something elseIn wicket-1.4 this was possible with WicketTester#createRequestCycle  but that is gone now.Workaround: create a new WicketTester  which will force to create a new session.   ,0
3215,AutoCompleteTextField does not work in an iframe under IE 6  7 or 8    The code that has been integrated in version 1.4.11 to fix issue WICKET-2279 forces the cursor of an AutoCompleteTextField to do a 'carriage return' after each typed in char when the application runs in an iframe and IE 6  7 or 8 is used.   ,0
3217,DatesPage test LocaleDropDownChoice getObject calls getSelectedLocale()  does not use result    In the DatesPage test  the LocaleDropDownChoice.getObject() method callsgetSelectedLocale() but does not use the result: public List&lt;Locale&gt; getObject() { getSelectedLocale(); List&lt;Locale&gt; locales = new ArrayList&lt;Locale&gt;(LOCALES); Collections.sort(locales  new Comparator&lt;Locale&gt;() { public int compare(Locale o1  Locale o2) { return o1.getDisplayName(selectedLocale).compareTo( o2.getDisplayName(selectedLocale)); } }); return locales; }I would guess that the call getSelectedLocale() could be removed   ,0
3222,AbstractMarkupParser doesn't remove Comments correctly    AbstractMarkupParser removeComment(...) doesn't remove Comments correctlyif two html comments stand to close together &lt;Unable to render embedded object: File (-- foo --&gt; &lt;) not found.-- bar --&gt;foo will be removed but not bar.see:https://github.com/mafulafunk/wicketCommentsgit@github.com:mafulafunk/wicketComments.git   ,0
3227,Complete documentation of Component Lifecycle    Please update javadoc for component lifecycle  it misses important hooks like onBeforeRender()  onInitialize() and onConfigure().   ,0
3232,In extensons CaptchaImageResource render method  while loop does not loop    In the extensons CaptchaImageResource render method  the while-loop:while(true){....return toImageData(image);}can be removed.   ,0
3239,for stateless pages wicket complains with 'The Buffered response should be handled by BufferedResponseRequestHandler'    when initially rendering a _stateless_ page I get 'The Buffered response should be handled by BufferedResponseRequestHandler'it's logged by WebPageRenderer#respond(cycle) in line 185 in trunk.I don't know if this really is worth a warning  maybe we can just remove it.There's also method WebPageRenderer#enableRedirectForStatelessPage()which seems to be somehow involved (and still contains a TODO which probably should be resolved before 1.5.0)I would like to fix it for myself but don't know much about the background of that warning.   ,0
3240,AnnotationsRoleAuthorizationStrategy isInstantiationAuthorized package==false  class==true returns true    In the class AnnotationsRoleAuthorizationStrategy's isInstantiationAuthorized method ifthe package authorization is false but the class authorization is true  then the userwill be authorized.Maybe  check the class authorization only if the authorized variable is true.   ,0
3253,NPE with nested property models    After updated from 1.4.8 to 1.4.14 I got this bug.The problem is with nested property models where the 'top' model has a null model object that is bound to a TextField. You get a NPE when the page is rendered. There is a quick workaround by overriding getOjbectClass() on the property model.I provide a running example of the problem.   ,0
3257,Add restartResponseAtSignInPage() Method to AuthenticatedWebApplication    I have a situation where I need to be able to get the sign in page class outside the context of the AuthenticatedWebApplication class itself (or a subclass). Basically  I've got a Spring Security framework that's going to register a custom exception mapper (that wraps the default one). If it sees an AuthenticationCredentialsNotFoundException  it needs to throw a RestartResponseAtInterceptPage(getSignInPage()). Can we add a method that does that? Patch coming...   ,0
3279,ModalWindow title not visible    The title of a Modal window is not shown.   ,0
3280,IResponseFilter doesn't work in 1.5    In current 1.5-SNAPSHOT there are no callers of org.apache.wicket.settings.IRequestCycleSettings.getResponseFilters() and thus filters are never executed.   ,0
3286,DropDownChoice:  'data' or 'choices?'    In DropDownChoice  sometimes the constructor argument is called 'data' and sometimes 'choices.' These look like the same parameter; wouldn't it be better to give the same parameter the same name across all the constructors?   ,0
3295,Please use lists instead of arrays    I'm working with 1.5-M3.In most places  indexed collections are lists. But in a few places they're arrays  which creates awkward integrations for various reasons. The ones that I've noticed are:1. DataTable accepts an IColumn&lt;T&gt;[] as a parameter  which is a pain to construct because it's impossible to create a generic array. Instead one has to create a non-generic array (in other words an IColumn[]) or create a list of IColumn&lt;T&gt; and then convert it to an array. Either approach involves suppressing some warning and is unfriendly to developers who don't grok the ins and outs of using arrays and generics together. If DataTable just accepted List&lt;IColumn&lt;T&gt;&gt;  like DataGridView (which takes List&lt;ICellPopulator&lt;T&gt;&gt;)  then the issue will go away. If DataTable wants to use an array internally  then it can do the conversion itself.2. In the new AbstractMapper and several subclassses  the mount path is represented as a String[]. But this collection has to intergrate with the Url class  which represents the same concept as a List&lt;String&gt;. Why not just use List&lt;String&gt; and make it a little easier for everyone to write AbstractMapper implementations?   ,0
3296,Url should accept null parameters list    It's more natural to pass null than an empty list if there are no query parameters. It would be a simple change since Url just copies the parameters into its own list: if it's null then just don't copy. public Url(List&lt;String&gt; segments  List&lt;QueryParameter&gt; parameters  Charset charset) { Args.notNull(segments  'segments'); // Remove: Args.notNull(parameters  'parameters'); this.segments.addAll(segments); if (parameters != null) this.parameters.addAll(parameters); setCharset(charset); }   ,0
3309,unable to add nodes to an empty rootless Tree (e.g. LinkTree)    2 scenarios which adding new nodes (via ajax) to a rootless Tree is not working as expected.the node is getting added to the treemodel but non is displayed.1) adding a node to the rootnode. the newly added node is not displayed.2) the rootless tree already has a node. if you add additional nodes to the root node  they will be displayed (compare to 1)  if you add an additional node to one of the added nodes  the complete tree will disappear.see attached quickstart   ,0
3310,Multiple language support for UploadProgressBar    Up to now the Feedback (e.g. 'Upload starting'  '15 Minutes remaining'  etc.) is hardcoded into the progressbar.js and therefore doesn't support multiple languages.   ,0
3319,AjaxEditableMultilineLabel generates invalid HTML    When using an AjaxEditableMultilineLabel  the generated markup looks like:&lt;span onclick='&#91;...&#93;'&gt;&lt;p&gt;1st paragraph&lt;/p&gt;&lt;p&gt;2nd paragraph&lt;/p&gt;&lt;/span&gt;This is invalid according to HTML spec (block elements (p) are not allowed within inline elements (span)).AjaxEditableMultilineLabel should be using a &lt;div&gt; element instead of the &lt;span&gt;.   ,0
3321,Ajax submit  link does not show busy indicator under IE    When form is sumbitted via link inside form then busy indicator is not shown under IE.The problem occurs only when form was earlier refreshed via ajax.   ,0
3322,Patches to correct some Findbugs warnings in core  request and util    The patches contain fixes mainly for the followings: only java files in main source directories of core  request and util were touched (so test not) only those were fixed that looked straightforward and locally fixable fixing cases that always result in NPE (2 found) or ClassCastException (1 found) unused local variable  dead store removals redundant instanceof check  nullcheck removals added transient to non serializable fields of serializable classes made inner classes static where the reference to the enclosing classes was not used some extra null checks added with WeakReference usages to avoid NPE 'File#delete() return value not checked': using wickets Files#remove() instead small performance related tasks: using StringBuilder in loop  using map entrySet() instead of keySet() + get()I added some comments to the patches where I tought it is not easy to figure out without the findbugs report why the code was changed. But of course I can explain if other questions arise.   ,0
3323,TreeTable should call attachUpdate javascript on domready event.    Since Wicket-1.4.15 it is possible to filter javascript resources (JavascriptFilteredIntoFooterHeaderResponse) and place them to the tail of HTML document. It means that some embedded javascript can be broken because of too early evaluation and missing dependencies.I have faced with this problem in TreeTable component. But probably there are other places in the framework  affected by this issue.   ,0
3337,Url to the home page is not correct when the current base url has only one segment    The link 'go back' in all Ajax examples in wicket-examples is not correct.In details: 1) current base url looks like : autocomplete?0 (i.e. one segment + one query parameter) 2) 'go back' points to the application home page (Index.class) 3) RequestCycle.mapUrlFor(IRequestHandler) creates Url('') for the home page 4) UrlRenderer.renderUrl(homePageUrl) incorrectly returns '' instead of '.' for this input   ,0
3344,Upgrade jetty version to 7.2    Jetty 6 is a dead end  and servlet api 2.3 is so 2003  it is time to cut the bilical cord and move to at least servlet api 2.5 (which is from januari 2007) so we can run our examples using jetty 7.   ,0
3351,Add class for span with text in wicket-extensions/treetable    Could you  please  add class 'text' for a span with wicket:id='label' to markup in wicket-extensions/org/apache/wicket/extensions/markup/html/tree/table/TreeTable.html as it is done in wicket-extension/org/apache/wicket/extensions/markup/html/tree/table/TreeTable$TreeFragment.html   ,0
3353,'wicket' Maven module brings the other three wicket modules as transitive dependencies    The new three-in-one Maven module 'wicket' brings -core  -util and -request as transitive dependencies.This way if the user app depends on 'wicket' then it will get wicket.jar  wicket-util.jar  wicket-request.jar and wicket-core.jar in its WEB-INF/lib/ folder.   ,0
3354,Improve SerializableChecker message    Currently if the object has an problematic implementation of equals method  the serializable checker will stop its work with an runtime exception. The best would be just log an warn explaining the the problem on console and continue the checks until the non serializable source of the problem.   ,0
3361,Validation Error on AjaxEditableLabel causes ajax calls in loop on Chrome Browser    On Chrome  the component AjaxEditableLabel causes an infinite ajax call's loop if there is an validation error on the input.The attached project shows this bug (Enter 'false' to reproduce the bug  and tape any key to stop it).On Firefox  everithing is OK.   ,0
3365,1.5-RC1 sources seem to be missing in Maven repository    I saw a 1.5-RC1 build here:http://repo1.maven.org/maven2/org/apache/wicket/wicket/1.5-RC1/but it looks like the sources are missing. There are source jar files  but they don't contain any classes. Was that intentional or is something wrong with the build process?   ,0
3370,Extend multiple file handling to IMultipartWebRequest    HTML 5 allows a new attribute with file input tags called 'multiple ' which lets the user choose multiple files to upload. It works for me in Safari 4 and Firefox 3.6. It probably works in Chrome and probably doesn't work in IE (like everything else).So I set about creating a MultiFileUploadField that uses a List&lt;FileUpload&gt; as its model. Unfortunately it looks like while MultipartServletWebRequestImpl does a fine job of parsing out each file in the multi-file upload  the IMultipartWebRequest interface isn't up to the task: it assumes that each field only has one file.I think that it would be straightforward to make IMultipartWebRequest map field names to List&lt;FileItem&gt; instead of just FileItem. The existing FileUpload field (and indeed any other user of this interface) could just use the first FileItem in the list  or the last  if it really wanted to reproduce the existing behavior exactly (in which each new file for some field 'f' overwrites the previous one in the map  leaving the last).Alternately there could be a couple of new methods:public Map&lt;String  List&lt;FileItem&gt;&gt; getFileLists();public List&lt;FileItem&gt; getFileList(final String fieldName);with the other two methods retaining the old behavior.   ,0
3380,HttpsMapper and BookmarkablePageLink    There is a wicket Application which is configured to use HttpsMapper. There are two page: TestPage and TestPage2. TestPage uses @RequireHttps  TestPage2 doesn't. Each page contains a BookmarkablePageLink to the other one. However in this configuration (one with @RequireHttps and one without) the links on the pages are pointing to the page they are added to - the link in TestPage links to TestPage itself (and not to TestPage2) and vice versa. When both of the pages use @RequireHttps or not using it at all the links work normally.   ,0
3384,Comment: org.apache.wicket.util.upload.RequestContext interfsace to interface    Change comment from:Abstracts access to the request information needed for file uploads. This interfsace should betoAbstracts access to the request information needed for file uploads. This interface should be   ,0
3388,Incorrect casts to AuthenticatedWebSession in AuthenticatedWebApplication class    After resolving bug WICKET-2971  several methods in AuthenticatedWebApplication still contain casts to AuthenticatedWebSession instead of casts to AbstractAuthenticatedWebSession. It makes AuthenticatedWebApplication not reusable with custom implementations of AbstractAuthenticatedWebSession class. Several cosmetic changes in code and javadoc should be done.   ,0
3394,org.apache.wicket.request.mapper.parameter.PageParameters Comment    org.apache.wicket.request.mapper.parameter.PageParameters Change:@deprecated use varios setter methods to set parametersto@deprecated use various setter methods to set parameters   ,0
3408,Add wicket version to initial page in wicket-examples    The wicket-examples show the wicket version when you click on a sub page but not on the initial page.I didn't notice the version showing in the DebugBar until after I created this patch.I added in a new HomePageApplication that receives the initial request instead of the static index.html file.   ,0
3412,RememberMe doesn't remember me    When remember me is checked a cookie with crypted username and password should be set I think. But no cookie was set. So when the browser is closed and opened again I was asked again for username and password.   ,0
3415,1.5 equivalant of protected void WebRequestCycle.onRequestTargetSet(IRequestTarget requestTarget) is mising from AbstractRequestCycleListener    There is not method equivalent to WebRequestCycle.onRequestTargetSet(IRequestTarget requestTarget) in AbstractRequestCycleListener.   ,0
3419,org.apache.wicket.util.collection.MultiMap addValue    for org.apache.wicket.util.collection.MultiMap addValue methodchange from: public void addValue(final K key  final V value) { List&lt;V&gt; list = get(key); if (list == null) { list = new ArrayList&lt;V&gt;(1); } list.add(value); put(key  list); }to: public void addValue(final K key  final V value) { List&lt;V&gt; list = get(key); if (list == null) { list = new ArrayList&lt;V&gt;(1); put(key  list); } list.add(value); }   ,0
3420,javascript with a less than character ('<') fails to execute when added through a header contribution in ajax response    This is adapted from a wicket users post I made (links are to the same thread in two archive systems):http://markmail.org/search/?q=wicket%20users%20wicket-ajax.js#query:wicket%20users%20wicket-ajax.js+page:1+mid:rfts3ar3upffhbbt+state:resultshttp://mail-archives.apache.org/mod_mbox/wicket-users/201102.mbox/%3CAANLkTi=EkmTA0RnA+GyJE-CQWmkCxRLsjp+z8jwv-Aw9@mail.gmail.com%3EThe problem: I have a panel with this: &lt;wicket:head&gt; &lt;script&gt; if (someVariable &lt; 0) { someVariable = 0; } &lt;/script&gt; &lt;/wicket:head&gt;This script fails to execute when the panel is loaded by ajax. If I replace the less than character '&lt;' with equals '=='  then it executes (but of course  this is not what I need).I tested this in Firefox 4.0b10 and Chrome 8.After some debugging  it seems to me that this needs to be corrected in wicket-ajax.js. The header contribution is sent to the browser inside of a CDATA section so the '&lt;' character arrives to javascript intact. However  in parsing the script tag  the '&lt;' seems to signal the beginning of an HTML tag that then is considered malformed.Possible workarounds for apps: Invert the logic so a greater-than is used. In my example  this would be: 'if (0 &gt; someVariable) {' Put the code into a separate JS file (the downside is it requires another network hop from the browser) Embed the script in &lt;wicket:panel&gt; rather than &lt;wicket:head&gt; (the disadvantage is the script will be re-sent with the panel content when the panel is re-used on the same page)   ,0
3439,org.apache.wicket.markup.html.form.AbstractChoice renderer cast in method appendOptionHtml    In class org.apache.wicket.markup.html.form.AbstractChoice&lt;T  E&gt; the renderer instance variable has signature: private IChoiceRenderer&lt;? super E&gt; renderer;In the method appendOptionHtml the renderer's getDisplayValue method is called as follows: T objectValue = (T)renderer.getDisplayValue(choice); where the signature for the IChoiceRenderer&lt;E&gt; getDisplayValue method is: Object getDisplayValue(E object);So  is it a fact that for all usages of AbstractChoice that the display value returned by arenderer of type E will always be of type T (not Object)??? If not  then one should expect cast exceptions.   ,0
3440,org.apache.wicket.util.collections.MostRecentlyUsedMap getRemovedValue method returns Object not V    org.apache.wicket.util.collections.MostRecentlyUsedMap getRemovedValue method: public Object getRemovedValue() { return removedValue; }but should be: public V getRemovedValue() { return removedValue; }   ,0
3444,ChangeHandler fires in IE on POS1 and END    In wicket-ajax.js the Wicket.ChangeHandler fires in IE an event on Textfields even if the KEY_POS1 and the KEY_END is pressed.Please add obj.onkeyup = function(event) {  switch (wicketKeyCode(Wicket.fixEvent(event))) { case KEY_ENTER: case KEY_UP: case KEY_DOWN: case KEY_ESC: case KEY_TAB: case KEY_RIGHT: case KEY_LEFT: case KEY_SHIFT: case KEY_ALT: case KEY_CTRL: return Wicket.stopEvent(event); break; default: if (typeof objonchange == 'function')objonchange(); } return null; }case KEY_POS1 and KEY_END to the first case so that these two keys don't fall in the default case.   ,0
3454,Value exchange in a wicket:message throws an exception    i tried to exchange values in a &lt;wicket:message&gt; like described in wiki &lt;https://cwiki.apache.org/WICKET/wickets-xhtml-tags.html#Wicket%27sXHTMLtags-Elementwicket:message&gt;.But i get an exception:ERROR - RequestCycle - No get method defined for class:class org.apache.wicket.markup.resolver.MarkupInheritanceResolver$TransparentWebMarkupContainer expression: vat1valueorg.apache.wicket.WicketRuntimeException: No get method defined for class:class org.apache.wicket.markup.resolver.MarkupInheritanceResolver$TransparentWebMarkupContainer expression: vat1valueat org.apache.wicket.util.lang.PropertyResolver.getGetAndSetter(PropertyResolver.java:488)at org.apache.wicket.util.lang.PropertyResolver.getObjectAndGetSetter(PropertyResolver.java:330)at org.apache.wicket.util.lang.PropertyResolver.getObjectAndGetSetter(PropertyResolver.java:237)...Maybe it's caused by usage of border. I've debugged a bit  but could get a real glue.I added a quick start with test case.   ,0
3457,Add methods to IBehavior to listen for configuration events    I would like for behaviors to be able to contribute to the configuration of a component (i.e. calling setVisible / setEnabled). Now that we have onConfigure  it would be nice to have components notify their behaviors during the configuration process.   ,0
3458,PackagedTextTemplate -> PackageTextTemplate    It's PackageResource but PackagedTextTemplate. Maybe remove the 'd' for sake of consistency.   ,0
3459,Update jetty to 7.3 and spring to 2.5.6.SEC02    Jetty 7.3.0.v20110203 is the latest stable version. Maybe it would be worth to upgrade now from 7.2.2 before wicket 1.5 goes final.Spring 2.5.6.SEC02 is the latest spring version in the 2.x line and it only differs in a few security fixes from the current used version: 2.5.6.   ,0
3464,Greek (el) Application.properties    I am attaching greek Application_el.properties file. Unfortunatelly I myselft do not speak Greek  we have a project partner/client in Greece  which was conmpaining about default 'Choose one' drop down option. I suggested translating the Application.properties file. I know  there are more files  which should be translated to get full translation  but I do not really feel I can ask our Greek partner to do them all  Additionally I can not really validate  how good the translation really is - they are very non-technical persons.   ,0
3465,BaseWicketTester#isInvisible(String path)    BaseWicketTester#isInvisible(String path) does not fail if Component does not exist.Similar methods like isVisible  isEnabled  isDisabled and isRequired  they all fail if component does not exist.   ,0
3470,Can't write session to disk with tomcat : Servlet is destroyed before serialization    Hi When I stop my tomcat  I have the following error :GRAVE: Exception au d�_�_�chargement des sessions vers le stockage persistant (persistent storage)java.lang.IllegalStateException: PageManager for application wicket not registered. at lm.lbx.application.PersistentPageManager$SessionEntry.getPageStore(PersistentPageManager.java:86) at lm.lbx.application.PersistentPageManager$SessionEntry.writeObject(PersistentPageManager.java:197) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source) at java.io.ObjectOutputStream.writeSerialData(Unknown Source) at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) at java.io.ObjectOutputStream.writeObject0(Unknown Source) at java.io.ObjectOutputStream.writeObject(Unknown Source) at org.apache.catalina.session.StandardSession.writeObject(StandardSession.java:1561) at org.apache.catalina.session.StandardSession.writeObjectData(StandardSession.java:1004) at org.apache.catalina.session.StandardManager.doUnload(StandardManager.java:528) at org.apache.catalina.session.StandardManager.unload(StandardManager.java:469) at org.apache.catalina.session.StandardManager.stop(StandardManager.java:678) at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4875) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1106) at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1106) at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:468) at org.apache.catalina.core.StandardService.stop(StandardService.java:604) at org.apache.catalina.core.StandardServer.stop(StandardServer.java:788) at org.apache.catalina.startup.Catalina.stop(Catalina.java:662) at org.apache.catalina.startup.Catalina.start(Catalina.java:629) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)After a little digging  it's because tomcat first unload the servlet mapping and destroy the servlet  and then  ask for serialization. I'm not sure it's a wiket bug  tell me if i have to report it against tomcat.Here is the trace of the destroy :Thread &#91;main&#93; (Suspended (breakpoint at line 357 in PersistentPageManager))  PersistentPageManager.destroy() line: 357  PageAccessSynchronizer$1(PageManagerDecorator).destroy() line: 86  LibellexApplication(Application).internalDestroy() line: 658  LibellexApplication(WebApplication).internalDestroy() line: 470  WicketFilter.destroy() line: 456  ApplicationFilterConfig.release() line: 357  StandardContext.filterStop() line: 4106  StandardContext.stop() line: 4869  StandardHost(ContainerBase).stop() line: 1106  StandardEngine(ContainerBase).stop() line: 1106  StandardEngine.stop() line: 468  StandardService.stop() line: 604  StandardServer.stop() line: 788  Catalina.stop() line: 662  Catalina.start() line: 629  NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available &#91;native method&#93;  NativeMethodAccessorImpl.invoke(Object  Object[]) line: not available  DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: not available  Method.invoke(Object  Object...) line: not available  Bootstrap.start() line: 289  Bootstrap.main(String[]) line: 414 And the trace requesting serialization :Thread &#91;main&#93; (Suspended (breakpoint at line 83 in PersistentPageManager$SessionEntry))  PersistentPageManager$SessionEntry.getPageStore() line: 83  PersistentPageManager$SessionEntry.writeObject(ObjectOutputStream) line: 197  NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available &#91;native method&#93;  NativeMethodAccessorImpl.invoke(Object  Object[]) line: not available  DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: not available  Method.invoke(Object  Object...) line: not available  ObjectStreamClass.invokeWriteObject(Object  ObjectOutputStream) line: not available  ObjectOutputStream.writeSerialData(Object  ObjectStreamClass) line: not available  ObjectOutputStream.writeOrdinaryObject(Object  ObjectStreamClass  boolean) line: not available  ObjectOutputStream.writeObject0(Object  boolean) line: not available  ObjectOutputStream.writeObject(Object) line: not available  StandardSession.writeObject(ObjectOutputStream) line: 1561  StandardSession.writeObjectData(ObjectOutputStream) line: 1004  StandardManager.doUnload() line: 528  StandardManager.unload() line: 469  StandardManager.stop() line: 678  StandardContext.stop() line: 4875  StandardHost(ContainerBase).stop() line: 1106  StandardEngine(ContainerBase).stop() line: 1106  StandardEngine.stop() line: 468  StandardService.stop() line: 604  StandardServer.stop() line: 788  Catalina.stop() line: 662  Catalina.start() line: 629  NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available &#91;native method&#93;  NativeMethodAccessorImpl.invoke(Object  Object[]) line: not available  DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: not available  Method.invoke(Object  Object...) line: not available  Bootstrap.start() line: 289  Bootstrap.main(String[]) line: 414 Well at this time  a simple dirty hack is to bypass destroy chain to avoid removal of app from managers properties of class PersistentPageManager. But I would like to have a real clean solution.   ,0
3478,Allow for dynamic prefix and suffixes in CheckBoxMultipleChoice    Currently  CheckBoxMultipleChoice has support for a prefix and a suffix to be defined for each choice being rendered. However  there is no way to change them based on the item being rendered. A possible use case is in case some data needs to be used in either the suffix or prefix for Ajax or other javascript related use.Please consider adding getPrefix(int index  T choice)  and getSuffix(int index  T choice) methods to this component and using them instead of getPrefix() and getSuffix() within the onComponentTagBody method.   ,0
3483,NullPointerException in PersistentPageManager's page cache    From a private email to me by a user:Hi I'm trying to use your gae-initializer to get your test application working on GAE. I'm using version 1.5-rc2 of wicket and your initializer. Using GAE sdk 1.4.2.I'm getting the same problem the person on the 1.5-rc1 release page was getting  and I can't get around it.The homepage loads  but the other page throws the same null pointer exception he was getting:java.lang.NullPointerException at org.apache.wicket.page.PersistentPageManager$SessionEntry.findPage(PersistentPageManager.java:117)....--------------------------------The problem is that org.apache.wicket.page.PersistentPageManager.SessionEntry.addPage(IManageablePage) adds even 'null' pages.   ,0
3485,Link tries to construct the URL when the link is disabled    This piece of code (Link.onComponentTag) tries to construct the URL for a Link  even when it is disabled: CharSequence url = getURL(); url = appendAnchor(tag  url); if (!isLinkEnabled()) disableLink(tag); else { use url }getURL fails for us  because we did not expect it to be called for a disabled link. The constructed url is never used. Can the getURL and appendAnchor be moved inside the else?   ,0
3502,Modify o.a.w.Component.send method signature to exactly match the one defined in superinterface    Current signature in Component:public final void send(IEventSink sink  Broadcast type  Object payload)This is an implementation of o.a.w.event.IEventSource.send:&lt;T&gt; void send(IEventSink sink  Broadcast broadcast  T payload)These are the same at runtime but the difference cause minor annoyance for Eclipse users. For example when creating a new page and defining the WebPage superclass in the wizard  Eclipse will generate a new class with a send method stub which has to be deleted by hand. Exact signatures fix this.   ,0
3506,ResourceMapper doesn't work: mapHandler() always returns null    ResourceMapper#mapHandler uses the following code test whether a particular ResourceReferenceRequestHandler should be mapped:// see if request handler addresses the resource we serveif (resourceReference.getResource().equals(handler.getResource()) == false){ return null;}Unfortunately this if statement always evaluates to true and thus null is returned.The problem is that IResource implementations do not provide an equals() method. In practice this means that the default Object#equals() implementation is used  which nearly always results in false for the equality test.I see two possible solutions:1. Implement equals() for all IResource classes.2. Compare the ResourceReference objects instead  which already have a meaningful equals() implementation. In other words:// see if request handler addresses the resource we serveif (resourceReference.equals(handler.getResourceReference()) == false){ return null;}I'm attaching a quickstart that illustrates this bug.   ,0
3508,HttpsMapper triggers rendering of incorrect absolute callback url for Link    This problem only occurs when HttpsMapper is installed as the root request mapper. Additionally  it only seems to occur when the web context is not root.I mount a simple page so that it is available as http://localhost:8080/myproject/pagetest. That page has one Link (the onclick doesn't do anything). If I access that exact url and show source I see the link callback is rendered incorrectly. It should have the web context mentioned. The fact that Wicket generates an absolute url makes me think the HttpsMapper.mapHandler is touching it in such a way to trigger an absolute url  when the delegate was returning a url expecting it to be relative.&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;a wicket:id='test' href='http://localhost:8080/wicket/page?1-1.ILinkListener-test'&gt;Click Here&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;   ,0
3520,SHOW_NO_EXCEPTION_PAGE responding with HTTP status 500 is overwritten by redirect    If the application is configured with SHOW_NO_EXCEPTION_PAGE as unexpectedExceptionDisplay  an exception thrown while submitting a form should result in an HTTP 500 status.Since the request is already marked as a redirect in AbstractListenerInterfaceRequestTarget#onProcessEvents()  the 500 status is overwritten with status 200 when the redirect is handled afterwards.   ,0
3524,Proposal: merge upload progress monitoring functionality into wicket-core    Based on the dev list mailhttp://apache-wicket.1842946.n4.nabble.com/Proposal-merge-upload-progress-monitoring-functionality-into-wicket-core-td3346567.htmlI am attaching a patch that merges UploadWebRequest and MultipartRequest into their superclasses and moves UploadInfo class from extensions to core.   ,0
3540,Make AjaxLink's URL more configurable    Currently AjaxLink uses AjaxEventBehavior which exposes just its getAjaxCallDecorator() to the user.It would be nice if there is a way to have access to the behavior callback url  e.g. to add some additional parameters  to set channel (wicket-ajax.js)  etc.As solution I suggest to add method 'AjaxLink#newAjaxBehavior()' which by default will return current AjaxEventBehavior but if the user wants she may override it with custom one. This way wicket stateless ajax behavior (see jolira's google code project) can be used as well without the need to re-write (copy/paste) the whole class.   ,0
3543,Add possibility to test Resources/ResourceReferences with WicketTester    Currently WicketTester supports testing of Page  Panel and plain Component (startPage()  startPanel() and startComponent()).It would be good to have similar methods for testing resources and resource references.   ,0
3550,Make Select component generic    Select component should be made generic  so it would be possible to use type safety with this form component.For example: Select&lt;String&gt; select = new Select&lt;String&gt;('select'  new Model&lt;String&gt;());   ,0
3551,Using web.xml  to render error pages via Wicket yields undesired behavior in Wicket 1.5    In my applications I prefer to use Wicket to render all error pages  including my 404 'not found' page. This allows me to reuse a shared page template afforded by Wicket to create my error pages (i.e. by extending a BasePage)  rather than using copy and paste to maintain static error page HTML files.I have been doing this as follows:web.xml: &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/error/404&lt;/location&gt; &lt;/error-page&gt;Now  so long as I have an appropriate bookmarkable page mounted on the '/error/404' path  the servlet container will render my page whenever a 404 'not found' scenario is encountered.This works great in Wicket 1.4.x.However in Wicket 1.5 (RC2 and the latest SNAPSHOT as of this writing)  two problems occur:1. By default  Wicket 1.5 automatically performs a 302 redirect before rendering the error page. This changes the URL from the invalid one (i.e. the one that generated the 404) to the mounted path (/error/404 in this example). This is not the desired behavior for a 404 error page; the original URL requested by the user should be maintained.2. If I attempt to work around the issue by overriding WebPageRenderer.enableRedirectForStatelessPage() to return false  the problem gets worse. Now the URL doesn't change  which is good. But Wicket gets confused about the depth of the request URL path: it seems to calculate relative URLs based on the mounted path rather than the URL that was requested. This causes all relative resources on the page (e.g. stylesheet references) to be miscalculated and break.I will attach two quickstarts: one showing this configuration working in 1.4  and another showing the same setup failing as described above in 1.5-RC2.   ,0
3552,Allow AttributeAppender to also prepend values    This add a flag to AttributeAppender which allows prepending a value to an attribute. This is useful for instance to add a javascript confirmation dialog before performing an action.   ,0
3553,Reset the busy flag in Wicket.Channel if the execution of the callback fails for some reason    If a scheduled (in Wicket.Channel) callback fails for some reason (in my case because WicketAjaxDebug was not yet loaded) then the 'busy' flag for the channel remains 'true' until the page is reloaded.It would be better to try/catch the execution of the callback and reset the flag in case of an error.   ,0
3554,Constructor of org.apache.wicket.PageReference should be public    The construcor of PageReference is not accessible (no qualifier  proteced). Is this for a reason? As far as I can see  a public qualifier would be nice as I rather often created an own class with a similar implementation (because I could not create an instance of PageReference).   ,0
3556,RequestLogger doesn't dump its collected data at the end of the request    From an email in users@:Enabling with getRequestLoggerSettings().setRequestLoggerEnabled(true) doesnt show any requests.Seems that the Application.logEventTarget and Application.logResponseTarget are never invoked at all from the wicket-core nevertheless the get overridden in WebApplication???   ,0
3558,Expose active requests via JMX    It'd be nice if RequestLogger.active was exposed via JMX in the same manner the RequestLogger.liveSessions.size() is. Moreover it'd be great to track and expose the peak number of concurrent (active) requests.   ,0
3559,Autolink (AutolinkBookmarkablePageLink) already rendered problem    Using a menu panel that includes &lt;wicket:link&gt; to return to a page that includes a panel with a &lt;wicket:head&gt; element  gives:The component [AutolinkBookmarkablePageLink &#91;Component id = _autolink_X&#93;] was rendered already   ,0
3562,onInitialize() is not called before StatelessForm.onSubmit()    I have a StatelessForm that has initialization code in onInitialize(). When my form is submitted  the onSubmit() method is invoked before onInitialize() is called. This results in a NullPointerException since the form has not yet had a chance to initialize its instance variables.I expect that onInitialize() will be called before any listener method is invoked.I believe this bug is due to the change in Page.onInitialize() introduced in r1085649.Quickstart attached.   ,0
3571,Popup close link not working in wicket examples linkomatic page    To reproduce:visit http://localhost:8080/linkomatic/homeclick 'Click this button for a popup'click 'close' link   ,0
3572,Add a link to the main page of Wicket Examples in the 'stateless' example page    The stateless page used to demonstrate stateless pages/sessions has no link to the main Wicket Examples page   ,0
3581,CryptoMapper ignores the IProvider argument    CryptoMapper takes a IProvider&lt;ICrypt&gt; argument  and has a default ApplicationCryptoProvider  but always ignored the configured crypto provider and directly retrieves the application crypto provider.   ,0
3585,Let AbstractResourceStreamWriter implement empty getContentType()    AbstractResourceStreamWriter's javadoc says it already:'Base implementation of an IResourceStreamWriter so that you only have to override the write() method'Actually I have to override getContentType() too  which is most of the time superfluous when the request target knows the resource's name and the type can be identified automatically .Please add an empty implementation to AbstractResourceStreamWriter.Thanks   ,0
3588,AppendingStringBuffer.append(StringBuilder  int  int) interprets length as stopIndex    I got a StringIndexOutOfBoundsException while submitting Ajax from Wicket. It points to AppendingStringBuffer:508.The method StringBuilder.getChar expects the arguments (startIndex  stopIndex  buffer  count)AppendingStringBuilder provides (startIndex  length  buffer  count) =&gt; better use startIndex + length instead of length   ,0
3591,NumberTextField and RangeTextField should always render/parse its value with English locale    Wicket started adding some support for the new Html5 input types. Among these are NumberTextField for number type &#91;1&#93; and RangeTextField for range type &#91;2&#93;. The Html5 spec mandates that the 'value'  'min'  'max' attributes for these inputs are floating point numbers. Html5 spec also describes the format of a float number &#91;3&#93;. Simply to say it is a number formatted with English locale (for example: decimal mark is a period).Wicket currently renders min and max spec compliant but renders the value wrong because it uses the client locale for that. Which means for example for a Hungarian client it will generate '3 14' instead '3.14'. This breaks the custom widgets used by browsers for these new inputs (Chrome and Opera have custom ui  FF and IE stil use plain text field) because they expect the value with a period decimal mark. This means that browsers will post the value formatted in English locale too so parsing is also broken for these on the wicket server side because the client locale is used there also.Imho wicket should always use the English locale for rendering/parsing these values in case of these input types.To reproduce you can use the form examples from 'wicket-html5-examples' in the wicketstuff project (I found this bug there).&#91;1&#93; Html5 input number type: http://dev.w3.org/html5/markup/input.number.html&#91;2&#93; Html5 input range type: http://dev.w3.org/html5/markup/input.range.html&#91;3&#93; Html5 float datatype: http://dev.w3.org/html5/markup/datatypes.html#common.data.float   ,0
3598,DatePicker issues with locale medium date format    DateTextField as follows: DateTextField d = new DateTextField(id  model  new StyleDateConverter('M-' false));Case 1: en-US locale for example DatePicker insert 04 rather than Apr in DateTextField  even though pattern clearly says MMMCase 2: pl-PL locale 2010-10-25 is in the DateTextField DatePicker opens on April 2031 rather than October 2010I believe the problem lies in wicket-date.js  in functions substituteDate and parseDate.I know this might be duplicate of WICKET-2427 and WICKET-2375  but apparently this hasn't been properly fixed yet.   ,0
3605,Ajax header-contribution omits IE conditional comments    We have a header contributor which writes an IE conditional comment to the header response for an IE-specific stylesheet.When the page is initially loaded  components on the page render with the IE conditional comment  and are displayed correctly.If a component is added by an ajax request  the header contributor renders the conditional comment to the ajax response  but the conditional comment is omitted from the page output.   ,0
3610,ContainerFeedbackMessageFilter should use Objects.equal for equality checking    In its accept() method ContainerFeedbackMessageFilter currenlty uses 'container == message.getReporter();' but a sibling class ComponentFeedbackMessageFilter uses 'Objects.equal(component  message.getReporter());'.Probably both should behave the same way in this.   ,0
3617,Using render strategy ONE_PASS_RENDER fails for Ajax requests    I have an application which has two pages. Page A has an AjaxLink which makes some checks and either sets some error feedback and stays on the same page (e.g. login page with 'Invalid user' error) or if everything is OK then redirects to page B (via setResponsePage(B.class)).The problem comes when the current render strategy is ONE_PASS_RENDER. In this case no matter that fromUrl and toUrl are different and the request is Ajax the current code directly writes the page markup to the response.I think it should trigger a redirect instead.I am not sure whether it should be redirect to render or to buffer ...   ,0
3619,Application_pt.properties    I had my portuguese partner look at the Application_pt_BR.properties file ason her portuguese laptop the standard english messages showed up. Accordingto her the pt_BR file is also completely valid forApplicaiton_pt.properties. Can I suggest the file is just copied over tothat name?   ,0
3621,Wicket do not test the 'buffer response' property in IRequestCycleSettings when creating the WebResponse in WebApplication    Wicket always create a buffered response. In 1.4 is was configurable.   ,0
3627,Tree 1.4 to 1.5 migration issue warning    Different types of Trees produce the following warning in the console when displayed :WARN - aultMarkupSourcingStrategy - 1.4 to 1.5 migration issue: your item component should be derived from AbstractItem. Item=[TreeItem &#91;Component id = 0&#93;]Examples producing this warning :LinkTree  LabelTree and TreeTable from Ajax-&gt;Tree and TreeTable:'Nested' exampleFeel free to change the priority if this is not important.   ,0
3628,Unable to override final method isLinkEnable of class AbstractLink    I have a form for which I need to disable all form components in certain situations.For this I am using form.setEnabled(false)  which works nicely for all input elements.However the form also contains a number of links (next to some fields)  which need to stay enabled.In the code of the onComponentTag method of the Link class I see the isLinkEnabled method is called to check if the link should be rendered enabled/disabled.In my Link subclass of I need to override isLinkEnabled to force the link being enabled even if the parent form is not.   ,0
3636,BookmarkablePageLink :: setParameter int versions missing    the new URL handling &amp; page parameters allow to use an integer index (great!)however this has not been implemented in BookmarkablePageLink  so this needs to be added private void setParameterImpl(int key  Object value) { if (parameters == null) { parameters = new PageParameters(); } parameters.set(key  value); }and  public MyBookmarkablePageLink&lt;T&gt; setParameter(final int property  final String value) { setParameterImpl(property  value); return this; }(and the same for int and long values)   ,0
3637,MarkupResourceStream should use debug instead of info to log non-standard namespace    It is possible to use a non 'wicket' namespace name in markup (for example 'w'). However wicket logs this on info level for every markup file. Imho this is a bit verbose and should be done on the debug level instead. Also wicket should log 'namespace name' instead of 'component name' in this message.   ,0
3641,UrlRenderer should not always add '.' to url    The fix in WICKET-3337 introduced a bug: now an url to a resource can be rendered differently if the base url changes.In practice this means that some js files can end up twice in a page DOM.First with the page load:'wicket/resource/org.apache.wicket.markup.html.WicketEventReference/wicket-event-ts1303754909421.js'and'wicket/resource/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax-ts1303754909421.js'Secondly after an ajax event two 'new' js gets loaded:'./wicket/resource/org.apache.wicket.markup.html.WicketEventReference/wicket-event-ts1303754909421.js'and'./wicket/resource/org.apache.wicket.ajax.WicketAjaxReference/wicket-ajax-ts1303754909421.js'   ,0
3650,parentFolderPlaceholder default value in Settings implementation is inconsistent with the javadoc    In relation to wicket-1992 the javadoc for: org.apache.wicket.settings.IResourceSettings#setParentFolderPlaceholdersays:'Note that by default the placeholder string is empty '' and thus will not allow to access parent folders.'But the default is null  not ''and this generates src url like this: resources/com.test.sub.pack.TestPage/null/null/base/information.pngwhich do work  but probably shouldn't.   ,1
3658,Add converter for Calendar class    Wicket has built in converter for a lot of date/time types (4 in wicket-util  2 in wicket-datetime) but not for Calendar. As Calendar is imho the most usable date/time object in standard java it would be nice if wicket would support it out of box.   ,0
3661,IHeaderResponse.renderJavaScriptReference does not support the 'defer' attribute    It would allow some nice optimization to allow to add script tags with a defer attribute like :&lt;script type='text/javascript' defer='true' src='myScript.js'&gt;&lt;/script&gt;I do not see any way to add the defer attribute right now.   ,0
3669,element in Ajax requests is executed twice in Opera 11    I have component with behavior which adds &lt;script&gt; element in Behavior.onComponentRendered() to respons. This javascript is to be processed in browser when component is rendered. This works pretty well when component is rendered during standard HTTP request. But when the same code is called from Ajax request  this script runs on browser two times! There is some magic in Ajax request processing in wicket-ajax.js: only for Opera and IE these &lt;script&gt; elements from responses are added to HTML and page &lt;header&gt; element as well. Comment says that this is workaround for these browsers  maybe in older versions of Opera dynamically adding element into HTML doesn't run &lt;script&gt; elements within  but now could be obsolete.   ,0
3675,Usage of JavaScriptCompressor by resources other than PackageTextTemplates is lost!    With the refactoring of ResourceReferences  Resources and ResourceStreams it seems that the JavaScriptCompressor is no longer used for resources other than a PackageTextTemplate. In Wicket 1.4 it used to be in JavascriptPackageResource but seeing as this class is gone the JavaScriptCompressor is no longer used.There should be either a subclass of PackageResource which uses the JavaScriptCompressor or a way to intercept the length and the bytes which are written to the stream in PackageResource line 327.   ,0
3679,Improve WebClientInfo logic to extract the exact browser version    A colleague of mine gave some love to WebClientInfo and improved the logic to extract information which browser and its major/minor version.This way it is quite easy to generate something like:&lt;html class='ie7'&gt;  or even &lt;html class='ff3.7'&gt;  ...instead of using IE conditional comments for IE and no way to do that for FF/Chrome/Safari.   ,0
3680,Make Objects.convertValue() generic    o.a.w.util.lang.Objects.convertValue(Object  Class) should use generics similar how it was changed for IConverter.convertToObject().The bad news is that this change is changing the semantics of the function because currently it is sometimes returning the input object (if the conversion was not possible). The good news is that this modification only impacts a small part of wicket.   ,0
3685,Split IHeaderContributor into IHeaderContributor and IComponentAwareHeaderContributor to make implementation cleaner       ,0
3688,WebPage cannot find the head container if TransparentWebMarkupContainer is associated with    If a page uses TransparentWebMarkupContainer to set some attributes to the &lt;html&gt; tag then org.apache.wicket.markup.html.WebPage.validateHeaders() cannot find the HtmlHeaderContainer because it expects to find it at the first level of children tree.   ,0
3690,Session is invalidated more than once because Session.sessionInvalidated is not reset    org.apache.wicket.Session.detach() invalidates the http session and null-ifies the sessionStore but doesn't reset 'sessionInvalidated' variable and later if a new session store is created (e.g. during commitRequest &#91;1&#93;) then this new session store is again destroyed at the end.1.Thread &#91;qtp1917759555-26&#93; (Suspended (breakpoint at line 80 in RequestAdapter))  PersistentPageManager$PersitentRequestAdapter(RequestAdapter).bind() line: 80  PersistentPageManager$PersitentRequestAdapter.getSessionEntry(boolean) line: 339  PersistentPageManager$PersitentRequestAdapter.storeTouchedPages(List&lt;IManageablePage&gt;) line: 373  PersistentPageManager$PersitentRequestAdapter(RequestAdapter).commitRequest() line: 185  PersistentPageManager(AbstractPageManager).commitRequest() line: 94  PageAccessSynchronizer$1(PageManagerDecorator).commitRequest() line: 68  PageAccessSynchronizer$1.commitRequest() line: 203  Application$2.onDetach(RequestCycle) line: 1522  RequestCycleListenerCollection$3.notify(IRequestCycleListener) line: 100  RequestCycleListenerCollection$3.notify(Object) line: 95  RequestCycleListenerCollection(ListenerCollection&lt;T&gt;).reversedNotify(Iterator&lt;T&gt;  INotifier&lt;T&gt;) line: 121  RequestCycleListenerCollection(ListenerCollection&lt;T&gt;).reversedNotify(INotifier&lt;T&gt;) line: 112  RequestCycleListenerCollection.onDetach(RequestCycle) line: 94  RequestCycle.onDetach() line: 547  RequestCycle.detach() line: 479  RequestCycle.processRequestAndDetach() line: 257  WicketFilter.processRequest(ServletRequest  ServletResponse  FilterChain) line: 138  WicketFilter.doFilter(ServletRequest  ServletResponse  FilterChain) line: 194 ...   ,0
3700,WicketTester.startComponent(Class  Markup) doesn't deliver the contributed response to the headers    There is a regression from RC3 with starting a Panel. The header contribution is not in the 'lastRenderedPageAsString'.See attached test case.   ,0
3708,Component.getAjaxRegionMarkupId loops over all behaviors even if markupId is found    In the Component getAjaxRegionMarkupId consider changing: for (Behavior behavior : getBehaviors()) { if (behavior instanceof IAjaxRegionMarkupIdProvider) { markupId = ((IAjaxRegionMarkupIdProvider)behavior).getAjaxRegionMarkupId(this); }  }to for (Behavior behavior : getBehaviors()) { if (behavior instanceof IAjaxRegionMarkupIdProvider) { markupId = ((IAjaxRegionMarkupIdProvider)behavior).getAjaxRegionMarkupId(this); break; }  }   ,0
3716,Please improve ErrorMessage for WicketTester#assertRenderedPage    If WicketTester#assertRenderedPage fails  the errormessage does only say 'classes not same' this is sufficient  but can be improved.At least expected PageClass and Current Page Class should be printed out in the message.   ,0
3725,wickettag contents aren't skipped when trying to find markup in 1.5    The attached quick start  fails to render the components inside the fragment  because it will pick the &lt;span wicket:id='text'&gt; instead of the fragment as markup.I believe the id are only required to be unique 'per level'  so this should work and it should properly find the &lt;wicket:fragment wicket:id='text'&gt;. This also worked fine in 1.4   ,0
3727,MultiFileUploadField internationalisation does not work    We are having an issue setting some properties to override the default text for the MultiFileUploadField component. As per the docs  we have set the following in our local properties file:org.apache.wicket.mfu.caption.unlimited=Ficheros:org.apache.wicket.mfu.caption.limited=Ficheros (m/u00E1ximo ${max}): org.apache.wicket.mfu.delete=Borrarhowever they are not being overridden. We know our properties file is working because we can override other properties  like:workphone.PhoneNumberValidator = N/u00FAmero de tel/u00E9fono no v/u00E1lidoand those come up correctly.I have reproduced this in a quickstart.   ,0
3728,Allow filtering and grouping of resources in the    With DecoratingHeaderResponse and few supporting classes it is possible currently to group and filter header contributions  e.g. to render all JavaScript resources just before the closing tag of the body (&lt;/body&gt;). See http://www.wicket-library.com/wicket-examples/resourceaggregation for an example in action.Unfortunately it is not possible to use the grouping feature in the &lt;head&gt; tag currently because HtmlHeaderContainer first renders its body and then asks for other components' header contributions. While rendering its body it tries to render the placeholder for the header group and fails at org.apache.wicket.resource.filtering.HeaderResponseFilteredResponseContainer.onComponentTagBody(MarkupStream  ComponentTag) saying that the IHeaderResponse is not closed yet.To allow this I'm suggesting a patch that will first collect other components' header contribution  then close the IHeaderResponse and finally collect the &lt;head&gt;'s body. At the end it will render the head's body first and then the header contributions as it is now.   ,0
3730,extremely slow performance in development mode    I just finished migrating application to 1.5 and it became VERY unresponsive and slow in development mode. In deployment it is OK.No changes were made to backend services  only necessary Wicket API use changes related to request cycle.=======================Below is the originals bug: WICKET-3194Hello  I had a problem with slow loading of pages and response to ajax requests. After some debugging I traced the problem to be that wicket constantly tries: DEBUG - UrlResourceStream - cannot convert url: jar:file:/C:/Users/hok/.m2/repository/org/apache/wicket/wicket/1.5-M3/wicket-1.5-M3.jar!/org/apache/wicket/markup/html/wicket-event.js to file (URI is not hierarchical)  falling back to the inputstream for polling DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' on path [folders = []  webapppaths: []] DEBUG - ResourceStreamLocator - Attempting to locate resource 'org/apache/wicket/markup/html/wicket-event_en_US.js' using classloader sun.misc.Launcher$AppClassLoader@cac268 and this happens because that by default (or at least I think so) wicket adds timestamp on the resources - ResourceSettings.setUseTimestampOnResources(true) and every resource is read from the jar files on every request. When a resource is in a jar file a java.lang.IllegalArgumentException: URI is not hierarchical is thrown in the UrlResourceStream constructor and a lot of attempts are made to load the jar file through different loaders. In my case this led to a slow response times. After disabling timestamp on resources (ResourceSettings.setUseTimestampOnResources(false)) the problem disappears and the performance is fine. However in the javadoc of setUseTimestampOnResources: Enabling timestamps on resources will inject the last modification time of the resource into the filename (the name will look something like 'style-ts1282915831000.css' where the large number is the last modified date in milliseconds and '-ts' is a prefix to avoid conflicts with filenames that already contain a number before their extension. * Since browsers and proxies use the filename of the resource as a cache key the changed filename will not hit the cache and the page gets rendered with the changed file.In this case this useful functionality is lost. Is it possible to have 'the best of both worlds'? Thanks.This issue is raised from the discussion:http://apache-wicket.1842946.n4.nabble.com/IResourceSettings-setUseTimestampOnResources-true-and-performance-td3057946.htmlTo observe the performance improvement  please changegetResourceSettings().setUseTimestampOnResources(true);togetResourceSettings().setUseTimestampOnResources(false);in TestApplication. It's most obvious when you press Refresh All link and observe the time for the refresh in both cases   ,0
3736,npe in StoredResponsesMap    While doing some load testing with with a small prog using Apache httpclient (45 threads  only the get requests were done) I got this error17:59:22.086 ERROR &#91;&quot;http-bio-8080&quot;-exec-1&#93; DefaultExceptionMapper - 108 - Unexpected error occurredjava.lang.NullPointerException: null at org.apache.wicket.protocol.http.StoredResponsesMap$Value.access$000(StoredResponsesMap.java:37) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.StoredResponsesMap.removeEldestEntry(StoredResponsesMap.java:73) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at java.util.LinkedHashMap.addEntry(LinkedHashMap.java:410) ~&#91;na:1.6.0_22&#93; at java.util.HashMap.put(HashMap.java:385) ~&#91;na:1.6.0_22&#93; at org.apache.wicket.protocol.http.StoredResponsesMap.put(StoredResponsesMap.java:95) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.WebApplication.storeBufferedResponse(WebApplication.java:723) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.handler.render.WebPageRenderer.storeBufferedResponse(WebPageRenderer.java:73) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:258) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:139) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:718) ~&#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:63) ~&#91;wicket-request-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:96) ~&#91;wicket-request-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:212) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:138) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:194) &#91;wicket-core-1.5-RC4.2.jar:1.5-RC4.2&#93; at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) &#91;catalina.jar:7.0.12&#93; at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) &#91;catalina.jar:7.0.12&#93;via jmx I could see that only 45 sessions were thereand that the PeakNumberOfActiveRequests was also 45.   ,0
3739,wicket-datetime datepicker fails to display calendar with js error in calendar.js:3225 in IE8       ,0
3740,Scalability issue with PageAccessSynchronizer    Class org.apache.wicket.page.PageAccessSynchronizer uses a global lock (org.apache.wicket.page.PageAccessSynchronizer.semaphore) that is needed e.g. when a new instance of a Page is created or when an instance of a page is retrieved  The lock is global and becomes quickly contented. When testing with two parallel threads  about 20% of all statistical stack samples waited for the lock  with four parallel threads about 50%.The stack waiting for the lock isat org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.getPage(PageAccessSynchronizer.java:187)called either byat org.apache.wicket.Page.dirty(Page.java:327)as part of the Page ctor  or byat org.apache.wicket.DefaultMapperContext.getPageInstance(DefaultMapperContext.java:117)when retrieving page.Some threads' stacks:waiting on (a java.lang.Object@0xHEXADDR)at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.getPage(PageAccessSynchronizer.java:187)at org.apache.wicket.DefaultMapperContext.getPageInstance(DefaultMapperContext.java:117)at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:246)at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:159)at org.apache.wicket.request.handler.ListenerInterfaceRequestHandler.getPage(ListenerInterfaceRequestHandler.java:89)at org.apache.wicket.request.handler.ListenerInterfaceRequestHandler.respond(ListenerInterfaceRequestHandler.java:141)at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:718)at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:63)at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:212)at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253)at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:138)at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:194)....at java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)at org.apache.wicket.markup.html.WebPage.&lt;init&gt;(WebPage.java:99)at x.y.z.page.base.Page.&lt;init&gt;(Page.java:100)at x.y.z.page.base.ControllerBasedPage.&lt;init&gt;(ControllerBasedPage.java:41)....at java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)at org.apache.wicket.markup.html.WebPage.&lt;init&gt;(WebPage.java:99)at x.y.z.page.base.Page.&lt;init&gt;(Page.java:100)at x.y.z.page.base.ControllerBasedPage.&lt;init&gt;(ControllerBasedPage.java:41)at x.y.z.page.NavigationAndContent.&lt;init&gt;(NavigationAndContent.java:43)at x.y.z.page.MailDetail.&lt;init&gt;(MailDetail.java:84)x.y.z.page.login.Login.&lt;init&gt;-wicket.Page.&lt;init&gt;-wicket.page.PageAccessSynchronizer.lockPage-WAIT_FOR_LOCKat java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)at org.apache.wicket.markup.html.WebPage.&lt;init&gt;(WebPage.java:99)at x.y.z.page.base.Page.&lt;init&gt;(Page.java:100)at x.y.z.page.login.Login.&lt;init&gt;(Login.java:23).....at java.lang.Object.wait(Native Method)waiting on (a java.lang.Object@0xHEXADDR) at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202)....at java.lang.Object.wait(Native Method)at org.apache.wicket.page.PageAccessSynchronizer.lockPage(PageAccessSynchronizer.java:119)at org.apache.wicket.page.PageAccessSynchronizer$1.touchPage(PageAccessSynchronizer.java:194)at org.apache.wicket.Page.dirty(Page.java:327)at org.apache.wicket.Page.init(Page.java:770)at org.apache.wicket.Page.&lt;init&gt;(Page.java:223)at org.apache.wicket.Page.&lt;init&gt;(Page.java:202).....   ,0
3744,Add RestartResponseException constructors to specify a RedirectPolicy    Since Wicket 1.5 uses RedirectPolicy.AUTO_REDIRECT  it would be good to be able to specify an explicit other policy.We often use this in cases we need to redireect  even though the AUTO_REDIRECT might choose not to do so (the reason being to transport cookies/new session to the user between those requests). Also in some rare cases we need to force a NEVER_REDIRECT for a certain page in order to keep the URL as is.It would be great if there were overloaded constructors to specify the RedirectPolicy for the RenderPageRequestHandler.   ,0
3758,throw new RestartResponseAtInterceptPageException is not serializable    throw new RestartResponseAtInterceptPageException gives:org.apache.wicket.RestartResponseAtInterceptPageExceptionERROR - Error serializing object class org.apache.wicket.markup.html.pages.ExceptionErrorPage [object=&#91;Page class = org.apache.wicket.markup.html.pages.ExceptionErrorPage  id = 1  render count = 1&#93;]org.apache.wicket.util.io.SerializableChecker$WicketNotSerializableException: Unable to serialize class: org.apache.wicket.request.flow.ResetResponseException$ResponseResettingDecoratorField hierarchy is: 1 &#91;class=org.apache.wicket.markup.html.pages.ExceptionErrorPage  path=1&#93; private final java.lang.Throwable org.apache.wicket.markup.html.pages.ExceptionErrorPage.throwable &#91;class=org.apache.wicket.RestartResponseAtInterceptPageException&#93; private final org.apache.wicket.request.IRequestHandler org.apache.wicket.request.RequestHandlerStack$ReplaceHandlerException.replacementRequestHandler &#91;class=org.apache.wicket.request.flow.ResetResponseException$ResponseResettingDecorator&#93; &lt;----- field that is not serializable   ,0
3759,Touch the page only when it is just read from the page store    Currently PageProvider#getPageInstance() 'touches' the page for each call  i.e. schedules it to be persisted at the end of the request life. This always goes to PageAccessSynchronizer#touchPage() and respectively #lockPage().With the suggested patch this will be done at most once per PageProvider#getPage().This change causes some tests related to error pages to fail. The problem is that ALWAYS_REDIRECT is used for error pages thus REDIRECT_TO_RENDER strategy which expects the page to be stored before the redirect. Changing it to AUTO_REDIRECT leads to the default REDIRECT_TO_BUFFER to be used and the problem is solved because the response is buffered in the special map and the page is not needed after the redirect.   ,0
3761,unexpected order of head contributions    when markup uses w-head contribution for static scripts&lt;wicket:head&gt; &lt;script type='text/javascript' src='http://link.from.markup/h.js' &gt;&lt;/script&gt;&lt;/wicket:head&gt;and then component adds something dynamically in renderHead@Override public void renderHead(IHeaderResponse response) { super.renderHead(response); response.renderJavaScriptReference('http://link.from.renderheadmethod/body.js'); }the dynamic link comes first and therefore does not work  repro case attachedExpected: that programmatic contributions use after ones from markup   ,0
3774,html file are not encoding to utf-8    The file SignOutPage_fr.html (all html file) is not properly encoding to utf-8  the accent 'D�_�_�connexion' is not display correctly on browser.   ,0
3780,Warning text outdated in InheritedMarkupMarkupLoader    ' Enable debug messages for org.apache.wicket.util.resource.Resource to get a list of all filenames tried.');--&gt; org.apache.wicket.util.resource.Resource no longer exists. Looks like it has been renamed to org.apache.wicket.util.resource.locator.ResourceStreamLocator.   ,0
3781,Differentiate Google Chrome from Safari in wicket-xyz.js    Currently Google Chrome is treated as Safari in wicket-ajax.js and wicket-event.js.This causes Wicket.replaceOuterHtmlSafari() to be used while Chrome supports Range and ContextualFragment like Gecko browsers.The special code in replaceOuterHtmlSafari() is for older versions of Safari but it is hard to test  so improvements in this area for Safari 5 will be done when Wicket Ajax starts use some JS library.This change is a bit risky because until now Chrome was treated as Safari and we all tested this behavior but I tested all Ajax examples in wicket-examples and my application and everything seems to be OK.   ,0
3785,CheckGroup's model update should be aligned with ListMultipleChoice    Please improve CheckGroup to handle its model updates as ListMultipleChoice does  allowing a model to be notified of changes. See attached patch.   ,0
3788,wicket FileChannelPool has scalability issues    I benchmarked the FileChannelPool  which is used in the pagemanager's DiskStore  against a simple unpooled 'new RandomAccessFile(name  'rw').getChannel()' implementation. The filechannelpool caches 50 handles by default to 50 session diskstore files  and keeps these handles open as long as possible or necessary.The benchmark results are performed from 1 to 8 threads and with active file set size varied. I tested 10  50  60 and 100 active files. To understand the results  FCP stands for the time spent on wicket's FileChannelPool. FC stands for time spent on unpooled FileChannel.The times are the time it took to perform 100000 per thread of the following: open a randomly chosen file from set of active files read a randomly positioned 10k chunk of a simulated session file that is 100000 bytes long (seek to 0 .. 90000 and then read 10000 bytes) close fileResults for 10 files: FCP: 79 161 318 481 763 1239 1355 1423 ms FC: 531 660 848 859 1141 1285 1372 1509 msResults for 50 files: FCP: 82 165 323 516 756 1248 1560 1587 ms FC: 529 666 800 851 1150 1268 1389 1490 msResults for 60 files: FCP: 219 857 2535 3669 4584 5641 6443 7235 ms FC: 520 639 901 1034 1196 1314 1501 1559 msResults for 100 files: FCP: 471 3588 5989 7814 10048 11790 13580 15130 ms FC: 547 667 903 1093 1195 1388 1446 1603 msBonus result: near worst case behavior of filechannelpool of just 10 cached channels and 100 files active set: FCP: 744 4669 8182 11295 14934 17799 21959 24964 ms FC: 549 681 905 1112 1338 1383 1440 1564 msDiscussion of the results: it appears that there is little difference in performance on the unpooled file channel for any active set size. This is not unexpected: there are no synchronization points and the kernel doesn't much care either way  because all these files together only took 100 * 100k of memory  or about 10 MB &#8211; easily cached entirely in my 4 GB. However  the FileChannelPool shows significant performance degradation as soon as the active set exceeds the pool's size. It seems to perform order of magnitude worse with 100 files as opposed to 50  indicating that wicket websites may suffer rapid performance degradation under load. In case the number of active sessions is much larger than the pool  the very worst behavior is simulated as the last result.FileChannelPool's key problem is that it optimizes performance for the lightly loaded case  and actually harms performance when load gets higher. The harm is not much &#8211; in the worst case  only something like 29 microseconds per request &#8211; but the best case win isn't great either  about 5.6 microseconds per request (10 files  1 thread). In the interests of simplifying pageStore  I propose deleting FileChannelPool entirely.   ,0
3793,ModalWindow shows 'Page Expired'    A simple ModalWindow containing a WebPage opened by an AjaxLink shows 'Page Expired' instead of the desired page contents. Downgrading to 1.4.17 makes the problem disappear. See the attached quickstart.   ,0
3794,Simplify BrowserInfoPage by using InterceptData    http://localhost:8080/hellobrowser/ application is broken in current trunk.The problem is that it calculates the 'continueTo' url too soon (before render time) and the generated url is wrong relative to the URL of the page that is going to be rendered.The whole concept can be greatly simplified by using org.apache.wicket.RestartResponseAtInterceptPageException.   ,0
3797,Remove duplicated resource resolution logic    PackageResourceReference#lookupStream( locale  style  variation) and ResourceNameIterator duplicates the path sufix logic used to resolve the resource   ,0
3799,Prevent ResourceNameIterator from iterate the same name twice    To reproduce: public void test() { String path = 'test_patch.test_extension'; String style = null; String variation = 'var'; Locale locale = Locale.getDefault(); String extensions = null; boolean strict = false; ResourceNameIterator resourceNameIterator = new ResourceNameIterator(path  style  variation  locale  extensions  strict); while (resourceNameIterator.hasNext()) { System.out.println(resourceNameIterator.next()); } }   ,0
3814,Localizer.get() should be static    org.apache.wicket.Localizer offers a get() method but it is not static.   ,0
3815,LinkType inner class is duplicated    Both o.a.w.markup.html.tree.BaseTree and o.a.w.extensions.markup.html.tree.DefaultAbstractTree classes define the same LinkType inner class. Imho this duplication should be removed.   ,0
3822,some jmx values are not working since they require wickets filter environment (application  session  etc.)       ,0
3832,RequestLogger doesn't log incoming event and outgoing page    The requestlogger currently doesn't log the incoming request and the outgoing page  which it did in 1.4.x (and earlier). This is due togetRequestLogger().logEventTarget(handler);getRequestLogger().logResponseTarget(handler);not being called. This results in log entries like:&#91;2011-06-22 11:43:20 836&#93; &#91;TP-Processor6&#93; RequestLogger | time=12 event=null response=null sessioninfo=...which isn't saying much  and making every presentation I gave on the RequestLogger  and chapter 14 from WiA look foolish   ,0
3834,WicketTester does not follow absolute redirects    Wicket tester does not follow absolute redirects:This is a problem when using HttpsMapper. For example when requesting a page over http:// with an forced redirect to https:// for secure access will make wicket tester return 'null' for the last renderer page instead of the rendered page instance. In general all kinds of absolute redirects to another page will not be tracked by wicket tester. So this potentially a problem for all kinds of tests that rely on absolute redirects.   ,0
3838,In wicket 1.5 urlFor returns incorrect string for package mounted pages    Attached two quickstart projects for 1.4 and 1.5.Then access http://localhost:8080/app/Page1 and see 1.5 returns wrong address.   ,0
3842,The wicket:enclosure attribute doesn't work properly    When the hidden child becomes visible again  it fails to appear on the page. The same thing works correctly with the wicket:enclosure tag.Example code:public class TestPage extends WebPage { public TestPage() { final Label l = new Label('msg'  'hi'); add(l); add(new Link&lt;Void&gt;('b') { private static final long serialVersionUID = 1L; @Override public void onClick() { l.setVisible(!l.isVisible()); } }); }}TestPage.html:&lt;html xmlns:wicket&gt;&lt;body&gt;&lt;div wicket:enclosure='msg'&gt;&lt;span wicket:id='msg'&gt;&lt;/span&gt;&lt;/div&gt;&lt;input type='button' value='Toggle' wicket:id='b'&gt;&lt;/body&gt;&lt;/html&gt;   ,0
3846,in environments without reliable timestamps (e.g. some clusters) resource caching is useless    As mentioned already in the wicket userlist iirc wicket's default resource caching strategy using resource file timestamps will not work in some cluster environments. Cluster deployers seem to be quite dumb and not preserve the 'lastModified' file attribute. So depending on the server instance the resource is delivered from it will contain multiple timestamps for the same resource. Apparently timestamps seem to be unsuitable for the purpose of caching in that environment.   ,0
3847,Modal window won't show in internet explorer document mode 8    Plain modal window won't show after revision 1135146  WICKET-3782 Notifications before and after DOM node replacement (...) using Internet Explorer 9 in document mode quirks  7 and 8. Works in document mode 9  Opera 11.11  Chrome 13.0.782.32 beta-m  Firefox 3.6.18 and 5.0Seems like the lines:var newElement = Wicket.$(element.id);Wicket.Event.publish('/dom/node/added'  newElement);the 2nd time they run  element.id = ''  which makes Wicket.$ (document.getElementById('')) crash  and an 'ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: &#91;object Error&#93;' is logged to the Wicket ajax debug window.Quick workaround: Somewhere in your code  include the following script: &lt;script type='text/javascript'&gt; oldFu = Wicket.$; Wicket.$ = function(arg) { if (arg == null || typeof(arg) == 'undefined' || arg == '') { return null; } return oldFu(arg); }&lt;/script&gt;Where the difference to the original $ function is the arg=='' check   ,0
3852,make PropertiesFactory easier to use outside of wicket scope    In relation to WICKET-3850  it'd be nice if PropertiesFactory didn't rely on Application at all  but rather on the only part of the Application it uses: IResourceSettings.   ,0
3860,StoredResponsesMapTest Random.nextInt takes only positive integer arguments  not 0    In the test StoredResponsesMapTest the line: String key2 = keys.get(rnd.nextInt(keys.size() - 1));has a problem since the integer argument to Random.nextInt can not be 0  but the keysList has size 1.   ,0
3861,AbstractTransformerBehavior sets wrong namespace    AbstractTransformerBehaviour adds a wicket namespace (http://wicket.apache.org) to its tag which is different from that of the whole page (http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd).This causes (at least) XPath queries for Wicket nodes to fail when matching the contents of components with an AbstractTransformerBehavior.   ,0
3867,URIs should be used instead of URLs as Set or Map keys.    URLs are not suitable for use as Set or Map keys because their equals() and hashCode() methods are not well defined. URIs should be used to identify the location and URLs to access the actual resources.See thread for http://mail-archives.apache.org/mod_mbox/wicket-users/201107.mbox/%3CCAPdiUN6CaH9rn4+tD9_hXP-dmBGn-SvFu=RvCMh8AYx5_1JkkA@mail.gmail.com%3ESpecifically:&#91;1&#93; 'More Joy of Sets' example with URL from Google Tech Talks:http://www.youtube.com/watch?v=wDN_EYUvUq0#t=9m58s   ,0
3873,Allow validators to detach by mixing in IDetachable       ,0
3880,Reference to a non-existing images causes IllegalStateException 'ResourceResponse#setWriteCallback() must be set.'    A Page containing a PackageResourceReference to a nonexisting image fails with an Illegalstateexception. Debugging through the code reveals that hust before this exception a 404 HTTP Code ist set. This 404 gets hidden by the exception.I could not script a unittest for this problem  but it is easily reproduced in my browsers (Firefox 4  IE 8). A page class and html will be attached   ,0
3885,setResponsePage in AjaxLink goes always to localhost:8080 instead to the right host and port    setResponsePage in an AjaxLink in Wicket 1.4 redirects with a relative path to the response page.Wicket 1.5 takes the absolute path 'localhost:8080/path to the response page' even when the host and port are different.(e.g. with Apache2 a virtual host is created with server name www.mycompany.com  setResponce wil go to 'localhost:8080/path to page' instead of 'www.mycompany.com/path to page')   ,0
3887,Problems concerning IE9 with 'ActiveX Filtering' enabled    Internet Explorer 9 contains a new feature to block all ActiveX content by default: http://ie.microsoft.com/testdrive/Browser/ActiveXFiltering/About.html If the feature is enabled  all ActiveX controls are blocked silently. With Wicket this currently results in a lot of JavaScript content (but not all of it) being blocked as well. The user can allow an exception by clicking on a small icon in the address bar  however  he usually will be only able to do so  if he knows exactly what causes the problem.A user who enabled the feature himself might still see what is wrong  but the feature can be also enabled in a domain policy  which might make solving the problem much more difficult and have adverse effects on customers.The reason that some JavaScript content is blocked along with blocking ActiveX elements is the usage of window.ActiveXObject:wicket-ajax.js:&gt;if (window.ActiveXObject) { &gt; transport = new ActiveXObject('Microsoft.XMLHTTP'); &gt; Wicket.Log.info('Using ActiveX transport'); &gt;} else if (window.XMLHttpRequest) { &gt; transport = new XMLHttpRequest(); &gt; Wicket.Log.info('Using XMLHttpRequest transport'); &gt;}According to  http://blogs.msdn.com/b/ie/archive/2011/05/02/activex-filtering-for-developers.aspx the usage of this pattern is not advisable and the order should be changed to:&gt;// Best Practice: Use Native XHR  if available&gt;if (window.XMLHttpRequest) {&gt; // If IE7+  Gecko  WebKit: Use native object&gt; var xmlHttp = new XMLHttpRequest();&gt;}&gt;else if (window.ActiveXObject) {&gt; // ...if not  try the ActiveX control &gt; var xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');&gt;}The problem is reported to be fixed in JQuery 1.5.1  for instance.   ,0
3891,in development mode Wicket stops picking up markup changes    I have wicket application running via mvn jetty:run under JRebel to facilitate code hotswap.With 1.5RC5.1 Wicket does not pick markup changes unless I change requested version  and it still put version on URL even I have getPageSettings.setVersionPagesByDefault(false);   but that is a minor inconvenience.More annoying that after awhile Wicket stops picking up changes in the markup of components used on my page. I mean that I can change markup for my components and it gets reflected upon page refresh (with requesting non existent version)  but at some point it stops  changes to the markup of subcomponents are not picked up.That forces me to restart application  which is major productivity killer....   ,0
3892,Modal window does not show the right page    1.5-RC5.1 is OK  I noticed it with version 1145888 on trunk.When ModalWindow displays a page (panel is OK)  it displays the home page instead of the right page.   ,0
3897,renderCSSReference doesn't work with mountPage('/')    response.renderCSSReference(new PackageResourceReference(BasePage.class  'BasePage.css'));will correctly render the css reference if the page is not mounted or if it is mounted to a location other than '/'. However if I mount the page to '/' using WebApplication.mountPage() then the css reference doesn't work.   ,0
3906,PageParameters#set not follow INamedParameters#set behavior    Couple of problems to work with page parameters:Major - The PageParameters#set(final String name  final Object value  final int index) used remove/add pattern instead of set parameter value by specified index.Minor - Inposible to get the index of key in elegant way to use obtained index in #set operation   ,0
3908,Encoding problem with POSTing a form with Ajax    The form is always posted using Ajax in UTF-8  but if you're using a different encoding in the DB or the HTML aswell  the string is ugly obviously. Wicket should convert from UTF-8 to the given encoding (detecting from getMarkupSettings().setDefaultMarkupEncoding('...'); or getRequestCycleSettings().setResponseRequestEncoding('...'); or an other settings parameter which could be given to wicket)I'm attaching a quickstart project which demonstrate this issue by echoing back the string given to a textarea.   ,0
3909,Encoding problem with JavaScriptRefrences    Let we have a javascript which contains some strings (which eventually should be appended to DOM)  and let we have a page in different encoding from UTF-8  like ISO-8859-2. The anomaly is the following: If the encoding of the JS is UTF-8  then the Ajax query which injects the JS is working OK. The injected string looks like it should be  no magic chars. But if we don't use the JS from Ajax  but plain request  then the string is ugly because JS is in UTF-8  but the page is in ISO-8859-2. If the encoding of the JS is the same as the Page then the response of the Ajax request will be ugly  but the plain non-ajax will be OK.   ,0
3912,SCRIPT tags in Ajax-Response are not evaluated in Chrome    if a JavaScript script tag is added to AjaxRequestTarget (by Behavior via JavaScriptUtils.writeJavaScript)  it is not evaluated on Chrome browser. While debugging through wicket-ajax.js  it turns out  that replaceOuterHtmlSafari function is not called for Chrome  but the Gecko version gets executed instead (fall to '} else /* GECKO */ {' in Wicket.replaceOuterHtml). And the Gecko version does not do any special handling of SCRIPT tag  since Firefox does execute SCRIPT nodes added dynamically to the DOM. This behavior occurs since 1.5-RC5.1.There is a quickstart webapp attached to this ticket. HomePage contains a Label with Behavior attached and an AjaxLink. Behavior add a JavaScript showing alert message. It is shown once the page is loaded and once the ajax link is clicked. In Chrome there is not alert message after clicking the ajax link.   ,0
3916,FilterForm#enableFocusTracking(FormComponent) method uses ComponentTag#put(String CharSequence) with key='id' which gives a warning in Wicket 1.5    A warning 'Please use component.setMarkupId(String) to change the tag's 'id' attribute.' is issued every time the component is rendered as the put(String  CharSequence) method on ComponentTag is called with 'id' as a key.To get rid of the warning message the FilterForm#enableFocusTracking(FormComponent) should be updated according to the warning message.   ,0
3917,NPE with RequestLogger enabled and Https    There is a wicket application with https enabled: setRootRequestMapper(new HttpsMapper(getRootRequestMapper()  new HttpsConfig()));The RequestLogger is also enabled:  getRequestLoggerSettings().setRequestLoggerEnabled(true);The bug can be reproduced by:1. Try to access the page with 'localhost/h' (deliberately excluding the https protocol prefix).2. A NPE is thrown:java.lang.NullPointerException at org.apache.wicket.protocol.http.RequestLogger.getRequestHandlerString(RequestLogger.java:532) at org.apache.wicket.protocol.http.RequestLogger.getDelegateString(RequestLogger.java:574) at org.apache.wicket.protocol.http.RequestLogger.getRequestHandlerString(RequestLogger.java:556) at org.apache.wicket.protocol.http.RequestLogger.logEventTarget(RequestLogger.java:513) at org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener.registerHandler(RequestLoggerRequestCycleListener.java:119) at org.apache.wicket.protocol.http.RequestLoggerRequestCycleListener.onRequestHandlerResolved(RequestLoggerRequestCycleListener.java:64)   ,0
3918,NPE when requesting http://example.com/app/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/    When requesting the following URL  the default caching strategy throws a NullPointerException and this is logged. This request is performed by some spider agent of Microsoft (trying to kill Wicket!) with user agent 'Microsoft Office Protocol Discovery':Url=http://example.com/app/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow/res/java.lang.NullPointerException: caching strategy must not return an empty filename at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.mapRequest(BasicResourceReferenceMapper.java:102) at org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapRequest(ParentPathReferenceRewriter.java:83) at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:129) at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:183) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:208) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:253) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:160) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:216)A couple of points: the exception should log which strategy caused the empty filename the exception might want to log the requested URL for the resource perhaps a NullPointerException is not the best exception to throw  but rather something that results in a 404 or a 403 maybe not even throwing an exception is the best way to handle this case  instead rely on the container or another mapper to take the lead?   ,0
3926,CryptoMapper does not correctly decrypt URLs for the home page    I proposed a solution for WICKET-3514  which I had been using myself. I didn't notice that it was incorporated into Wicket. This patch represents a bug fix I made to the new CryptoMapper which is not in Wicket.Encrypted URLs for the home page (where the unencrypted URL is something like '?4' - no segments  just parameters) are not correctly decrypted.   ,0
3937,Improve AJAX FunctionsExecutor robustness with try/catch    The attached patch improves wicket-ajax.js by executing its 'step' functions in a simple try/catch. This ensures that issues like WICKET-3820 don't fail catastrophically (leaving the channel busy).This poster might have had a similar failure.http://apache-wicket.1842946.n4.nabble.com/Re-Captcha-with-WiQuery-ButtonBehavior-causes-quot-Channel-busy-postponing-quot-td3679429.html   ,0
3948,IResourceCachingStrategy is too much bound to PackageResource  make it more general    Somebody recently complained on the wicket userlist that IResourceCachingStrategy is not very versatile but only useable for PackageResources. I 100% agree would like to generalize the caching part by introducing the interface 'ICacheableResourceReference' (instead of referring to PackageResource). This makes it easy to use caching for other resource types. Since we are so close to 1.5 I would like to ask first if the patch is acceptable by you.   ,0
3962,the wrong option in select components is rendered (Combination of reusing panels and defaultFormProcessing==false)    We are reusing a panel (let's say a PersonPanel  two instances). There is a forward / back ajax-navigation between the panels  which is implemented with component.replace. So the component path for the select of both panels are the same. The back-function is implemented with setDefaultFormProcessing(false). If now showing PersonPanel1 --&gt; Forward --&gt; PersonPanel2 --&gt; Back --&gt; PersonPanel1 --&gt; Forward --&gt; PersonPanel2  the selects of the panel 2 are showing the values of panel1.The Reason:In the 'Select.isSelected(...)' the getInputAsArray() is used (instead of the getRawInput()). So request parameters are overruling the raw input  if the component path is the same.Wicket-Code:if (hasRawInput()) { String[] paths = getInputAsArray();I think  instead of calling getInputAsArray() the getRawInput()(With a split for the MultiSelect-support) should be used.   ,0
3965,A (stateless) page immediately disappears after the first render    Using setResponsePage(new SomeStatelessNonBookmarkablePage(aParameter)) renders the page but trying to reload the page in the browser fails with PageExpiredException.The reason is that the page is stateless and thus it is not saved in the page stores. Since it was scheduled for render with setResponsePage(Page) method its Url is created by PageInstanceMapper (i.e. something like: wicket/page?1). An attempt to refresh such page fails with 'Page with id '1' is not found =&gt; PageExpiredException'.Igor suggested to call 'page.setStatelessHint(false)' for all pages passed to PageProvider(IRequestablePage) constructor  i.e. such pages must be stored.This solved the problem but exposed few more problems: MockPageManager (used in WicketTester) until now always touched/stored pages  no matter their statelessness org.apache.wicket.markup.html.internal.EnclosureTest.testRender10() was wrong for some unknown reason. All expectations against EnclosurePageExpectedResult_10-2.html should not have the enclosure rendered because 'input' component is invisible   ,0
3971,TextTemplateResourceReference should be registered into the ResourceReferenceRegistry because otherwise the next request is served by PackageResourceReference    The title says it all.If the TextTemplateResourceReference is not registered then BasicResourceReferenceMapper receives autocreated PackageResRef which doesn't make variable substitutions.   ,0
3982,Modal Window is not shown in IE8    On examples page http://wicketstuff.org/wicket/ajax/modal-window if you click on 'Show modal dialog with a page' or 'Show modal dialog with panel'  no modal windows will be shown.   ,0
3986,Potential StackOverflowError in SerializableChecker    At line 517 it checks if 'streamObj' has already been checked  but at 522 it puts 'original' in the map. I don't know what's needed to reproduce it  but wicket-weld triggered it for me. You probably need a class with custom serialization which tries to serialize itself recursively. Changing line 522 to 'streamObj' fixed it for me.   ,0
3988,Make AbstractMapper.getPlaceholder and similar methods as public methods    Playing with mappers and Scala I found that because of Scala's limitation  there's no way to call protected static methods even from subclasses.Thinking about Wicket-Scala interoperability  I think that these methods could be changed to public or to non-static methods.There's no gain nor design reason to leave these methods as protected static  IMO.   ,0
3991,SignInPanel prevents the page being Stateless when signing in with the 'rember me' facility.    This worked fine with 1.5-RC5  so I think it is a regression. Start the webapp ( mvn clean jetty:run ) Log-in with remember me checked. Stop the webapp restart it ( mvn clean jetty:run ) The browser should re-log-on and wicket will throw a RuntimeException. If you refresh the browser  you are properly logged-on.See the attached quickstart.   ,0
4009,Page Lock on Browser Back Button after Page Expiry    In the attached quickstart  after page expiry and browser back navigation  a server error occurs such as:'failed to acquire lock to page 0  attempted for 1 minutes out of allowed 1 minute'This appears to be related to request logging  but I have seen other strange errors without request logging such asorg.apache.wicket.request.handler.ComponentNotFoundException: Could not find component 'form' on page 'class web.page.ExpiredPagealso with browser history back navigation.I have seen none of these errors in Wicket 1.4. I guess the reason for not having seen this before it that http cache headers are different in 1.5.   ,0
4010,SignInPanel may lead to infinite redirects if there is rememberMe cookie with outdated data    quickstart4.zip from WICKET-3991 shows that having outdated 'RememberMe' data in the cookie may lead to infinite loop: SignInPanel#onBeforeRender() -&gt; signIn(oldCredentials) -&gt; go to SignInPage -&gt; try to load SignInPanel again.   ,0
4014,Wicket 1.5 Form Post Action and Link Get discard Page Class Information    Page expiry is a very annoying and perplexing event especially if users stay logged in via remember-me cookie.It is therefore not a fancy enhancement but an essential business requirement to not drop the user out of context after session expiry.Only stateless pages can fully achieve this  but it is not always desirable to go fully stateless  especially while a recovery solution already exists.In 1.4  this appears to be automatic with BookmarkablePageRequestTargetUrlCodingStrategy - without any additional coding.The solution is well known - keep as much state in the client as required to recover the page class  and possibly even its page parameters  and to not destroy this information.The two attached testcases show two possible methods of page fallback recovery (one with AJAX  one without) that already work behind the scenes.Of course it is easy with AJAX  to just force a page reload  but this is not discussed here. AJAX just serves to demonstrate how easy the principle actually is.In most cases the user could successfully reload the page but Wicket 1.5 can't create a response because it has forgotten the class of the expired page.In 1.4  it is possible to recover the class of an expired page via its mount path.This feature is lost in 1.5.To get this functionality back in a more streamlined fashion  I am additionaly proposing in a separate jira issue 4013 to store page class and page parameters in PageExpiredException.Meanwhile  the focus of this issue is to request whatever means to not overwrite the path of a page in a form post action or get request  and to get the page class back as in 1.4 by whatever means.The two attached testcases may be helpful for expermintation. The 1.4 tescase demonstrates how the scheme works  unfortunately I could not fill the blanks in the 1.5 testcase.In 1.4 a form tag is rendered as:&lt;form wicket:id='form' action='?wicket:interface=:0:form::IFormSubmitListener::'This is requested as:/testForm.0?wicket:interface=:0:form::IFormSubmitListener::and the page class can be recovered from the mount path 'testForm' as in mount(new HybridUrlCodingStrategy('testForm'  TestPageForm.class));an anchor tag is rendered as:&lt;a href='?wicket:interface=:0:linkSwitch::ILinkListener::'This is requested as:/testLink.0?wicket:interface=:0:linkSwitch::ILinkListener::and the page class can be recovered from the mount path 'test' as in mount(new HybridUrlCodingStrategy('testLink'  TestPageLink.class));In 1.5 a form tag is rendered as:&lt;form wicket:id='form' action='wicket/page?0-2.IFormSubmitListener-form'This is requested requested as:/wicket/page?0-1.IFormSubmitListener-formThis overwrites the mount path 'testForm' as in mountPage('testForm'  TestPageForm.class);Consequently the server cannot discover the page classan anchor tag is rendered as:&lt;a href='wicket/page?0-1.ILinkListener-linkSwitch'This is requested requested as:/wicket/page?0-1.ILinkListener-linkSwitchThis overwrites the mount path 'testLink' as in mountPage('testLink'  TestPageLink.class);Consequently the server cannot discover the page class   ,0
4016,MarkupContainer.toString(true) fails with MarkupNotFoundException if the call is made in the component constructor    org.apache.wicket.MarkupContainer.toString(boolean) uses 'if (getMarkup() != null)' to decide whether to write something for the markup but since recently Component#getMarkup() throws MarkupNotFoundException when there is no markup and doesn't return null.   ,0
4023,Please Allow AjaxLink to use getChannelName    Please allow AjaxLink to provide an empty getChannelName() that is called by its internal AjaxEventBehavior  so that Ajax-Channels can be used withoutoverriding the whole behavior.I know  not all methods should be provided and I also know its possible to override the AjaxEventBehavior  but an AjaxLink should at least provide the Possibilityto assign it to a specific Channel.THanks..   ,0
4032,ComponentStringResourceLoader must not include the index of repeater items in resource lookup but still resolve properties to them    Issue when using a StringResourceModel to lookup a resource for a component underneath a repeating view.When a StringResourceModel is used by a component under a repeating view  the ComponentStringResourceLoader doesn't find the resource.This seems to be a problem introduced by the fix for 3671.In ComponentStringResourceLoader  getResourcePath excludes all AbstractRepeaters  however getComponentStack doesn't leading to the two being out of sync for the elements of the component hierarchy under the repeating view.   ,0
4040,Fix Javadoc in SimpleAttributeModifier.       ,0
4053,AbstractTree#updateTree(AjaxRequestTarget target) is invoked even when request is non-ajax    I came across an issue when trying to get Brix working in wicket 1.5.It occurs when the Tree has: setLinkType(LinkType.REGULAR);Caused by: java.lang.IllegalArgumentException: Argument 'target' may not be null. at org.apache.wicket.util.lang.Args.notNull(Args.java:39) at org.apache.wicket.markup.html.tree.AbstractTree.updateTree(AbstractTree.java:1138) at org.apache.wicket.markup.html.tree.LinkIconPanel.onNodeLinkClicked(LinkIconPanel.java:82) at org.apache.wicket.markup.html.tree.LinkIconPanel$1.onClick(LinkIconPanel.java:59) at org.apache.wicket.markup.html.tree.BaseTree$5.onClick(BaseTree.java:386) at org.apache.wicket.markup.html.link.Link.onLinkClicked(Link.java:187)I only had a quick search across the wicket codebase to see if this method is called elsewhereTo fix LinkIconPanel line 82 should beif (target != null) {tree.updateTree(target);}BaseTree - line 294 also calls updateTree(target) with no null check.   ,0
4054,Memory leakage in browser with AbstractAjaxTimerBehavior    Adding an AbstractAjaxTimerBehavior to a page causes the browser (tested on Firefox and Chrome) to leak memory. More noticeable with a short update interval (I have been using 1 second). It is not as bad in the beginning  but gradually gets worse  eventually increasing memory usage by over 1MB per request.   ,0
4055,LocaleFirstMapper does not strip Locale from url in getCompatibilityScore()    LocaleFirstMapper delegates the call to getCompatibilityScore() to the chained IRequestMapper without stripping the locale from the url.Since most request mappers generate a compatibility score by counting the number of matching segments from the start of the url  they will mostly return a score of 0.Practically this means that all request mappers behind the LocaleFirstMapper stop responding to urls.   ,0
4067,Register devutils only if IDebugSettings#isDevelopmentUtilitiesEnabled() is true       ,0
4068,Assume that form.onsubmit() without explicit return value means that submit should proceed    If &lt;form&gt;'s onsubmit handler doesn't return a boolean value that specifies whether the form submit should actually happen then assume that it should happen.   ,0
4071,AjaxIndicatorAppender removes itself immediately when added via ajax    When addding/replacing IndicatingAjaxLink's using ajax in Wicket 1.5.0 it's indicator markup is directly removed when parsing the ajax response. The AjaxIndicatorAppender renders a bit of javascript to the response (when it is an ajax request) to remove previous indicators from the dom (see issue WICKET-722) but in 1.5.0 the execution order of the javascript is different  causing the indicator markup to be added first and the javascript to remove previous versions of the indicator to be run next and thus removing the newly added indicator.De ajax debug windows shows that the component is replaced first and then the javascript is run. In 1.4.18 ajax logging shows the javascript run first and then the component gets replaced  resulting in correct behavior.   ,0
4073,Wicket quickstart advertise HTTPS but it doesn't work when started with jetty:run    The pregenerated 'keystore' is put in src/test/resources and thus is not in the classpath when started with 'mvn jetty:run'. This leads to a broken link in the home page of the quickstart.We should either move the keystore file or disable the link when HTTPS is not enabled.   ,0
4076,INamedParameters.getAllNamed() returns a list of NamedPairs defined as inner class of PageParameters    In an attempt to create my own implementation of PageParameterEncoder and PageParameters  I encountered the following problem with the API:The interface INamedParameters defines the method getAllNamed() that returns a list of NamedPairs defined as inner class of PageParameters .I believe that an interface shouldnt be referencing any element from an implementation to be a true extensible interface.   ,0
4077,Error detaching RequestCycle listener after serialization failure    Error detaching RequestCycle listener is produced after org.apache.wicket.serialize.java.JavaSerializer.serialize(Object) returns null.Below is the stacktrace of the error:20-09-2011 16:46:44 875 ERROR org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify:105 - Error detaching request cycle listener: org.apache.wicket.Application$2@b45ad3djava.lang.IllegalArgumentException: Argument 'data' may not be null. at org.apache.wicket.util.lang.Args.notNull(Args.java:39) at org.apache.wicket.pageStore.AsynchronousDataStore$Entry.&lt;init&gt;(AsynchronousDataStore.java:271) at org.apache.wicket.pageStore.AsynchronousDataStore.storeData(AsynchronousDataStore.java:215) at org.apache.wicket.pageStore.DefaultPageStore.storePageData(DefaultPageStore.java:115) at org.apache.wicket.pageStore.DefaultPageStore.storePage(DefaultPageStore.java:144) at org.apache.wicket.page.PageStoreManager$PersistentRequestAdapter.storeTouchedPages(PageStoreManager.java:377) at org.apache.wicket.page.RequestAdapter.commitRequest(RequestAdapter.java:171) at org.apache.wicket.page.AbstractPageManager.commitRequest(AbstractPageManager.java:94) at org.apache.wicket.page.PageManagerDecorator.commitRequest(PageManagerDecorator.java:68) at org.apache.wicket.page.PageAccessSynchronizer$2.commitRequest(PageAccessSynchronizer.java:213) at org.apache.wicket.Application$2.onDetach(Application.java:1552) at org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify(RequestCycleListenerCollection.java:101) at org.apache.wicket.request.cycle.RequestCycleListenerCollection$3.notify(RequestCycleListenerCollection.java:97) at org.apache.wicket.util.listener.ListenerCollection.reversedNotify(ListenerCollection.java:121) at org.apache.wicket.util.listener.ListenerCollection.reversedNotify(ListenerCollection.java:112) at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onDetach(RequestCycleListenerCollection.java:95) at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:542) at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:481) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:257) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:185) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:151) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:405) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:269) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:515) at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:662)   ,0
4079,Provide new HybridPageParametersEncoder class for backwards compatibility with pre 1.5.x Hybrid URL encoding    Any 1.4 app that has been live for a while would likely have a collection of links pointing to it from external sites on the web. You really want the Wicket 1.5 version of your app to be able to handle any existing hybrid style links without generating an error.The links are in the style:/myPage/paramName1/paramValue1/paramName2/paramValue2When migrating to 1.5  without a 1.4 compatible IPageParametersEncoder implementation  you need to include the full parameter specification in every mount if you want to avoid making changes to each individual Page class that reads parameters. The attached IPageParametersEncoder implementation means that is no longer necessary. All that is needed is to mount your pages as follows:mount(new MountedMapper('/myPage/'  MyPage.class  new HybridPageParametersEncoder());I'm submitting this .java file as a patch so that hopefully it may be included in future 1.5.x versions of Wicket to make it easy to implement backwards compatible URL parameter encoding for other 1.4 migrators.This code is based on a suggestion by luniv on StackOverflow here: http://stackoverflow.com/questions/6154430/how-do-i-mimic-hybridurlcodingstrategy-in-wicket-1-5   ,0
4088,Make Application#init() run after IInitializers to allow the application to override any settings configured by initializers    wicket.properties urls are added to an HashSet  causing the IInitializers to be loaded in random order. In AbstractClassResolver.getResources  the HashSet should be changed to a LinkedHashSet.   ,0
4099,SmartLinkLabel doesn't recognize already tagged links    The SmartLinkLabel works as expected for the texts without &lt;a&gt;..&lt;/a&gt; tag. for text likeextensions @ http://www.wicketframework.org/wicket-extensions/index.html are cool!!SmartLinkLabel generates the html - extensions @ &lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt; are cool!!but for the text likeextensions @ &lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt; are cool!!SmartLinkLabel generates the html - extensions @ &lt;a href='&lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt;'&gt;&lt;a href='http://www.wicketframework.org/wicket-extensions/index.html'&gt;http://www.wicketframework.org/wicket-extensions/index.html&lt;/a&gt;&lt;/a&gt; are cool!!I think this is a bug &amp; needs a fix.   ,0
4111,addDomReadyEvent broken for IE    Wicket.Event.addDomReadyEvent is broken in IE since 1.5.1. I identified WICKET-4080 as the cause of the problem: onreadystatechange with readyState='loaded' is sometimes fired before the document is fully loaded  causing scripts that reference DOM nodes to fail.See http://msdn.microsoft.com/en-us/library/ms534359%28v=vs.85%29.aspx for the order of the readystate events.The attached quickstart reproduces the issue (you may need to F5 a few times as it does not happen reliably). The actual JS error is:SCRIPT5007: The property 'onkeydown' has no value: The object is null or undefinedwicket-autocomplete-ver-1317728550188.js  Line 91 Character 9   ,0
4126,Automatic Image Linking broken for images in base packages    Automatic linking seems to be broken when used in conjunction with base classes and referencing relative images located in a different package.The attached quickstart application contains a base page wicket.bugs.autolink.page.base.BasePage whose HTML references an image located at &lt;BasePage Package&gt;/theme/logo.png: &lt;img src='theme/logo.png' ...&gt;When accessing this page via http://localhost:8080/base the image is rendered as expected.The application contains a second page wicket.bugs.autolink.page.home.HomePage extending the BasePage and that adds a second reference to this image via &lt;img src='../base/theme/logo.png' ...&gt; =&gt; this kind of references used to work in Wicket 1.4When accessing this page via http://localhost:8080/home none of the two images (the one inherited from the base page and the one added) is displayed.The inherited image reference is rendered as: &lt;img src='theme/logo.png' border='1' onclick='window.location.href=&#039;theme/logo.png&#039;;return false;'/&gt; =&gt; theme/logo.png seems not to be an auto link =&gt; I have no idea why an onclick event is rendered by Wicketand the explicitly added image reference is rendered as &lt;img src='wicket/resource/wicket.bugs.autolink.page.home.HomePage/../base/theme/logo-ver-1318516450215.png' /&gt; =&gt; accessing the URL http://localhot:8080/wicket/resource/wicket.bugs.autolink.page.home.HomePage/../base/theme/logo-ver-1318516450215.png results in:WARN - WicketObjects - Could not resolve class &#91;base&#93;java.lang.ClassNotFoundException: base at java.net.URLClassLoader$1.run(URLClassLoader.java:200) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:424) at org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:377) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:242) at org.apache.wicket.application.AbstractClassResolver.resolveClass(AbstractClassResolver.java:110) at org.apache.wicket.util.lang.WicketObjects.resolveClass(WicketObjects.java:68) at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.resolveClass(BasicResourceReferenceMapper.java:143) at org.apache.wicket.request.mapper.BasicResourceReferenceMapper.mapRequest(BasicResourceReferenceMapper.java:120) at org.apache.wicket.request.mapper.ParentPathReferenceRewriter.mapRequest(ParentPathReferenceRewriter.java:83) at org.apache.wicket.request.mapper.CompoundRequestMapper.mapRequest(CompoundRequestMapper.java:130) at org.apache.wicket.request.cycle.RequestCycle.resolveRequestHandler(RequestCycle.java:179) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:204) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:251) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218)   ,0
4134,Localizer.getCacheKey() generating redundant keys for same values causing memory leak.    Note: To reproduce this  just add a breakpoint or a logger in Localizer.addKeyToCache(). After running all pages/scenarios once that method should not be called again. But if it does get called you know that there are redundant keys being produced for the same value.After running a web app for about a day  I will get out of mem exception. With a heap dump I will see most of the memory taken by Localizer  with keys such as:androidapp-10:_wicket_link-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-28-4-4-4-4-4-4-28-52-4-4-76-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-27-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-28-4-4-4-4-4-4-4-30-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-41-4-4-4-4-26-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-41-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4-4...Each of these types of keys are duplicated several thousand times. Here is a snipplet if the report:Found 60 occurrences of char[] with at least 10 instances having identical content. Total size is 401 451 248 bytes.Top elements include:6 454 x androidapp-10:_wicket_link-4-4-4-4-4-4-4-4-4-4-4-4... (15 722 bytes)6 453 x facebook-10:_wicket_link-4-4-4-4-4-4-4-4-4-4-4-4-4... (15 720 bytes)5 866 x home-9:_autolink_5-10:_wicket_link-4-4-4-4-4-4-4-4... (15 720 bytes)5 183 x candidates-9:_autolink_7-10:_wicket_link-4-4-4-4-4... (15 614 bytes)686 x candidates-9:_autolink_8-10:_wicket_link-4-4-4-4-4... (16 567 bytes)   ,0
4141,Automatic Linking in base page broken    Automatic linking used in base pages is broken.The attached quickstart application contains a base page wicket.bugs.autolink.page.base.BasePage which has a relative image reference: &lt;img src='theme/logo.png' border='1' width='50px' height='50px' /&gt;When accessing this page via http://localhost:8080/base the image is rendered as expected.The generated HTML output is: &lt;img src='wicket/resource/wicket.bugs.autolink.page.base.BasePage/theme/logo-ver-1319028241918.png' border='1' width='50px' height='50px'/&gt;The application contains a second page wicket.bugs.autolink.page.home.HomePage extending the BasePage.When accessing this page via http://localhost:8080/home the image inherited from the base page is not displayed.The inherited image reference is rendered as: &lt;img src='theme/logo.png' border='1' onclick='window.location.href=&#039;theme/logo.png&#039;;return false;'/&gt; =&gt; Problem 1: theme/logo.png is not autolinked anymore  it should point to wicket/resource/wicket.bugs.autolink.page.base.BasePage/theme/logo-ver-1319028241918.png =&gt; Problem 2: for some reasons a onclick event is rendered by Wicket I configured the Wicket app with: public void init() { super.init(); getMarkupSettings().setAutomaticLinking(true); getResourceSettings().setParentFolderPlaceholder('$up$'); mountPage('/home'  HomePage.class); mountPage('/base'  BasePage.class); }   ,0
4152,NPE in CachingResourceStreamLocator due to the search in parent's markup in Autolink code    Trying to open http://localhost:8080/mappers/en_US (Request Mapper examples) the following exception is thrown:java.lang.NullPointerException at org.apache.wicket.util.resource.locator.caching.CachingResourceStreamLocator.locate(CachingResourceStreamLocator.java:114) at org.apache.wicket.request.resource.PackageResource.exists(PackageResource.java:442) at org.apache.wicket.markup.resolver.AutoLinkResolver$ResourceReferenceAutolink.&lt;init&gt;(AutoLinkResolver.java:583) at org.apache.wicket.markup.resolver.AutoLinkResolver$AbstractAutolinkResolverDelegate.newPackageResourceReferenceAutoComponent(AutoLinkResolver.java:113) at org.apache.wicket.markup.resolver.AutoLinkResolver$AnchorResolverDelegate.newAutoComponent(AutoLinkResolver.java:483) at org.apache.wicket.markup.resolver.AutoLinkResolver.resolveAutomaticLink(AutoLinkResolver.java:876) at org.apache.wicket.markup.resolver.AutoLinkResolver.resolve(AutoLinkResolver.java:808)..It is caused by my fix for WICKET-4141 from yesterday.   ,0
4154,Add localization resources for DataTable components    Add localization for DataTable components (no records and navigation toolbars)   ,0
4161,AbstractResourceAggregatingHeaderResponse does not order javascript properly    I decided to give AbstractResourceAggregatingHeaderResponse a try but I found a problem in its design that  I think  makes it unusable.How it works:1-the IHeaderResponse#renderJavaScriptReference(ResourceReference) methods are intercepted and the resource references are stored in a list and not rendered right away. Each resource ref is assigned a key for grouping.2-When close() is called on the response  the aggregator writes out all the accumulated resource references which have not been rendered yet. This step can be used to group multiple resources into a single merged resource.The problem:AbstractResourceAggregatingHeaderResponse does not intercept calls to IHeaderResponse#renderJavaScriptReference(url) or IHeaderResponse#renderJavaScript(Script). They are directly executed by the underlying response.example:AbstractDefaultAjaxBehavior#renderHead() does the following : response.renderJavaScriptReference(WicketEventReference.INSTANCE); response.renderJavaScriptReference(WicketAjaxReference.INSTANCE); response.renderJavaScript('Wicket.Ajax.baseUrl=&#91;...&#93;');With the non-aggregating header response  the Wicket .js ref script tags are rendered in the markup before the inline javascript code and all is well.With the aggregating version  the Wicket js resource references are rendered last (in close()). This means that the inline javascript code (which uses Wicket.Ajax) is executed before the Wicket .js files are loaded  causing a javascript error (Wicket is undefined).This problem also applies to css resource references because order of inclusion is important for them too.Short of a big refactor to force each rendered javascript to list its dependencies  I don't see how this problem can be solved. I opened this ticket primarily to share my findings and let people comment on possible solutions other than removing the code.The problem is also present in AbstractDependencyRespectingResourceAggregatingHeaderResponse.NOTE:wiQuery uses AbstractResourceAggregatingHeaderResponse  but resolves the issue by intercepting all renderJavaScript* methods and keeping their order.   ,0
4168,Error page resource relative urls are wrong    The wicket page exposed as 404 error page has wrong links to resources. The sample project is attached.Run the project with 'mvn jetty:run' and go to url 'http://localhost:8080/bug/404' - it's mapped wicket page  works perfect. But if you type any wrong url such as 'http://localhost:8080/bug/aaaaaa' the page doesn't have styles and images.   ,0
4171,Add additional constructor to DownloadLink that accepts the filename in a Model    There are cases when the file name that will be used in DownloadLink is unknown at construction time. If the filename is stored in a IModel this limitation will be solved.   ,0
4172,Enclosure can't find a child with deeper path in TransparentWebMarkupContainer    Using the Wicket enclosure-tag in an TransparentWebMarkupContainer throws the following exception. I've just converted some working 1.4.18 code to 1.5.2 and got this error (see also http://apache-wicket.1842946.n4.nabble.com/Enclosures-and-transparent-WebContainer-tp3935753p3935753.html). Changing the component hierarchy without using a transparent WebMarkupContainer would fix the problem  but this is not an option if you migrate projects from 1.4 to 1.5org.apache.wicket.WicketRuntimeException: Could not find child with id: column:info in the wicket:enclosure at org.apache.wicket.markup.html.internal.Enclosure.checkChildComponent(Enclosure.java:232) at org.apache.wicket.markup.html.internal.Enclosure.getChildComponent(Enclosure.java:211) at org.apache.wicket.markup.html.internal.Enclosure.onInitialize(Enclosure.java:127) at org.apache.wicket.Component.fireInitialize(Component.java:919) at org.apache.wicket.MarkupContainer.internalInitialize(MarkupContainer.java:1002) at org.apache.wicket.MarkupContainer.addedComponent(MarkupContainer.java:979) at org.apache.wicket.MarkupContainer.add(MarkupContainer.java:171) at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:300) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1463) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1638) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1613) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1567) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:72) at org.apache.wicket.Component.internalRenderComponent(Component.java:2516) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1576) at org.apache.wicket.Component.internalRender(Component.java:2346) at org.apache.wicket.Component.render(Component.java:2274) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1474) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1638) at org.apache.wicket.Page.onRender(Page.java:904) at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:140) at org.apache.wicket.Component.internalRender(Component.java:2346) at org.apache.wicket.Component.render(Component.java:2274) at org.apache.wicket.Page.renderPage(Page.java:1035) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:105) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:224) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:167) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:750) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:252) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:209) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:280) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1326) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:479) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:520) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:940) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:409) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:186) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:874) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250) at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110) at org.eclipse.jetty.server.Server.handle(Server.java:349) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:441) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:904) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:565) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:217) at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:46) at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:545) at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:43) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:598) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:533) at java.lang.Thread.run(Thread.java:662)   ,0
4183,NullPointerException in JsonRequestLogger when logging resource requests    The use of NopAnnotationIntrospector causes NullPointerExceptions when trying to log enum values. The attached patch fixes this by changing to JacksonAnnotationIntrospector  which is the default introspector.   ,0
4184,AppendingStringBuffer.insert  infinite loop    When trying to insert a StringBuffer into an AppendingStringBuffer  the method public AppendingStringBuffer insert(final int offset  final Object obj)will call itself repeatedly generating an infinite loop.The fix would be to call toString() method if the object is a StringBufferpublic AppendingStringBuffer insert(final int offset  final Object obj) { if (obj instanceof AppendingStringBuffer) { AppendingStringBuffer asb = (AppendingStringBuffer)obj; return insert(offset  asb.value  0  asb.count); } else if (obj instanceof StringBuffer) { //return insert(offset  obj); return insert(offset  obj.toString()); } return insert(offset  String.valueOf(obj)); }   ,0
4185,ListenerInterfaceRequestHandler should not assume existence of a page    ListenerInterfaceRequestHandler should not assume a page instance is always available in isPageInstanceCreated. This handler can also be used for links on bookmarkable pages. The attached patch fixes this.   ,0
4189,RequestHandlerStack: Unnecessary Stacktrace in log on PageExpiredException    We use session.replaceSession() when a user logs out which appears to clear all previous pages (which is good)  and when the user tries to go back he gets a PageExpiredException (which is also good).Only that this exception is logged in error level from the RequestHandlerStack is very ugly and triggers our customer's log monitoring tool. PageExpiredExceptions should never bubble up into the log unless they cannot be handled correctly.This is the stacktrace:ERROR request.RequestHandlerStack - Error detaching RequestHandlerorg.apache.wicket.protocol.http.PageExpiredException: Page with id '2' has expired. at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:169) at org.apache.wicket.request.handler.PageProvider.getPageClass(PageProvider.java:227) at org.apache.wicket.request.handler.logger.PageLogData.&lt;init&gt;(PageLogData.java:49) at org.apache.wicket.request.handler.RenderPageRequestHandler.detach(RenderPageRequestHandler.java:147) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.detach(RequestCycle.java:761) at org.apache.wicket.request.RequestHandlerStack.detach(RequestHandlerStack.java:180) at org.apache.wicket.request.cycle.RequestCycle.onDetach(RequestCycle.java:565) at org.apache.wicket.request.cycle.RequestCycle.detach(RequestCycle.java:508) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:284) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:568) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:568) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286) at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583) at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) at java.lang.Thread.run(Thread.java:722)   ,0
4192,Do not add anti cache parameter to the images used for the Tree's junction links    Since a while Wicket automatically adds antiCache pararemeter to the url of the Image components which are re-rendered in Ajax request.This new feature makes the Tree component slower to rerender because the link's images are re-rendered for each expand.   ,0
4194,update/improve javadocs of SpringComponentInjector and GuiceComponentInjector.    Update/improve javadocs of SpringComponentInjector and GuiceComponentInjector to reflect new listener usage on application init()   ,0
4215,Allow passing custom AjaxChannel in AjaxLazyLoadPanel    Can LAZY_LOAD_COMPONENT_ID be public? Sometimes id is needed beforehand. AjaxLazyLoadPanel uses anonymous AbstractDefaultAjaxBehavior  so AjaxChannel cannot be easily overridden. Is it possible to introduce AjaxLazyLoadPanel#getChannel()?   ,0
4218,Add CachingResourceVersion#invalidate(IStaticCacheableResource) to manually purge cache entries    Add CachingResourceVersion#invalidate(IStaticCacheableResource) to manually purge cache entries.We had the uncommon requirement on the mailing list that a user needs to replace a static resource at runtime. I order to still use caching for resource versions a method to expire entries in CachingResourceVersion should be helpful.Adding this method to a concrete class should not affect API compatibility.   ,0
4227,dropping ajax request causes componentnotfoundexception    issue described in http://osdir.com/ml/users-wicket.apache.org/2011-11/msg00019.html   ,0
4239,add wicket-jar_es.properties for spanish localization    add wicket-jar_es.properties for spanish localization   ,0
4245,AbstractResourceAggregatingHeaderResponse forgets some information about references    Seen in Wicket 1.5.3 and SVN r1199294. AbstractResourceAggregatingHeaderResponse.java public void renderJavaScriptReference(String url  String id  boolean defer) { topLevelReferences.add(new ResourceReferenceAndStringData(null  null  url  null  ResourceType.JS  defer  null  null)); }forgets the id. public void renderCSSReference(ResourceReference reference  PageParameters pageParameters  String media  String condition) { topLevelReferences.add(new ResourceReferenceAndStringData(reference  null  null  media  ResourceType.CSS  false  null  condition)); }forgets the page parameters.I think a quickstart should not be necessary.   ,0
4248,Upgrade pom reference for joda-time from 1.6.2 to 2.0    Current stable version of joda-time is 2.0. Wicket could upgrade to the latest and greatest version.Changelog and migration: http://joda-time.sourceforge.net/upgradeto200.htmlAll tests pass with 2.0 instead of 1.6.2. wicket-examples also run properly.   ,0
4258,DebugBar displays stacktrace with FeedbackPanels    Clicking Inspector from DebugBar when a FeedbackPanel is displaying a message results in this stacktrace in log. Everything seems to work  extra stuff in logs is just annoying.ERROR - Component - Error while getting default model object for Component: [ListItem &#91;Component id = 0  page = com.mycompany.HomePage  path = 8:form:feedback:feedbackul:messages:0.ListItem  isVisible = true  isVersioned = false&#93;  children = &#91;Component id = message&#93;]java.lang.IndexOutOfBoundsException: Index: 0 at java.util.Collections$EmptyList.get(Collections.java:3204) at org.apache.wicket.markup.html.list.ListItemModel.getObject(ListItemModel.java:58) at org.apache.wicket.Component.getDefaultModelObject(Component.java:1640) at org.apache.wicket.Component.getDefaultModelObjectAsString(Component.java:1668) at org.apache.wicket.markup.html.debug.PageView$4.component(PageView.java:211) at org.apache.wicket.markup.html.debug.PageView$4.component(PageView.java:184) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:143) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:161) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:122) at org.apache.wicket.util.visit.Visits.visitChildren(Visits.java:191) at org.apache.wicket.MarkupContainer.visitChildren(MarkupContainer.java:923) at org.apache.wicket.markup.html.debug.PageView.getComponentData(PageView.java:182) at org.apache.wicket.markup.html.debug.PageView.&lt;init&gt;(PageView.java:130) at org.apache.wicket.devutils.inspector.InspectorPage.&lt;init&gt;(InspectorPage.java:66) at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at java.lang.reflect.Constructor.newInstance(Constructor.java:525) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:173) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:97) at org.apache.wicket.session.DefaultPageFactory.newPage(DefaultPageFactory.java:47) at org.apache.wicket.DefaultMapperContext.newPageInstance(DefaultMapperContext.java:107) at org.apache.wicket.request.handler.PageProvider.resolvePageInstance(PageProvider.java:264) at org.apache.wicket.request.handler.PageProvider.getPageInstance(PageProvider.java:165) at org.apache.wicket.request.handler.render.PageRenderer.getPage(PageRenderer.java:78) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:105) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:224) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:167) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:750) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:252) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:209) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:280) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1326) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:479) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:520) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:940) at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:409) at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:186) at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:874) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:110) at org.eclipse.jetty.server.Server.handle(Server.java:349) at org.eclipse.jetty.server.HttpConnection.handleRequest(HttpConnection.java:441) at org.eclipse.jetty.server.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:904) at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:565) at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:217) at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:50) at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:245) at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:598) at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:533) at java.lang.Thread.run(Thread.java:722)   ,0
4260,UrlRenderer renders invalid relative URLs if first segment contains colon    Seen on Wicket 1.5.3.If a relative url of a link starts with a path segment containing a colon then the whole uri will be regarded as absolute uri  so typically browsers will complain that there is no handle for the protocol foo in foo:bar/dee/per.See also the attached quickstart. The start page contains three links  one relative with colon  one absolute and one to a mounted page without colon for comparison.The application also has a static switch to add an extended urlrenderer  prepending './' if needed. This fix is merely a quick shot and there might be better alternatives.   ,0
4261,Wicket autocomplete keeps working on the replaced element when somehow the element is replaced by another ajax request when it is shown.       ,0
4265,Thread Test Uses Sun Proprietary API    The ResourceTestPage class uses classes from com.sun.* packages to do image I/O. This breaks the build for me using Oracle's JDK7 on linux (see environment). You should use the ImageIO class instead.   ,0
4268,Quality of ThumbnailImageResource    The control over the quality of generated thumbnails has been lost after modifications proposed in WICKET-2450 (the performance has been greatly improved though). That article http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html proposes multi-step approach when downscaling images. It produces much better visual results with no dramatic performance loss. Can we use that code? It also would be nice to have image rendering hints configurable as they were before.   ,0
4270,Remove superfluous call to ResourceReference#getResource() in ResourceMapper when trying to map the resource URL    The getResource() method is being called for a mounted ResourceReference even when the url does not match. So far it seems to only happen when some wicket Ajax is included in the page. To get around the problem  I've added a check on my ResourceReference that looks for the mounted name in the request url but it seems like the mounting should handle that. To reproduce the error:1. Call mountResource('uploadedfiles'  MyResourceReference.class);2. Add an AjaxFallbackLink to a page3. In MyResourceReference getResource() method return null;4. Run the application and open the page with an AjaxFallbackLink and you will get java.lang.NullPointerExceptionat org.apache.wicket.request.mapper.ResourceMapper.mapHandler(ResourceMapper.java:167)at org.apache.wicket.request.mapper.CompoundRequestMapper.mapHandler(CompoundRequestMapper.java:156)at org.apache.wicket.request.cycle.RequestCycle.mapUrlFor(RequestCycle.java:401)at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:485)at org.apache.wicket.markup.html.internal.HeaderResponse.renderJavaScriptReference(HeaderResponse.java:205)...The class org.apache.wicket.request.mapper.ResourceMap calls the getResource() (line 167) method even though the url does not match the mounted name.   ,0
4273,Rendering of resources in the header with dependency resolving and support for bundles    The current API for resources does not allow resources to define dependencies nor does it provide native support for bundles. In short  a resource reference should be able to define that it requires other resources to be available as well  much like AbstractResourceDependentResourceReference does. This support should be part of ResourceReference itself and should not be limited to just references (anything that can be added to a header can be a dependency).Furthermore  many have requested support for resource bundles. A bundle combines several resources of the same type into one. When a bundle is rendered  all resources that are part of the bundle should not be rendered  otherwise you'll end up with duplicate resources. Although it is often requested that all resources should be combined into one (or two  a js and a css)  I do not believe this is a good solution as there is no way of knowing which page requires which resources. In the worst case  this will cause every page to contain a different permutation of resources  requiring the user to download all resources again and again for every page. Therefore  the bundles require the developer to manually register bundles. If one resource from a bundle is required  the bundle will rendered instead.Finally  the default HeaderResponse renders many script tags for onDomReady and onLoad scripts. These scripts should be combined into one or two script tags.I'm currently working on implementing these features at Github. My progress can be found at https://github.com/papegaaij/wicket/tree/wicket+wiquery   ,0
4276,Select component loses it's value    Select component loses selected option and shows the first option in some situations (one example is when you try to submit a form  but there are validation errors).It was working fine in 1.4.18  but it's broken in 1.4.19.This must be caused by the solution from this issue https://issues.apache.org/jira/browse/WICKET-3962I think the problem is likely in Select.isSelected method  where String[] paths = getInputAsArray() is actually an array of uuid-s  so uuid-s are compared to paths.I haven't tested wicket 1.5  but this problem may also affect 1.5 versions.   ,0
4278,Performance regression in Component.configure() in 1.5    Wicket 1.5 is slower than 1.4 in rendering deep component trees.See the attached application that adds recursively components with specified depth. In 1.5 it is several times slower than 1.4.I found several problems:1) org.apache.wicket.Component.configure() calls org.apache.wicket.Component.setRenderAllowed()The problems is that configure() is called for each component in the hierarchy and setRenderAllowed() is overwritten in MarkupContainer to visit all children and call it for them. And the final result is that setRenderAllowed() is called for the parent and all its children  then for the first child and all its children again  and so on...The solution is to completely remove org.apache.wicket.MarkupContainer.setRenderAllowed()2) If you increase the number of components to &gt; 1000 in 1.5 we hit StackOverflowError in 2.1) org.apache.wicket.MarkupContainer.getMarkupType()2.2) org.apache.wicket.Component.getLocale()2.3) org.apache.wicket.MarkupContainer.internalMarkRendering(boolean)For 2.1 and 2.2 I suggest to add transient fields which will cache the calculated value after the first call of the get method.For 2.3 I don't see a solution for now   ,0
4279,CheckGroupSelector 'Select all' behavior broken when the CheckGroup contains a single check box.    When CheckGroupSelector is used with a CheckGroup that contains a single checkbox  select all behavior is broken. The problem is in CheckGroupSelector.js which assumes &gt;1 checkboxes in a CheckGroup.   ,0
4285,PageSavingThread.stop() blocks forever    The PageSavingThread may exit without nulling the stop flag. For example when an OutOfMemoryError or any other runtime exception is thrown in the run method.Properly set the flag in a finally clause.Is this class still present in 1.5?   ,0
4286,ListView causes page ID increment    A ListView with setReuseItems(false) causes the page ID to increment when the page is reloaded or the back button is pressed. This new ID is not reflected in the URL so Ajax actions against the new ID are lost when navigating away and back again. Steps to reproduce in quickstart1) Load quickstart project in browser2) Click 'Link to Other' then click browser's back button.3) Notice the log statement indicates the HomePage ID is 2  yet the URL remains at ID 04) Click 'Ajax Increment Link' a few times5) Click 'Link to Other' then click browser's back button6) Notice the counter is at zero  and subsequent clicks to the 'Ajax Increment Link' start from zero. The current page ID output in the log is 4.   ,0
4292,MockHttpServletResponse.addCookie(Cookie) adds duplicate cookies    org.apache.wicket.protocol.http.mock.MockHttpServletResponse.addCookie(Cookie) makes a bad check whether the cookie to be added is already in the list of cookies.Since javax.servlet.http.Cookie doesn't implement #equals() 'cookies.remove(cookie)' wont remove the previous cookie because the identity is different.According to http://www.ietf.org/rfc/rfc2109.txt  p.4.3.3 : If a user agent receives a Set-Cookie response header whose NAME is the same as a pre-existing cookie  and whose Domain and Path attribute values exactly (string) match those of a pre-existing cookie  the new cookie supersedes the old. However  if the Set- Cookie has a value for Max-Age of zero  the (old and new) cookie is discarded. Otherwise cookies accumulate until they expire (resources permitting)  at which time they are discarded.I.e. the equality is on the name  path and domain.   ,0
4298,FormTester doesn't handle nested forms correctly    While working on WICKET-4295  I discovered that FormTester doesn't handle nested form submits correctly.The browser will always submit the outermost form  because that is the only form it sees. Wicket will then determine the correct form by looking at the submitting component. If you create a FormTester on an inner form  however  the test request will point directly at that inner form. This is a problem for the new feature in WICKET-4295  but also in general since it does not correctly model the actual interaction. Also the submitting component is not found due to the wrong form being looked at. (form.getRootForm() == Form.this in Form#findSubmittingButton()) This means that for a nested form  the submitting component could never be found! I think it's mostly luck that this is not a bigger issue in tests It is possible to have the correct handling in a test  if you do newFormTester(outerForm) and then submit with a submit button in the inner form (formtester.submit('inner:submitButton')).I think FormTester should do the correct thing on its own though. The fix is trivial: in submit() don't just use the form it's pointing at  but use form.getRootForm(). This fixes both the correct request handling  as well as the issue with not finding the submitting component.I'll attach the appropriate patches.   ,0
4309,StringValueConversionException for correct situation    StringValue.toOptionalLong() produces org.apache.wicket.util.string.StringValueConversionException if empty string was passed.Let me suggest  that this behavior should be changes for all toOptionalXXX methods except getOptionalString method.The problem in inner code:The problem in following code:public final Long toOptionalLong() throws StringValueConversionException { return (text == null) ? null : toLongObject(); }Should be something like this:The problem in following code:public final Long toOptionalLong() throws StringValueConversionException { return Strings.isEmpty() ? null : toLongObject(); }But there is another problem: what to do if incorrect param was passed - for example 'abc' for parameter of Long type?   ,0
4317,Logic or Exception Message is incorrect in ModalWindow.setCookieName    The logic of the compound conditional statement is incorrect or the message passed to the Exception is incorrect. /** Sets the name of the cookie that is used to remember window position (and size if the window is resizable).  @param cookieName Name of the cookie @return this */ public StatelessModalWindow setCookieName(String cookieName) Unknown macro: { if (cookieName != null &amp;&amp; cookieName.indexOf(&quot; &quot;) != -1 &amp;&amp; cookieName.indexOf(&quot;|&quot;) != -1) { throw new IllegalArgumentException('Cookie name may not contain ' ' or '|' characters.'); } this.cookieName = cookieName; return this; } The logic reads: If the String is not null and it contains a comma and it contains a pipe  then throw the exception.   ,0
4325,Wicket autocomplete doesn't take the scrollbar into account when calculating the width       ,0
4326,Make AjaxRequestTarget an interface and move the impl to AjaxRequestHandler    AjaxRequestTarget is a class with many final methods and constructor which relies on ThreadLocal (RequestCycle.get()) which makes it difficult to mock it for testing.By introducing IAjaxRequestHandler interface this problem will be solved. This additionally will allow to provide custom implementation which may generate JSON ajax response instead of XML.The change is simple but it changes the signature of all onXyz() (onEvent  onClick  onUpdate  ...) methods and this will cause a lot of compilation errors.The fix is quite easy though: replace AjaxRequestTarget with IAjaxRequestHandler.   ,0
4340,Rerendering a page with WicketTester after you loose permission does not give access-denied    Since WICKET-4256 WicketTester does not give an access-denied page when you try to rerender a page instance after loosing permission to render that page. A testcase is added to WicketTesterTest (rerenderNotAllowed) to demonstrate the problem.   ,0
4344,Implement onValidateModelObjects() and beforeUpdateFormComponentModels() for nested forms    The onValidateModelObjects() Method in a Form is used for late-stage validation that allows outside frameworks to validate any beans that the form is updating (like JSR303 Bean Validation). This method is called after the model is updated.If you override this method for validation in your form and your form is nested in another form  this method will not be invoked if the outer form is submitted. Only the onValidateModelObjects() Method of the outer form is invoked.It would be great  if you change the implementation in the form in that way you did for the nested form validation and submission.The same problem exists for the beforeUpdateFormComponentModels() Method.   ,0
4349,Extract the code that creates the XML for Ajax responses out of AjaxRequestHandler    Currently the code that generates the &lt;ajax-response&gt; object is inside AjaxRequestHandler and it is impossible to reuse it.It will be better if the response data and the logic to serialize it is outside. This way other IRequestHandlers can reuse it or a different serialization strategy can be applied (e.g. JSON).   ,0
4358,BufferedWebResponse fails to add/clear cookie in redirect    bufferedWebResponse.addCookie( cookie );That fails under certain conditions: (1) when called on the last of three 302 redirects during OpenID login; and (2) on single redirect immediately after container startup  though it later recovers. Failure confirmed in Firebug; no cookies sent in any of the response headers. My workaround is to bypass the buffered response. This works:((HttpServletResponse)bufferedWebResponse.getContainerResponse()).addCookie( cookie );   ,0
4361,Markup Inheritance & getVariation(): markup loading (and merging) order depends on whether the super constructor adds components or not.    I have a web page 'ChildPage' that inherits (java/markup) from a 'SuperPage' ('ChildPage' --&gt; 'SuperPage'). 'ChildPage' now needs to override getVariation() to return a variation string  for example 'test'. The variation string is preferably set in the ChildPages constructor  maybe by a PageParameter.I would expect the following markup: ChildPage_test.html merged with SuperPage.html. This is the case  when SuperPage has no component added in its constructor. But when SuperPage has a component added in constructor  then I get ChildPage.html merged with SuperPage.html.quickstart 'myproject_1.5.4' (wicket 1.5.4) shows:ChildPage1 inherits from SuperPage1 (no component added)ChildPage2 inherits from SuperPage2 (label added) Click on 'load ChildPage1_test.html ' -&gt; markup ok: ChildPage1_test.html merged with SuperPage1.html Click on 'load ChildPage2_test.html ' -&gt; markup not ok: ChildPage2.html merged with SuperPage2.html : expected ChildPage2_test.html merged with SuperPage2.htmlsame with 'myproject2_1.4.19' (wicket 1.4.19) works fine!At the moment I moved the logic into getVariation() with: return getPageParameters.get('variation').toString();This works and that's why I'm unsure if it is a bug at all.Here is some debugging output from MarkupCache:1 : hildPage1 inherits from SuperPage1 (no component added)child constructor ------&gt; Class=ChildPage1 variationString=testDEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.ChildPage1_test_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage1_test.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage1_test.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - WebAppClassLoader - loaded class com.mycompany.ChildPage1 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.SuperPage1_test_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage1.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage1.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - MergedMarkup - Merge markup: derived markup: ChildPage1_test.html; base markup: SuperPage1.htmlDEBUG - WebAppClassLoader - loaded class com.mycompany.SuperPage1 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MergedMarkup - Merge markup: file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage1_test.html2: ChildPage2 inherits from SuperPage2 (label added)DEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.ChildPage2_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage2.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage2.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - WebAppClassLoader - loaded class com.mycompany.ChildPage2 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MarkupCache - Load markup: cacheKey=com.mycompany.SuperPage2_en_US.htmlDEBUG - MarkupCache - Loading markup from file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage2.htmlDEBUG - AbstractMarkupParser - The markup file does not have a XML declaration prolog with 'encoding' attribute:file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/SuperPage2.html. It is more save to use it. E.g. &lt;?xml version='1.0' encoding='UTF-8' ?&gt;DEBUG - MergedMarkup - Merge markup: derived markup: ChildPage2.html; base markup: SuperPage2.htmlDEBUG - WebAppClassLoader - loaded class com.mycompany.SuperPage2 from sun.misc.Launcher$AppClassLoader@11b86e7DEBUG - MergedMarkup - Merge markup: file:/C:/testumgebung/eclipseWorkspace/myproject/target/classes/com/mycompany/ChildPage2.html...child constructor ------&gt; Class=ChildPage2 variationString=test   ,0
4363,Duplicate html ID for generated divs in modal.js    using wicket's ModalWindow creates invalid markup since it creates two divs with id='_wicket_window_11'   ,0
4365,Form components' name/value are encoded in stateless form's action url    Stateless forms aren't working well as you can see on wicket examples: http://www.wicket-library.com/wicket-examples/stateless/fooThe first time you submit  (for example  the value 10)  everything works as supposed to. If you now change the value (to 11 for example) and submit the form  the value wicket shows is 10.I think the problem is stateless forms are generating an action URL with submitted values on query string  and when you resubmit the form  this values on query string replace the POST(or GET) values.   ,0
4368,Useless concatenation with empty string in DefaultAuthenticationStrategy.save    There is an empty string used in string construction in DefaultAuthenticationStrategy.save which is not necessary.   ,0
4372,Two WicketSerializableException classes    o.a.w.util.io.WicketSerializeableException is dead code  superceded by o.a.w.util.io.SerializableChecker$WicketSerializeableException.   ,0
4378,datatime extension's calendar-min.js appears to be corrupted / out of sync    In some cases  when including a datepicker as a component inside a modal window. Internet Explorer 7/8 throw a runtime exception.This happens only in deployment mode  after re-minifying calendar.js and replacing calendar-min.js the problem goes away  the files seem to be out of sync or corrupted.   ,0
4379,org.apache.wicket.validation.ValidatorAdapter class causes problem with validator properties to be loaded    PROBLEM:&lt;e1nPL&gt; hi I am having such problem: &lt;e1nPL&gt; I have implemented validator by implementing IValidator&lt;T&gt; interface&lt;e1nPL&gt; and I have impelemnted the same validator by extending AbstractValidator&lt;T&gt; classCODE: ===================== VALIDATOR EXTENDED FROM AbstractValidator ===================== package com.mycompany; import java.util.regex.Pattern; import org.apache.wicket.IClusterable; import org.apache.wicket.util.lang.Classes; import org.apache.wicket.validation.IValidatable; import org.apache.wicket.validation.IValidator; import org.apache.wicket.validation.ValidationError; import org.apache.wicket.validation.validator.AbstractValidator; /** * @author e1n */ public class PasswordPolicyValidator&lt;T&gt; extends AbstractValidator&lt;T&gt; { private static final Pattern UPPER = Pattern.compile('&#91;A-Z&#93;'); private static final Pattern LOWER = Pattern.compile('&#91;a-z&#93;'); private static final Pattern NUMBER = Pattern.compile('&#91;0-9&#93;'); @Override public void onValidate(IValidatable&lt;T&gt; validatable) { final String password = (String)validatable.getValue(); if (!NUMBER.matcher(password).find()) { error(validatable  'no-digit'); } if (!LOWER.matcher(password).find()) { error(validatable  'no-lower'); } if (!UPPER.matcher(password).find()) { error(validatable  'no-upper'); }  }  @Override public void error(IValidatable&lt;T&gt; validatable  String errorKey) { ValidationError err = new ValidationError(); err.addMessageKey(Classes.simpleName(getClass()) + '.' + errorKey); validatable.error(err); }  }   =============== VALIDATOR directly implementing IValidator interfce ==================== package com.mycompany;  import java.util.regex.Pattern; import org.apache.wicket.IClusterable; import org.apache.wicket.util.lang.Classes; import org.apache.wicket.validation.IValidatable; import org.apache.wicket.validation.IValidator; import org.apache.wicket.validation.ValidationError; import org.apache.wicket.validation.validator.AbstractValidator;  /** * * @author e1n */ public class PasswordPolicyValidator&lt;T&gt; implements IValidator&lt;T&gt; {  private static final Pattern UPPER = Pattern.compile('&#91;A-Z&#93;'); private static final Pattern LOWER = Pattern.compile('&#91;a-z&#93;'); private static final Pattern NUMBER = Pattern.compile('&#91;0-9&#93;');  public void validate(IValidatable&lt;T&gt; validatable) { final String password = (String)validatable.getValue();  if (!NUMBER.matcher(password).find()) { error(validatable  'no-digit'); } if (!LOWER.matcher(password).find()) { error(validatable  'no-lower'); } if (!UPPER.matcher(password).find()) { error(validatable  'no-upper'); } } public void error(IValidatable&lt;T&gt; validatable  String errorKey) { ValidationError err = new ValidationError(); err.addMessageKey(Classes.simpleName(getClass()) + '.' + errorKey); validatable.error(err); } }&lt;e1nPL&gt; I also have properties file which is named after validator class&lt;e1nPL&gt; and placed in the same package&lt;e1nPL&gt; my problem is that when i use to validate my form field validator which implements IValidator interface it is not capable of loading error messages from properties file&lt;e1nPL&gt; but when i am using validator which is extending AbstractValidator class&lt;e1nPL&gt; properties file with error msgs gets loadedPOSSIBLE FIX:&lt;e1nPL&gt; ok i have found class which is responsible for my problem and it is probably a bug&lt;e1nPL&gt; org.apache.wicket.validation.ValidatorAdapter&lt;e1nPL&gt; which wraps classes that directly implements IValidator interface&lt;e1nPL&gt; then when resources are loaded  and properties file are searched in class path etc.  loaders search in wrong path that is build against org.apache.wicket.validation.ValidatorAdapter PLACE WHER FIX SHOULD OCCOURorg.apache.wicket.resource.loader.ValidatorStringResourceLoader::loadStringResource(java.lang.Class java.lang.String java.util.Locale java.lang.String java.lang.String)   ,0
4386,Add maxlength to  wicket-datetime hours  minutes input fields    I watched an end user type an entire time into the hour component without tabbing over to the minute.So  I'd like to suggest a minor change to DateTimeField.html to add the maxlength='2' to the current size='2' on the hour/min input controls.I think it might be a simple way to give earlier feedback (I've found it unwise to rely on instructions like 'Please enter dates and times like this...' ).I can't think of any downside to this addition.   ,0
4387,StringIndexOutOfBoundsException when forwarding requests    We're getting StringIndexOutOfBoundsException from wicket when forwarding a request from our servlet filter (using request dispatcher) to wicket.The problem occurs whenever the original URI is shorter than the wicket filter mapping.I created an example webapp (based on the quickstart) in which a ForwardFilter is mapped to /f/* and it forwards all the requests to /wicket/ (see web.xml snippet below).With this webapp a request to 'http://localhost:8081/wicket/f/' results in the following exception:ERROR - RequestCycle - Error during processing error messagejava.lang.StringIndexOutOfBoundsException: String index out of range: -5 at java.lang.String.substring(String.java:1958) at java.lang.String.substring(String.java:1925) at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getContextRelativeUrl(ServletWebRequest.java:180) at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getClientUrl(ServletWebRequest.java:140) at org.apache.wicket.request.UrlRenderer.&lt;init&gt;(UrlRenderer.java:59) at org.apache.wicket.request.cycle.RequestCycle.newUrlRenderer(RequestCycle.java:148) at org.apache.wicket.request.cycle.RequestCycle.getUrlRenderer(RequestCycle.java:172) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:145) at org.apache.wicket.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:167) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:781) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:304) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.executeExceptionRequestHandler(RequestCycle.java:313) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:227) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:283) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:162) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:218) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:684) at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:471) at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:402) at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:329) at org.jfrog.ForwardFilter.doFilter(ForwardFilter.java:22) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:164) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:498) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:562) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:394) at org.apache.coyote.http11.Http11AprProcessor.process(Http11AprProcessor.java:284) at org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler.process(Http11AprProtocol.java:322) at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1714) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) at java.lang.Thread.run(Thread.java:722)web.xml snippet &lt;filter&gt; &lt;filter-name&gt;forward&lt;/filter-name&gt; &lt;filter-class&gt;org.jfrog.ForwardFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter&gt; &lt;filter-name&gt;wicket.wicket&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.wicket.protocol.http.WicketFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;applicationClassName&lt;/param-name&gt; &lt;param-value&gt;org.jfrog.WicketApplication&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;forward&lt;/filter-name&gt; &lt;url-pattern&gt;/f/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;wicket.wicket&lt;/filter-name&gt; &lt;url-pattern&gt;/wicket/*&lt;/url-pattern&gt; &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt; &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;/filter-mapping&gt;This bug is opened here following a bug we found in Artifactory after upgrading to Wicket 1.5   ,0
4412,ChoiceFilteredPropertyColumn with setNullValid to true    When filtering with a ChoiceFilteredPropertyColumn  the 'Choose one' value disappears  so you can't undo the filter.Set 'setNullValid' to true in the ChoiceFilter class so that you can choose the null value.   ,0
4416,CheckGroup model in AjaxFormChoiceComponentUpdatingBehavior onUpdate contains only last checked item    CheckGroup model in AjaxFormChoiceComponentUpdatingBehavior onUpdate contains only last checked item.P.S. A model in Form onSubmit contains all selected items.   ,0
4420,Unversioned pages don't get touched when created and cannot be found by ID later    When I tell Wicket not to version pages by default via IPageSettings#setVersionPagesByDefault(false)  created pages cannot be found later by theirs ID. Versioned pages are touched upon creation in dirty(boolean) method and thus stored in the page store. But unversioned ones are not! So when I create a Page  wrap it inside a PageProvider and RenderPageRequestHandler  then get its URL with urlFor  the URL is useless  because the page is referenced by its ID in the URL but it cannot be found by that URL later.I'll give you an simple example.PAGE 1: public class WicketMainPage extends WebPage {  public WicketMainPage() { PopupPage page = new PopupPage('Created: ' + new Date()); // getSession().getPageManager().touchPage(page); PageProvider pp = new PageProvider(page); RenderPageRequestHandler rh = new RenderPageRequestHandler(pp); add(new Label('url'  urlFor(rh).toString())); } } as you can see  I only create an instance of second page (which is not bookmarkable as it has some parameters)  wrap it in page provider and request handler and simply output URL for it (of course it is an stateful URL). The second page is just simple outputting text from constructor PAGE 2: public class PopupPage extends WebPage {  public PopupPage(String text) { add(new Label('text'  text)); } } When I run this  the app outputs an relative part of URL to the second page... if I copy this into browser  everything works  when pages are versioned. But when I set setVersionPagesByDefault(false) I start to get PageExpiredException whe trying to access the second page. When I uncomment the touchPage line  everythings works even with unversiones paged. I think  that instead of explicitly touching the page  it should be done by Wicket when retrieving the url for it. Somewhere in mapUrlFor or mapHandler  etc... Or maybe it should be touched in the dirty method just like versioned pages.   ,0
4425,Wicket 1.5 rewrites template content where it should not    I have recently upgraded from Wicket 1.4.14 to 1.5.4. One issue that Iencountered is that &lt;script&gt; tags in panel templates are rewritten byWicket  even when the &lt;script&gt; tags in question have no wicket handlersattached to them. I.e. the following panel template (notice that thereare no wicket:id attributes whatsoever):&lt;wicket:panel&gt; &lt;script id='template-upload' type='text/x-jquery-tmpl'&gt; &lt;span&gt;${name}&lt;/span&gt; &lt;/script&gt;&lt;/wicket:panel&gt;Would render in the panel as:&lt;script id='template-upload' type='text/x-jquery-tmpl'&gt;/&lt;![CDATA[/ &lt;span&gt;${name}&lt;/span&gt;/]]&gt;/&lt;/script&gt;Imho this is unwanted behavior that is a regression from the behavior inWicket 1.4.x (or at least 1.4.14). Wicket should not add content to thebody of the script tags (or any other tags in a template  unless theircontent is provided programmatically)  as it does not have the knowledgehow that affects the functionality of the page. Moreover  the contentthat Wicket adds to these script tags is only correct for Javascript(hence incorrect for the scripts in the example as they are notjavascript). In the above example adding /*  */will change the functionality of the script tag. If the '/&lt;![CDATA[/'part was necessary in the script tags above  they should be added by theperson that provides the template  not magically added by Wicket.I have attached a quickstart that demonstrates the issue. The quickstart has a &lt;script id='script1'&gt;Some Text&lt;/script&gt; element in HomePage.html that (by javascript) is shown in an alert box. Because of this bug  the alert will now start with '/&lt;![CDATA[/'  while it should simply show the text. See HomePage.html in the provided quickstart.   ,0
4429,executeAllTimerBehaviors does not find all timer behaviours    WicketTester tester = new WicketTester();tester.startPage(WaitPage.class);tester.assertRenderedPage(WaitPage.class);tester.executeAllTimerBehaviors(tester.getLastRenderedPage()); public WaitPage() { Label message = new Label('message'  'Please wait ..'); add(message); add(new AjaxSelfUpdatingTimerBehavior(Duration.milliseconds(1000)) { @Override protected void onPostProcessTarget(AjaxRequestTarget target) { // wait for background thread to complete // if (task.isDone()) { ... stop(); setResponsePage(NextPage.class); } });The timer does not fire.Problem 1: The code looks for MarkupContainers Problem 2: The code looks for AjaxSelfUpdatingTimerBehavior but should look for AbstractAjaxTimerBehavior   ,0
4434,Replace all String.split(char) with Wicket's Strings.split(String  char) for better performance    java.lang.String#split() method uses not-compiled java.lang.regex.Pattern objects to do its job. For splitting on a single character it is much better to use wicket-util's Strings#split(String  char)   ,0
4441,PageProvider should create a new Page instance if PageParameters are changed  even if a stored page exists.    The 'getStoredPage(int)' method returns a stored page instance even if user changes parameter values encoded into URL  and the PageParameters object of the stored page instance is never changed. So same page is displayed always though user changes url on browser manually.   HOW TO REPRODUCT **  1. unpack the attached sample project 'pagebug.tar.gz'.2. mvn jetty:run3. access to http://localhost:8080/user/user1You will see a form filled with information about user 1. The user's name is 'user 1'  age is 30 and country is 'Japan'.The mount path of this page is '/user/${userId}'. so 'user1' in the accessed url is a parameter value.after accessing to the url  the url will be changed to http://localhost:8080/user/user1?0 . it contains the page id of the currently displayed page.4. change some values and submit the form. page id will be changed on every submit.5. change only parameter value in url to 'user2'. Never change page-id.for example  if you now access to http://localhost:8080/user/user1?5  change the url to http://localhost:8080/user/user2?5 .6. This program must display information about user2  because the parameter value of url is changed. But you will see the information of user 1. Wicket always display the page of page-id = 5 (even though user changed url manually).In this sample program  I use LoadableDetachableModel for retrieving current parameter-value. But I don't get the new parameter-value because pageParameters object in a page instance is never changed after the construction. pageParameters is fixed in the constructor of Page class.I think that there are no easy way to retrieve parameter-values encoded into mount-path. Request.getRequestParameters() does not contain parameters encoded into mount-path. So there are no work-around for this issue.   HOW TO FIX THIS ISSUE **  We must return null from getStoredPage(int) method of PageProvider class  if current PageParameters is not same with the PageParameters of a stored page. In current code  getStoredPage(int) checks only if the class of both pages are same. We must check the PageParameters of both pages.   PATCH **  I attached a pache for PageProvider class. try it.   ,0
4446,processScript in Wicket.Head.Contributor doesn't remove CDATA - eval fails in IE    There's incosistency between org.apache.wicket.util.string.JavaScriptUtils and wicket-ajax.jsEven though the source is marked with comment Script open tag. If this tag is changed  also update Wicket.Head.Contributor.processScript() function from wicket-ajax.jsIn JavaScriptUtils there are:public final static String SCRIPT_CONTENT_PREFIX = '/n/&lt;![CDATA[//n';public final static String SCRIPT_CONTENT_SUFFIX = '/n/]]&gt;//n';in wicket-ajax.js (line 1742 in 1.5.5 version) there are:// get rid of prefix and suffix  they are not eval-d correctlytext = text.replace(/^&lt;Unable to render embedded object: File (--//&#42;--&gt;&lt;) not found.[CDATA[//&#42;&gt;&lt;!--&#42;///  '');text = text.replace(///&#42;--&gt;]]&gt;&#42;//$/  '');As you can see the sequences in java and javascript DO NOT MATCH! There are missing new lines in JS and there are extra HTML comments &lt;!-- --&gt; that aren't added by the Java code.The result is  that these extra lines aren't removed and IE fails to eval such a javascript. I could fix this issue by editing the wicket-ajax.js like this:text = text.replace(/^/n//&#42;&lt;![CDATA[&#42;///n/  '');text = text.replace(//n//&#42;]]&gt;&#42;///n$/  '');But we need it fixed officially  because we use gradle for Wicket dependency.   ,0
4449,Change IValidationError API to work with java.io.Serializable as other methods (info  error  success  ...) in Component and Session    Since a while o.a.w.Component's and o.a.w.Session #info()  #error()  #success()  etc. methods accept java.io.Serializable.With this ticket I suggest a change that will make o.a.w.validation.IValidationError in sync with this.   ,0
4454,Repaint the initial state of the page if the page is expired  a new one is freshly created and the requested component is not available    From the users@ mailing list: http://markmail.org/thread/ttox5ymihtf5y55iA ComponentNotFoundException is being thrown if the page is expired  a new page is freshly created and due to component replacement the requested sub-component is not reachable.The parent component depends on whether a user is logged in. The sub-component has a link inside which is not reachable after page expiration because a different parent component is used in this case.   ,0
4457,setTextEncoding on JavascriptResourceReferences/CssResourceReferences    Setting the encoding of JavascriptResources and CssResources in wicket is by now not easily to achieve.By now only html files are equipped with the charset option afterwads  but not CSS or JS files. Content-Type: application/javascript;charset=UTF8org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() does take the textEncoding into account but there is no way to set it from the outside without introducing new classes by copy/pasting existing Resources and adapt them. The only resource which is able to modify the content-type through the constructor is the TextTemplateResource. One can specify 'application/javascript; charset=UTF8' and pass it as the content-type parameter. It's a hack  but this string then used for the content-type header.A separate charset parameter would be better in my opinion. UserGroup post: http://apache-wicket.1842946.n4.nabble.com/setTextEncoding-on-JavascriptResourceReferences-CssResourceReferences-td4472204.html   ,0
4465,Autocomplete IE javascript error: 'target' is null or not an object    When I click to autocomplete textfield the javascript error bellow is shown.Webpage error detailsUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729)Timestamp: Thu  22 Mar 2012 08:05:57 UTCMessage: 'target' is null or not an objectLine: 68Char: 1Code: 0URI: http://xxx:8080/wicket/resource/org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior/wicket-autocomplete-ver-C51E30D722C9620E9D06F141A171849F.jsWicket 1.5.4 works fine.   ,0
4466,Use an external host for the static javascript files (specially JQuery)    There should be some (easy) way to specify an external URL (for example  on a CDN) for the JQuery script.IJavaScriptLibrarySettings.setJQueryReference() takes only a ResourceReference as a parameter  that must point to an application resource. One could create an IResource that redirects to the CDN  but that would require an additional request anyway.That support should exist also for wicket-ajax.js and wicket-event.js  but it is less of an issue  since they are tied to the Wicket version anyway (JQuery is hosted for free in a number of CDNs  so using them is very compelling).If there is some workaround  it should be documented in the wiki.   ,0
4468,Stateful components which are invisible force page to be stateful    Stateful components which are not rendered (setVisible(false)) force the page to be stateful.Page#isPageStateless() visits all components to check Component#isStateless()  whether they are visible or not.Please change this so invisible components no longer force a page to be stateful.   ,0
4471,Generic registry of javascript/css resource references    It would be nice if JavaScriptLibrarySettings had a generic mechanism to register javascript/css resource references (maybe using something like MetaDataKeys).This way  extension/third-party components (ModalWindow  DateTimeField  etc.) could register their resources  or just lookup for substitute resource references for their own scripts/stylesheets.This would allow some optimizations  such as minification/compression and joining many files into one  and hosting static files in CDNs.   ,0
4475,Inline Enclosure needs to check isVisibleInHierarchy  not only isVisible    If the Visibility of the child component from the inline enclure uses setVisibleAllowed  the enclosure is rendered if the component is not visible. Take a look to the updateVisibility-method of the InlineEnclosure-Class. In my opinion the method should check for isVisibleInHierarchy.   ,0
4479,�_�_��_��_��__�_��_� ModificationWatcher easier for extending    org.apache.wicket.util.watch.ModificationWatcher is very well encapsulated and if someone wants to extend it then he will have to copy/paste its code in the new class.The purpose of this task is to make ModificationWatcher more friendly for sub-classing.   ,0
4481,Add setHeader() to MockHttpServletRequest to be able to override default headers    org.apache.wicket.protocol.http.mock.MockHttpServletRequest#setDefaultHeaders() sets few default headers but since there is only #addHeader() and no #setHeader() there is no way to override the value of 'User-Agent' header for example.http://stackoverflow.com/questions/9893609/can-one-set-the-browser-type-in-wicket-1-5-test-cases   ,0
4483,Component#setDefaultModel() should call #modelChanging()    Component#setDefaultModel() should call #modelChanging() as #setDefaultModelObject() does.It worked by chance so far because addStateChange() is called.http://markmail.org/thread/uxl6uufusggqbb6s   ,0
4484,wicket:link component ids get too long    The resolve() method of org.apache.wicket.markup.parser.filter.WicketLinkTagHandler appends modifies the original tag id and appends the next autoId to it. The problem is that this is done during every render  the the component id gets longer and longer.I had a situation on a production server where component ids were over 10k. RepeatingView just added to the problem.Long story short  I think resolve should just return the TransparentWebMarkupContainer with the modified id  and not set the original id.   ,0
4485,TagUtils uses wrong separator in its #copyAttributes()    org.apache.wicket.markup.TagUtils#copyAttributes(Component  ComponentTag) uses '  ' as a separator for the attributes that it copies.If the attribute is 'class' then the separator should be ' '  if it is 'style' or 'onclick' then it should be '; '  ...   ,0
4486,Give StringValue toEnum methods    In 1.4  Resources had a ValueMap as parameters  which had among other methods #getAsEnum. In 1.5  PageParameters are used instead  and the StringValues used here have all kinds of toSomething methods  but nothing for enums. I propose adding these for completeness.   ,0
4487,TextTemplate in RenderHead() on component doesn't Re-Render for every page    I have a project that uses a menu thats repeated on every page. If I first view it on a mounted page /PageName and then look at it on a BookMarkable page/wicket/bookmarkable/page.class.name?foo the images referenced in my template do not appear.(the javascript template image strings do not change)   ,0
4494,HtmlHandler wrongly handles tags not requiring closed tags if the markup does not have 'top' level tag    Hi  I have custom component (extends MarkupContainer implements IMarkupCacheKeyProvider  IMarkupResourceStreamProvider) which fetches its HTML markup from database. Following HTML markup: &lt;img alt='' src='logo.png'&gt; &lt;br&gt;Some text &lt;br&gt;Some more text causes following error: 2012-04-12 10:52:53 012 &#91;http-8080-6&#93; ERROR: Unexpected error occurred Unable to find close tag for: '&lt;img alt='logo' src='logo.png'&gt;' in org.apache.wicket.util.resource.StringResourceStream@3d7e16fc  MarkupStream: &#91;unknown&#93;  at org.apache.wicket.markup.MarkupFragment.&lt;init&gt;(MarkupFragment.java:127)  at org.apache.wicket.markup.MarkupStream.getMarkupFragment(MarkupStream.java:485)  at org.apache.wicket.MarkupContainer.autoAdd(MarkupContainer.java:244)  at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1421)  at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1596)  at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1571)  at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1525) I think the problem is that org.apache.wicket.markup.parser.filter.HtmlHandler does not handle such markup correctly. It does not call ComponentTag.setHasNoCloseTag(true) for the img tag. Such call is missing in postProcess() method. I think that this problem can be fixed by inserting: top.setHasNoCloseTag(true); after line 80 in HtmlHandler.java file. Michal   ,0
4501,NumberTextField renders its value in unsupported number format    The issue is similar to WICKET-3591 but its fix doesn't help when the model object of the NumberTextField is a BigDecimal because BigDecimalConverter#convertToString() produces something like '123  456  789' and this is not supported by &lt;input type='number'&gt;'s spec: http://dev.w3.org/html5/markup/datatypes.html#common.data.float.   ,0
4502,Make it easier to produce a page with links with absolute urls    We needed to create a page which links have absolute urls (protocol  host  port included). So I created a simple extension of MountedMapper that makes the relative url returned by super.mapHandler() to an absolute one.So far so far but later Wicket uses org.apache.wicket.request.UrlRenderer#shouldRenderAsFull() to decide whether to actually render the url as full (i.e. as absolute) and since the protocol  the host and the port matches with the current request's url attributes it decides to render the url as relative.Since Url class is final it is not possible to create a custom AbsoluteUrl which #toString() delegates to #toString(StringMode.FULL).I see two solutions:1) provide AbsoluteUrl class which is again final and uses StringMode.FULL2) add a boolean flag to Url that is used by UrlRenderer#shouldRenderAsFull() so I can force full modeDo you have other solutions ?   ,0
4504,AjaxLazyLoadPanel not replaced within AjaxTabbedPanel    An AjaxLazyLoadPanel is not replaced when added as panel of an AbstractTab within an AjaxTabbedPanel.A set breakpoint in AjaxLazyLoadPanel constructor at AbstractDefaultAjaxBehavior.respond method is never reached.The attached quickstart will demonstrate the behavior.This is reproducible with version 6.0.0-beta1 and 6.0-SNAPSHOT.   ,0
4505,AbstractTextComponent not escaping html data by default therefore user text is not redisplayed correctly    User input is not escaped in all text fields by default (and the default is not configurable).This leads to user entered text not being redisplayed correctly. You can replicate using the project from WICKET-3330. Just enter the text my&frac12;companyname and press enter The field will not redisplay the text entered properly   ,0
4506,Fix missing in 1.4.19  was fixed in 1.3.3:  Discrepancy between Button implementation of getForm and the code in Form.findSubmittingButton()    There is a discrepancy between Button implementation of getForm (derived from FromComponent) and the code in org.apache.wicket.markup.html.form.Form.findSubmittingButton()Last one assumes form can be null while org.apache.wicket.markup.html.form.FormComponent.getForm() throws an exception if it is soThis was fixed in 1.3.3 based on https://issues.apache.org/jira/browse/WICKET-1414. Please migrate the fix to 1.4 code line.   ,0
4507,wicktTester.getLastResponseAsString() returns wrong result after starting a Component    &gt; This following test : @Test public void test() throws Exception { WicketTester tester=new WicketTester(); tester.startComponentInPage(new Label('lableId'  'content') { @Override protected void onComponentTag(ComponentTag tag) { super.onComponentTag(tag); tag.put('test' '123'); } }); tester.assertResultPage('icket:id=/'lableId/' test=/'123/'&gt;content'); assertEquals('icket:id=/'lableId/' test=/'123 /'&gt;content' tester.getLastResponseAsString()); assertEquals('' tester.getResponse().getDocument());}exposes the wrong behaviour of test.getLastResponseAsString() after starting a component.It should return something such as '&lt;span&gt; .... &lt;/span&gt;'  bit it returns a string 'cut in the middle' : cket:id=/'lableId/' test=/'123/'&gt;contentsee attached quickstart   ,0
4509,Spaces in path cause ModifcationWatcher to fail    The ModificationWatcher isn't able to reload resource files if there's a space in the path.The problem is that Files#getLocalFileFromUrl(String) receives an URL encoded String in which spaces are encoded to %20. They are never decoded and passed to File(). The fix is not to use the external representation of an URL but the file representation.   ,0
4514,UrlRenderer produces wrong full urls when the passed parameter is not absolute (as Url understands 'absolute')    Code like:Url baseUrl = Url.parse('one/two/three');baseUrl.setProtocol('http');baseUrl.setHost('www.example.com');baseUrl.setPort(8888);UrlRenderer renderer = new UrlRenderer(new MockWebRequest(baseUrl));renderer.setBaseUrl(baseUrl); // this is needed because MockWebRequest cuts dataString fullUrl = renderer.renderFullUrl(Url.parse('../four'));Produces url: http://www.example.com/../four while it has to be http://www.example.com/one/four   ,0
4518,Wicket example 'forminput' is broken due to bad url for IOnChangeListener    http://localhost:8080/forminput (wicket-examples) doesn't change the locale of the labels when the locale select is changed.The reason seems to be the produced url: './.?5-1.IOnChangeListener-inputForm-localeSelect' This is parsed to a Url with one empty segment and thus HomePageMapper doesn't match it and doesn't handle it.   ,0
4526,OpenCloseTagExpander should include i tag    The OpenCloseTagExpander automatically expands similar tags like 'b'  'em' and 'strong' but not 'i'. To be consistent the 'i' tag should also be transformed.   ,0
4527,Recorder#getSelectedChoices() can be very slow under certain circumstances    In Recorder#getSelectedChoices() the inner for-loop getPalette().getChoices() is called for every iteration. Depending on the efficiency of the implementation of the underlying model this might result in poor performance.   ,0
4529,AjaxEditableLabel not selecting text or moving cursor on Firefox 11.0 or Safari 5.0.5    The class Javadoc for AjaxEditableLabel says:'''onEdit(AjaxRequestTarget) is called when the label is clicked and the editor is to be displayed. The default implementation switches the label for the editor and places the caret at the end of the text.&lt;/li&gt;'''However this does not happen on Firefox or Safari.Looking at the code  it is actually trying to place the caret at the end of the line and selecting the text in the form field. (This selecting the text is what I also want  and also the most common behavior of such ajax-editable fields on other big websites on the Internet)// put focus on the textfield and stupid explorer hack to move the// caret to the endtarget.appendJavaScript('{ var el=wicketGet('' + editor.getMarkupId() + '');' + ' if (el.createTextRange) { ' + ' var v = el.value; var r = el.createTextRange(); ' + ' r.moveStart('character'  v.length); r.select(); } }');target.focusComponent(editor);However the 'stupid explorer hack' as the code calls it  probably only works on explorer  because the el.createTextRange method is quite old and deprecated (it's only needed on MSIE &lt;9)I'm getting good results by just calling select() on the DOM element. I don't have MSIE available to test there but I think it will work there too.// put focus on the textfield and stupid explorer hack to move the// caret to the endtarget.appendJavaScript('{ var el=wicketGet('' + editor.getMarkupId() + '');' + ' el.select(); ' + ' }');target.focusComponent(editor);   ,0
4530,Final methods on ResourceNameIterator prevent full customization of IResourceStreamLocator    IResourceStreamLocator contains the method newResourceNameIterator(...) which builds a ResourceNameIterator. Unfortunately ResourceNameIterator declares several getter methods (getLocale()  getStyle()  getVariation()  getExtension()) as final and thus ties the public API to the internal implementation of ResourceNameIterator. Therefore it's not possible to fully customize the behavior of ResourceNameIterator by subclassing.   ,0
4537,Add Generics to TabbedPanel:    In 1.5  TabbedPanel#tabs has a wildcard signature: List&lt;? extends ITab&gt;. This makes it impossible to add tabs to that list  even though adding panels is one of the stated purposes of the #getTabs() method.On #wicket  dashorst suggested giving TabbedPanel a type parameter &lt;T extends ITab&gt;  which I think is a good idea. It should definitely be added in 6.0.What about 1.5.x? This would be a source-level break  but I think binaries should still work.   ,0
4543,AbstractDefaultAjaxBehavior.getCallbackFunctionBody uses jQuery.extend    Wicket components should not rely on jQuery. jQuery.extend should be made available through the Wicket JS api and AbstractDefaultAjaxBehavior.getCallbackFunctionBody should use that.   ,0
4546,Unencoded ampersands in CSS-/Javascript-Reference    Ampersands in CSS-/Javascript-References are not encoded properly  see the source code (html) in:http://www.wicket-library.com/wicket-examples/resourceaggregation &lt;!-- BasicGroupingKey &#91;group=GLOBAL  loadOrder=0  css=true&#93; --&gt;&lt;link rel='stylesheet' type='text/css' href='./wicket/resource/org.apache.wicket.Application/merged-resources?refs=org.apache.wicket.examples.resourcedecoration.HomePage:footer.css%7Corg.apache.wicket.examples.resourcedecoration.HomePage:header.css&amp;type=css' /&gt;&lt;!-- BasicGroupingKey &#91;group=APPLICATION  loadOrder=0  css=true&#93; --&gt;&lt;link rel='stylesheet' type='text/css' href='./wicket/resource/org.apache.wicket.Application/merged-resources?refs=org.apache.wicket.examples.resourcedecoration.HomePage:app.css&amp;type=css' /&gt;&lt;!-- BasicGroupingKey &#91;group=PAGE  loadOrder=0  css=true&#93; --&gt;&lt;link rel='stylesheet' type='text/css' href='./wicket/resource/org.apache.wicket.Application/merged-resources?refs=org.apache.wicket.examples.resourcedecoration.HomePage:HomePage.css&amp;type=css' /&gt;   ,0
4559,Component#getMarkupId() generates id that gets hidden by AdBlock    Component#getMarkupId() generates ids containing string 'ad'. Element with such id (e.g.  'buttonad') is then hidden by the AdBlock plugin (because it matches AdBlock's CSS selector #buttonad).Since AdBlock is quite a common plugin  this issue might affect most of the applications using Wicket.Test project and screenshot is attached.&#8211;Wicket 1.4.21Firefox 12  AdBlock 2.0.3Linux 3.3.5  x86_64   ,0
4561,Wicket 1.5.6 duplicates segments in absolute URLs    Since we migrate our application to Wicket 1.5.6 some URLs from BookmarkablePageLinks have duplicate segements for indicating a Shop and a Language item from our persistence model. For indicating a Shop and Language item we use our own ShopMapper and LanguageMapper (subclass of AbstractComponentMapper). This was working until we migrate to 1.5.6.For instance ...correct URL: host/servlet/shop/en/pagewrong URL: host/servlet/shop/en/shop/en/pageThis happens  for example  when the protocol of the linked URL is different from the current protocol (http/https). So  basically  all links that point to pages that are annotated with @RequireHttps are wrong.In our Application class we set the HttpsMapper as RootRequestMapper  e.g.:setRootRequestMapper(new HttpsMapper(new ShopMapper(new LanguageMapper(getRootRequestMapper()))  new HttpsConfig() ) );Using a debugger  I've tracked down the spot where wrong URL is rendered:org.apache.wicket.request.Url.resolveRelative()   ,0
4566,Resource filtering breaks the calculation of rendered resources    The calculation of rendered resources at org.apache.wicket.markup.head.internal.HeaderResponse#rendered field is broken when org.apache.wicket.markup.head.filter.FilteringHeaderResponse is in use.The problem is that org.apache.wicket.markup.head.filter.FilteringHeaderResponse#getContent(String) creates its own instance of HeaderResponse and thus has its own 'rendered' set.If a filtered resource depends on a resource which is rendered in the head (i.e. in the default filtered bucked named 'headerBucket') then the latter is also rendered in the custom filter.   ,0
4570,Shared Behavior's renderHead method called only for one component  not for all of them    When using a shared behavior among many components  its renderHead method is called only once. The reason is at the end of the Component.renderHead(HtmlHeaderContainer) method: for (Behavior behavior : getBehaviors()) { if (isBehaviorAccepted(behavior)) { if (response.wasRendered(behavior) == false) // &lt;---- check whether the behavior has been marked as rendered { behavior.renderHead(this  response); response.markRendered(behavior); // &lt;---- behavior marked as rendered } } }When calling this method of the first component  which contains given Behavior  the Behavior is added to the set of the already-rendered elements. This means  its renderHead method is never called for the rest of the components  which contain it.From documentation I suggest: Behaviors can be shared among more components (if they are not 'attached' in bind() method)  as written in Behavior class javadoc: 'They can be bound to a concrete component (...)  but they don't need to.' A Behavior method should behave the same way  as the same code placed directly in the component (in the corresponding method)Moreover  in the documentation of the Behavior.renderHead is written: 'Render to the web response whatever the component wants to contribute to the head section.' So as I understand it  the information about component should also be the 'key' whether to mark the Behavior rendered or not. More precisely  the proposed solution should be something like the following (Couple means something like a class with two fields - Behavior and Component): for (Behavior behavior : getBehaviors()) { if (isBehaviorAccepted(behavior)) { Couple c = new Couple(behavior  this); // &lt;---- create couple if (response.wasRendered(c) == false) // &lt;---- check the couple { behavior.renderHead(this  response); response.markRendered(c); // &lt;---- mark the couple as rendered } } }Maybe this is not a bug  but a feature. In case of the feature I think  that it requires at least a clarification in the documentation. In (probably) all other usage of shared Behavior  the Behavior does not cause any troubles and it behaves as expected from the documentation. But this method has quite inconsistent effect  comparing to the other ones.If an example is needed:I need a Behavior to attach all components  which have to automatically contribute to HTML head a JavaScript and CSS file with the same name as the component. The Behavior does not hold any data (no fields  empty bind method)  so I would like to make it singleton (or not directly pattern Singleton as such - for example let it overridable  but provide a default instance). Because creating new instances does not have much sense in this case and it brings many unnecessary objects on the heap.Using of new instance per component works fine  of course  but the issue is in the situation  if I need the shared instance across the application.   ,0
4574,ThreadContext does not properly remove the ThreadLocal from the current thread    Actually  I only checked 6.0.0-beta2 and master  6.0.0-beta2 is not in the drop down.ThreadLocal.get() returns the current value  if one is set. If not  it creates a new value using the initialValue() method  AND (importantly) registers the ThreadLocal in the Thread's Map of ThreadLocals.In order for the get(false) method to work as expected  we must actually call ThreadLocal.remove() after a ThreadLocal.get() that returned null.Also  after the request was processed  we never properly remove the ThreadLocal from the Thread  we were simply setting it to the previous value  which was null most of the time. This is not enough. The ThreadLocal was still attached to the Thread  just the value it was storing was null.Here's hoping that Jira is working again and I can attach a patch.   ,0
4584,NumberTextField does not have default minimum and maximum    Javadoc of NumberTextField says:A TextField for HTML5 &lt;input&gt; with type number.Automatically validates the input against the configured min and max attributes. If any of them is null then Double.MIN_VALUE and Double.MAX_VALUE are used respectfully. Note: FormComponent.setType(Class) must be called explicitly!It is not true. We have constructor which sets them to null: public NumberTextField(String id  IModel&lt;N&gt; model  Class&lt;N&gt; type) { super(id  model  type); validator = null; minimum = null; maximum = null; }and if I don't set them manually  in case of error nulls go to RangeValidator (line 84-85: error.setVariable('minimum'  min); error.setVariable('maximum'  max);causing:java.lang.IllegalArgumentException: Argument 'value' may not be null.Nevertheless  I think reflection API should be used to determine if given Number has MAX_VALUE/MIN_VALUE and this one should be used. In other case I think it is ok to use Double.MAX_VALUE/MIN_VALUE.or maybe you have another ideas?   ,0
4587,URLRenderer renderFullUrl    When using the following code to create an absolute url in wicket 1.5.7 from a page class and parameters  there are also duplicate segments in the url. the rendered absolute url is not correct.final Url url = RequestCycle.get().mapUrlFor( pageClass  pageParameters );final String result = RequestCycle.get().getUrlRenderer().renderFullUrl( url );RequestCycle.get().mapUrlFor(..) does not return an 'absolute' url (first segment will not be empty).See also description in WICKET-4561   ,0
4589,Closing  tag is incorrectly setup as autocomponent    The closing instance of the &lt;wicket:container&gt; tag returns true when isAutoComponentTag() is called whereas the opening instance correctly returns false.The problem lies probably in the WicketTagIdentifier class which simply checks if there is a wicket:id attribute value and makes all tags (opening or closing) autocomponent tags if there is no wicket:id.Obviously any closing tag doesnt have a wicket:id assigned.   ,0
4592,WicketAjaxDebug.logError used in Wicket.Head.addJavascript - JS error when wicket-ajax-debug.js not loaded    Wicket.Head.addJavascript (defined in wicket-ajax.js) encapsulates javascript in this code:content = 'try{'+content+'}catch(e){WicketAjaxDebug.logError(e);}'; However  WicketAjaxDebug can be undefined as it's declared in wicket-ajax-debug.js which might not be included. As a consequence  catch block will fail and obfuscate any error catched.I believe this catch block should call Wicket.Log.error(e) instead.   ,0
4596,DataTable toolbars do not handle dynamically changing columns in the table    All the packaged toolbars for the DataTables fail to handle dynamically changing column in the table.HeadersToolbar - is new columns are added  they do not have headers. If columns are removed  the headers are not removed.NoRecordsToolbar - colspan is static to the number of columns when the table was created. If more columns are added  or if columns are removed  then the incorrect colspan is used.NavigationToolbar - incorrect static colspan  like NoRecordsToolbar.FilterToolbar - same problem as HeadersToolbar  just s/header/filter/   ,0
4608,Vars in ValidationErrors should be properly converted    Currently variables in ValidationErrors are substituted with Strings.toString().This is problematic for variables with different representations in different languages (e.g. decimal separator). The converter of the processing component should be used instead.   ,0
4617,ResourceStreamLocator vs ResourceFinder    I'm a bit confused by the responsibilities of ResourceFinder vs ResourceStreamLocator. Looking around in the code  I found the following: IResourceFinder is apparently only implemented via its extension interface IResourcePath. Its two implementations Path and WebApplicationPath look through a list of filesystem folders for files. ResourceStreamLocator does two things: it loads resources  either via an IResourceFinder (which only finds filesystem resources) or via the classloader (it does this itself). it uses a ResourceNameIterator to generate all possible filename variations based on locale and style and then tries to load one of them via the above mechanisms.Is this correct?If so  I think we have some mixed-up responsibilities here. I propose the following: add a third IResourcePath implementation (e.g. ClassloaderPath) that handles loading of resources in classpaths. It should be able to try multiple paths (e.g. '/'  'META-INF/resources' etc). Instead of a single ResourceFinder  Application should have a list of them  by default containing WebApplicationPath (today's default) and the new ClassloaderPath. ResourceStreamLocator should not do any loading on its own at all and just use the ResourceFinders defined in this new list in Application.This would also get rid of the hard-coded 'META-INF/resources' lookup that currently is done in ResourceStreamLocator (I'll write a second ticket about that  it's causing us some problems).I think this could still be done within 6.0. Objections?   ,0
4622,Optimize PageExpiredException to not load its stacktrace    The stacktrace of PageExpiredException is useless. It is being thrown at only one place - PageProvider  so it is always the same. But it is really useless for the end user.Overriding its #fillInStackTrace() to return null will be a minor performance improvement.   ,0
4626,WicketFilter unify the filterPath    WICKET-4626 WicketFilter unify the filterPathUse of getter/setter internally to limit read/writes to filterPath field location.Removed lazy initialization code from main code path.Provide a new method #canonicaliseFilterPath(String) to convert'/wicket/' into 'wicket/' as expected internally and maybe used byunit tests to further validate correct values for filterPath.Added unit test for this new method and use method in setter.   ,0
4627,Change Url#parse() methods to accept CharSequence instead of String    RequestCycle#urlFor() methods return CharSequence.By making org.apache.wicket.request.Url#parse() methods accepting CharSequence instead of j.l.String the user will save some typing (adding .toString()).   ,0
4629,AbstractLink does not call getBody to get its body    AbstractLink#getBody() is not final  and can be overridded  but AbstractLink#onComponentTagBody() does not call it. Instead it references the bodyModel set by the setBody() method.   ,0
4632,ResourceStreamResource should use #getResourceStream() instead of directly using the 'stream' field    org.apache.wicket.request.resource.ResourceStreamResource#newResourceResponse() resolves the IResourceStream by using #internalGetResourceStream() but later still uses the 'stream' member field.   ,0
4633,MultiFileUploadField after selecting a file does not hide properly input field    Component org.apache.wicket.markup.html.form.upload.MultiFileUploadField in related javascript uses code: ''this.style.position = 'absolute'; this.style.left = '-1000px' ' to hide a file input after selecting a file.Unfortunately on my screen (1920x1200) if I put this component on the right side of a page then after selecting a file  'the hidden input' is moved to the left of its container  but still visible for a user.Changing style.position to 'fixed' should resolve the problem  so the input field will be positioned relative to the browser window  not to its ancestor.   ,0
4636,Using setResponsePage() before page rendering should skip the rendering of the page    This ticket follows from the email thread http://markmail.org/thread/uk5y4ddoopntmkgdWhen setResponsePage() is used  the current page is still rendered. The response thus generated is then thrown away completely and a replacement request handler is used. I can think of 3 reasons why this should be avoided:1-Performance; it's wasteful to render components to discard them right away2-Needs complete components hierarchy; even if setResponsePage() is used in a page constructor (e.g. when redirecting depending on page parameters)  since the page will be rendered  all of its components or some substitutes must be added to the page. Otherwise Wicket will throw a missing component exception in dev mode.3-Feedback messages; if the needlessly rendered page contains a feedback panel  feedback messages registered in the session will be swallowed by the thrown away page rendering.   ,0
4638,Make it possible to use JsonFunction as a AjaxCallListener's handler    Currently the IAjaxCallListener's handlers could be an instance of CharSequence. Wicket wraps them in JsonFunction and sets the respective parameters for the handler.By making JsonFunction itself a CharSequence allows the developer to use it as a handler and to provide the whole JS function code  not just the body which makes the code looks a little bit strange because some variables are assumed to be passed (the parameters) from somewhere else.   ,0
4641,AjaxFallbackLink and log a warning when there are several ajax event behaviors on the same event    When I was using an AjaxFallbackLink I got the warning about multiple Behaviours changing the 'onclick' attribute.I changed it to AjaxLink and the warning disappeared.   ,0
4642,Atmosphere Modul not working on first page after Jetty restart    After Jetty is started if the very first page being visited is a page with AtmosphereBehavior (using @Subscribe)  for some reason by the time the page is being registered by EventBus (#registerPage(String trackingId  Page page)) the session is null and after the page has been rendered its not null any more thus having a different PageKey and so the events for the page are filtered out at line #140 or EventBusIf you just add Session.get().bind() in the constructor method of your page  everything would work as expected.   ,0
4645,encodeURL broken on Tomcat 7.0.28    During page transition wicket used to encode an '../../tisch' which results in an exception:Caused by: java.lang.IllegalArgumentException at org.apache.catalina.connector.Response.normalize(Response.java:1799)The transition (within an ajax call) :http://localhost:8080/wicket/bookmarkable/de.test.pool.manage.ManagePool?11http://localhost:8080/tischIMHO the double parent '..' is correctThere exists already an bugzilla issue created but rejected as invalid https://issues.apache.org/bugzilla/show_bug.cgi?id=53469.If the wicket code works as expected there must be an error in the tomcat. Maybe the wicket development team has closer access to the tomcat developers   ,0
4648,Upgrade Atmosphere to 1.0-beta    Version 1.0 of the Atmosphere Framework is nearing completion. Wicket-atmosphere should be upgraded to 1.0-beta. Using the beta is fine  because wicket-atmosphere itself is also beta.   ,0
4649,Add an additional Ajax call listener point - before the call    We need to add another point in the Ajax call lifecycle that is called as early as possible.Until now we have the preconditions which are called in jQuery's beforeSend() and they may stop the call completely. If they pass then the dynamic extra parameters are evaluated and the 'before' handlers are executed.But in some cases one may need to execute some handler as early as possible. For example to transfer the value of some complex widget to &lt;input type='hidden'&gt; which will be serialized in jQuery's data with the default means. Using dynamic extra parameters will be able to do the same but the price will be much higher because the hidden field's value will be already in the data with an empty value and one should care to remove it before adding the dynamic value.So I suggest to move 'before' handlers at the top of Wicket.Ajax.doAjax() method and add a new one - 'beforeSend' which will do the same as 'before' handlers until now.   ,0
4663,LazyInitProxyFactory uses wrong ClassLoader in OSGi environment    The method LazyInitProxyFactory#createProxy use Thread.currentThread().getContextClassLoader() to create a new proxy instance. It seems that this is not correct in an OSGi environment.Preferred is to use the ClassLoader provided by the AbstractClassResolver class (getClassResolver is not part of IClassResolver). Then it will be something like: ClassLoader classLoader; if (Application.exists()) { AbstractClassResolver classResolver = (AbstractClassResolver) Application.get() .getApplicationSettings() .getClassResolver(); classLoader = classResolver.getClassLoader(); } else { classLoader = Thread.currentThread().getContextClassLoader(); } try { return Proxy.newProxyInstance(classLoader  new Class[] { type  Serializable.class  ILazyInitProxy.class  IWriteReplace.class }  handler); }   ,0
4666,ResourceModel once assigned should not re-assign    ResourceModel's AssignmentWrapper is itself a ResourceModel.But sometimes you want to assign a ResourceModel to a component explicitely via #wrapOnAssignment() before passing the wrapper elsewhere.This is not possible currently  because the passed AssignmentWrapper will re-assign to the component it is passed to.   ,0
4679,XmlPullParser doesn't parse correctly attributes with complex namespace    Having a markup like:&lt;a class='addthis_button_google_plusone_badge' g:plusone:size='smallbadge' g:plusone:href='https://plus.google.com/25252/'&gt;&lt;/a&gt; causes XmlPullParser to throw the following exception:java.text.ParseException: Same attribute found twice: g:plusone (line 19  column 100) at org.apache.wicket.markup.parser.XmlPullParser.parseTagText(XmlPullParser.java:673) at org.apache.wicket.markup.parser.XmlPullParser.next(XmlPullParser.java:294) at org.apache.wicket.markup.parser.filter.RootMarkupFilter.nextElement(RootMarkupFilter.java:58).....   ,0
4681,AutoLinkResolver looks in the wrong scope    When turning on MarkupSettings#automaticLinking  AutoLinkResolver is supposed to touch tags like &lt;img&gt; and &lt;a&gt; and set their src/href attributes so that packaged resources are correctly referenced.I found a situation where that does not work: If you have a panel  and e.g. an &lt;img&gt; tag inside that panel  and the &lt;img&gt; tag is NOT enclosed in a container component  it looks for the resource in the scope of the surrounding component  not in the panel's scope. It obviously can't find it there  so it just dumps the raw attribute.If you put that &lt;img&gt; tag into a MarkupContainer (like WMC) then it works correctly. So it looks like the scope is off-by-one or something like that. I'll investigate.   ,0
4683,tag broken in certain situations when  reference added in page header section    Closing &lt;/script&gt; tag is swallowed in certain situations when external script reference is added (&lt;script src=''&gt;&lt;/script&gt;) to the page &lt;head&gt;&lt;/head&gt; section in Wicket 6.0.0-beta2 and beta3 and SNAPSHOTOriginal source code for &lt;head&gt; section:&lt;head&gt; &lt;meta charset='utf-8' /&gt; &lt;title&gt;Apache Wicket Quickstart&lt;/title&gt; &lt;link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular bold' rel='stylesheet' type='text/css' /&gt; &lt;link rel='stylesheet' href='style.css' type='text/css' media='screen' title='Stylesheet' /&gt; &lt;script type='text/javascript' src='http://akuku/something1.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://akuku/something2.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://akuku/something3.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='akuku/something4.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='/akuku/something5.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='akuku/something6.js'&gt;&lt;/script&gt;Rendered HTML: &lt;head&gt; &lt;meta charset='utf-8' /&gt; &lt;title&gt;Apache Wicket Quickstart&lt;/title&gt; &lt;link href='http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz:regular bold' rel='stylesheet' type='text/css' /&gt; &lt;link rel='stylesheet' href='style.css' type='text/css' media='screen' title='Stylesheet'/&gt; &lt;script type='text/javascript' src='http://akuku/something1.js'&gt;&lt;/script&gt; &lt;script type='text/javascript' src='http://akuku/something2.js'&gt;&lt;script type='text/javascript' src='http://akuku/something3.js'&gt;&lt;script type='text/javascript' src='akuku/something4.js'&gt;&lt;/script&gt;&lt;script type='text/javascript' src='/akuku/something5.js'&gt;&lt;script type='text/javascript' src='akuku/something6.js'&gt;&lt;/script&gt; &lt;/head&gt;   ,0
4691,Unescaped html in autocomplete    Create list of Strings with html keywords: List&lt;String&gt; list = Arrays.asList('a'  '&lt;td&gt;'  '&lt;li&gt;' '&lt;/td&gt;');Let autocomplete display these values: @Override protected Iterator getChoices(String input) { return list.iterator(); }html is unescaped  strings are 'copy and paste''d to htmlAjax response (from Firebug) looks like this:&lt;ul&gt;&lt;li textvalue='a'&gt;a&lt;/li&gt;&lt;li textvalue='&lt;td&gt;'&gt;&lt;td&gt;&lt;/li&gt;&lt;li textvalue='&lt;li&gt;'&gt;&lt;li&gt;&lt;/li&gt;&lt;li textvalue='&lt;/td&gt;'&gt;&lt;/td&gt;&lt;/li&gt;&lt;/ul&gt;   ,0
4704,Allow using custom CSS classes for the selected and last TabbedPanel tabs    Make it possible to use custom CSS classes for the selected and last tab in TabbedPanel   ,0
4717,StringValidator.exactLength has wrong variable in ErrorMessage    In error message for StringValidator.exactLength is variable ${exact}   but in StringValidator.decorate is added variable length to map and not exact. Exception when is error message interpolate for show in feedback.Caused by: java.lang.IllegalArgumentException: Value of variable [&#91;exact&#93;] could not be resolved while interpolating [['${label}' is not exactly ${exact} characters long.]]property from application.StringValidator.exact='${label}' is not exactly ${exact} characters long.When I added same property in my own properties and change exact to length  it works.   ,0
4723,tracking id retrieved in AtmosphereBehavior#onRequest() is always 0    jquery.atmosphere.js will always use 0 as initial tracking-id to send request and then reassign it from server response.AtmosphereBehavior#getUUID() shouldn't return the tracking-id from request header  since the initial request's tracking-id is 0.The correct way to retrieve tracking-id is calling AtmosphereResource#uuid()   ,0
4727,ThreadContext should be detached before each subscribed page gets notified    Since the event subscriptions may cross different sessions  before entering request cycles of notified page  the ThreadContext should be detached except application instance.In EventBus#post(Object event)  ThreadContext.detach() should be placed inside the for-loop block of atmosphere resources otherwise Session().get() may return previous page's session.   ,0
4730,Filter component does not clear filter fields    The GoAndClearFilter.onClearSubmit() does not clear filter fields because the originalState member has the current values of the filter. I think it should create a new instance of the originalState class instead of clone the model.To verify use the phonebook sample (https://github.com/wicketstuff/core/tree/master/jdk-1.6-parent/phonebook). The clear only works if 'go' was not pressed after enter some values in the filter  but if you press go and then want to clear the filter it keeps the values.Attached is a patch that makes the phonebook sample work.It might also be useful if the originalState attribute were made protected or accessible via protected method to allow users to overwrite the onClearSubmit() method and access the originalState attribute.   ,0
4731,TimeField not able to work with a java.sql.Time    When using the TimeField with a model whose object is a java.sql.Time  I get an error similar to the following when submitting the form:Last cause: Cannot parse '1/1/70' using format java.text.SimpleDateFormat@b4dc7db3Here's how the TimeField is constructed:TimeField tf = new TimeField(id  new Model&lt;java.sql.Time&gt;() {public java.sql.Time getObject() {// return java.sql.Time}});This error is occurring because SqlTimeConverter is trying to convert the string representation of the java.util.Date obtained from the TimeField. TimeField doesn't support anything other than java.util.Date. It would be useful if TimeField could work with subclasses of java.util.Date such as java.sql.Time. In order to achieve this  I would like to propose:Changing setConvertedInput(new Date(date.getMillis())); in DateTimeField.convertInput() to setConvertedInput(newDateInstance(date.getMillis()));Create an overridable newDateInstance(long) method. Users of TimeField can override this method to create a java.sql.Time instance instead of a java.util.Date. The form component conversion process will then work when the model object is a java.sql.Time.   ,0
4732,CssPackageResource doesn't work if the extension isn't css    CssPackageResource#processResponse is never called if the extension isn't css. It works for .css because PackageResourceReference#getResource checks if the extension is css and then creates a CssPackageResource. For anything else than .css/.js a PackageResource is created.Actually the overridden processResponse method in CssPackageResource (instead of PackageResource) should get called  but ResourceReferenceRegistry#createDefaultResourceReference installs a plain PackageResource which gets called later.   ,0
4735,KittenCaptchaPanel is broken    The code from the KittenCaptchaPanel example works fine with wicket versions 1.5.8 and 6.0.0-beta1  but fails to highlight kittens with versions 6.0.0-beta2 and 6.0.0-beta3.   ,0
4743,SerializingObjectSizeOfStrategy do not use framework serializer    Currently default implementation of SerializingObjectSizeOfStrategy do not use FrameworkSettings  thus it causes a ObjectNotSerializableException if serializer have custom behaviours.   ,0
4753,Resource bundles are not resolved on PriorityHeaderItems    If a bundle X provides resource A  and resource A is rendered as priority header item  the resource A is rendered  not bundle X.   ,0
4755,''NEW VALUE' is not a valid Serializable' error during ajax form submission    I attached a quickstart with a test in TestHomePage#formSubmitsSuccessfully.The test throws ''NEW VALUE' is not a valid Serializable' error when 'NEW VALUE' string in 'value' textField is submitted as a part of myForm ajax submission.The problem is that a call to Objects#convertValue(nonNullNonArrayValue  Object.class) will always return null if nonNullNonArrayValue is a value that is not null and not an array! Shouldn't it always return the first parameter when the second parameter is Object.class?Sven on Wicket forum suggested to fix this as by adding another if-statement in Objects#convertValue() if (toType.isInstance(value)) { result = toType.cast(value);}See the following forum thread for more information http://apache-wicket.1842946.n4.nabble.com/Issues-with-default-type-conversion-in-1-5-td4651857.html   ,0
4757,FormComponents remain invalid forever if there is no feedback panel    if there is no feedback panel the error messages are not removed in ondetach and form component re-validation is skipped so the form component  once marked as invalid  will remain invalid forever or at least until its error messages are rendered.the error messages should be dropped and the form component should be re-validated on every form submit.   ,0
4758,DOM ids change of the input fields of FilterToolbar    The fix in WICKET-3916 is not effective: https://fisheye6.atlassian.com/changelog/wicket?cs=1148229https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/Component.java#L2506As one can see in Component.internalRenderComponent()  the method Component.onComponentTag()  where the markup id is written to the tag  is called before the behavior had a chance to call setOutputMarkupId(true). (The Behavior.onComponentTag() is called in Component.renderComponentTag() a few lines down. The behavior has to call setOutputMarkupId() earlier  like in onConfigure()   ,0
4760,JavaScriptStripper fails with single line comments    The valid inputx++ //x++gets transformed tox++ x++which is syntactically invalid. This breaks the unminified version of bootstrap 2.1.1.The problem doesn't occur with multiline comments because the linebreaks are preserved there.   ,0
4769,Clicking on Label of Radio doesn't update component with Ajax update    We just upgraded a application from wicket 1.4 to wicket 6.We discovered that when clicking on the label of a radio button that has a AjaxFormChoiceComponentUpdatingBehavior attached the radio is not selected.I'll attach 2 testcases (one for wicket 1.4 and one for wicket 6)   ,0
4770,Wicket 6: modal windows in Safari are always in drag or resize mode    In Wicket 6 using Safari  a modal dialog will not allow interactions with form components. The whole dialog always seems to be in 'drag' mode. Click anywhere on the panel and the dialog will drag.Interaction works fine with all other browsers.   ,0
4773,ComponentFeedbackPanel broken under Wicket 6.0.0 when RenderStrategy.REDIRECT_TO_RENDER    Test case created on github  see https://github.com/danhaywood/wicket-4773browse to http://localhost:8080/wicket-examples/forminput and follow the instructions.   ,0
4775,PageParameters#mergeWith may loose values of the 'other' PP    The code at org.apache.wicket.request.mapper.parameter.PageParameters#mergeWith() looks like:for (NamedPair curNamed : other.getAllNamed()) set(curNamed.getKey()  curNamed.getValue());may loose some values if 'other' has a named parameter with several values.With the current code only the last name/value pair is preserved.   ,0
4780,Using both MountedMapper and CryptoMapper causes warning    Having both MountedMapper and CryptoMapper causes:WARN - WebPageRenderer - The Buffered response should be handled by BufferedResponseRequestHandler public void init() { setRootRequestMapper(new CryptoMapper(getRootRequestMapper()  this)); mountPage('/home'  HomePage.class); super.init(); } public HomePage(final PageParameters parameters) { super(parameters); add(new Label('version'  getApplication().getFrameworkSettings().getVersion())); add(new Form&lt;Void&gt;('form')); }--HomePage.html...&lt;form wicket:id='form'&gt;&lt;/form&gt;...   ,0
4784,DOM ids change of the input fields of FilterToolbar    The fix in WICKET-3916 is not effective: https://fisheye6.atlassian.com/changelog/wicket?cs=1148229https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/Component.java#L2506As one can see in Component.internalRenderComponent()  the method Component.onComponentTag()  where the markup id is written to the tag  is called before the behavior had a chance to call setOutputMarkupId(true). (The Behavior.onComponentTag() is called in Component.renderComponentTag() a few lines down. The behavior has to call setOutputMarkupId() earlier  like in onConfigure()   ,0
4789,URL rendering regression    The way URLs are encoded was changed (WICKET-4645) and now the first request (with ;jsessionid in path) generates invalid internal links:My page is mounted to '/Home/' and I get redirected to '/Home/;jsessionid=1234?0' (fine). There's a Link on the page and the generated URL for it is '../Home;jsessionid=1234?0-1.ILinkListener-link'. Note the missing '/'. This results in a 404 and breaks basically all of my system tests.I'll attach a simple quickstart which demonstrates the problem. It's important to delete the jsessionid cookie before accessing the page.   ,0
4794,RfcCompliantEmailAddressValidator error message not defined    The error message of the RfcCompliantEmailAddressValidator seems not to be defined.In case of validation error the following warning occurs: org.apache.wicket.markup.html.form.FormComponentCould not locate error message for component:RequiredTextField@description:form_id:emailand error:[ValidationError message=&#91;null&#93; keys=&#91;RfcCompliantEmailAddressValidator&#93; variables=[[pattern=(??:/r/n)?[ /t])*(???:[^()&lt;&gt;@ ;:/'.[] .../t])))/&gt;(??:/r/n)?[ /t]))))?;/s*)]]]. Tried keys:email.RfcCompliantEmailAddressValidator RfcCompliantEmailAddressValidator.   ,0
4795,Wicket unit tests rely on hashmap iteration order    Starting from version 7u5 java has supported randomizing the hashmap String key order (enabling this will fix CVE-2012-2739). It is also a good way to test the code if it is relying on hashmap order.More details: http://docs.oracle.com/javase/7/docs/technotes/guides/collections/changes7.htmlIn the latest Java 8 (b58) the randomized hashmap is enabled by default causing some wicket unit tests to fail randomly.   ,0
4796,DatePickerTest fails because of java inconsistensy on localizing March german shortname Mrz vs M�_�__r    The Oracle java7 and older return Mrz as german march short name.The Oracle java8 seems to have switched to the official (see http://de.wikipedia.org/wiki/Vorlage:Monat_Name-Nummer ) three letter short name M�_�__r.Some googling showed that IBM java has used the offical short name at least since 2008.I propose as a fix that the non-english test language is changed to something other than Locale.GERMAN in DatePickerTest method myTestExecution. For example Locale.ITALIAN  which has had consistent localization in Java world. Plus of course the reference data in DatesPage1_ExpectedResult.html needs to be regenerated.   ,0
4803,UrlDecoder should log a message when invalid input is provided    In the class: org.apache.wicket.protocol.http.WicketURLDecoder there are two IllegalArgumentException which should be wrapped in WicketRuntimeException  otherwise they are caught by the exception handler form the servlet container (jetty  tomcat  ...) which then uses their http 500 error code configuration instead of the exception handling of wicket.Wrapping them would be good for consistency and help manage runtime exceptions. These are the two exceptions:throw new IllegalArgumentException('URLDecoder: Incomplete trailing escape (%) pattern'); throw new IllegalArgumentException('URLDecoder: Illegal hex characters in escape (%) pattern - ' + e.getMessage());   ,0
4804,Add #setStatus(int) in AbstractResource.ResourceResponse    org.apache.wicket.request.resource.AbstractResource.ResourceResponse provides #setError(int code  String message) but doesn't provide #setStatus(int code).This makes it hard to set custom headers (e.g. cache control) and set status 304 because if HttpServletResponse#setErrorCode() is used then many headers are reset (including the cache control ones).   ,0
4806,AjaxEditableChoiceLabel won't close select onblur    AjaxEditableChoiceLabel won�_��_�t close the select combo (showed after clicking in the asociated label) when it losses the focus. It's supossed to call the onCancel method like it does in AjaxEditableLabel but the select turns into a label only selecting a different value in the select combo (it doesn't work pressing Escape or clicking in other part of the page).I fix it localy adding this code:editor.add(new AjaxEventBehavior('blur') { protected void onEvent(AjaxRequestTarget target) { AjaxEditableChoiceLabel.this.onCancel(target); }});For the editor declared as DropDownChoice in line 183 of AjaxEditableChoiceLabel .java.   ,0
4810,CLONE - BaseWicketTester.clickLink() does not work with a ResourceLink with ResourceReference    When using BaseWicketTester.clickLink() with a ResourceLink with a ResourceReference  it does not work.Clicking link in server (Jetty) it works and opens the resource. See attached quickstart.When the ResourceLink is created with the Resource directly  BaseWicketTester.clickLink() works. @Test public void clickingLink() { // doesn't work tester.clickLink('shared'); Assert.assertEquals(tester.getContentTypeFromResponseHeader()  'text/plain'); } @Test public void usingListener() { // doesn't work either tester.executeListener(tester.getComponentFromLastRenderedPage('shared')  IResourceListener.INTERFACE); Assert.assertEquals(tester.getContentTypeFromResponseHeader()  'text/plain'); }   ,0
4812,Make SerializationChecker easier for extending so custom checks can be added to it    Currently SerializationChecker is used in DEV mode when there is a problem with the serialization of a page to show which member field causes the problem.The checker can be improved to support additional custom checks like the one described at http://wicketinaction.com/2011/11/detect-attached-models-and-entities/ and similar.   ,0
4827,Modal panel mouse pointer in resize style for MSIE8 and MSIE9    In IE8 and IE9 the mouse pointer has the w-resize or e-resize style when hovering above a panel modal window. The wicket example does not have a doctype so Internet Explorer goes into quirks mode. Quirks mode is not an option for us.http://www.wicket-library.com/wicket-examples-6.0.x/ajax/modal-windowI will attach a quickstart.   ,0
4841,Return error code 400 when an Ajax request has no base url set in header/request parameters.    Hello currently we've got a problem with faked ajax requests. these ajax requests misses some parameters  but the wicket-ajax header flag is set. So ServletWebRequest throws an exception:java.lang.IllegalStateException: Current ajax request is missing the base url header or parameter at org.apache.wicket.util.lang.Checks.notNull(Checks.java:38) at org.apache.wicket.protocol.http.servlet.ServletWebRequest.getClientUrl(ServletWebRequest.java:171) at org.apache.wicket.request.UrlRenderer.&lt;init&gt;(UrlRenderer.java:59)These faked requests are so massive  that our application is no longer monitorable. Our workaround rejects these requests via apache config. Instead of logging an exception  in deployment mode wicket should log a warning and reject the request   ,0
4844,AbstractResourceReferenceMapper doesn't escape separators in style/variation names    org.apache.wicket.request.mapper.AbstractResourceReferenceMapper#encodeResourceReferenceAttributes() doesn't escape '-' character when generating the query string parameter with the locale-style-variation.So using a style with name 'a-b' leads to parameter with name '-a-b' and later is decoded to style == 'a' and variation == 'b'   ,0
4859,Integer overflow in AbstractToolbar    private static int counter = 0;This counter will overflow anytime... Please remove static.   ,1
4861,Making MultiFileUploadField use HTML5 multiple attr & remove confusing fakepath    WICKET-3370 prepared the terrain (all major browsers except IE already support it).I will make a Git pull request for getting this into the master branch.Here is what the changes do (commit comment):Added the possibility to select multiple files in the OS dialog forbrowsers that support HTML5 'multiple' attribute. For browsers that donot support it  or if you do not set the boolean to true  it will behavethe same as before.New: easier select multiple files from multiple folders shows the multiple files after choosing them - one per lineFixes: the delete buttons are aligned instead of positioning after thevariable length file names useless and confusing 'C:/fakepath' in filenames reported by somebrowsers (in multiple with single select mode) are now hidden.   ,0
4865,Page parameters not working with CryptoMapper    When CryptoMapper is used  page parameters do not work. This is because the incorrect request is set in the request cycle. The incorrect request contains the encrypted url  where the page parameters are encoded into the url segments. When the CryptoMapper maps a url to a request handler  it should set the request to the correct request when the request handler is selected.This was reported on the users@ list  but I have also fallen victim to it when getting urlFor(resourceReference  pageParameters) and the pageParameters not comming out on the other end.See:http://mail-archives.apache.org/mod_mbox/wicket-users/201211.mbox/%3C50991F74.3050605@unknown.za.net%3Ehttps://github.com/jesselong/wicket/commits/for-apache-master-pr-4 (3 commits)   ,0
4869,Wicket-Atmosphere track message length    When activating a PerRequestBroadcastFilter  the methods annotated with @Subscribe are unable to contribute to the AjaxRequestTarget.At the Filter level  the messages are OK but the client receives an empty &lt;ajax-response&gt;.A quickstart is attached where target/WEB-INF/lib is provided because jquery.atmosphere.js has been modified in order to activate track message length.Feel free to ask for more info.Regards Pierre Goupil   ,0
4876,CheckBoxMultipleChoice should implement getAdditionalAttributes as RadioChoice    Today there is no way to add additional attributes to each checkbox in CheckBoxMultipleChoice  the only way is to override the entire appendOptionHtml and copy the entire original source code and in that add your additional attribute. A much better way is to have Wicket provide a extension hook like org.apache.wicket.markup.html.form.RadioChoice.getAdditionalAttributes(int  T).   ,0
4878,Rendering of feedback messages fails with DebugBar in page    After the page is detached to calculate its size  messages are no longer available for FeedbackPanel to get the CSS styling for messages  failing with a NullPointerException.   ,0
4884,ValidationError messages for NumberTextFields with minimum/maximum are always English    Although my Form's Locale is  e.g.  de_DE  the error message generated from AbstractRangeValidator#validate(IValidatable) is always English.My German custom message for resource key 'RangeValidator.range' in the Page's resource bundle gets ignored too - the default custom message from the resource bundle is used instead.Reason might be that Component#getLocale() invoked from Localizer#getStringIgnoreSettings(String  Component  IModel  Locale  String  String) always returns NumberTextField#HTML5_LOCALE (fix for WICKET-3591).Pls. see attached quickstart.I'm a Wicket newbie  so could very well be that I'm missing something.   ,0
4887,Use a Set to keep the supported wicket elements in WicketTagIdentifier    WicketTagIdentifier stores a private static collection of wellKnownTagNames as an ArrayList.and a method called isWellKnown is called from within WicketTagIdentifier.onComponentTag and presumably it's called on every Wicket tag parsed. private boolean isWellKnown(final ComponentTag tag) { for (String name : wellKnownTagNames) { if (tag.getName().equalsIgnoreCase(name)) { return true; } } return false; }This method iterates over the list elements until an item is found so has O performance. If this array list was to be changed to a Set instead it would have O(1) performance. I haven't got any metrics on the usage and I don't think the improvement would be sensational but for web apps with large quantities of markup it could make some difference. For such a simple change it's probably worth it.   ,0
4891,UrlRenderer.renderRelativeUrl misbehavior if the filterPath is composed.    Using an application with a composed filterPath like:&lt;filter-mapping&gt; &lt;filter-name&gt;wicket.jsessionid&lt;/filter-name&gt; &lt;url-pattern&gt;/demo/test/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; Wicket fails to properly render a bookmarkable link.I've debuged my app and the problem is here:UrlRenderer.removeCommonPrefixes()Line 309:String filterPath = request.getFilterPath();if (filterPath != null &amp;&amp; segments.isEmpty() == false){ if (filterPath.equals(UrlUtils.normalizePath(segments.get(0)))) { LOG.debug('Removing the filter path '{}' from '{}''  filterPath  segments); segments.remove(0); }}This code assumes that the filter path is a single segment path  not a composed path.I've only reached this bug browsing my website with the cookies disable. This is why it's not critical.   ,0
4901,AjaxPagingNaviagtionLink should provide updateAjaxAttributes like AjaxLink    It is cumbersome to override AjaxPagingNavigationLink#newAjaxPagingNavigationBehavior to provide a subclass of AjaxPagingNavigationBehavior with it's updateAjaxAttributes overriden to allow for changing the ajax attributes. It would be easier if the AjaxPagingNavigationLink worked like AjaxLink.   ,0
4902,ConcatBundleResource should use the respective ITextResourceCompressor    Css and JavaScript bundles are not processed by Css/JavaScriptCompressors.org.apache.wicket.resource.bundles.ConcatBundleResource#readAllResources directly reads the resources' stream.   ,0
4904,Use a behavior that modifies AbstractLink's markup when disabled    Currently Wicket transforms &lt;a&gt; tag to &lt;span&gt;&lt;em&gt; when a link is disabled.Recently Wicket-Bootstrap user filed issue https://github.com/l0rdn1kk0n/wicket-bootstrap/issues/79 that this breaks the UI because Twitter Bootstrap needs just 'disabled='disabled'' attribute in &lt;a&gt;.With the new strategy it will be possible to set global strategy and override it per link.   ,0
4905,PagingNavigation: possible to call setStartIndex() earlier than onBeforeRender?    PagingNavigation has two actions in its onBeforeRender implementation:setDefaultModel(new Model&lt;Integer&gt;((int)Math.max(Integer.MAX_VALUE  pageable.getPageCount())));setStartIndex();Building my own PagingNavigation extending PagingNavigation  not being able to retrieve the start index before onBeforeRender  forces me to put a lot of logical code into my own onBeforeRender implementation.So there's a valid workaround  but I'd expect this to work from onConfigure also  maybe even from onInitialize.As far as I can see it should be possible to call the two methods earlier than onBeforeRender  however I might be missing the 'big picture' and oversee some side effects this could cause.   ,0
4906,Form#visitFormComponents can cause ClassCastException    The current method signature of Form#visitComponents allows for passing in an implementation of IVisitor that will cause a ClassCastException. ExampleAdd a CheckBox and TextField to the Form. Pass in an IVisitor&lt;CheckBox&gt; to visitComponents. There will be a ClassCastException when the IVisitor&lt;CheckBox&gt; attempts to visit the TextField.The method signature should be changed topublic final &lt;R&gt; R visitFormComponents(final IVisitor&lt;FormComponent&lt;?&gt;  R&gt; visitor)or the method should be removed to prevent confusion.   ,0
4908,Wrong charset or screwed up characters in Norwegian properties-file    In Wicket 6  up to and including 6.3.0  the Application_no.properties file has mangled all the Norwegian special characters (�_�__ �_�_� and �_�_�). Seems to be the only one of the Norwegian properties-files with problems  as far as I could tell.Edit: Also  the file is in UTF-8-format  which doesn't work...   ,0
4909,ModalWindow overwrites window.onbeforeunload    If window.onbeforeunload is changed after a ModalWindow is opened the change is lost when the ModalWindow is closed. I expected calling ModalWindow#showUnloadConfirmation(false) would fix this  but the javascript for the modal window unconditionally overwrites window.onbeforeunload. I suggest checking settings.unloadConfirmation before overwriting window.onbeforeunload.   ,0
4915,org.apache.wicket.util.resource.Patht#find fails on Windows    Windows users report that test org.apache.wicket.util.resource.PathTest#loadFromRootUsingSubpathInFilename fails for them.The suggested solution is to rework Path#find to:@Override public IResourceStream find(final Class&lt;?&gt; clazz  final String pathname) { final File file = new File(folder  pathname); final File pathOnlyFile = new File(pathname); if (file.exists()) { return new FileResourceStream(file); } if (pathOnlyFile.exists()) { return new FileResourceStream(pathOnlyFile); } else { return null; } }but I'm not quite sure in this solution.   ,0
4920,Rendered Url on root context with cookies disabled might result in double slash //    When a link is rendered on root context with cookies disabled (or on first access with container sending jsessionid)  a rendered link url might be prepended with './' thus resulting in a double slash  ('.//').   ,0
4923,CryptoMapper ignores original queryString parameters    When an AjaxRequest with parameters (e.g.: Autocomplete.getChoices()) arrives and CryptoMapper decrypts it  original queryString parameters dissapears.Debugging CryptoMapper  I've checked that this method:private Url decryptUrl(final Request request  final Url encryptedUrl) { ...}receives querystrings parameters (on field url.parameter from 'request' parameter) and the new Url returned by the method never adds them to its own list.   ,0
4924,Websocket broadcast support does not work with OSGi    WICKET-4832 provides websocket support but this does not work in an OSGi environment because the packages are not unique.This patch provides the changes to make it run under OSGi. Most of the changes are in the wicket-native-websocket modules  but WicketFilter from wicket-core has a new method to let AbstractUpgradeFilter only override the required parts (was TODO in original code).   ,0
4927,Header can not be set from IRequestCycleListener#onEndRequest()    Due to HeaderBufferingWebResponse a header can no longer be set from IRequestCycleListener#onEndRequest().In 1.4.x this was possible because BufferedWebResponse just passed through all headers to HttpServletResponse.   ,0
4932,Mounted page is not throwing ExpireException with setting setRecreateMountedPagesAfterExpiry(false)    We have a page that is both bookmarkable (and accessible with certain page parameters) and has a second constructor taking an object. When ever the session time-out we want to show a session expired page. But we get a exception because Wicket is trying to rebuild the page with no page parameters. We have set the setting getPageSettings().setRecreateMountedPagesAfterExpiry(false); This works when clicking on (ajax)links  but it's not working when using the back/forward button in the browser (or javascript:history.go(-1)).I'll attache a quickstart.   ,0
4933,Palette does not handle disabled choices correctly    It is possible to add choices to a Palette with the disabled HTML attribute. This attribute is respected by all modern browsers and prevents the selection of disabled choices.However Palette also has a double-click handler  which will ignore the disabled attribute and add the choice to the selection.The Javascript palette.js can be modified to prevent disabled choices from being added to the selection:Wicket.Palette.moveHelper=function(source  dest) { var dirty=false; for (var i=0;i&lt;source.options.length;i++) { if (source.options&#91;i&#93;.selected &amp;&amp; !source.options&#91;i&#93;.disabled) { dest.appendChild(source.options[i]); i--; dirty=true; } } return dirty; };Maybe it makes sense to integrate this into Palette?   ,0
4934,DownloadLink uses wrong encoding for spaces/non-ASCII characters    When downloading a file with spaces and non-ASCII characters in the filename using DownloadLink  all browsers I tested show a wrong filename in the file download dialog. For a file named Test '�_�__'.txt  I got the following output from different browsers:IE: Test+'�_�__'.txtFF: Test+%27%C3%A4%27.txtChrome: Test+%27�_�__%27.txtI have attached a patch that fixes the issue for me. The problem is thata) the used URL encoding is wrong. PATH encoding  not QUERY encoding is requiredb) only IE needs the filename to be encoded  other browsers seem to work with the original nameSee e.g. http://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http for a discussion of the underlying issue.Note: I do not believe the attached patch is the optimal fix for this issue. I would prefer removing the encoding handling from DownloadLink and putting it into AbstractResource.setResponseHeaders()  so other components using attachments benefit  too.   ,0
4935,Rendered URL is resulting with double slash when using AuthenticatedWebApplication    When the application requires authentication and a page requiring authentication is the first page to be accessed the url for the Login page is including a double slash causing a 404. This only happens when the page locked down is mounted with mountPackage.   ,0
4945,Wicket-atmosphere filters should be functions on AtmosphereResource    With a function on AtmosphereResource  rather than a predicate  it is possible to filter on attributes in the AtmosphereRequest. This would allow you to create filters that differentiate on the receiver  without relying on the heavy-weight contextAwareFilter().   ,0
4946,Allow passing parameters to atmosphere JS    Currently  it is not possible to pass parameters to the atmosphere JS  for example to disable websocket. In some situations you might want to change some of the default settings used by wicket-atmosphere to get everything working in your setup. For example  if your hosting provider does not support websocket  you should set the transport to streaming.   ,0
4956,compareTo methods of Actions in BufferedWebResponse violate Comparable contract    I've never seen this result in an exception so far  but the implementations of the methods is wrong and will fail on java 7 if multiple action instances of the same class are sorted using Collections.sort. The sorting should return 0 if instances are of the same type.   ,0
4962,AjaxFormChoiceComponentUpdatingBehavior cannot be triggered with BaseWicketTester#executeAjaxEvent()    BaseWicketTester executes AjaxFormComponentUpdatingBehavior only.   ,0
4964,Rename Component#renderHead(HtmlHeaderContainer)    It seems it happens somewhat often that users mistakenly override renderHead(HtmlHeaderContainer) rather than renderHead(IHeaderResponse). Code completion makes this a very easy mistake.I propose renaming the somewhat-internal method renderHead(HtmlHeaderContainer) to renderIntoPageHeaderContainer or something like that. We can't just make the method package private  since it is needed by Panel  Border and FormComponentPanel to render the header sections of their associated markup.   ,0
4970,Move the logic for creating the proper PackageResource from PackageResourceReference to ResourceReferenceRegistry    org.apache.wicket.request.resource.PackageResourceReference#getResource() has a logic that decides what type of PackageResource to return depending on the file extension. It supports only .css and .js at the moment.ResourceReferenceRegistry (RRR) uses this logic for unknown ResRefs. It will be better if this mapping is moved to RRR and be possible to add custom mappings.   ,0
4975,client side memory leak on  date picker    Under certain conditions date picker component leaks memory at client side. More concretely DatePicker#renderHead tries to clean up existing date pickers viaAjaxRequestTarget target = component.getRequestCycle().find(AjaxRequestTarget.class); if (target != null) { String escapedComponentMarkupId = getEscapedComponentMarkupId(); String javascript = 'var e = Wicket.$('' + escapedComponentMarkupId + 'Dp' + ''); if (e != null &amp;&amp; typeof(e.parentNode) != 'undefined' &amp;&amp; ' + 'typeof(e.parentNode.parentNode != 'undefined')) {' + 'e.parentNode.parentNode.removeChild(e.parentNode);' + 'YAHOO.wicket.' + escapedComponentMarkupId + 'DpJs.destroy(); delete YAHOO.wicket.' + escapedComponentMarkupId + 'DpJs;}'; target.prependJavaScript(javascript); }but this fails if 'panel' containing date pickers is completely replaced via AJAX. E.g. for date pickers placed on an AJAX navigated repeater. The result is that client side objectYAHOO.wicketobject grows and grows... and for1- Wicket 1.5.x and wicket 1.4.x this means time for creating new date pickers grows steadily.2- For wicket 1.6.x there seems not to have any performance hindrance (only the memory leak).I attach quick starts demonstrating this.   ,0
4983,extra recursion on Wicket.DOM.get    Any reason for DOM.get not being likeget: function (arg) { if (isUndef(arg)) { return null; } if (arguments.length &gt; 1) { var e = []; for (var i = 0; i &lt; arguments.length; i++) { e.push(get(arguments[i])); } return e; } else if (typeof arg === 'string') { return document.getElementById(arg); } else { return arg; }instead of get: function (arg) { if (isUndef(arg)) { return null; } if (arguments.length &gt; 1) { var e = []; for (var i = 0; i &lt; arguments.length; i++) { e.push(Wicket.$(arguments[i])); } return e; } else if (typeof arg === 'string') { return document.getElementById(arg); } else { return arg; }?   ,0
4986,wicket-ajax-jquery.js fails with 'member not found' on IE for delayed ajax requests    Channel#done() uses setTimeout() to execute delayed Ajax calls.On IE when the delayed call is executed  jquery's #preventDefault() fails with 'member not found' because the original event object's properties (here e.returnValue) can no longer be accessed.   ,0
4988,AbstractNumberConverter issue when used with NumberFormat#getCurrencyInstance    Summary of the discussion on users@:There is an issue when using AbstractNumberConverter when #getNumberFormat returns NumberFormat#getCurrencyInstance()I think the problem is due to AbstractNumberConverter#parse(Object  double  double  Locale):if (value instanceof String){ // Convert spaces to no-break space (U+00A0) to fix problems with // browser conversions. // Space is not valid thousands-separator  but no-br space is. value = ((String)value).replace(' '  '/u00A0');}Which replace spaces  so a string like '1 5 ����_�' is invalid while being parsed.public class CurrencyConverter extends AbstractNumberConverter&lt;Double&gt;{ private static final long serialVersionUID = 1L; public CurrencyConverter() { } @Override protected Class&lt;Double&gt; getTargetType() { return Double.class; } @Override public NumberFormat getNumberFormat(Locale locale) { return NumberFormat.getCurrencyInstance(locale); } @Override public Double convertToObject(String value  Locale locale) { locale = Locale.FRANCE; return this.parse(value  Double.MIN_VALUE  Double.MAX_VALUE  locale);// This does work:// final NumberFormat format = this.getNumberFormat(locale);// return this.parse(format  value  locale); }}As Sven indicates  there is (yet another) issue in Java currency formating (space as thousand separator)http://matthiaswessendorf.wordpress.com/2007/12/03/javas-numberformat-bug/http://bugs.sun.com/view_bug.do?bug_id=4510618So will I let you decide whether or not you wish to fix it (the space before the currency symbol).Thanks &amp; best regards Sebastien.   ,0
4989,WicketTester should send copies of its cookies    There are some bugs related to cookie handling in BaseWicketTester.Problem 1) a cookie set in the request should not be in the response unless manually set by the server codeProblem 2) wicket tester sends the original cookie instance to the server. If the server code manipulates the cookie anyhow (e.g. change its value) but do not send it back explicitly in the response then the original cookie in WicketTester (the request cookie) is updated while it shouldn't be.A possible solutions for these problems can be found at:https://github.com/apache/wicket/pull/28   ,0
5013,Wicket Enclosure fails with more than one component    An enclosure like:&lt;wicket:enclosure child='message'&gt; &lt;span wicket:id='message' /&gt; &lt;a href='#' wicket:id='link'&gt;&lt;/a&gt;&lt;/wicket:enclosure&gt;fails with:org.apache.wicket.WicketRuntimeException: The component(s) below failed to render. Possible reasons could be that: 1) you have added a component in code but forgot to reference it in the markup (thus the component will never be rendered)  2) if your components were added in a parent container then make sure the markup for the child container includes them in &lt;wicket:extend&gt;.1. [ExternalLink &#91;Component id = link&#93;]It will report failed rendering for all components within the enclosure except the child.This works if I turn the enclosure into an inline enclosure:&lt;div wicket:enclosure='message'&gt; &lt;span wicket:id='message' /&gt; &lt;a href='#' wicket:id='link'&gt;&lt;/a&gt;&lt;/div&gt;I got this error when upgrading from Wicket 6.2.0 to 6.3.0.I also noticed that the AjaxEnclosureListener only visits the InlineEnclosures.   ,0
5017,BaseWicketTester#clickLink() doesn not serialize form to request for SubmitLink but does for AjaxSubmitLink    BaseWicketTester#clickLink() handles AjaxSubmitLink and SubmitLink onconsistently for the former all form inputs are serialized to the request before triggering.   ,0
5020,InlineEnclosureHandler always uses 'wicket' namespace    The name of the wicket namespace is hardcoded in InlineEnclosureHandler:public final static String INLINE_ENCLOSURE_ATTRIBUTE_NAME = 'wicket:enclosure';This constant is also used by InlineEnclosure and was probably never meant to be part of the public API.These classes should respect the user defined namespace provided by the MarkupResourceStream.   ,0
5025,Set the component as a context to the ajax listeners    Currently to get the component in an Ajax listener (before  success  complete  ...) one has to use: attrs.event.target.In Wicket 1.5 one could use 'this' in ajax call decorators because the script was a value of the inline attribute.Currently 'this' in event listeners is unusable. It would be good to set the component as a context.   ,0
5038,Add equals() and hashcode() implementation to INamedParameters.NamedPair    It would be handy to have an equals() and hascode() implementation based on key and value  so that it is possible to do things likepageParameters.getAllNamed().contains(myNamedPair)In case you are interested:My current use case is that the page should check whether it is actually called with the pageparameters needed (i.e. using the unique  canonical URL)  however ignoring some special params.   ,0
5040,Session.exists() returns false when ThreadContext#session is not set to current session    There are several places in Wicket which check for the existence of a Session before actually getting a reference to it  e.g. FeedbackCollector: public final List&lt;FeedbackMessage&gt; collect(final IFeedbackMessageFilter filter) { ... if (includeSession &amp;&amp; Session.exists()) { messages.addAll(Session.get().getFeedbackMessages().messages(filter)); } }If no one has called Session#get()  all calls to Session#exists() return false although a session might exist in the session store  i.e. it might just not be set to ThreadContext#session already.   ,0
5050,AutoComplete should not request suggestions if input is no longer active element    If an ajax change event handler disables and re-renders an AutoCompleteTextField  a pending ajax request for suggestions will trigger a ListenerInvocationNotAllowedExecption. This leads to a log warning 'behavior not enabled; ignore call' but the redirect to the AccessDeniedPage is ignored by wicket-autocomplete.js.   ,0
5054,Possible bug in org.apache.wicket.util.lang.Packages when building path with repeating names    When trying to build the absolute path from package 'com.foo.bar' with relative path 'baz/foo/qux' in method org.apache.wicket.util.lang.Packages.absolutePath(String  String) the block: else if (absolutePath.size() &lt;= i || absolutePath.get(i).equals(folder) == false) { // Add to stack absolutePath.add(folder); }doesn't run for the 'foo' part of the relative path because absolutePath.get(1) == foo from the package == foo from the relative path.So the resulting absolute path is 'com/foo/bar/baz/qux' rather than the expected 'com/foo/bar/baz/foo/qux'.Seems like the 'else if' should just be a 'else'.   ,0
5055,AutoComplete still triggers redundant events to registered change listener       ,0
5065,Improve UrlRenderer to be able to render urls without scheme and/or host    UrlRenderer can be improved to support rendering urls like: //hostname:1234/a/b //hostname/a/b /a/b   ,0
5066,Allow PackageResource to decide itself whether it could be accepted or not    By default PackageResource uses IPackageResourceGuard to check whether it can be rendered or not.By making org.apache.wicket.request.resource.PackageResource#accept(Class  String) protected the resource itself can do the check  e.g. allow the access when usually the guard would reject.   ,0
5073,UrlRenderer#removeCommonPrefixes() fails when contextPath+filterPrefix has more segments than the argument    I get this exception when trying to create a URL with RequestCycle#urlFor:org.apache.wicket.WicketRuntimeException: An error occurred while generating an Url for handler 'ResourceReferenceRequestHandler{resourceReference=scope: org.apache.wicket.Application; name: ImageResource; locale: null; style: null; variation: null  pageParameters=publicId=[f74df62d-cbdb-49db-96e4-36e3ea62610e]  type=[sr]}' at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:516) &#91;wicket-core-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:473) &#91;wicket-core-6.6.0.jar:6.6.0&#93; at xxx.XXXWebApplication.urlFor(XXXWebApplication.java:161) ~&#91;xxx-web-0.1.0-SNAPSHOT.jar:0.1.0-SNAPSHOT&#93;&#91;...&#93;Caused by: java.lang.IndexOutOfBoundsException: Index: 0  Size: 0 at java.util.ArrayList.rangeCheck(ArrayList.java:604) ~&#91;na:1.7.0_10&#93; at java.util.ArrayList.remove(ArrayList.java:445) ~&#91;na:1.7.0_10&#93; at org.apache.wicket.request.UrlRenderer.removeCommonPrefixes(UrlRenderer.java:319) ~&#91;wicket-request-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.UrlRenderer.renderRelativeUrl(UrlRenderer.java:220) ~&#91;wicket-request-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.UrlRenderer.renderUrl(UrlRenderer.java:117) ~&#91;wicket-request-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.cycle.RequestCycle.renderUrl(RequestCycle.java:529) &#91;wicket-core-6.6.0.jar:6.6.0&#93; at org.apache.wicket.request.cycle.RequestCycle.urlFor(RequestCycle.java:511) &#91;wicket-core-6.6.0.jar:6.6.0&#93; ... 46 common frames omittedThe app uses a context path and no filter path. I see that UrlRenderer#removeCommonPrefixes receives an empty list and the code in the method assumes that context path + filter path is always a common prefix and tries to remove it later from the empty list.   ,0
5076,form#onSubmit() is called on just replaced nested forms    I use wizard api from wicket extensions.Next button is implemented like org.apache.wicket.extensions.wizard.NextButton.It means: if step is complete wizardModel.next() is called and step content is replaced.I send you example - see attachment.In the example Step2Panel contains inner form 'innerForm'.The problem is when we leave step 1 (click to next button) - innerForm.onSubmit from step 2 is called. Obversely when we leave step 2 innerForm.onSubmit is not called!One solution is to call form.process(null) manually in Nextbutton.onClick before step content is replaced. It is wrong again becaouse innerForm.onSubmit is called twice.   ,0
5079,Allow WebApplication-specific Spring configuration    SpringWebApplicationFactory allows two places to defined a WebApplication: in the global root application context loaded by Spring's ContextLoaderListener in a filter-specific additional web applcation context.SpringComponentInjector is not aware of this additional context but just uses the global one. This imposes the following restrictions: the filter-specific context cannot define any beans to be used by SpringComponentInjector SpringComponentInjector cannot work without a global root application  i.e.ContextLoaderListener is required.Starting with Wicket 6.7.0 the filter-specific context is made accessible to SpringComponentInjector. If no application context is given explicitly to SpringComponentInjector's constructor  by default the injector uses the application context used to create the WebApplication.Benefits: no need to define ContextLoaderListener in web.xml (i.e. less xml) use application-specific beans defined in the filter-specific application context   ,0
5085,InlineEnclosure are piling up on each render    InlineEnclosureHandler#resolve() uses an auto-incremented id for its resolved InlineEnclosure  On the next render  a new instance will be resolved  since the id of the already resolved InlineEnclosure does not match the id in the markup.But InlineEnclosures are not removed after render as other auto-components  thus all instances pile up in the owning container of the markup.   ,0
5086,FormTester throws an exception when a Palette component is added to a Form associated with a compound property model    FormTester throws an exception when a Palette component is added to a Form associated with a compound property model:org.apache.wicket.WicketRuntimeException: No get method defined for class ... expression: choicesIt worked fine in Wicket 6.5.0  and works fine if the form is not associated with a compound property model.   ,0
5088,The Bootstrap class does not provide a handle for the CSSResourceReferences.    The Bootstrap class provides JavaScriptResourceReference via the plain() and responsive() methods.It should also provide access to bootstrapCss and bootstrapResponsiveCss to enable the applications to use CSS bundles.   ,0
5091,Extract the short names of the ajax attributes as a constants    Currently the short names of the AjaxRequestAttributes are hardcoded to AbstractDefaultAjaxBehavior#renderAttributes().   ,0
5104,AjaxSelfUpdatingTimerBehavior in hidden component in ModalWindow causes Ajax Response Error    I have a ModalWindow which shows a panel with a hidden label with an AjaxSelfUpdatingTimerBehavior. When the modal window is shown  the following error occurs in the Wicket Ajax Debug console:ERROR: Wicket.Ajax.Call.processEvaluation: Exception evaluating javascript: TypeError: Cannot read property 'label5' of undefined  text: (function(){clearTimeout(Wicket.TimerHandles['label5']); delete Wicket.TimerHandles['label5'];})();   ,0
5113,Set a different TimeZone for the RequestLogger    I'm using wicket 1.5.9. In my log4j.xml I have:&lt;logger name='org.apache.wicket.protocol.http.RequestLogger'&gt; &lt;level value='info'/&gt;&lt;/logger&gt;but when I'm testing my log file output is showing the request logger information using GMT timezone and I need to be GMT+1. Following Martin Grigorov is it possible to remove the final from org.apache.wicket.protocol.http.AbstractRequestLogger#formatDate method?   ,0
5117,Wicket ignores allowDefault:false attribute in multipart ajax requests       ,0
5123,Component.continueToOriginalDestination() can redirect to ./.    Following scenario:Home page redirects to login page via RestartResponseException if no user is logged in.The user logs in  and is led back to the originally called page via continueToOriginalDestination().If the original page was the home page  Wicket's UrlRenderer produces a target url of ./. here (which IE browsers can't handle).   ,0
5124,Improve ResourceReference#getDependencies() API    currently the signature ispublic Iterable&lt;? extends HeaderItem&gt; getDependencies()which is awkward to use.suppose i want a javascript reference that should include a css reference as a dependency  i cannot simply add it to iterable like this:new ResourceReference(Some.class  'some.js') { Iterable getDependencies() { Iterable supers=super.getDependencies(); // supers.add(CSS); &lt;=== cannot do this  instead List list=new ArrayList(); for (reference:supers) { list.add(reference); } // now i can finally add mine list.add(CSS); return list; }}instead change Iterable to a List that is backed by a mutable one. this should make extending much easier. if List is too 'open' create Appendable { append(); } backed by a list and use that.   ,0
5126,SecurePackageResourceGuard is blocking access to web fonts       ,0
5132,Evaluation of returned data (which includes alot of javascript) very slow after ajax call in IE10.    We're using ajax to update a treetable. In IE10  when the ajax call returns the data  which contains alot of javascript code  processEvaluation in wicket-ajax-jquery.js stalls on var text = jQuery(node).text();In jQuery procedure Sizzle.getText is called  which eventually returns property elem.textContent. In IE10 this last statement takes about 26 seconds for our case while the same statement in chrome takes about 6 ms.It seems strange that IE10 takes this long to return the textContent of a node  but why is this necessary in the first place?The purpose of var text = jQuery(node).text() would be to get the text of the node. I think it would suffice to state var text = node.childNodes&#91;0&#93;.nodeValue instead of var text = Query(node).text()  because the text is in the node itself  and it's not necessary to get the text from its descendants  because it has no descendants.In our case this modification improves the duration from 25915 ms to 8 ms in IE10.   ,0
5135,wicket-atmosphere EventBus constructor throws NullPointerException under invalid state    With invalid configuration  like the WebApplication not yet associated with the servlet  wicket-atmosphere throws NPE.Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'atmosphereEventBus' defined in class id.co.bippo.springapp.AppConfig: Instantiation of bean failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.apache.wicket.atmosphere.EventBus id.co.bippo.springapp.AppConfig.atmosphereEventBus()] threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:581) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1031) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:927) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:490) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:314) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:910) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:853) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:768) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:486) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] ... 107 common frames omittedCaused by: org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.apache.wicket.atmosphere.EventBus id.co.bippo.springapp.AppConfig.atmosphereEventBus()] threw exception; nested exception is java.lang.NullPointerException at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:181) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:570) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] ... 117 common frames omittedCaused by: java.lang.NullPointerException: null at org.apache.wicket.atmosphere.EventBus.&lt;init&gt;(EventBus.java:113) ~[wicket-atmosphere-0.8.jar:0.8] at id.co.bippo.springapp.SoluvasWebApplication.getEventBus(SoluvasWebApplication.java:296) ~[SoluvasWebApplication.class:na] at id.co.bippo.springapp.AppConfig.atmosphereEventBus(AppConfig.java:270) ~[AppConfig.class:na] at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07.CGLIB$atmosphereEventBus$1(&lt;generated&gt;) ~[spring-core-3.2.2.RELEASE.jar:na] at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07$$FastClassByCGLIB$$40a0fc3e.invoke(&lt;generated&gt;) ~[spring-core-3.2.2.RELEASE.jar:na] at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-3.2.2.RELEASE.jar:3.2.2.RELEASE] at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:286) ~[spring-context-3.2.2.RELEASE.jar:3.2.2.RELEASE] at id.co.bippo.springapp.AppConfig$$EnhancerByCGLIB$$a9c1dc07.atmosphereEventBus(&lt;generated&gt;) ~[spring-core-3.2.2.RELEASE.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_15] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_15] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_15] at java.lang.reflect.Method.invoke(Method.java:601) ~[na:1.7.0_15] at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:160) ~[spring-beans-3.2.2.RELEASE.jar:3.2.2.RELEASE] ... 118 common frames omittedIt should wrap the NPE in a more descriptive error. Suggestion: 'Provided Wicket WebApplication is not associated with a ServletContext. Please ensure Wicket application is fully initialized before creating Atmosphere EventBus.'   ,0
5140,InterceptData never gets cleared from session after continueToOriginalDestination is called and another page is requested afterwards    We have the same problem as earlier described by Chris in WICKET-4500:'The above fix is great but we've run into another problem. If an admin user attempts to go to a restricted page and gets redirected via a RedirectToInterceptException but then decides not to log on but then goes to the normal home page authentication and then successfully logs on as a standard user that authentication will redirect to where the admin initially wanted to go to - because they never authenticated as admin continueToOriginalDestination was never called and so Wicket still thinks that when continueToOriginalDestination is called after the standard user's authentication that it needs to redirect to the original admin page... fun!Would it be possible to introduce an explicit 'clearRedirect' method so that when the home page does a RestartResponseException to redirect to the standard user authentication page it can  at the same time  do a 'clearRedirect' so that a subsequent call to continueToOriginalDestination does not attempt to go to the admin page.I can't remove the continueToOriginalDestination from the standard user authentication page because it is still required to perform a continue when it was reached by a RedirectToIntercepException from restricted pages other than the home page. '   ,0
5141,Exception while rendering absolute URL with UrlResourceReference    While rendering absolute url UrlRenderer calls renderFullUrl on line 112 which causes error.   ,0
5143,Create an interface for the roles replacing the current Roles class    Currently the roles in wicket are managed by a final class  Roles  that extends HashSet.In my current projects I have to manage permissions considering several factors that include the role  the creator and the type of data  and this must be done also when displaying tables with several rows. Having the possibility to create my own Roles class I can integrate my restrictions with wicket authorization and add some performance improvements (required in this case because the validation must be done at the field level).   ,0
5149,PageRequestHandlerTracker doesn't track resolves of handlers caused by Exception    PageRequestHandlerTracker should implement #onExceptionRequestHandlerResolved()   ,0
5150,Log additional info when FormComponent fails in updateCollectionModel    When a form component using Collections (e.g. CheckGroup) fails to set the collection in the Model's contained object due to an exception  it produces some log output that looks thus:INFO - FormComponent - no setter for the property attached to [CheckGroup &#91;Component id = group&#93;] This may be misleading  as any exception will produce this output  including for example a NullPointerException that occurs inside the setter itself. In other words  setter for the property may well exist but an exception sometime during the setter invocation still results in the 'no setter' log feedback. Suggested improvement is to include some details about the caught exception in this log message that may more directly point to the cause of the failure.   ,0
5157,URL query parameter values containing equals sign get cut off    When calling a page with a query parameter like 'param1=val1=val2' the value of 'param1' obtained from PageParameters will be 'val1'. Everything after the equals sign inside the parameter value gets cut off.   ,0
5161,The url gets longer when using StatelessForm with GET method    The request parameter used for IRequestListener resolution is added to the page parameters for each form submit.   ,0
5164,PageStoreManager.SessionEntry keeps outdated sessionId when container changes sessionId    PageStoreManager keeps the initial sessionId for each SessionEntry.If the container changes the sessionId later (e.g. Tomcat's 'Session Fixation Protection')  all pages continue to be stored under the the initial sessionId. This is necessary to be able to access old pages even after a change to the sessionId.However PageStoreManager#sessionExpired(String) passes the current sessionId to the PageStore. If it is not longer equal the original sessionId  the PageStore will fail to remove the stored pages for the session.   ,1
5173,Make ThrottlingSettings mutable    ThrottlingSettings can be modifiable so if an Ajax behavior sets some default throttling setting then a component using this behavior can just change the delay or postpone flag without the need to set a completely new one.   ,0
5179,Move Form hidden field rendering to dedicated method    Form renders its hidden fields in onComponentTagBody()  which is never called when the markup sourcing strategy is PanelMarkupSourcingStrategy. Please can we move this to a dedicated method which can be called from MarkupSourcingStrategy#onComponentTagBody() when the component is instanceof Form.   ,0
5182,Incorrect signature of types which extend Comparable    AbstractRangeValidator has the following Signature:public abstract class AbstractRangeValidator&lt;R extends Comparable&lt;R&gt; &amp; Serializable  V extends Serializable&gt; extends Behavior implements IValidator&lt;V&gt;Because of this it cannot be used with DateMidnight as its Comparable implementation is in a base class.I think the correct signature should be:public abstract class AbstractRangeValidator&lt;R extends Comparable&lt;? super R&gt; &amp; Serializable  V extends Serializable&gt; extends Behavior implements IValidator&lt;V&gt;   ,0
5198,Change AjaxRequestAttributes#eventPropagation to BUBBLE    AjaxRequestAttributes#eventPropagation should initially be set to BUBBLE to be consistent with jquery.   ,0
5202,Page redirects can fail when using url encoding    When url encoding is used instead of cookies for session management  some redirections do not work in Wicket 6.8.0. The problem appears to be in UrlRenderer.renderRelativeUrl  which returns the (invalid) relative URL:'..//demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F' when passed the URL:'http://localhost:8080/demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15F'and when the UrlRenderer's base URL is: 'wicket/page?1-1.ILinkListener-link'This is because the removeCommonPrefixes method tries to compare segments between the encoded target URL and a URL parsed from (URLRenderer line 319):Url commonPrefix = Url.parse(request.getContextPath() + request.getFilterPath());This second URL does not contain the ;jsessionid=... suffix and the removeCommonPrefixes method doesn't remove prefixes properly. The problem doesn't occur when using cookies for session management  of course.This issue is new between Wicket version 6.2.0 and 6.8.0. When deployed into a servlet container using url-encoding for session management  the following app works under Wicket 6.2.0 but fails (because of redirecting to an invalid URL) under Wicket 6.8.0:// ------------------------// App.javaimport org.apache.wicket.protocol.http.WebApplication;import org.apache.wicket.Page;public class App extends WebApplication { @Override public Class&lt;? extends Page&gt; getHomePage() { return A.class; }}// ------------------------// A.javaimport org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.link.Link;public class A extends WebPage { public A() { add(new Link&lt;Object&gt;('link') { @Override public void onClick() { setResponsePage(B.class); } }); }}// ------------------------// B.javaimport org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.link.Link;public class B extends WebPage { public B() { add(new Link&lt;Object&gt;('link') { @Override public void onClick() { setResponsePage(A.class); } }); }}// ------------------------Clicking the link on the home page A will successfully navigate to page B. Clicking the link on page B should navigate to page A. Under Wicket 6.2.0  or Wicket 6.8.0 with cookies  it works. With Wicket 6.8.0 and url-encoding  it tries to redirect to an incorrect URL like http://localhost:8080/demo/app//demo/app;jsessionid=0BFE4703434CFF7BEBAE5CBF6C60B15Fwhich fails (note the double slash and repeated context/filter in the URL). It is possible to configure Tomcat to use url encoding instead of cookies for session management by editing the conf/context.xml file within the Tomcat installation and making the root element of that file read: &lt;Context cookies='false'&gt;   ,0
5203,Base url is incorrect for error dispatched pages    The fix for https://issues.apache.org/jira/browse/WICKET-4387 includes the following code in org.apache.wicket.protocol.http.servlet.ServletWebRequest#ServletWebRequest(HttpServletRequest httpServletRequest  String filterPrefix  Url url):if (forwardAttributes != null || errorAttributes != null) { if (LOG.isDebugEnabled()) { LOG.debug('Setting filterPrefix('{}') to '' because there is either an error or a forward. {}  {}'  new Object[] {filterPrefix  forwardAttributes  errorAttributes}); } // the filter prefix is not needed when the current request is internal // see WICKET-4387 this.filterPrefix = '';The filterPrefix is actually needed later when a request is made due to an error (e.g. 404):public Url getClientUrl() { if (errorAttributes != null &amp;&amp; !Strings.isEmpty(errorAttributes.getRequestUri())) { String problematicURI = Url.parse(errorAttributes.getRequestUri()  getCharset()) .toString(); return getContextRelativeUrl(problematicURI  filterPrefix);With filterPrefix=='' the urls for any resources in the error page are wrong.   ,0
5206,Provide default messages for upload exceptions    Error message keys for upload exceptions are prefixed with the form's markup id currently. If we let the Localizer do this  Wicket can provide default messages for different locales.   ,0
5207,Use documented jQuery APIs for triggering the special event 'inputchange'    jQuery 1.9/2.0 changed its internals and now the special event 'inputchange' doesn't work.wicket-examples' autocomplete demo shows the problem.   ,0
5220,AjaxEditableLabel not working well in form    Using quickstart I created new maven project (using 6.8.0 wicket + extensions).Code of my page ispackage net.betlista;import org.apache.wicket.extensions.ajax.markup.html.AjaxEditableLabel;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.model.CompoundPropertyModel;public class AjaxEditableLabelInFormTestPage extends WebPage { Form&lt;AjaxEditableLabelInFormTestPageModel&gt; form = new Form('form'); AjaxEditableLabel&lt;String&gt; text = new AjaxEditableLabel&lt;String&gt;('text'); public AjaxEditableLabelInFormTestPage() { form.setModel(new CompoundPropertyModel&lt;AjaxEditableLabelInFormTestPage.AjaxEditableLabelInFormTestPageModel&gt;(new AjaxEditableLabelInFormTestPageModel())); form.add(text); add(form); } class AjaxEditableLabelInFormTestPageModel { String text; }}code for markup HTML is&lt;!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN' 'http://www.w3.org/TR/html4/loose.dtd'&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;span wicket:id='text'&gt;text&lt;/span&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;and when I edit the label and press tab  it changed to regular page text (span)  but when I press enter (while editing) the component is still input instead of span and the content is not submitted also. It's not possible to change the component to span again...   ,0
5222,Direct iframe removal not supported by Firefox: tab title stays as 'Connecting'    Hi When using the post via iframe feature of Wicket (for multipart Ajax request) with Firefox  the tab title is changed to 'Connecting...' and it doesn't get back to the original page title at all  even after the Ajax call returned.The iframe is removed in the onload of the iframe ( seehttps://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/ajax/res/js/wicket-ajax-jquery.js#L868) and it seems to be problematic for Firefox.Looks like there is some literature about it here:http://stackoverflow.com/questions/7285866/never-ending-connecting-message-after-ajax-form-submitand using a pattern like the following should fix it:iframe.onload = function(){ // Do work with the content of the iframe��_�__ setTimeout(function(){ iframe.parentNode.removeChild(iframe); }  0);}Quickstart coming with a way to reproduce the problem: Launch the application using Start.java; Go to http://localhost:8080/ with Firefox; Upload a file via the Ajax submit button; The tab title stays as 'Connecting...'.Now uncomment the resource replacement line in the WicketApplication file  restart the app and it should work correctly.Patch using a setTimeout call coming too.   ,0
5223,AjaxEditableLabel doesn't provide a way to configure Ajax attributes for its Ajax behaviors    AjaxEditableLabel uses EditorAjaxBehavior and LabelAjaxBehavior to change its modes.At the moment there is no way to configure custom Ajax attributes for both behaviors.   ,0
5224,ModalWindow is not visible in Safari when opened from a link at the bottom of a large page    I am not able to see a ModalWindow in Safari and I expect to see it centered on my view port.Steps:1. Start with a large web page with a link to open the ModalWindow at the bottom of the page. You need a large page where you have to scroll down to find the link.2. Click the link3. Observe that the mask for the ModalWindow displays  but the ModalWindow does not. Scrolling back up  re-sizing  and maximizing will still not display the ModalWindow.   ,0
5226,CDI integration fails in Glassfish 4.0 with WELD-000070    When CDI is configured in the Application and a page has a non-static inner class the page throws exception  regardless of whether there are any injected fields.Caused by: org.jboss.weld.exceptions.DefinitionException: WELD-000070 Simple bean &#91;EnhancedAnnotatedTypeImpl&#93; private class com.inversebit.HomePage$AForm cannot be a non-static inner class at org.jboss.weld.injection.producer.BasicInjectionTarget.checkType(BasicInjectionTarget.java:81) at org.jboss.weld.injection.producer.BasicInjectionTarget.&lt;init&gt;(BasicInjectionTarget.java:69) at org.jboss.weld.injection.producer.BeanInjectionTarget.&lt;init&gt;(BeanInjectionTarget.java:52) at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:95) at org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:78) ... 65 more   ,0
5229,use jquery 'focusin'/'focusout' for ajax focus tracking    Focus tracking in wicket-ajax-jquery.js can be simplified with jQuery bubbling 'focusin'/'focusout'.   ,0
5237,Wicket generates invalid HTML by expanding col tags    hi I just noticed that wicket expands col tags  even though the (x)html specifications forbids it.take this markup as an example:&lt;table&gt; &lt;colgroup&gt; &lt;col width='20%' /&gt; &lt;col width='80%' /&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;I take a fifth of the available space&lt;/td&gt; &lt;td&gt;I take four fifth of the available space&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;Instead of return this as-is  it get's converted to:&lt;table&gt; &lt;colgroup&gt; &lt;col width='20%'&gt;&lt;/col&gt; &lt;col width='80%'&gt;&lt;/col&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;I take a fifth of the available space&lt;/td&gt; &lt;td&gt;I take four fifth of the available space&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;But the specifications mention that col tags must not have end tags. This may be related to WICKET-2765  as this seems to be the point when col was added to the OpenCloseTagExpander class. Note that it is ok to have a non closing col tag in html (self-closing in xhtml). It's all about generating a separated end tag.This happens in wicket 6.8  but I guess it's relevant to all versions down to wicket 1.4.Specs for reference:http://www.w3.org/TR/1999/REC-html401-19991224/struct/tables.html#edef-COLhttp://www.w3.org/TR/html-markup/col.htmlKind regards Konrad   ,0
5243,JS: High stack size in Function Executor causes 'too much recursion'    The Function Executor in wicket-ajax-jquery.js uses recursion and deferred calls to the notify() function to ensure synchronous execution of all tasks contained in an AjaxResponse.Each task calls notif() when it is finished. This causes a recursive call to processNext() thus raising the stack for each execution. If there are a lot of task to handle  the stack size will increase beyond the possible stack size in the client causing a 'too much recursion' exception and increasingly low performance.The deferred execution of notify is only necessary if the task executor has to wait for long running tasks to finish at some uncertain point in the future. Examples: downloading of external resources (js  css  images). These task can call back the executor as soon as they are really finished (e.g. load event triggerd).The problem is that the majority of tasks don't need to wait but return instantly instead. Examples: exchanging components  executing custom javascripts that do not use the '|-syntax' to include the notify callback.Current fix: The depth of the stack is counted and if a depth of &gt;= 1000 is reached  a timeout will interrupt the synchronous task queue execution. A new executor will continue with an empty stack.Problems with that approach:  why 1000? several ajax requests might interrupt each other because the synchronous execution is broken. if an executed custom javascript creates a big stack itself (e.g. by using jquery a lot) the stack will add to the stack used by the Function Executor so that it may still be too big.Proposal to fix this: see also the attached patch.Another callback notifyContinue() is supported that can be called whenever the task will return instantly. This callback avoids the recursive call to processNext and continues in a simple loop over all the tasks.   ,0
5247,Broken Link in Tomcat because of Page Mount    I post this message on the user mailing List (http://apache-wicket.1842946.n4.nabble.com/Broken-Link-in-Tomcat-because-of-Page-Mount-tt4659663.html) and Martin Grigorov asked me  to create a ticket on Jira.Broken Link in Tomcat because of Page MountFollowing situation:-I have a Wicket Application(6.8.0) which runs under the context 'webapp' on a Tomcat 7.0.41-I mount a Page with two parameters (this is important) in the WicketApplication. mountPage('/mount/${parameter1}/${parameter2}'  MountedPage.class);-The mounted Page(MountedPage.class) has only a simple Link-There are two links on the HomePage to the mounted Page. They are declared as follows: add(new Link&lt;Void&gt;('link') { @Override public void onClick() { setResponsePage(MountedPage.class  linkParameters); } }); add(new Link&lt;Void&gt;('brokenLink') { @Override public void onClick() { setResponsePage(new MountedPage(linkParameters)); } });I deploy this Application as a war file on a Tomcat under the context 'webapp'.When I call the first Link on the HomePage and then the Link on the mounted Page  everything works fine.But if I call the second Link and then the Link on the mounted Page  the link is broken.The context is missing in the generated link http://localhost:8080/wicket/bookmarkable/com.mycompany.LinkedPageDoes anyone have an idea  why the second link does not work on Tomcat?I add a Quickstart and the war file as attachment.Ps: Both links works fine in Jetty. Pss:If I remove the mount command  both links will work in Tomcat too.   ,0
5256,Allow configuring the resource used by ResourceStreamRequestHandler    During the migration from Wicket 1.4 to 1.5.10 I found out that the ResourceStreamResource.respond() does not set the ContentType charset if the resource is of type StringResourceStream. Even though the stream holds the charset  it is not set  although quite a few other header parameters are (well this is understandable because not all ResourceStreams are StringResourceStreams. Also  it is difficult to call the resource.setTextEncoding  because the current flow in resourceStreamRequestHandler.respond does not allow easy overriding of any smaller piece of respond than the whole method. The practical issue was to download a CSV file by clicking a button. I managed to fix the issue by copy/paste/Overriding the ResourceStreamRequestHandler.respond  but IMHO this is not nice: private void addCsvButton() { Form&lt;?&gt; form = new Form&lt;Void&gt;('form') { @Override protected void onSubmit() { final String fileName = getFileName('csv'); TableCsvResourceFactory factory = new TableCsvResourceFactory(); final IResourceStream resourceStream = factory.getResourceStream(tableModel.getObject()); ResourceStreamRequestHandler resourceStreamRequestHandler = new ResourceStreamRequestHandler( resourceStream) { final ContentDisposition contentDisposition = ContentDisposition.ATTACHMENT; @Override public void respond(IRequestCycle requestCycle) { Attributes attributes = new Attributes(requestCycle.getRequest()  requestCycle.getResponse()); ResourceStreamResource resource = new ResourceStreamResource(resourceStream); resource.setFileName(fileName); if (contentDisposition != null) { resource.setContentDisposition(contentDisposition); } else { resource.setContentDisposition(Strings.isEmpty(fileName) ? ContentDisposition.INLINE : ContentDisposition.ATTACHMENT); } final Duration cacheDuration = getCacheDuration(); if (cacheDuration != null) { resource.setCacheDuration(cacheDuration); }+ resource.setTextEncoding('UTF-8'); resource.respond(attributes); } }; RequestCycle.get().scheduleRequestHandlerAfterCurrent(resourceStreamRequestHandler); } }; form.setVisible(displayCsv); add(form); }There are a couple of problems with the current implementation of ResourceStreamRequestHandler:1) I didn't figure out yet any other way how to call the  resource.setTextEncoding('UTF-8');except by copy/pasting the whole ResourceStreamRequestHandler.respond() code to the Override. It would be nice  if there would be some cleaner hook to override some smaller part of this method  such as an empty default implementation of setTextEncoding() that would be always called but would not do anything for other types.2) A second approach would be to create a StringResourceStreamRequestHandler extends ResourceStreamRequestHandler that would be otherwise the same  but would use IStringResource instead of IResource  and would also set the TextEncoding.3) However  third  I didn't yet find any good way to get the encoding from the StringResourceStream itself  because the AbstractStringResourceStream has a protected getCharset(). This problem could be overcome by adding public version of getCharset() to StringResourceStream  or as I did  create a parallel subclass CharsetStringResourceStream that is a copy/paste from StringResourceStream but is non-final and has public getCharset(). After this you could dynamically set the text encoding in ResourceStreamRequestHandler.respond for example like this: if (getResourceStream() instanceof CharsetStringResourceStream) { resource.setTextEncoding(((CharsetStringResourceStream)getResourceStream()).getCharsetName()); }Anyway  I think the usage of StringResourceStream with ResourceStreamRequestHandler should be improved somehow  at the moment I think it is a bit awkward to use.   ,0
5259,Url can't parse urls with username and password    Url tries to parse the password as the portnumber  because it's after the :  resulting in the following exception:java.lang.NumberFormatException: For input string: '23dc429c-4ffa-4e99-8e24-984571f4c3b6@digdag-rest-dev2.topicusonderwijs.nl' java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:492) java.lang.Integer.parseInt(Integer.java:527) org.apache.wicket.request.Url.parse(Url.java:276) org.apache.wicket.request.Url.parse(Url.java:192) org.apache.wicket.protocol.http.servlet.ServletWebResponse.encodeRedirectURL(ServletWebResponse.java:212) org.apache.wicket.protocol.http.servlet.ServletWebResponse.sendRedirect(ServletWebResponse.java:236) org.apache.wicket.protocol.http.BufferedWebResponse$SendRedirectAction.invoke(BufferedWebResponse.java:400) org.apache.wicket.protocol.http.BufferedWebResponse.writeTo(BufferedWebResponse.java:588) org.apache.wicket.protocol.http.HeaderBufferingWebResponse.stopBuffering(HeaderBufferingWebResponse.java:60) org.apache.wicket.protocol.http.HeaderBufferingWebResponse.flush(HeaderBufferingWebResponse.java:97) org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:269) org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282)   ,0
5263,FilenameWithVersionResourceCachingStrategy breaks silently when the versionPrefix is contained in the original filename    If a resource name contains the character used as version prefix then FilenameWithVersionResourceCachingStrategy#undecorateUrl() will split the decorated filename wrongly and the resource response will return 404 (Not found).   ,0
5268,ComponentRenderer.renderComponent fails to render two components with different component IDs    After WICKET-5232 was fixed  #renderComponent now accepts component with any component ID. However since the markup of the RenderPage is cached  after calling #renderComponent for one component it will fail for components having different component ID.This could be fixed as I suggested in WICKET-5232: RenderPage could implement IMarkupCacheKeyProvider interface and return null in #getCacheKey.   ,0
5269,XmlAjaxResponse restores wrong response    XmlAjaxResponse#writeComponent() erroneously sets the passed response into the requestCycle  although it never was the old (=original) response: @Overrideprotected void writeComponent(Response response  ...){ ... // Restore original response RequestCycle.get().setResponse(response);}AjaxRequestHandler#respond(...) restores the correct old response afterwards  but temporarily the current response of the RequestCycle is wrong.   ,0
5270,Do not set the location.hash when clicking on a link    Clicking an AjaxLink or SubmitLink sets the location.hash to an empty value (..../someUrl?some=param#).This interferes with JavaScript libraries which need to use 'hashchange' event.Additionally in two of our apps we experience a strange page reloads after clicking on AjaxLink.The issue is not easy to reproduce but it seems to be caused by the used href='#' somehow.Applying a custom behavior that overrides href='#' with href='javascript:;' fixes the problem.The problem occurred on Google Chrome and IE9 so far.   ,0
5271,Wicket Tree rendering broken in 7.x    While testing WICKET-5267 (EventDelegationBehavior) I've noticed that the Tree component renders with broken layout in Wicket 7.x.It looks like a CSS related issue.   ,0
5273,Tabindex overwritten in modal window for IE - Works in FF  Chrome    Attribute tabindex gets overwritten in ModalDialog  when using IE 8 9 10.. It works fine in FF  Chrome.This breaks chances of creating accessability by using tab.See attachment for testproject  which works in ff chrome  fails in ie 8 9 10.1) Open modallink (lightbox)2) use tabbutton - in ff  chrome you'll tab between closebutton and content  in ie this fails cause tabindex gets overwritten by -1. I suspect it's this codepart in modal.js that does it.if (Wicket.Browser.isIE()) { this.disabledTabsRevertList = []; for (var j = 0; j &lt; this.tabbableTags.length; j++) { var tagElements = doc.getElementsByTagName(this.tabbableTags&#91;j&#93;); for (var k = 0 ; k &lt; tagElements.length; k++) { // if this is not an iframe window and the element is child of window content  // don't disable tab on it if (win.isIframe() === true || this.isParent(tagElements&#91;k&#93;  win.content) === false) { var element = tagElements[k]; element.hiddenTabIndex = element.tabIndex; element.tabIndex='-1'; this.disabledTabsRevertList.push(element); } } } }   ,0
5279,o.a.w.a.AtmosphereBehavior onBroadcast should log DEBUG  not INFO    Logging of onBroadcast is too verbose to be on INFO level :14:48:54.812 | INFO | oryBean_Worker-4 | o.a.w.a.EventBus | pache.wicket.atmosphere.EventBus 203 | registering component for page 1 for session A3D08FEE5445F872C8A69289C00F79E3: crumbHolder:jobListPanel14:48:54.831 | INFO | Shared-AsyncOp-0 | o.a.w.a.AtmosphereBehavior | et.atmosphere.AtmosphereBehavior 129 | onBroadcast: 32501&lt;|msg|&gt;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;ajax-response&gt;&lt;component id='jobListPanel1ea9' &gt;&lt;![CDATA[&lt;div id='jobListPanel1ea9'&gt;&lt;h3&gt;Device Presences&lt;/h3&gt;&lt;div class='btn-toolbar'&gt; &lt;a href='#' class='btn btn-danger' id='deleteAllBtn1f27'&gt;&lt;i class='icon-trash'&gt;&lt;/i&gt; Delete all&lt;/a&gt;&lt;span style='display:none;' class='wicket-ajax-indicator' id='deleteAllBtn1f27--ajax-indicator'&gt;&lt;img src='./wicket/resource/org.apache.wicket.ajax.AbstractDefaultAjaxBehavior/indicator-ver-1373820815000.gif' alt=''/&gt;&lt;/span&gt;&lt;/div&gt;&lt;table id='devicePresenceTable1f33' class='table-striped table-bordered table'&gt;&lt;thead&gt; &lt;tr class='navigation'&gt; &lt;td colspan='5'&gt;...It should be DEBUG level only   ,0
5284,Too deep recursion in AbstractHierarchyIterator    In application we have code as follows: MarkupContainer mc = ...; ComponentHierarchyIterator iter = mc.visitChildren(FormComponent.class); for (Component c : iter) { ... }However  when run  on many pages this causes java.lang.StackOverflowError  with lots of the stacktrace filled with lines like this:... org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:297) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveDown(AbstractHierarchyIterator.java:170) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:236) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:297) org.apache.wicket.util.iterator.AbstractHierarchyIterator.moveUp(AbstractHierarchyIterator.java:302) org.apache.wicket.util.iterator.AbstractHierarchyIterator.nextNode(AbstractHierarchyIterator.java:259)...It seems that the search for next component in the iteration produces too deep recursion here (not infinite  but too deep for processing a typical page with relatively lots of components) and I suspect that the length of the stack used by the iterator is proportional to the total number of components in the page.   ,0
5286,o.a.w.extensions.markup.html.form.DateTextField should be applicable to HTML5 date input types    Markup:&lt;input type='date' wicket:id='startDateFld'/&gt;Java:add(new DateTextField('startDateFld'  new Model&lt;Date&gt;()));It should accept the following HTML5 input types:1. date2. datetime3. datetime-local4. month5. time6. weekError:Component [startDateFld] (path = [24:compId:startDateFld]) must be applied to a tag with [type] attribute matching [text]  not [date] MarkupStream: [markup = file:/home/ceefour/git/quikdo-hub/freq.web/target/classes/com/quikdo/freq/web/DateRangePanel.html&lt;input type='date' wicket:id='startDateFld'/&gt;  index = 0  current = '&lt;input type='date' wicket:id='startDateFld'/&gt;' (line 0  column 0)] at org.apache.wicket.markup.MarkupStream.throwMarkupException(MarkupStream.java:526) at org.apache.wicket.Component.checkComponentTagAttribute(Component.java:3578) at org.apache.wicket.markup.html.form.TextField.onComponentTag(TextField.java:104) at org.apache.wicket.Component.internalRenderComponent(Component.java:2520) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.renderAssociatedMarkup(MarkupContainer.java:689) at org.apache.wicket.markup.html.panel.AssociatedMarkupSourcingStrategy.renderAssociatedMarkup(AssociatedMarkupSourcingStrategy.java:76) at org.apache.wicket.markup.html.panel.PanelMarkupSourcingStrategy.onComponentTagBody(PanelMarkupSourcingStrategy.java:112) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.core.util.string.ComponentRenderer.renderComponent(ComponentRenderer.java:107) at com.quikdo.freq.web.FrequencyPage$FrequencyForm$1.load(FrequencyPage.java:91) at com.quikdo.freq.web.FrequencyPage$FrequencyForm$1.load(FrequencyPage.java:1) at org.apache.wicket.model.LoadableDetachableModel.getObject(LoadableDetachableModel.java:121) at de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior.newContent(PopoverBehavior.java:68) at de.agilecoders.wicket.core.markup.html.bootstrap.components.PopoverBehavior.onComponentTag(PopoverBehavior.java:47) at org.apache.wicket.Component.renderComponentTag(Component.java:3970) at org.apache.wicket.Component.internalRenderComponent(Component.java:2540) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1484) at org.apache.wicket.markup.html.form.Form.onComponentTagBody(Form.java:1683) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1484) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.MarkupContainer.renderComponentTagBody(MarkupContainer.java:1529) at org.apache.wicket.MarkupContainer.onComponentTagBody(MarkupContainer.java:1484) at org.apache.wicket.markup.html.panel.DefaultMarkupSourcingStrategy.onComponentTagBody(DefaultMarkupSourcingStrategy.java:71) at org.apache.wicket.Component.internalRenderComponent(Component.java:2549) at org.apache.wicket.MarkupContainer.onRender(MarkupContainer.java:1493) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.MarkupContainer.renderNext(MarkupContainer.java:1390) at org.apache.wicket.MarkupContainer.renderAll(MarkupContainer.java:1554) at org.apache.wicket.Page.onRender(Page.java:876) at org.apache.wicket.markup.html.WebPage.onRender(WebPage.java:142) at org.apache.wicket.Component.internalRender(Component.java:2379) at org.apache.wicket.Component.render(Component.java:2307) at org.apache.wicket.Page.renderPage(Page.java:1010) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:121) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:271) at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:165) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:861) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) at org.apache.wicket.protocol.http.WicketFilter.processRequestCycle(WicketFilter.java:259) at org.apache.wicket.protocol.http.WicketFilter.processRequest(WicketFilter.java:201) at org.apache.wicket.protocol.http.WicketFilter.doFilter(WicketFilter.java:282) at org.atmosphere.util.AtmosphereFilterChain.doFilter(AtmosphereFilterChain.java:155) at org.atmosphere.util.AtmosphereFilterChain.invokeFilterChain(AtmosphereFilterChain.java:132) at org.atmosphere.handler.ReflectorServletProcessor$FilterChainServletWrapper.service(ReflectorServletProcessor.java:314) at org.atmosphere.handler.ReflectorServletProcessor.onRequest(ReflectorServletProcessor.java:172) at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:259) at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:166) at org.atmosphere.container.BlockingIOCometSupport.service(BlockingIOCometSupport.java:101) at org.atmosphere.container.Tomcat7BIOSupportWithWebSocket.doService(Tomcat7BIOSupportWithWebSocket.java:65) at org.atmosphere.container.TomcatWebSocketUtil.doService(TomcatWebSocketUtil.java:87) at org.atmosphere.container.Tomcat7BIOSupportWithWebSocket.service(Tomcat7BIOSupportWithWebSocket.java:61) at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:1441) at org.atmosphere.cpr.AtmosphereServlet.doPost(AtmosphereServlet.java:296) at org.atmosphere.cpr.AtmosphereServlet.doGet(AtmosphereServlet.java:282) at javax.servlet.http.HttpServlet.service(HttpServlet.java:621) at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at com.codahale.metrics.servlet.AbstractInstrumentedFilter.doFilter(AbstractInstrumentedFilter.java:97) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at ch.qos.logback.classic.selector.servlet.LoggerContextFilter.doFilter(LoggerContextFilter.java:70) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222) at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:123) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472) at org.apache.catalina.core.StandardHostValve.__invoke(StandardHostValve.java:171) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99) at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:947) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408) at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1009) at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1686) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) at java.lang.Thread.run(Thread.java:724)   ,0
5294,MarkupCache ignores enforceReload flag    MarkupCache ignores the enforceReload flag in the loadMarkupAndWatchForChanges() method. v6.9.1 lines 498 to 511 should be wrapped in an 'if (!enforceReload){ }'.   ,0
5296,OnEventHeaderItem should remove 'on' prefix for the event name    OnEventHeaderItem uses JavaScript event registration  instead of inline DOM attributes  so it should remove 'on' prefixes when it is provided by the user application.For example: onclick =&gt; click.   ,0
5301,Create a module for Native WebSocket based on JSR 356    Tomcat 8 will soon release its RC1 that contains an implementation of JSR 356 - WebSocket 1.0Wicket should provide module to integrate with this API. It should work with other implementations of this JSR too   ,0
5303,Static id counter AbstractToolbar prevents stable component paths for testing    see summary   ,0
5304,AbstractResource should check for error code first before for modifications    Since org.apache.wicket.request.resource.AbstractResource#setResponseHeaders() gives a chance to the application to set custom headers it should first check for error and status codes set and then check for modifications (Not Modified).Because now one needs to reset the modification time of the resource if she wants to set error or status code.   ,0
5307,Export resources' version cache attribute as request cycle metadata    It would be nice if the IResourceCachingStrategies provided Wicket export the extracted version for the lifecycle of the request.An application may need this version to be able to check later whether the requested resource is the one that the system will actually deliver.E.g. web container 1 may deliver the page markup to the browser and then disappear due to upgrade. Then all requests for the resources in that page will be automatically redirected to web container 2 that may have new versions of the resources. In this case the application may return 302/303 (redirect) or 404 (Not found) or whatever is the best for the case.   ,0
5308,AuthenticatedWebSession#authenticate should be protected  not public    A common source of confusion in trainings is that when implementing security using wicket-auth-roles  you have to implement #authenticate in your own session class  but in the login form's #onSubmit you have to call #signIn.Both #authenticate and #signIn are public and both have identical signatures. Their names mean basically the same thing too. This is rather error-prone.I propose changing the visibility of #authenticate to protected. That way  it will still work the same as it does now  except it won't show up in code-completion anymore and won't compete with #signIn anymore.This should not be an API break  since #authenticate is abstract anyway and is always implemented in user code. Raising visibility from protected to public is always legal  so user code should not break from this change.Opinions?   ,1
5309,No page id appended to some stateful pages using repeaters    My test case is a page containing a ListView with a single stateful child. In that case  there is no redirect done to append a pageId to the url because the page's statefulness check is erroneous.Analysis:This calls page.isPageStateless() to dertermine whether a pageId should be addedBookmarkableMapper(AbstractBookmarkableMapper).getPageInfo(IPageRequestHandler) line: 440BookmarkableMapper(AbstractBookmarkableMapper).mapHandler(IRequestHandler) line: 387SystemMapper(CompoundRequestMapper).mapHandler(IRequestHandler) line: 215RequestCycle.mapUrlFor(IRequestHandler) line: 429WebPageRenderer.respond(RequestCycle) line: 268RenderPageRequestHandler.respond(IRequestCycle) line: 165RequestCycle$HandlerExecutor.respond(IRequestHandler) line: 861RequestCycle$HandlerExecutor(RequestHandlerStack).execute(IRequestHandler) line: 64RequestCycle.execute(IRequestHandler) line: 261The problem I see is that AbstractRepeater's onPopulate() is called during onBeforeRender() and this is not done when the stateless status of the page is first checked. Therefore  no pageId is added unless other components not located inside repeaters are also stateful. See thread http://wicket-users.markmail.org/thread/6q2dmns7lqjgkok7I will add a quickstart.   ,0
5310,if wicket is an external lib  BundleStringResourceLoader doesn't work    We have got serveral Wicket-based Wepapps on our server and in order to save space  we have move all shared libs (including wicket) into a shared folder which is included via the 'common.loader' of the catalina.properties file. (Using Apache Tomcat/7.0.39)The Problem is now  that StringResourceModel works normal  but the BundleStringResourceLoader doesn't work anymore. It always returns null.How to reproduce:Build attached quickstartRemove wicket-libs from warDeploy in Tomcat   ,0
5315,PriorityHeaderItem+OnDomReadyHeaderItem has no priority in Ajax response    PriorityHeaderItems+OnDomReadyHeaderItem have no priority in Ajax responses.org.apache.wicket.ajax.AbstractAjaxResponse.AjaxHeaderResponse#render() doesn't extract the wrapped header item and thus doesn't process OnDomReady/OnLoad/OnEvent header items properly.   ,0
5326,Wicket doesn't encrypt links and Ajax URLs for mounted pages when CryptoMapper is used    URL encryption does not work in Wicket links and Ajax URLs.For links the URL appears unencrypted in the href attribute value and is only later forwarded to the encrypted URL using a 302 response.I am uploading a quickstart.   ,1
5333,wicket-bean-validation french translation    French transalation for wicket-bean-validation to put in org/apache/wicket/bean/validation directory   ,0
5352,Make Palette a FormComponentPanel    Having Palette extend FormComponentPanel would allow it to be used as any other FormComponent  e.g. controlling required and validation.   ,0
5359,org.apache.wicket.util.string.StringValue#equals broken    The #equals implementation for org.apache.wicket.util.string.StringValue is broken. The following throws an exception instead of just printing 'false':StringValue val = StringValue.valueOf('bla'  Locale.FRANCE);StringValue val2 = StringValue.valueOf('bla'  Locale.CANADA);System.out.println(val.equals(val2));This part of #equalsObjects.isEqual(locale  stringValue.locale)should probably be replaced with something like(locale == stringValue.locale || (locale != null &amp;&amp; locale.equals(stringValue.locale))-&gt; Objects.isEqual is not suitable to determine equality of Locale   ,0
5366,ResourceAggregator looses information about priority/filtering/... when using a bundle    If a resource reference is part of a bundle and this resource reference is rendered with PriorityHeaderItem then the bundle is not rendered with priority.   ,0
5374,SourcesPage fails on resources with non-ASCII characters    When created with a String input argument  XhtmlRenderer uses the deprecated java.io.StringBufferInputStream  which 'does not properly convert characters into bytes' (javadoc).Thus the rendered output may contain invalid characters for the Ajax response.   ,0
5376,Log the exception if the application cannot start properly    WicketFilter doesn't provide helpful information when the application cannot be initialized for some reason.At the moment it just does:log.warn('initialization failed  destroying now');1) it doesn't log the cause exception2) the severity is rather FATAL than WARN   ,0
5384,Allow form components to trim the input themselves    Make org.apache.wicket.markup.html.form.FormComponent#trim non-final so they can trim the input with more sophisticated ways.String#trim() removes only the breaking whitespaces. To trim non-breaking ones the application can use Guava's CharMatcher.WHITESPACE.trimFrom(str) for example.   ,0
5385,wicket-bean-validation PropertyValidator_fr.properties.xml : org.xml.sax.SAXParseException    French translation for wicket-bean-validation was added in WICKET-5333.It was a properties file that was working.Unfortunatly in the source code it was changed in a XML file that is not weel-formed!java.util.InvalidPropertiesFormatException: org.xml.sax.SAXParseException; lineNumber: 24; columnNumber: 110; The content of elements must consist of well-formed character data or markup. at java.util.XMLUtils.load(XMLUtils.java:76) ~&#91;na:1.7.0_21&#93; at java.util.Properties.loadFromXML(Properties.java:868) ~&#91;na:1.7.0_21&#93;   ,0
5388,Allow DebugBar contributors to be removed    Please add a way to unregister DebugBar contributors.I wish to remove some of the default contributors and currently have to do this by using reflection to lookup the 'CONTRIBS_META_KEY' field.The reason why I'm removing contributors (perhaps there's a better solution?): PageSizeDebugPanel tries to serialize the whole page during page rendering  while models are still attached. This causes most of our database-backed models to complain that they're being serialized without being detached (as this usually means somebody probably forgot to call detach() somewhere). InspectorDebugPanel - InspectorPage currently shows me a blank component tree because it doesn't have @RequireHttps as all our other pages do and thus redirects to an http:// URL and can't see the session. So we copied InspectorPage (since it's final and can't be subclassed) to add @RequireHttps and likewise copied InspectorDebugPanel.   ,0
5389,Allow continued processing with WicketTester after exception is thrown    When exposing an exception while processing  WicketTester is left in an inconsistent state. Since #setupNextRequestCycle() is not called  no additional processing is possible afterwards: org.apache.wicket.WicketRuntimeException: No RequestCycle is currently set!For tests expecting WicketTester#process() to fail  it would be nice to be able to continue processing with the same tester instance afterwards.   ,0
5400,Behaviors#internalAdd(Behavior) erroneously gets id for stateless behaviors    see http://markmail.org/thread/jtd4zn527r343jbm   ,0
5412,Improve 'mvn jetty:run' to behave as Start.java    Merge Pull Request https://github.com/apache/wicket/pull/59 that updates Jetty 9.0.x and improves 'mvn jetty:run' to support HTTPS as Start.java does.   ,0
5415,Do not initialize pages which were not rendered    Since WICKET-5083 (6.8.0) Wicket initializes the page before calculating whether the page is stateless.We identified a performance problem when a page is constructed (and thus touched) but then ignored via setResponsePage(AnotherPage.class)/RestartResponsePage and thus is not rendered and initialized.In this case there is no reason to check whether the page is stateful and store it. Using browser back button will go to the previous page anyway.For example: pageA has a link to PageB in PageB's constructor a RestartResponseException(PageC.class) PageC is renderedIn this example PageB will be fully initialized in org.apache.wicket.page.RequestAdapter#commitRequest to check whether it is stateful or not. But there is really no reason to store it at all since PageB has never been rendered.In our case PageB#onInitialize was expensive (read some settings from the backend) and thus we noticed the difference.   ,0
5416,BOM in UTF markup file breaks encoding detection    I have project with internationalization and experienced this problem with one of the pages with non-english content. Page had UTF-8 encoding  but my JVM encoding is different. I always use '&lt;?xml encoding ... ?&gt;' to specify encoding for markup pages (and 'MarkupSettings.defaultMarkupEncoding' is not set).Unexpectedly I got problem with bad encoding on page. After several hours of debugging I found what source of this issue was UTF BOM (Byte order mark) at the beggining of file and inability of 'XmlReader' to process it. 'XmlReader.getXmlDeclaration' tries to match xml declaration with regular expression  but fails because of BOM. After that encoding defaults to JVM encoding.It's possible to use 'org.apache.commons.io.input.BOMInputStream' to handle BOM or you could handle it manually inside 'XmlReader'.PS: issue found with Wicket 1.5.10 and I see same code in 6.12.0 without BOM handling  so I added it to 'Affects Version/s'  but no proof-in-code available from me at this moment.   ,0
5417,this.replaceWith is broken when called from onInitialize    When calling this.replaceWith within the onInitialize method  wicket throws an exception:'Last cause: org.apache.wicket.Component has not been properly initialized. Something in the hierarchy of com.mycompany.PanelA has not called super.onInitialize() in the override of onInitialize() method'This happens because detach is called on the panel being replaced which clears Component.request flags (sets to 0) which causes the exception on line 864 of Component.java:if (!getRequestFlag(RFLAG_INITIALIZE_SUPER_CALL_VERIFIED)) { // throws here}   ,0
5418,PropertyValidator ignoring groups with the @NotNull annotation only    When using groups in your JSR303 compliant classes  Wicket does not honor the groups for the @NotNull annotation.   ,0
5422,ComponentRenderer.renderComponent() adds a page to DataStore    I'm using ComponenetRenderer withing CustomTooltipBehavior (wicket-jquery-ui) to generate tooltip content. I add this to about 50 rows in my table so I run renderComponent() method as many times.All worked fine but there was a problem with performance when I used Fragment component with markup attached to the WebPage. I did some digging and finally checked http://localhost:8080/context/wicket/internal/debug/diskDataStore and it appeared that for one request  Wicket stores 51 pages in it. All of the size of the whole page (about 300kB) and all of them named org.apache.wicket.core.util.string.ComponentRenderer$RenderPage.I changed implementation from Fragment to Panel componenet and the size was reduced to (1kB) but still all of these items were stored in the DataStore.It seems that this method is creating a dummy page in order to create the markup  but how can I avoid storing these pages?   ,0
5424,Page.isPageStateless() returning true in regular run but false in WicketTester    Motivation:Healthcheck/heartbeat pages must always be stateless to prevent significant amounts of session creation and storage.Also each anonymously accessed page in a public site should be stateless due to the same reason (otherwise the site could easily be DoSsed down).It would be nice to verify these requirements by tests.If I create an ought-to-be-stateless page with an AjaxLink which is hidden by a behavior:public class MyPage extends WebPage { public MyPage() { add(new AjaxLink&lt;Void&gt;('link') { @Override public void onClick(AjaxRequestTarget target) { // } }.add(new Behavior() { @Override public void onConfigure(Component c) { c.setVisible(false); } })); add(new Label('isPageStateless'  new AbstractReadOnlyModel&lt;Boolean&gt;() { @Override public Boolean getObject() { return MyPage.this.isPageStateless(); } })); }}then checking through a web server the page correctly prints 'true'  and no HttpSessions are created.However  when I try to verify statelessness through WicketTester  the following test passes:@Testpublic void testName() throws Exception { WicketTester tester = new WicketTester(new WebApplication() { @Override public Class&lt;? extends Page&gt; getHomePage() { return MyPage.class; } }); tester.startPage(MyPage.class); tester.assertLabel('isPageStateless'  'false'); assertFalse(tester.getLastRenderedPage().isPageStateless());}It seems that somehow due to WicketTester  isPageStateless() is being invoked before any behaviors are run (and thus the AjaxLink is still visible)  and since stateless-flag for the page is cached  it remains false.If it's by design that isPageStateless should always return the same result during each request  then I guess that the statelessness resolution process must not depend on anything happening after the page constructor? I assume it's not by design.Suggestions:A) Obvious fix would be to remove stateless-flag caching  since apparently it is causing problems  as also suggested by a hackish comment in Page.init(). In general  caching should always be used sparingly.B) Or maybe whoever is invoking isPageStateless() at an early stage should actually be using Page.peekPageStateless()? But this doesn't really seem like a real fix  more like a temporary hack.C) All caching could also be disabled during test runs  but this would not be a good thing since tests should reproduce the actual behavior as closely as possible.D) In case this is a known issue without a proper fix  how then could I verify page statelessness through WicketTester? Currently I'm clearing the stateless-cache by reflection  which feels kind of bad...   ,1
5425,WicketTester doesn't preserve the request cookies when #executeListener() is used    org.apache.wicket.util.tester.BaseWicketTester#executeListener(org.apache.wicket.Component  org.apache.wicket.RequestListenerInterface) creates a new new MockHttpServletRequest but doesn't do the cookie management as in org.apache.wicket.util.tester.BaseWicketTester#setupNextRequestCycle() (the only other place where a new MockHttpServletRequest is created).   ,0
5436,Implement BigIntegerConverter    There are converters for all the other datatypes (subclass of AbstractNumberConverter)  but none for BigIntegerConverter  it would seem.   ,0
5439,Allow restarting AbstractAjaxTimerBehavior without updating its hosting component    Currently when AbstractAjaxTomerBehavior is restarted  its updates its whole hosting component. This is undesirable when you have added the behavior to the page or another component high in the hierarchy.   ,0
5445,Make CaptchaImageResource easier to extend and reuse    Wicket-Extensions' CaptchaImageResource generates its image byte array in the private #render() method. By making this method protected it will be easy to use third-party/custom code to generate the image and re-use the invalidation logic.   ,0
5459,Use method chaining where it makes sense    It's quite inconvinient to have Component.setMetaData which return void.For stacking purposes it'll be better to make this method return 'this'.   ,0
5470,Remove 'final' from org.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue    org.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue() adds unnecessary indirection by providing overrideable #postprocess() method.If an application doesn't want to use the default implementation to resolve a display value by using i18n resources then it should provide its own custom implementation of IChoiceRenderer because org.apache.wicket.markup.html.form.EnumChoiceRenderer#getDisplayValue is final and it will throw MissingResourceException.If an application needs to use different logic it should be able to override #getDisplayValue(). If it needs to do something like #postprocess() then it can do:public Object getDisplayValue() { Object orig = super.getDisplayValue(); return manipulate(orig);}   ,0
5472,PackageResource#internalGetResourceStream() should return ProcessingResourceStream only when the resource is existing    The fix for WICKET-4762 introduced ProcessingResourceStream - a resource stream that wraps another IResourceStream and processes its InputStream (e.g. compresses it).There is a bug that even when the resource is not found  i.e. the resource stream is null  Wicket still wraps it in ProcessingResourceStream.Another inefficiency is that ResourceStreamWrapper (the parent of ProcessingResourceStream) declares its method #getDelegate() as protected. It should be public.   ,0
5486,WebPageRenderer should honor RedirectPolicy.ALWAYS_REDIRECT more consistently    In WebPageRenderer shouldPreserveClientUrl() currently has precedence over RedirectPolicy.ALWAYS_REDIRECT.This can lead to confusion or unexpected behavior when RedirectPolicy.ALWAYS_REDIRECT is explicitely set  but for some reason shouldPreserveClientUrl() returns true and thus no redirect is performed due to the logic in WebPageRenderer.A fix for this particular problem could be implemented in WebPageRenderer as of Wicket 6.12.0 by changing line 211 to: (shouldPreserveClientUrl &amp;&amp; getRedirectPolicy() != RedirectPolicy.ALWAYS_REDIRECT)) //Note that this problem is slightly related to WICKET-5484. Both fixes combined the line could look like this: (shouldPreserveClientUrl &amp;&amp; !isAjax &amp;&amp; getRedirectPolicy() != RedirectPolicy.ALWAYS_REDIRECT)) //   ,0
5490,AuthenticatedWebApplication#onUnauthorizedPage() should work with Component  not Page    As discussed at http://markmail.org/message/o2ayjxt7vb7dyjvf org.apache.wicket.authroles.authentication.AuthenticatedWebApplication#onUnauthorizedPage() should have a parameter with type 'Component'  not 'Page' because this Page is partially constructed - on the constructor of org.apache.wicket.Component is executed.All other super constructors (e.g. MarkupContainer  Page  WebPage  YourPage) are not.   ,0
5492,WebApplication ignores a SecurityException when reading the configuration type    The WebApplication class has a piece of code in the method getConfigurationType()  that ignores a SecurityException.Code snippet: try { result = System.getProperty('wicket.' + Application.CONFIGURATION); } catch (SecurityException e) { // Ignore - we're not allowed to read system properties. }This apparently causes a performance problem at one of our customers  where they had shared classloading enabled. Permissions were set differently on shared classloader level  which caused the retrieval of the property to fail silently  while taking about 10ms longer. This code is called everytime Component.getMarkupId is called  which means with 300+ components on a page  you get a delay of 3 seconds or more.Ofcourse the problem can be (and has been) solved with a correct configuration. My request however is that the exception is atleast logged at some level (warning for example)  so spotting the problem will become a lot easier (it took us 2 weeks to narrow it down).   ,0
5493,Disable jar indexing    Wicket's pom.xml uses maven-jar-plugin with &lt;index&gt;true&lt;/index&gt;  which creates META-INF/INDEX.LIST file in the JAR files. This is useless when done only for a single jar file and might in some cases even be harmful.I propose to disable the generation INDEX.LIST files both in Wicket 6 and 7.For a full discussion of the drawbacks  see the corresponding bug track at Tomcat's Bugzilla: https://issues.apache.org/bugzilla/show_bug.cgi?id=49236   ,0
5499,Page is not touched during initialization    After migration from 6.12.0 to 6.13.0 our app stopped working.I figured out that there is a new condition in Page#dirty(final boolean isInitialization) on line 288:if (isInitialization == false){ pageManager.touchPage(this);}That means that nely constructed page does not get touched thus is not stored in page store.The problem is that when I do something like thisprintPage = new PrintPage(event.getFormId()  event.getFormData());PageProvider pp = new PageProvider(printPage);RenderPageRequestHandler rh = new RenderPageRequestHandler(pp);CharSequence url = RequestCycle.get().urlFor(rh);I get an URL pointing to page with id X - but that page is not found because it was not stored and I ends with nonsense PageExpired exception.I notice that 6.13.0 version fixed some bugs with stateless / statefull pages  etc. so that may be the cause. Nevertheless I think it's a bug.If you do not want to touch page during creation  then it must get touched whenever it is involved in some request handler.   ,0
5506,DefaultPropertyResolver should resolve the Property according to the getter first    A domain model model2 may extend a domain model model1 and have JSR303 annotations on one or more getter to override constraints. In such a case  DefaultPropertyResolver cannot detect the right domain model implementation since direct property analysis is done first. Indeed  with the current implementation  if a property is declared in model1 and the getter is overriden in model2  model1 is systematically affected as the property class owner although model2 is the actual implementation associated with the Wicket model. As a consequence  some constraints validations may never been thrown.Swapping direct property analysis and getter analysis solves this problem.Workaround: providing my own property resolver.   ,0
5508,Memory model improvements for Session fields    Currently org.apache.wicket.Session#sequence and org.apache.wicket.Session#pageId are primitive ints  non-volatile.They are accessed only in their getter methods where they are read and incremented. To make sure their values are correct the getter methods are synchronized on the session instance. This synchronization may lead to slower execution of the getter when another thread/request does something slower in another synchronized method of Session.Using AtomicInteger should improve here.Other fields of Session like locale and style are not synchronized and different threads may read old value for them. Using AtomicReference should improve this.Some special boolean fields like 'dirty' and 'sessionInvalidated' should be made volatile to avoid dirty reads.With WICKET-5473 org.apache.wicket.Session#nextPageId() and org.apache.wicket.Session#nextSequenceValue() call #dirty() only for bound sessions. The check whether the session is bound or not should really be in #dirty() itself.   ,0
5512,Allow using child selector for JS event bindings    http://api.jquery.com/on/ has an optional 'selector' parameter that is used to to filter the descendants of the selected elements that trigger the event.It would be nice if Wicket's Wicket.Event.add() API provides a way to use it.Additionally it should be possible the selector to be set via AjaxRequestAttributes   ,0
5517,IE11 returns false for Wicket.Browser.isIE()    As of Internet Explorer 11 this statement returns false instead of true (like it did prior to version 11):typeof(document.all) !== 'undefined'This statement is used on line 56 of wicket-event-jquery.js which means Wicket.Browser.isIE() will return false in IE11.   ,0
5522,Failing HTTPS redirect to RequireHttps annotated pages with ONE_PASS_RENDER strategy    Activated JS: Start the quickstart -&gt; Press the submit buttons -&gt; See the secured page with https!Deactivates JS: (NoScript Firefox Plugin): Start the quickstart -&gt; Press the submit buttons -&gt; See the secured page BUT with HTTP!There was no proper https redirect.If I change the rendering strategy to REDIRECT_TO_BUFFER everything works fine  but if I change the strategy to ONE_PASS_RENDER the https forwarding does't work anymore. But only if I deactivate all scripts...Regards Dmitriy   ,0
5523,Ajax indicator not working when display is set to none in css    I created a simple quickstart with one AjaxLink and one div used as ajax indicator (id ajax_indicator). When I set display: none to ajax_indicator in css  is does not show up when pressing link. When I remove display:none from css  it disappears after when ajax request is finished and works fine for next ajax requests.   ,0
5527,Inefficient DefaultPageStore.SerializedPagesCache    We have identified some problems in org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache.Some history first: At https://cwiki.apache.org/confluence/display/WICKET/Page+Storage I have explained how the page storage management works in Wicket 1.5+ In brief:First level cache/store is the HttpSession - here Wicket saves the live instances of all touched pages in the last request cycle.Second level cache/store is DefaultPageStore.SerializedPagesCache - here Wicket saves the last N (org.apache.wicket.settings.StoreSettings#getInmemoryCacheSize) used pages in the whole application (by default 40 pages)Third level cache/store is DiskDataStore - here Wicket stores all pages and depending on org.apache.wicket.settings.StoreSettings#getMaxSizePerSession it will 'recycle' the file contentsThe identified problems: org.apache.wicket.pageStore.DefaultPageStore.SerializedPagesCache uses ArrayList as a data structure to keep SerializedPage instances. When the limit N (StoreSettings#getInmemoryCacheSize) is reached the ArrayList uses #remove() to remove the oldest entry. The #remove(0) operation internally uses System.arraycopy() to compact the internal array structure. As you already realize this ArrayList is constantly being recompacted in any application in production. DefaultPageStore.SerializedPagesCache#cache (the same ArrayList) is used as synchronization monitor for every operation (read/write/remove). I.e. we have synchronization on application level !! at the moment DefaultPageStore.SerializedPagesCache stores org.apache.wicket.pageStore.DefaultPageStore.SerializedPage. This is a structure of {String sessionId  int pageId  byte[] data}.Since this data is stored in the application scope it is never replicated  so there is no need to serialize the live page instance to byte[] at all. Only the third level cache (IDataStore) should work with byte[]A workaround to avoid the slowness caused by this is to set 0 or negative value to org.apache.wicket.settings.StoreSettings#setInmemoryCacheSize   ,0
5528,Allow models of subtypes of Select type parameter in SelectOption constructor    SelectOption's use of the model is read only  so no risk problem if we use an IModel&lt;? extends T&gt; instead of IModel&lt;T&gt;   ,0
5529,Add WebSocketBehavior/Resource#onPush() callback method    A user reported that WebSocketBehavior misses #onPush() callback method and #onEvent() has to be overridden to be able to process IWebSocketPushMessages.   ,0
5532,NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined    From my email on the list:Since the introduction of the ProcessingResourceStream  it's notpossible to call PackageResource.getResourceStream() anymore if thereis no RequestCycle defined.Typically  we call it in our Application init() to prepare (mostlypreprocess and cache) a couple of resources before opening theapplication to the public.We now have a NPE here:https://github.com/apache/wicket/blob/master/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java#L496This problem was introduced by this commit:https://github.com/apache/wicket/commit/29b26ffffdd619f4e2fe86aa2d2b02ff3e1d6017#diff-428db8d5278d2ac567e471efd377c7c7Thanks.   ,0
5535,Intern strings generated by Wicket that have bigger chance to be duplicated    I've been doing some performance measurements recently and I've noticed that Wicket produces some higher number of String objects like: small numbers ('1'  '2'  '3'  ...) generated from repeaters' String.valueOf(nextId) HTML element names/attributes ('span'  'div'  ...) generated in XmlTag#getName  #getAttribute  ...We can reduce memory usage for those by using String#intern().Since Java 7 the interned strings are stored in the Heap memory so this won't affect negatively the perm generation.Interned strings are GC-ed so this is also not a concern.http://java-performance.info/string-intern-in-java-6-7-8/ provides good explanation how to avoid the CPU penalty caused by String#intern() if needed.   ,0
5549,continueToOriginalDestination() fails after redirectToInterceptPage() on AjaxRequest    Consider the following requests: user clicks link on HomePage wicket-ajax.js sends ajax request to AjaxLink HomePage redirects to InterceptPage user clicks link on InterceptPage request (ajax or normal) is sent to InterceptPage InterceptPage continues to original destination with redirect original Ajax request is sent by the browser and not by wicket-ajax.js Wicket AjaxRequest renders the responseThe resulting &lt;ajax-response/&gt; is rendered in the browser :/.   ,0
5555,AbstractAutoCompleteBehavior.WrappedHeaderItem should depend on wicket-ajax.js    Classorg.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteBehavior.WrappedHeaderItem inherits empty list from HeaderItem in public Iterable&lt;? extends HeaderItem&gt; getDependencies() { return Collections.emptyList(); }Using JavaScriptFilteredIntoFooterHeaderResponse causes renderingWicket.Event.add(window  'domready'  function(event) { new Wicket.AutoComplete(before jQuery refrence.Please  add JQueryResourceReference (other if needed) into dependency list of org.apache.wicket.extensions.ajax.markup.html.autocomplete.AbstractAutoCompleteBehavior.WrappedHeaderItem   ,0
5557,Don't cache the result of AuthenticatedWebApplication#getWebSessionClass()    Currently the AuthenticatedWebApplication constructor obtains and holds a reference to the AbstractAuthenticatedWebSession class. This makes it impossible for classes extending AuthenticatedWebApplication to use a class based upon something passed into their constructors. The only option is to provide a 'static'/'constant' class from the getWebSessionClass() method.I don't see any advantage to holding this reference. Instead I propose that the class is changed to simply calling getWebSessionClass() each time the class is needed.   ,0
5558,Autolinking does not always work in inheritted markup    If you have auto-linked auto components that point to package resource  like:&lt;wicket:link&gt;&lt;img src='myimage.png'/&gt;&lt;/wicket:link&gt;defined in the grandparent markup  where the grandparent and parent are from different packages  then they do get rendered correctly.Problem is this: AutoLinkResolver checks that the package resource actually exists. It checks by creating a PackageResourceReference and attempts to get the reference from that. The class used as the context for the PackageResourceReference is the class which owns the markup in which the auto-link appeared. The key is the original reference (href or src) in the tag. So far everything is correct.Wicket knows which class owned the markup by using ComponentTag#getMarkupClass(). It is therefore important that ComponentTag#getMarkupClass() always returns the correct class. But it doesn't.When we have a three level merged markup (child  parent  grandparent)  this happens: parent markup is merged into grandparent using MergedMarkup. All ComponentTags that were originally from grandparent are called :#setMarkupClass(GrandParent.class)  so that they will know they came from the grandparent. So far so good.Now  in order to get the child markup stream  we merge child markup onto the parent markup. Now  all ComponentTags in the parent markup are setMarkupClass(Parent.class). Problem is  this is not true. Some of these ComponentTags actually came from the grandparent  so the ComponentTag ends up returning the incorrect class (Parent.class instead of GrandParent.class) in #getMarkupClass().Because ComponentTag#getMarkupClass() can return the wrong value  if the Parent and GrandParent are in different packages  then a resource that would be loadable by the grandparent is no longer loadable  because we are using the parent  which cannot find it.Solution  fix MergedMarkup to only setMarkupClass() if getMarkupClass() == null.   ,0
5589,Upgrade wicket-atmosphere to the latest version of atmosphere    Wicket-atmosphere should be upgraded to atmosphere 2.1.4 and js 2.1.6. It's guava dependency to 17.0   ,0
5594,AjaxButton #onSubmit() #onError() intricacies    Overriding AjaxButton's hook #onSubmit() is prone to possible programming errors: with JavaScript enabled  #onSubmit() will not be called  leaving the developer without clue that the wrong method was overwritten with JavaScript disabled  #onSubmit(ART  Form) will not be called - furthermore if the markup includes type='submit' or no type attribute  #onSubmit() will be called instead.#onError() and #onError(ART  Form) have identical intricacies.To make things consistent I propose the following change for Wicket 7.x: declare #onSubmit() and #onError() final on AjaxButton in #onComponentTag() make sure the &lt;button&gt;-Tag has type='button'  so the browser does not submit the form when JavaScript is disabled. For fallack support we have AjaxFallbackButton already.Any objections or better ideas?   ,0
5595,Atmosphere: updates infinitly with long polling transport    I found a problem when I use long polling for the transport :When the EventBus loop to the list of AtmosphereResource (on post method) and if the update is too long of each AtmosphereResource  the list of AtmosphereResource is update and reorder (because atmosphere remove and registry the AtmosphereResource due to long polling) and then the loop on EventBus never stop and update is infinitie.To solve the probleme I do that on line 366 of EventBus.java :for (AtmosphereResource resource : ImmutableList.copyOf(broadcaster.getAtmosphereResources()))rather thanfor (AtmosphereResource resource : broadcaster.getAtmosphereResources())Best regards   ,0
5606,SelectOptions with #setRecreateChoices(true) loses selection on form errors    Having SelectOptions#setRecreateChoices(true)  on every render each choice is represented by a new SelectOption instance with a new UUID.If the form has submit errors  no UUID will match the RAW-Input of the Select. Thus the selection is lost.   ,0
5611,Add AjaxChannel.DEFAULT constant = '0' and type 'Queue'    Can I request AjaxChannel.DEFAULT public static constant with a value of '0' ? I don't feel comfortable typing '0' there  I much prefer a constant. http://apache-wicket.1842946.n4.nabble.com/ListenerInvocationNotAllowedException-and-EmptyRequestHandler-tp4663618p4666126.html   ,0
5616,CLONE - ModalWindow is not visible in Safari when opened from a link at the bottom of a large page    I am not able to see a ModalWindow in Safari and I expect to see it centered on my view port.Steps:1. Start with a large web page with a link to open the ModalWindow at the bottom of the page. You need a large page where you have to scroll down to find the link.2. Click the link3. Observe that the mask for the ModalWindow displays  but the ModalWindow does not. Scrolling back up  re-sizing  and maximizing will still not display the ModalWindow.   ,0
5620,Remove second  for CDI related stuff in wicket-examples' web.xml    Trying to deploy wicket-examples.war (7.0) in Tomcat 7/8 fails with:3-Jun-2014 10:28:09.485 SEVERE &#91;localhost-startStop-1&#93; org.apache.catalina.core.StandardContext.listenerStart Exception sending context initialized event to listener instance of class org.jboss.weld.environment.servlet.BeanManagerResourceBindingListener java.lang.RuntimeException: Could not bind BeanManager reference to JNDI: Context is read only If the naming context is read-only  you may need to use a configuration tobind the BeanManager instead  such as Tomcat's context.xml or Jetty's jetty-web.xml. at org.jboss.weld.environment.servlet.BeanManagerResourceBindingListener.contextInitialized(BeanManagerResourceBindingListener.java:84) at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4739) .....   ,0
5624,Do not throw when WebSocket is not supported    When the browser does not support WebSocket  /wicket-websocket-jquery.js throws an 'is not supported' string from the initialize() method  which runs in the DOM ready event. This break any other initialization of the page that takes place after the WebSocket initialization  leading to less than graceful degradation of functionality.   ,0
5626,ConcatBundleResource#reportError() doesn't print the resource attributes    org.apache.wicket.resource.bundles.ConcatBundleResource#reportError() prints just the scope and the name of the missing resource.It will be much more useful if the attributes (locale  style and variation) are printed too.   ,0
5631,Allow submitting with POST method for PhantomJS    With the PhantomJS browser form submit is done using get instead of post due to change &#91;1&#93; since 6.12.0This is incorrect and fails with larger requests  PhantomJS only allows a limited get request size. For PhantomJS post must be used as for other browsers.&#91;1&#93; https://git-wip-us.apache.org/repos/asf?p=wicket.git;a=commitdiff;h=f0b251e3   ,0
5637,Fix the encoding of the Chinese translations for Wizard component    Reported on the users@ mailing lists: http://markmail.org/message/wbdffw5llrxfjqlq   ,0
5642,CheckingOutputObjectStream should filter duplicates by identity  not by equality    As discussed at http://markmail.org/message/kdbyimrznubgtz5n the checks for duplicates by equality is not correct (and optimal).CheckingOOS already filters checked objects by identity (see org.apache.wicket.core.util.objects.checker.CheckingObjectOutputStream#checked) so there is no need to check second time (via Stack#equals()).   ,0
5643,WebPageRenderer should bind a Session if redirect is required and the session is temporary.    WebApplication.storeBufferedResponse does not check if sessionId is null. This could lead to wrong behaviors as it happens in the quickstart project. Let's say we have a stateless home page with page parameters that are populated inside page constructor. Under these conditions class WebPageRenderer will call storeBufferedResponse and will redirect the response to the final URL (line 289). But as the session is temporary  the buffered response is not consumed and WebPageRenderer will rise a warning (line 194).I think we should check for null sessionId inside WebApplication or inside WebPageRender.   ,0
5646,Allow subclasses of ComponentStringResourceLoader to stop at specific components    Sometimes is desirable to stop loading of string resources at a specific component  e.g. to limit overriding of keys to parts of the web page.An additional hook-method in ComponentStringResourceLoader would allow subclasses to implement this without duplicating parental logic.   ,0
5647,missing generic cast causes compile error on OS X / jdk 8    when trying to compile wicket-7 from HEAD it fails under OS X / JDK 1.8.0_11. Casting a NULL to generic type (T) solves the issues. This seems like some odd case of failing type inference.The problematic source line is: return getEnumImpl(key  eClass  null);The compiler error is: Error:(792  35) java: incompatible types: inference variable T has incompatible upper bounds java.lang.Enum&lt;T&gt; TThis will fix the issue: return getEnumImpl(key  eClass  (T)null);I found that there is a fix WICKET-5427 which does not work in most current JDK 1.8.0_11 anymore. -Could not change the wicket-6 branch since the change will break the clirr plugin (see WICKET-5427).-   ,0
5655,Problem with setting of IComponentInheritedModel and FLAG_INHERITABLE_MODEL    Described in the mailing list:http://mail-archives.apache.org/mod_mbox/wicket-users/201407.mbox/%3CCAF2_608c8TOZjprV8Md15KJpRET6YQdXHe%3DwRzF-y5G_zAXcDg%40mail.gmail.com%3EI'm aware of the another issue (https://issues.apache.org/jira/browse/WICKET-3413) which dealt with the exact same code - and I believe there was a mistake in the solution that leads to this issue.Please see the attached quickstart (including a JUnit test) to reproduce the error.   ,0
5656,PropertyResolver does not scan for NotNull in annotation tree    When annotating a field of a bean with e.g. org.hibernate.validator.constraints.NotEmpty  this impliesjavax.validation.constraints.NotNull  but PropertyValidator only checks for the annotations immediately on the filed not the tree of annotations. As a result Wicket does not mark the field as required in the UI  which it should.Also PropertyResolver.findNotNullConstraints() is not even protected  so cannot be patched in a simple way.So as a solution I suggest changing findNotNullConstraints() to be protected and rather be something like findConstraints(filter)  or findConstraints(clazz)  and then in that method method recursively invoking getComposingConstraints to get all constraints  but collecting only those of interest. Possibly some care needs to be taken to prevent infinite recursion where constraints are composed of each other (if that compiles).   ,0
5657,wicket-autocomplete may fail after preceeding Ajax request    The following processing sequence leads to a JavaScript error: form is shown including an autoCompleteTextField user enters criteria and immediately presses enter actualUpdateChoices() is scheduled by the throttler form is submitted via ajax autoCompleteTextField is removed from DOM throttler executes actualUpdateChoices() wicket-autocomplete fails with precondition  since element is no longer in DOM: var elementVal = Wicket.$(elementId).value;   ,0
5659,Add a setting to MultiFileUploadField to not close the file uploads' streams    As explained at http://markmail.org/message/hdde56myxso5cwgy MultiFileUploadField should provide a setting that decides whether its file uploads should close their streams at the end of the request cycle.   ,0
5671,Rename log4j.properties in the quickstart when creating a project for WildFly    As discovered at http://markmail.org/message/wlm4tjvmn62j3cit Wicket Quickstart should remove log4j.properties from the generated project when it will be deployed at WildFly (JBoss 8).maven-archetype-plugin supports special names (e.g. _something_) for files in the fileSet which can be renamed by using system properties.Using this we can rename _log4j.properties_ to log4j.properties by default and to wildfly-doesnt-need-log4j.properties when WildFly is selected from an additional drop-down at http://wicket.apache.org/start/quickstart.html   ,0
5672,Form#findSubmittingComponent() should not throw exceptions if the submitter is disabled/invisible    As explained by a user at http://markmail.org/message/s262q4yc3ubymglr it is unexpected that org.apache.wicket.markup.html.form.Form#findSubmittingButton() throws runtime exceptions when the submitter is invisible or disabled.As discussed at http://markmail.org/message/qhjepkihr27uywaj the checks should be moved to the code related to executing the submitter's action method (i.e. onSubmit()) and leave all other users of Form#findSubmittingButton() decide for themselves whether the change of the visiblility/enable state is a problem of not.   ,0
5679,RenderStrategy REDIRECT_TO_RENDER lets fail test with BaseWicketTester#startComponentInPage    After changing the RenderStrategy from REDIRECT_TO_BUFFER to REDIRECT_TO_RENDER tests with BaseWicketTester#startComponentInPage fail.Stacktrace:org.apache.wicket.markup.MarkupNotFoundException: Can not determine Markup. Component is not yet connected to a parent. &#91;Page class = org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage  id = 0  render count = 1&#93; at org.apache.wicket.Component.getMarkup(Component.java:749) at org.apache.wicket.util.tester.BaseWicketTester$StartComponentInPage.getMarkup(BaseWicketTester.java:1453) at org.apache.wicket.Component.internalRender(Component.java:2309) at org.apache.wicket.Component.render(Component.java:2272) at org.apache.wicket.Page.renderPage(Page.java:1024) at org.apache.wicket.request.handler.render.WebPageRenderer.renderPage(WebPageRenderer.java:122) at org.apache.wicket.request.handler.render.WebPageRenderer.respond(WebPageRenderer.java:221) at org.apache.wicket.util.tester.BaseWicketTester$LastPageRecordingPageRendererProvider$1.respond(BaseWicketTester.java:2657) at org.apache.wicket.core.request.handler.RenderPageRequestHandler.respond(RenderPageRequestHandler.java:175) at org.apache.wicket.request.cycle.RequestCycle$HandlerExecutor.respond(RequestCycle.java:862) at org.apache.wicket.request.RequestHandlerStack.execute(RequestHandlerStack.java:64) at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:261) at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:218) at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:289) at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:654) at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:712) at org.apache.wicket.util.tester.BaseWicketTester.processRequest(BaseWicketTester.java:593) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:818) at org.apache.wicket.util.tester.BaseWicketTester.startPage(BaseWicketTester.java:835) at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1387) at org.apache.wicket.util.tester.BaseWicketTester.startComponentInPage(BaseWicketTester.java:1317) at org.foo.StatelessTest.testComponents(StatelessTest.java:97)   ,0
5689,Nested Redirects and REDIRECT_TO_BUFFER    When the render strategy is REDIRECT_TO_BUFFER  redirects cannot be nested. After the second redirect  Wicket renders the buffered first page in preference to the second page. The relevant code is in WebPageRenderer.respond: if (bufferedResponse != null) { logger.warn('The Buffered response should be handled by BufferedResponseRequestHandler'); // if there is saved response for this URL render it bufferedResponse.writeTo((WebResponse)requestCycle.getResponse()); }The attached quickstart demonstrates the issue. Simply navigate to the home page. The observed behavior is that Page1 is displayed  but I expect Page2 to be displayed.I can work around the issue by calling WebApplication.getAndRemoveBufferedResponse() to clear the render buffer  but I am uneasy with this solution since it seems like I am playing with Wicket internals; albeit the function is public.   ,0
5694,Add WicketTester assertion methods for component's markup style  variation and locale    From the users@ mailing list: http://markmail.org/message/r4q5h566novcwakgAdd methods to WicketTester to be able to assert that a given component in the last rendered page (or even the page itself) has been rendered with a markup with a given variation (or style  or locale).   ,0
5695,Use Log4j 2.x for the archetype    Apache Log4j 2 is out since a while.It is similar in functionality to SLF4J + Logback now.Let's upgrade the quickstart from Log4j 1.2.17 to latest 2.x.   ,0
5706,ResourceUtils.getLocaleFromFilename cannot handle filenames with classifiers    When I try to get PathLocale with ResourceUtils  than get wrong values  when the files contains '.' in name.Example: 'jquery.test.js' PathLocale.path=jquery  PathLocale.locale = nullor jquery.test_hu.js'.PathLocale.path=jquery  PathLocale.locale = nullThat's why I'd like to use jquery.test_hu.js' as resource  the ResourceStreamLocator try to find jquery.test_hu_hu_HU.js  jquery.test_hu_hu.js  and after jquery.test_hu.js.Because the ResourceStreamLocator.locate PathLocale data = ResourceUtils.getLocaleFromFilename(path); if ((data != null) &amp;&amp; (data.locale != null)) { path = data.path; locale = data.locale; }doesn't work in this case.Should change the ResourceUtils public static PathLocale getLocaleFromFilename(String path) { int pos = path.indexOf('.');----------------To int pos = path.lastIndexOf('.');   ,0
5710,StringValidator should set 'minlength' attribute to input and textarea    At the moment StringValidator sets 'maxlength' to input elements.According to http://www.w3.org/TR/html5/forms.html#the-maxlength-and-minlength-attributes maxlength could be set also to textarea elements.And there is 'minlength' attribute that could also be set automatically by Wicket.   ,0
5711,OnChangeAjaxBehavior should listen for both 'inputchange' and 'change' events for TextField and TextArea    WICKET-5603 introduced a regression that a TextField using OnChangeAjaxBehavior doesn't work anymore when used as date picker  or Select2.The problem is that usually extensions like DatePicker and Select2 will fire 'change' event when they update the text input.OnChangeAjaxBehavior should use both 'inputchange' and 'change' events for TextField and TextArea components.   ,0
5712,SecuritySettings.setEnforceMounts() does not work when the mounted mapper is not in the root compound mapper    BookmarkableMapper.isPageMounted() assumes that all mounted mappers are in Application.getRootRequestMapperAsCompound(). Sometimes the mappers make a tree structure  with multiple compounds existing  sometimes separated by wrappers  like HttpsMapper and CryptoMapper.Because of this  BookmarkableMapper fails to realise that a page is mounted and so does not enforce mounting.   ,0
5714,MockHttpServletRequest.buildRequest() should work for parameters with multiple values with multipart content type    The following code in the method MockHttpServletRequest.buildRequest() iterates over all values of a parameter. When writing the value to the outputstream it doesn't use the iteration variable  but instead retrieves the value with 'post.getParameterValue(parameterName)' which always returns the first element of the list. List&lt;StringValue&gt; values = post.getParameterValues(parameterName); for (StringValue value : values) { newAttachment(out); out.write('; name=/''.getBytes()); out.write(parameterName.getBytes()); out.write('/''.getBytes()); out.write(crlf.getBytes()); out.write(crlf.getBytes()); out.write(post.getParameterValue(parameterName).toString().getBytes()); out.write(crlf.getBytes()); }So for a given list of values '3'  '2' and '1'  it actually writes '3'  '3' and '3'.   ,0
5716,wicket-autocomplete prevents 'change'-listener when leaving input via mouse click    wicket-autocomplete's ignoreChange is true initially  this prevents 'change' events being fired when the user enters something and then clicks somewhere else   ,0
5718,Upgrade Atmosphere to 2.2.2    Wicket-atmosphere should be upgraded to the latest version of Atmosphere.   ,0
5728,Component queuing breaks with html tags that don't require close tag.    Component queuing try to skip to close tag also for those tags that don't have one. This leads to a EmptyStackException (see ArrayListStack#peek).   ,0
5729,Avoid using input names that conflict with JavaScript DOM API method and attribute names    If you use input names that conflict with JavaScript DOM API method and attribute names the ability to use the DOM method/attribute on the form element is hampered.For example  JQuery stops working if you have a form control with input name 'nodeName' (&lt;select name='nodeName'&gt;).This is because form.nodeName is no longer a string  but is a element. JQuery expects element.nodeName to return a string and exceptions ensue.   ,0
5730,Dequeue auto component can't resolve components if they are nested in child markup    If a container has an auto component (ex: enclouse) in its markup but this later is nested inside a child  the autocomponent won't be resolved if child is a IQueueRegion. For example (taken from quickstart): &lt;span wicket:id='myBorder'&gt; bar &lt;wicket:enclosure&gt; &lt;span wicket:id='c'&gt;c&lt;/span&gt; &lt;/wicket:enclosure&gt; &lt;/span&gt;   ,0
5733,ContextNotActiveException thrown when using both CDI & Native WebSocket    Native Websockets does not works anymore while used in conjunction with CDI. Repro step are quite simple  please see attached quickstart.WARN &#91;RequestCycleExtra&#93; Handling the following exception: org.jboss.weld.context.ContextNotActiveException: WELD-001303: No active contexts for scope type javax.enterprise.context.RequestScoped at org.jboss.weld.manager.BeanManagerImpl.getContext(BeanManagerImpl.java:680) &#91;weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23&#93; at org.jboss.weld.bean.proxy.ContextBeanInstance.getInstance(ContextBeanInstance.java:79) &#91;weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23&#93; at org.jboss.weld.bean.proxy.ProxyMethodHandler.invoke(ProxyMethodHandler.java:99) &#91;weld-core-impl-2.1.2.Final.jar:2014-01-09 09:23&#93; at org.jboss.weld.proxies.Conversation$795552506$Proxy$_$$_WeldClientProxy.getId(Unknown Source) &#91;weld-core-impl-2.1.2.Final.jar:&#93; at org.apache.wicket.cdi.ConversationPropagator.onRequestHandlerResolved(ConversationPropagator.java:107) &#91;wicket-cdi-1.1-7.0.0-20141021.124705-313.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) &#91;wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) &#91;wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:155) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection$5.notify(RequestCycleListenerCollection.java:151) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.util.listener.ListenerCollection.notify(ListenerCollection.java:80) &#91;wicket-util-7.0.0-20141021.123902-532.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycleListenerCollection.onRequestHandlerResolved(RequestCycleListenerCollection.java:150) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycle.execute(RequestCycle.java:264) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequest(RequestCycle.java:222) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.request.cycle.RequestCycle.processRequestAndDetach(RequestCycle.java:293) &#91;wicket-core-7.0.0-20141021.124144-486.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.broadcastMessage(AbstractWebSocketProcessor.java:219) &#91;wicket-native-websocket-core-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.protocol.ws.api.AbstractWebSocketProcessor.onClose(AbstractWebSocketProcessor.java:157) &#91;wicket-native-websocket-core-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT&#93; at org.apache.wicket.protocol.ws.javax.WicketEndpoint.onClose(WicketEndpoint.java:71) &#91;wicket-native-websocket-javax-7.0.0-SNAPSHOT.jar:7.0.0-SNAPSHOT&#93; at io.undertow.websockets.jsr.UndertowSession.close(UndertowSession.java:181) &#91;undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.websockets.jsr.ServerWebSocketContainer.close(ServerWebSocketContainer.java:464) &#91;undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.websockets.jsr.Bootstrap$WebSocketListener.contextDestroyed(Bootstrap.java:82) &#91;undertow-websockets-jsr-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.servlet.core.ApplicationListeners.contextDestroyed(ApplicationListeners.java:185) &#91;undertow-servlet-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.servlet.core.DeploymentImpl.destroy(DeploymentImpl.java:224) &#91;undertow-servlet-1.0.15.Final.jar:1.0.15.Final&#93; at io.undertow.servlet.core.DeploymentManagerImpl.undeploy(DeploymentManagerImpl.java:572) &#91;undertow-servlet-1.0.15.Final.jar:1.0.15.Final&#93; at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.stopContext(UndertowDeploymentService.java:119) at org.wildfly.extension.undertow.deployment.UndertowDeploymentService.stop(UndertowDeploymentService.java:101) at org.jboss.msc.service.ServiceControllerImpl$StopTask.stopService(ServiceControllerImpl.java:2056) at org.jboss.msc.service.ServiceControllerImpl$StopTask.run(ServiceControllerImpl.java:2017) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) &#91;rt.jar:1.7.0_65&#93; at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) &#91;rt.jar:1.7.0_65&#93; at java.lang.Thread.run(Thread.java:745) &#91;rt.jar:1.7.0_65&#93;Thanks &amp; best regards Sebastien   ,0
5736,Atmosphere Eventbus throws Concurrent Modification Exception    As already commented in WICKET-5619 the problem of Concurrent Modification Exceptions are still valid like you can see on the following description when the exception occurs:You have multiple users surfing a page (Page A) which has subscribes for an event (Event A). Now a user (User A) does an action which triggers the Event A to get posted to the Eventbus. While the eventbus posts the event to the registered listeners  a User B leaves the page and unregisters for the event  f.e because he now want's surfs another page  which does not subscribe to the event. Now the ConcurrentModificationException occurs because the unregistering of User B changed the list of listeners while the eventbus is still posting the event to the different listeners. The interesting thing is  that not the initial starter of the event crashes  but all other users which are trying to surf other pages which are listening on the event gets the exception.In my opinion this issue can be solved if the line:  Collection&lt;EventSubscription&gt; eventSubscriptions = subscriptions.get(key);subscriptionsForPage = Iterables.filter(eventSubscriptions  new EventFilter(event)); makes an copy of the EventSubscriptions an works on this copy instead on the original list. When the eventbus now trys to post the event on a component which does not exists anymore he could try to unregister the component from the original subscribers list. Also:Iterable&lt;EventSubscription&gt; subscriptionsForPage; synchronized (this) { key = trackedPages.get(resource.uuid()); Collection&lt;EventSubscription&gt; eventSubscriptions = subscriptions.get(key); subscriptionsForPage = Iterables.filter(eventSubscriptions  new EventFilter(event)); }creates a lazy iterator on the the eventSubscriptions  and will be iterated outside the synchronized block.You need to create a copy of the eventSubscriptions  because this might be changed during the unregistering process:public synchronized void unregister(Component component) { ... Collection&lt;EventSubscription&gt; subscriptionsForPage = subscriptions.get(pageKey); Iterator&lt;EventSubscription&gt; it = subscriptionsForPage.iterator(); while (it.hasNext()) { if (it.next().getComponentPath().equals(componentPath)) it.remove(); } }it.remove() changes the iterator within the lazy Iterator!It is possible to have a quick look at it? This problem affected our productive system!   ,0
5737,Log a warning when WebSocketResponse#sendError() is used    As discussed at http://markmail.org/message/x6xj4l2vo6iijan5 it will be better to log the passed error code and message instead of throwing unsupported exception.Additionally it will be good to provide a factory method for the WebSocketResponse so the application can write a proper error response in its own format to the client if needed.   ,0
5739,Add a factory method for WebSocketRequestHandler    Add a new factory method to WebSocketSettings for creating instances of WebSocketRequestHandler.   ,0
5747,Wicket Ajax Click handling gets requeued in OnDomReady so fire out of order    While debugging some jquery script ordering  we noticed the following and I'm looking for views on why this is done and/or if it's a bug:1. Wicket assembles all ajax click handlers and writes them out into a single Wicket.Event.add(window 'domready' function(event) { .... script invocation written in to the &lt;head&gt; element of the page.2. For things like click handlers  Wicket writes out Wicket.Ajax.ajax( {'c': 'selection4e2'  'u':'.....'  'm':'POST'}) calls that execute within the onDomReady function defined in (1)3. This invocation of (2) in turn invokes jquery( fn ); This requeues the function invocation at the back of the jquery event queue for onDomReady processing4. Any custom scripts that we added using OnDomReadyHeaderItem  regardless of where we put them on the page after the standard Wicket click handler JS  are now invoked  according to page order.5. The re-queued functions from (3) now execute after my custom scripts. These custom scripts modify the DOM (table paging/filtering etc) and this mechanism now results in Wicket JS errors since the Wicket click handler binding fail to find the required elements in the DOM.Is this re-queueing intentional  and is there a reason that we couldnt just execute the click handler additions in step (1) rather than re-queuing the JS call?A workaround for this is to wrap all of our application JS functions in a separate jQuery( ... ) invocation  so that we can requeue all of our functions after all the requeued Wicket ones. It works  but we dont understand the need for Wicket to perform this requeueing instead of just executing the function as and where defined on the page.   ,0
5751,NullPointerException in IntHashMap    I was looking through a tester's log file to track down a separate issue. I came across a NullPointerException with IntHashMap  apparently when the server was shutting down.See also WICKET-5584  which also deals with a NullPointerException with IntHashMap  and also seems to relate to a null modCount (judging by the line number).INFO (ExampleServer) [2014-11-06 00:49:24 979] - com.example.server.ExampleServer.stopServer(ExampleServer.java:268): Stopping server.INFO (ServerConnector) [2014-11-06 00:49:24 982] - org.eclipse.jetty.server.AbstractConnector.doStop(AbstractConnector.java:306): Stopped ServerConnector@3b7d3a38{HTTP/1.1}{0.0.0.0:8099}INFO (Application) [2014-11-06 00:49:24 983] - org.apache.wicket.Application.destroyInitializers(Application.java:588): [org.apache.wicket.protocol.http.WicketFilter-55b0dcab] destroy: Wicket core library initializerINFO (Application) [2014-11-06 00:49:24 983] - org.apache.wicket.Application.destroyInitializers(Application.java:588): [org.apache.wicket.protocol.http.WicketFilter-55b0dcab] destroy: Wicket extensions initializerERROR (DiskDataStore) [2014-11-06 00:49:24 988] - org.apache.wicket.pageStore.DiskDataStore.saveIndex(DiskDataStore.java:282): Couldn't write DiskDataStore index to file C:/Windows/SERVIC~2/NETWOR~1/AppData/Local/Temp/org.apache.wicket.protocol.http.WicketFilter-55b0dcab-filestore/DiskDataStoreIndex.java.lang.NullPointerException at org.apache.wicket.util.collections.IntHashMap$HashIterator.&lt;init&gt;(IntHashMap.java:777) at org.apache.wicket.util.collections.IntHashMap$EntryIterator.&lt;init&gt;(IntHashMap.java:871) at org.apache.wicket.util.collections.IntHashMap$EntryIterator.&lt;init&gt;(IntHashMap.java:871) at org.apache.wicket.util.collections.IntHashMap.newEntryIterator(IntHashMap.java:896) at org.apache.wicket.util.collections.IntHashMap$EntrySet.iterator(IntHashMap.java:1055) at org.apache.wicket.util.collections.IntHashMap.writeObject(IntHashMap.java:1128) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) at java.util.HashMap.internalWriteEntries(HashMap.java:1777) at java.util.HashMap.writeObject(HashMap.java:1354) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:483) at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988) at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) at org.apache.wicket.pageStore.DiskDataStore.saveIndex(DiskDataStore.java:274) at org.apache.wicket.pageStore.DiskDataStore.destroy(DiskDataStore.java:106) at org.apache.wicket.pageStore.AsynchronousDataStore.destroy(AsynchronousDataStore.java:118) at org.apache.wicket.pageStore.AbstractPageStore.destroy(AbstractPageStore.java:53) at org.apache.wicket.pageStore.AbstractCachingPageStore.destroy(AbstractCachingPageStore.java:102) at org.apache.wicket.page.PageStoreManager.destroy(PageStoreManager.java:437) at org.apache.wicket.Application.internalDestroy(Application.java:659) at org.apache.wicket.protocol.http.WebApplication.internalDestroy(WebApplication.java:607) at org.apache.wicket.protocol.http.WicketFilter.destroy(WicketFilter.java:605) at org.eclipse.jetty.servlet.FilterHolder.destroyInstance(FilterHolder.java:173) at org.eclipse.jetty.servlet.FilterHolder.doStop(FilterHolder.java:151) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.servlet.ServletHandler.doStop(ServletHandler.java:230) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.security.SecurityHandler.doStop(SecurityHandler.java:411) at org.eclipse.jetty.security.ConstraintSecurityHandler.doStop(ConstraintSecurityHandler.java:457) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.server.session.SessionHandler.doStop(SessionHandler.java:127) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:833) at org.eclipse.jetty.servlet.ServletContextHandler.doStop(ServletContextHandler.java:215) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143) at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:162) at org.eclipse.jetty.server.handler.AbstractHandler.doStop(AbstractHandler.java:73) at org.eclipse.jetty.server.Server.doStop(Server.java:456) at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89) at com.example.server.ExampleServer.stopServer(ExampleServer.java:269) at com.example.server.ExampleServer.stop(ExampleServer.java:279)INFO (ContextHandler) [2014-11-06 00:49:24 990] - org.eclipse.jetty.server.handler.ContextHandler.doStop(ContextHandler.java:863): Stopped o.e.j.s.ServletContextHandler@63f259c3{/ null UNAVAILABLE}   ,0
5753,It is impossible to determine the form submitting component's inputName when AjaxFormSubmitBehavior is used    It is impossible to determine inputName in Form.delegateSubmit method (was working in version 1.4)as per Martin's comment from this thread: http://markmail.org/message/eiji4elt4mitf2m5I see a way to simplify this code so it will be possible to do what youneed:1) AjaxFormSubmitBehavior should implement IFormSubmitter2) onEvent() should do: getForm().getRootForm().onFormSubmitted(this)then you can cast to AbstractAjaxBehavior and call getComponent() and thencast to IFormSubmittingComponent to get the input nameI'm not sure whether clirr-maven-plugin will allow this change in 6.x thoughPlease file a ticket and I'll take a look in the next days.   ,0
