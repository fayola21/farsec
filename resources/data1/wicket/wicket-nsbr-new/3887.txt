Problems concerning IE9 with 'ActiveX Filtering' enabled    Internet Explorer 9 contains a new feature to block all ActiveX content by default: http://ie.microsoft.com/testdrive/Browser/ActiveXFiltering/About.html If the feature is enabled  all ActiveX controls are blocked silently. With Wicket this currently results in a lot of JavaScript content (but not all of it) being blocked as well. The user can allow an exception by clicking on a small icon in the address bar  however  he usually will be only able to do so  if he knows exactly what causes the problem.A user who enabled the feature himself might still see what is wrong  but the feature can be also enabled in a domain policy  which might make solving the problem much more difficult and have adverse effects on customers.The reason that some JavaScript content is blocked along with blocking ActiveX elements is the usage of window.ActiveXObject:wicket-ajax.js:&gt;if (window.ActiveXObject) { &gt; transport = new ActiveXObject('Microsoft.XMLHTTP'); &gt; Wicket.Log.info('Using ActiveX transport'); &gt;} else if (window.XMLHttpRequest) { &gt; transport = new XMLHttpRequest(); &gt; Wicket.Log.info('Using XMLHttpRequest transport'); &gt;}According to  http://blogs.msdn.com/b/ie/archive/2011/05/02/activex-filtering-for-developers.aspx the usage of this pattern is not advisable and the order should be changed to:&gt;// Best Practice: Use Native XHR  if available&gt;if (window.XMLHttpRequest) {&gt; // If IE7+  Gecko  WebKit: Use native object&gt; var xmlHttp = new XMLHttpRequest();&gt;}&gt;else if (window.ActiveXObject) {&gt; // ...if not  try the ActiveX control &gt; var xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');&gt;}The problem is reported to be fixed in JQuery 1.5.1  for instance.   