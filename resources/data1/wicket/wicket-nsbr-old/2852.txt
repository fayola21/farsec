Palette nested in a ListView results in a NPE when an error feedback is logged when submitting form    Reproducing steps:1. Put TestPage.html and TestPage.java into a wicket application  visit test page.2. Hit the save button and NullPointerException will be thrown indicating the 'ids' field of component Palette$Recorder is not initializedIf taken Palette outside of ListView  the code will work fine. TestPage.html:&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;&lt;?xml version='1.0' encoding='UTF-8'?&gt;&lt;html xmlns='http://www.w3.org/1999/xhtml'&gt; &lt;head&gt; &lt;meta http-equiv='Content-Type' content='text/html; charset=utf-8'/&gt; &lt;/head&gt; &lt;body&gt; &lt;form wicket:id='form'&gt; &lt;div wicket:id='palettes'&gt; &lt;div wicket:id='palette'&gt;&lt;/div&gt; &lt;/div&gt; &lt;input type='submit' value='save'&gt;&lt;/input&gt; &lt;/form&gt; &lt;div wicket:id='feedback'&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;TestPage.java:import java.util.ArrayList;import java.util.List;import org.apache.wicket.extensions.markup.html.form.palette.Palette;import org.apache.wicket.feedback.ContainerFeedbackMessageFilter;import org.apache.wicket.markup.html.WebPage;import org.apache.wicket.markup.html.form.Form;import org.apache.wicket.markup.html.form.IChoiceRenderer;import org.apache.wicket.markup.html.list.ListItem;import org.apache.wicket.markup.html.list.ListView;import org.apache.wicket.markup.html.panel.FeedbackPanel;import org.apache.wicket.model.AbstractReadOnlyModel;import org.apache.wicket.model.IModel;public class TestPage extends WebPage { @SuppressWarnings({ 'unchecked'  'serial' }) public TestPage() { Form form = new Form('form') { @Override protected void onSubmit() { error('Please select a value.'); } }; add(form); List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add('1'); form.add(new ListView('palettes'  list) { @Override protected void populateItem(ListItem item) { IChoiceRenderer renderer = new IChoiceRenderer() { public Object getDisplayValue(Object object) { return object; } public String getIdValue(Object object  int index) { return (String) object; } }; final List selected = new ArrayList(); IModel model = new IModel() { public Object getObject() { return selected; } public void setObject(Object object) { selected.clear(); selected.addAll((List) object); } public void detach() { } }; IModel choicesModel = new AbstractReadOnlyModel() { @Override public Object getObject() { final List&lt;String&gt; choices = new ArrayList&lt;String&gt;(); choices.add('1'); choices.add('2'); return choices; } }; item.add(new Palette('palette'  model  choicesModel  renderer  10  false)); } }); add(new FeedbackPanel('feedback'  new ContainerFeedbackMessageFilter(this))); }}   