AbstractPageableView has transient cachedItemCount  but doesn't set it to -1 on deserialization.    AbstractPageableView declares:private transient int cachedItemCount;When this is deserialized  cachedItemCount gets set to 0. This means that the method isItemCountCached() will return true on a deserialized AbstractPageableView. This  in turn  causes getCurrentPage() to return 0  even when the user is not navigating the first page.For me  this is causing huge problems with the paging navigator.My current workaround is this is to add this method to my DataView implementation:private Object readResolve() throws ObjectStreamException { final Class&lt;?&gt; myClass = getClass(); final Class&lt;?&gt; dataView = myClass.getSuperclass(); final Class&lt;?&gt; dataViewBase = dataView.getSuperclass(); final Class&lt;?&gt; abstractPagableView = dataViewBase.getSuperclass(); try { final Field field; field = abstractPagableView.getDeclaredField('cachedItemCount'); field.setAccessible(true); field.setInt(this  -1); } catch (Exception e) { throw new RuntimeException(e); } return this;}Obviously it would be better if the AbstractPagingView could take care of this itself.   