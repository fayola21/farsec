Test harness overrides heap size settings when starting Network Server    Test specific heap size settings can be passed to the test harness using the jvmflags system property  for example in a &lt;testname&gt;_app.properties file or at the command line when starting a test  e.g '-Djvmflags=-Xms32m^-Xmx32m'.The test harness almost always overrides such settings when starting a new Network Server using the org.apache.derbyTesting.functionTests.harness.NetServer class of the test harness. Currently  if either -ms or -Xms is missing from the jvmflags  NetServer.start() adds -ms16777216. Also  if either -mx or -Xmx is missing from the jvmflags  NetServer.start() adds -ms33554432. This has been the case since SVN revision 420048 (July 8  2006).Earlier revisions did not override the heap settings unless the newer -Xms or -Xmx flags were used instead of the -ms and -mx flags. A patch for DERBY-1091 attempted (among other things) to make the harness recognize the newer flags as well as the older flags  but the resulting behavior is (most likely) not as intended. If a test is run in either the DerbyNet framework or the DerbyNetClient framework  the test-specific JVM flags should (probably) be used for the Network Server JVM as well as the test JVM. Currently  even if non-default heap size flags are passed to the harness  the server JVM will ignore these settings since the harness adds -ms and/or -mx flags after all other heap flags. The exception is if both new and old versions of heap flags are passed to the harness  e.g:jvmflags=-ms32m^-Xms32m^-mx128m^-Xmx128mHere is the code causing this behaviour:if (setJvmFlags &amp;&amp; ((jvmflags.indexOf('-ms') == -1) || (jvmflags.indexOf('-Xms') == -1))) // only setMs if no starting memory was given jvm.setMs(16*1024*1024); // -ms16mif (setJvmFlags &amp;&amp; ((jvmflags.indexOf('-mx') == -1) || (jvmflags.indexOf('-Xmx') == -1))) // only setMx if no max memory was given jvm.setMx(32*1024*1024); // -mx32m   